%%{
/*
 *  Copyright (c) 2013 by Texas Instruments and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 *
 *  Contributors:
 *      Texas Instruments - initial implementation
 *
 * */

%%}
%/*
% *  ======== Boot.xdt ========
% *
% *! Revision History
% *! ================
% *! 25-Mar-2013 jv    added initSharedRams
% *! 07-Jun-2012 sg    added C28 RAM init
% *! 24-Apr-2012 sg    added Flash controller init
% *! 15-Aug-2011 sg    removed bootAddressC28
% *! 11-Jul-2011 sg    added bootC28
% *! 30-Jun-2011 sg    created
% */
% /* Don't generate Boot funcs if this is a romimage */
% if (!Program.$$isrom && (Program.build.rtsName !== null)) {
%var Boot = xdc.module("ti.catalog.arm.cortexm3.concertoInit.Boot");
    extern ti_catalog_arm_cortexm3_concertoInit_Boot_configurePllDivs(UInt iMult, UInt fMult, UInt sysDiv, UInt m3Div);
    extern ti_catalog_arm_cortexm3_concertoInit_Boot_stepDelay(Void);
    extern ti_catalog_arm_cortexm3_concertoInit_Boot_initC28RAMs(Void);
    extern ti_catalog_arm_cortexm3_concertoInit_Boot_bootC28(Void);
    extern ti_catalog_arm_cortexm3_concertoInit_Boot_initFlash(Bool configWaitStates, UInt waitStates, Bool enableProgramCache, Bool enableDataCache);

#if defined(__ti__)
#pragma CODE_SECTION(ti_catalog_arm_cortexm3_concertoInit_Boot_init, ".text:.bootCodeSection")
#pragma CODE_SECTION(ti_catalog_arm_cortexm3_concertoInit_Boot_initStartup, ".text:.bootCodeSection")
#pragma CODE_SECTION(ti_catalog_arm_cortexm3_concertoInit_Boot_limpAbort, ".text:.bootCodeSection")
#pragma CODE_SECTION(ti_catalog_arm_cortexm3_concertoInit_Boot_initSharedRAMs, ".text:.bootCodeSection")
#endif

%if (Boot.configSharedRAMs == true) {
#define REG(x)  (*(volatile UInt *)(x))

/* M3 protect register and value */
#define SYSCTL_MWRALLOW 0x400FB980
#define SYSCTL_UNLOCK   0xA5A5A5A5

/* Shared RAM registers */
#define MEMCNF_REG              0x400FB930
#define MSxMSEL_REG             0x400FB210
#define MSxSRCR1_REG            0x400FB220
#define MSxSRCR2_REG            0x400FB224

/*
 *  ======== ti_catalog_arm_cortexm3_concertoInit_Boot_initSharedRams ========
 */
Void ti_catalog_arm_cortexm3_concertoInit_Boot_initSharedRAMs(Void)
{
    UInt allow;

    /* enable M3 access to protected registers */
    allow = REG(SYSCTL_MWRALLOW);
    REG(SYSCTL_MWRALLOW) = SYSCTL_UNLOCK;

    /*
     *  The M3 writes the shared memory enable and owner select
     *  registers before either processor starts using shared memory.
     */

    /* write the shared memory configuration register */
    REG(MEMCNF_REG) = `utils.toHex(Boot.sharedMemoryEnable)`;

    /* write the owner select register */
    REG(MSxMSEL_REG) = `utils.toHex(Boot.sharedMemoryOwnerMask)`;

    /* init the owner write access registers */
    REG(MSxSRCR1_REG) = `utils.toHex(Boot.MSxSRCR[0])`;
    REG(MSxSRCR2_REG) = `utils.toHex(Boot.MSxSRCR[1])`;

    /* restore M3 access protect setting */
    REG(SYSCTL_MWRALLOW) = allow;
}
%}

/*
 *  ======== ti_catalog_arm_cortexm3_concertoInit_Boot_init ========
 *  Boot initialization run as an xdc.runtime.Reset function.
 */
Void ti_catalog_arm_cortexm3_concertoInit_Boot_init()
{
%if (Boot.configureClocks == true) {
    ti_catalog_arm_cortexm3_concertoInit_Boot_configurePllDivs(`Boot.SPLLIMULT`, `Boot.SPLLFMULT`, `Boot.SYSDIVSEL`, `Boot.M3SSDIVSEL`);
%}
%if (Boot.configSharedRAMs == true) {

    ti_catalog_arm_cortexm3_concertoInit_Boot_initSharedRAMs();
%}
%if (Boot.bootC28 == true) {

%if (Boot.initC28RAMs == true) {
    ti_catalog_arm_cortexm3_concertoInit_Boot_initC28RAMs();
%}

    ti_catalog_arm_cortexm3_concertoInit_Boot_bootC28();
%}
}

/*
 *  ======== ti_catalog_arm_cortexm3_concertoInit_Boot_initStartup ========
 *  Boot initialization run as an xdc.runtime.Startup first function.
 */
Void ti_catalog_arm_cortexm3_concertoInit_Boot_initStartup()
{
%if ((Boot.configureFlashWaitStates == true) || (Boot.enableFlashProgramCache == true) || (Boot.enableFlashDataCache == true) ) {
    ti_catalog_arm_cortexm3_concertoInit_Boot_initFlash(`Number(Boot.configureFlashWaitStates)`, `Number(Boot.flashWaitStates)`, `Number(Boot.enableFlashProgramCache)`, `Number(Boot.enableFlashDataCache)`);
%}
}

/*
 *  ======== ti_catalog_arm_cortexm3_concertoInit_Boot_limpAbort ========
 */
Void ti_catalog_arm_cortexm3_concertoInit_Boot_limpAbort(Void)
{
%var cname;
%       cname = String(Boot.limpAbortFunction);
%       cname = cname.substr(1);
    extern `cname`();
    `cname`();
}
%}

%%{
/*
 * @(#) ti.catalog.arm.cortexm3.concertoInit; 1, 0, 0,80; 12-20-2013 12:45:44; /db/ztree/library/trees/platform/platform-o37x/src/
 */

%%}
