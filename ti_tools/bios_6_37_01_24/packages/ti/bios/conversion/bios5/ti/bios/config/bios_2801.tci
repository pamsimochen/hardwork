/*
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 *  ======== bios_2801.tci ========
 *  This file contains BIOS settings for 2801.
 *
 *  WARNING: to use this device a user must define external memory and specify
 *  it as space: "code", because internal memory is too small to fit BIOS
 *
 */

/*
 *  ======== bios.setupMemory2801 ========
 *  This function is the top-level function that will remove all MEM segments
 *  from the cdb file.  It will take your physical memory map from calling
 *  getMemoryMap() and create MEM instances in cdb.
 *  It will then set sections to the default segment specified and fix up
 *  the length and/or base of MEM segments if needed.
 */
bios.internal.setupMemory2801 = function (prog)
{
     /*
      *  BIOS MEM segments will be created from object model memory definitions.
      *  Place default code and data sections into specified memory segments.
      */
    bios.initializeMemory(prog);

    var msaram = prog.module("MEM").instance("MSARAM");

    /* place .stack section into MSARAM so LSARAM does not overflow */
    prog.module("MEM").STACKSEG = msaram;
}

/*
 *  ======== bios.init2801 ========
 *  BIOS initialization for the 2801
 */
bios.init2801 = function (prog, baseseed)
{
    /*
     *  Find configuration seed files to load
     */
    if (baseseed == null) {
        baseseed = "ti/bios/config/cdb/c28xx.cdb";
    }

    var seed = utils.findSeed(baseseed);
    if (seed != null) {
        try {
            prog.load(seed);
        }
        catch (e) {
            throw new Error ("Can't load configuration seed '" + seed + "' : "
                + e);
        }
    }
    else {
        throw new Error ("Can't find configuration seed: " + baseseed);
    }

    /* Set CHIPTYPE to "other". No CSL support from BIOS config file */
    /* Set DSPSUBTYPE to 28000 for 280x device */
    prog.module("GBL").CHIPTYPE = "other";
    prog.module("GBL").PLLTYPE = "280x";

    /* CLKOUT will be set to cpu.clockRate */
    bios.internal.setClkout(prog);

    /* set the default memory segments for 2801 */
    bios.internal.setupMemory2801(prog);
    
    /* initialize some memory map registers */
    bios.internal.initializeRegisterMap(prog);
}
