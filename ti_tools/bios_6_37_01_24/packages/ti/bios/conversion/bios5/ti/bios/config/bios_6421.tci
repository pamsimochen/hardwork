/*
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 *  ======== bios_6421.tci ========
 *!  This file contains BIOS settings for 6421.
 *!
 */

/*
 *  ======== bios.internal.setupMemory6421 ========
 *  This function is the top-level function that will remove all MEM segments
 *  from the cdb file.  It will take your physical memory map from calling
 *  getMemoryMap() and create MEM instances in cdb.
 *  It will then set sections to the default segment specified and fix up
 *  the length and/or base of MEM segments if needed.
 */
bios.internal.setupMemory6421 = function (prog)
{
    /*
     *  BIOS MEM segments will be created from object model memory definitions.
     *  Place default code and data sections into specified memory segments.
     */
    bios.initializeMemory(prog, "IRAM", "IRAM");
    
    var iram = prog.module("MEM").instance("IRAM");
    var l1dsram = prog.module("MEM").instance("L1DSRAM");

    bios.internal.setupCache6421(prog, iram);
}

/*
 *  ======== bios.internal.setupCache6421 ========
 */
bios.internal.setupCache6421 = function (prog, iram)
{
    var cpu = prog.cpu;
    var cache_l1p = prog.module("MEM").instance("CACHE_L1P");
    var l1psram = prog.module("MEM").instance("L1PSRAM");

    cache_l1p.len = 0x0;
    cache_l1p.base = l1psram.base + l1psram.len;

    if (cpu.registers.l1PMode == undefined || cpu.registers.l1PMode == null ||
        cpu.registers.l1PMode == "16k") {
        l1psram.destroy();      
        cache_l1p.base -= 0x4000;
        cache_l1p.len = 0x4000; 
    }
    else {
        if (cpu.registers.l1PMode == "0k") {
            l1psram.len -= 0x0;
        }
        else if (cpu.registers.l1PMode == "4k") {
            l1psram.len -= 0x1000;
        }
        else if (cpu.registers.l1PMode == "8k") {
            l1psram.len -= 0x2000;
        }
        else throw new Error("Can't set L1P cache to size: " +
            cpu.registers.l1PMode);
    }

    var cache_l1d = prog.module("MEM").instance("CACHE_L1D");
    var l1dsram = prog.module("MEM").instance("L1DSRAM");
    cache_l1d.len = 0x0;
    cache_l1d.base = l1dsram.base + l1dsram.len;

    if (cpu.registers.l1DMode == undefined || cpu.registers.l1DMode == null ||
        cpu.registers.l1DMode == "32k") {
        l1dsram.len -= 0x8000;
        cache_l1d.base -= 0x8000;
        cache_l1d.len = 0x8000; 
    }
    else {
        if (cpu.registers.l1DMode == "0k") {
            l1dsram.len -= 0x0;
        }
        else if (cpu.registers.l1DMode == "4k") {
            l1dsram.len -= 0x1000;
        }
        else if (cpu.registers.l1DMode == "8k") {
            l1dsram.len -= 0x2000;
        }
        else if (cpu.registers.l1DMode == "16k") {
            l1dsram.len -= 0x4000;
        }
        else throw new Error("Can't set L1D cache to size: " +
            cpu.registers.l1DMode);
    }

    var cache = prog.module("MEM").instance("CACHE_L2");

    cache.len  = 0x0;
    cache.base = iram.base + iram.len;

    if (cpu.registers.l2Mode != null) {
        if (cpu.registers.l2Mode == "0k") {
            iram.len   -= 0x0;
        }
        else if (cpu.registers.l2Mode == "32k") {
            iram.len   -= 0x8000;
        }
        else if (cpu.registers.l2Mode == "64k") {
            iram.len   -= 0x10000;
            /*
             * All references to IRAM need to be changed to point to some other
             * available MEM instance.
             */
            var memInst = prog.module("MEM").instances();
            var seg = null;
            for (var i=0; i < memInst.length; i++) {
                if (memInst[i].space == "code/data" && memInst[i] != iram) {
                    seg = memInst[i];
                }
            }
            if (seg == null) {
                throw new Error("All of IRAM is used for cache " + 
                    "and there is no external memory in the configuration");
            }
            else {
                bios.setMemCodeSections(prog, seg);
                bios.setMemDataNoHeapSections(prog, seg);
            }
            iram.destroy();
        }
        else {
            throw new Error("Can't set cache to size: " + cpu.registers.l2Mode);
        }
    }
}

/*
 *  ======== bios.init ========
 *  BIOS initialization for the 6421
 */
bios.init6421 = function (prog, baseseed)
{
    /*
     *  Find configuration seed files to load
     */
    if (baseseed == null) {
        baseseed = "ti/bios/config/cdb/c6421.cdb";
    }

    var seed = utils.findSeed(baseseed);
    if (seed != null) {
        try {
            prog.load(seed);
        }
        catch (e) {
            throw new Error ("Can't load configuration seed '" + seed + "' : "
                + e);
        }
    }
    else {
        throw new Error ("Can't find configuration seed: " + baseseed);

    }

    prog.module("ISRC").instance("Timer_0").iIntrSelectNum = 4;
    prog.module("ISRC").instance("Timer_1").iIntrSelectNum = 6;
    prog.module("HWI").instance("HWI_INT14").interruptSelectNumber = 4;
    prog.module("CLK").TIMERSELECT = "Timer 1";
    prog.module("GBL").CLKTYPE = 6424;          /* specify 6424 for LC parts */

    /* enable specification of Input Clock Rate */
    prog.module("CLK").SPECIFYRATE = true;
    prog.module("CLK").INPUTCLK = 27.0;
    prog.module("CLK").RESETTIMER = true;

    /* set CLKOUT to be the value of cpu.clockRate. */
    bios.internal.setClkout(prog);

    /* Set endian mode based on build options */
    if (prog.build.target.model.endian != null) {
        if (prog.build.target.model.endian != "little") {
            print("Warning: '" + prog.build.target.model.endian +
                "' endian mode" + " is not supported on '" +
                prog.cpu.deviceName + "' device.")
        }
    }

    prog.module("GBL").ENDIANMODE = prog.build.target.model.endian;

    /* initialize the default memory segments for 6421 */
    bios.internal.setupMemory6421(prog);

    /* initialize some memory map registers */
    bios.internal.initializeRegisterMap(prog);
}
