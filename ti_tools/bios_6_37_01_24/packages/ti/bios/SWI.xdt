%%{
/*
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
%%}
%%{
    var SWI = xdc.module("ti.bios.SWI");
    var fxnTable = [];
    
    for (var i = 0; i < SWI.$instances.length; i++) {
        var fxn = SWI.$instances[i].fxn; 
        if (internal.wrapperFunc(fxn)) {
            var Mod = fxn.substring(0,3).toLowerCase();
%%}
#include <ti/bios/include/`Mod`.h>
xdc_Void `fxn + "__swiFxn"`(xdc_UArg arg0, xdc_UArg arg1) {
%            if (internal.wrapperFunc(fxn).args == 2) {
    `fxn`((`internal.wrapperFunc(fxn).types[0]`)arg0, (`internal.wrapperFunc(fxn).types[1]`)arg1);
%            }
%            else if (internal.wrapperFunc(fxn).args == 1) {
    `fxn`((`internal.wrapperFunc(fxn).types[0]`)arg0);
%            }
%            else if (internal.wrapperFunc(fxn).args == 0) {
    `fxn`();
%            }
}
%%{
        }
        else if (Program.build.target.name == "C28_large" || 
                 Program.build.target.name == "C28_float") {
            /* 
             * Use wrapper for all PRD functions on 28x because UArg's need to
             * be converted to Arg's
             */
            if (fxnTable[fxn] == true) {
                continue; /* Don't re-define the function wrapper */
            }
%%}   

xdc_Void `fxn`(Arg arg0, Arg arg1);    /* User function declaration */

xdc_Void `fxn + "__swiFxn"`(xdc_UArg arg0, xdc_UArg arg1) {
    `fxn`((Arg)arg0, (Arg)arg1);
}
%%{
            fxnTable[fxn] = true;
        }
    }
%%}
