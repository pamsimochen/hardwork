%%{
/*
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/
%%}
%var MEM = xdc.module('ti.bios.MEM');
%for (var i = 0; i < MEM.heapList.length; i++) {
    %if (MEM.heapList[i].heapLabel != null) {
Int `MEM.heapList[i].heapLabel` = `i`;
    %}
%}

#include <xdc/std.h>

#include <xdc/runtime/IHeap.h>
#include <xdc/runtime/System.h>
#include <xdc/runtime/Error.h>
#include <xdc/runtime/Memory.h>

#include <ti/sysbios/heaps/HeapMem.h>

#include <ti/bios/include/mem.h>
#include <ti/bios/include/sys.h>

%if (MEM.heapList.length != 0) {
static __FAR__ xdc_runtime_IHeap_Handle staticMemTable[`MEM.heapList.length`];
__FAR__ xdc_runtime_IHeap_Handle *MEM_table = &staticMemTable[0];
__FAR__ Uns MEM_tabSize = `MEM.heapList.length`;
%}
%else {
__FAR__ xdc_runtime_IHeap_Handle *MEM_table = NULL;
__FAR__ Uns  MEM_tabSize = 0;
%}

/*
 *  ======== MEM_init ========
 */
Void MEM_init()
{
%if (MEM.heapList.length != 0) {
    static __FAR__ Bool curInit = FALSE;
    Int i;

    if (curInit) {
        return;
    }
    curInit = TRUE;

    MEM_table[0] = xdc_runtime_Memory_defaultHeapInstance;

    %for (var i = 1; i < MEM.heapList.length; i++) {
    MEM_table[`i`] = ti_sysbios_heaps_HeapMem_Handle_to_xdc_runtime_IHeap(
                       ti_sysbios_heaps_HeapMem_Object_get(NULL,`MEM.heapList[i].heapMemIndex`));
    %}

    for (i = 0; i < MEM_tabSize; i++) {
        if (MEM_table[i] == NULL) {
            SYS_abort("ERROR - Failed to create MEM_table entry\n");
        }
    }
%}
}
