%%{
/*
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/
%%}
/* Global DIO structure */
#include "ti/bios/include/dio.h"
%var DIO = xdc.module("ti.bios.DIO");

%if (DIO.$private.cbStaticFxns != 0) {
__FAR__ Int DIO_NUMCBSTATIC = `DIO.$private.cbStaticFxns`; /* Number of Callback based DIO */
__FAR__ DIO_Obj DIO_CBTABLE[`DIO.$private.cbStaticFxns`];

%}
%if (DIO.$private.tskStaticFxns != 0) {
__FAR__ Int DIO_NUMTSKSTATIC = `DIO.$private.tskStaticFxns`; /* Number of tsk based DIO */
__FAR__ DIO_Obj DIO_TSKTABLE[`DIO.$private.tskStaticFxns`];

%}
%if (DIO.$private.cbStaticFxns != 0) {

/*
 *  Static Callback based version of function table.
 */
__FAR__ DEV_Fxns DIO_cbStaticFxns = {
    DIO_cbStaticClose,          /* close */
    DIO_ctrl,                   /* ctrl */
    DIO_cbIdle,                 /* idle */
    DIO_cbIssue,                /* issue */
    DIO_cbStaticOpen,           /* open */
    DIO_cbReady,                /* ready */
    DIO_cbReclaim               /* reclaim */
};
%}
%if (DIO.$private.tskStaticFxns != 0) {

/*
 *  Static SEM based version of function table.
 */
__FAR__ DEV_Fxns DIO_tskStaticFxns = {
    DIO_tskStaticClose,         /* close */
    DIO_ctrl,                   /* ctrl */
    DIO_tskIdle,                /* idle */
    DIO_tskIssue,               /* issue */
    DIO_tskStaticOpen,          /* open */
    DIO_tskReady,               /* ready */
    DIO_tskReclaim              /* reclaim */
};
%}

%for(var i = 0; i < DIO.$instances.length; i++) {
%var paramsName = this.$instances[i].name + "instance_params";
%var chanParams = this.$instances[i].chanParams;
%if (this.$instances[i].chanParams == null) {
    %var chanParams = "NULL";
__FAR__ DIO_Params `paramsName` = {"/`this.$instances[i].deviceName.name`", `chanParams`};
%}
%else {
extern Ptr `chanParams`;
__FAR__ DIO_Params `paramsName` = {"/`this.$instances[i].deviceName.name`", &`chanParams`};
%}
%}
