;
; ======== Hwi_asm.s62 ========
;
;

        .cdecls C,NOLIST,"package/internal/Hwi.xdc.h"

;
; This logic is needed to allow this code to work with 6.1.x codegen
; which didn't define the .TI_C6X_TESLA symbol.  We need to work
; with both old and new codegen, so we define our own symbol.
;
    .if ($isdefed(".TI_C6X_TESLA"))
        .if (.TI_C6X_TESLA)
_TESLA_         .set 1
        .endif
    .endif

    .if $isdefed("__TI_ELFABI__")
    .if __TI_ELFABI__
        .asg ti_sysbios_family_xxx_Hwi_switchToIsrStack, _ti_sysbios_family_xxx_Hwi_switchToIsrStack
        .asg ti_sysbios_family_xxx_Hwi_switchToTaskStack, _ti_sysbios_family_xxx_Hwi_switchToTaskStack
        .asg ti_sysbios_family_xxx_Hwi_switchAndRunFunc, _ti_sysbios_family_xxx_Hwi_switchAndRunFunc
        .asg ti_sysbios_family_c64p_Hwi_switchAndDispatch__I, _ti_sysbios_family_c64p_Hwi_switchAndDispatch__I
        .asg ti_sysbios_family_c64p_Hwi_Module__state__V, _ti_sysbios_family_c64p_Hwi_Module__state__V
        .asg ti_sysbios_family_c64p_Hwi_dispatchCore__I, _ti_sysbios_family_c64p_Hwi_dispatchCore__I
    .endif
    .endif

        .global _ti_sysbios_family_xxx_Hwi_switchToIsrStack
        .global _ti_sysbios_family_xxx_Hwi_switchToTaskStack
        .global _ti_sysbios_family_xxx_Hwi_switchAndRunFunc
        .global _ti_sysbios_family_c64p_Hwi_switchAndDispatch__I
    .global _ti_sysbios_family_c64p_Hwi_dispatchCore__I

_ti_sysbios_family_c64p_Hwi_Module__state__V .tag ti_sysbios_family_c64p_Hwi_Module_State

        .text

SP      .set    b15

;
;  ======== ti_sysbios_family_c64p_Hwi_switchToIsrStack ========
;  Char *ti_sysbios_family_c64p_Hwi_switchToIsrStack();
;
;  If not already on the isr stack, switch to it.
;
;  Checks the Hwi module object's taskSP.
;  If 0, then set taskSP to current SP then switch to ISR stack.
;
;  Returns:
;        old taskSP value for use with switchToTaskStack()
;
    .sect ".text:_ti_sysbios_family_xxx_Hwi_switchToIsrStack"
        .clink
_ti_sysbios_family_xxx_Hwi_switchToIsrStack:
        .asmfunc
        mvkl    _ti_sysbios_family_c64p_Hwi_Module__state__V, a0
        mvkh    _ti_sysbios_family_c64p_Hwi_Module__state__V, a0
        ldw     *a0(ti_sysbios_family_c64p_Hwi_Module_State.taskSP), b0   ; get current taskSP value
        ldw     *a0(ti_sysbios_family_c64p_Hwi_Module_State.isrStack), b1
||      b       b3
        nop     3                       ; wait total of 5 cycles for branch
        mv      b0, a4                  ; 1st ldw to b0 complete
  [!b0] stw     SP, *a0(ti_sysbios_family_c64p_Hwi_Module_State.taskSP)   ; save old SP
||[!b0] mv      b1, SP                  ; return SP on isrStack
        .endasmfunc

;
;  ======== ti_sysbios_family_c64p_Hwi_switchToTaskStack ========
;  ti_sysbios_family_c64p_Hwi_switchToTaskStack(Char *oldTaskSP);
;
;  If at bottom of ISR stack, switch to Task stack.
;
;  If oldTaskSP is zero, then this is the thread that switched
;  to the ISR stack first and therefore it is safe to switch
;  back to the task stack address saved in the Hwi module
;  object's taskSP variable.
;
;
    .sect ".text:_ti_sysbios_family_xxx_Hwi_switchToTaskStack"
        .clink
_ti_sysbios_family_xxx_Hwi_switchToTaskStack:
        .asmfunc
        mv      a4, b0
||      mvkl    _ti_sysbios_family_c64p_Hwi_Module__state__V.taskSP, a0

        .if ($isdefed("_TESLA_") = 0)
        mvkh    _ti_sysbios_family_c64p_Hwi_Module__state__V.taskSP, a0
||      b       b3
        .else
        mvkh    _ti_sysbios_family_c64p_Hwi_Module__state__V.taskSP, a0
        b       b3
        .endif

  [!b0] ldw     *a0, SP
  [!b0] stw     b0, *a0
        nop     3
        .endasmfunc

;
;  ======== ti_sysbios_family_xxx_Hwi_switchAndRunFunc ========
;  ti_sysbios_family_c64p_Hwi_switchAndRunFunc(Void (*func)());
;
;  Switch to ISR stack, run func() and then switch back to Task
;  stack.
;
;
    .sect ".text:_ti_sysbios_family_xxx_Hwi_switchAndRunFunc"
        .clink
_ti_sysbios_family_xxx_Hwi_switchAndRunFunc:
        .asmfunc
        stw     a10, *SP--[2]               ; save a10 on stack
||      mvkl    _ti_sysbios_family_xxx_Hwi_switchToIsrStack, a1
        stw     b3, *+SP[1]                 ; save return address on stack
||      mvkh    _ti_sysbios_family_xxx_Hwi_switchToIsrStack, a1
        bnop    a1, 2                       ; switch to ISR stack
        mv      a4, a10
        mvkl    switchToIsrStackReturn, b3
        mvkh    switchToIsrStackReturn, b3
switchToIsrStackReturn:
        bnop    a10, 2                      ; call func()
        stw     a4, *SP--[2]                ; decrement stack by 8 bytes to
                                            ; maintain 8byte stack alignment
        mvkl    funcReturn, b3
        mvkh    funcReturn, b3
funcReturn:
        mvkl    _ti_sysbios_family_xxx_Hwi_switchToTaskStack, a1
        mvkh    _ti_sysbios_family_xxx_Hwi_switchToTaskStack, a1
        b       a1                          ; switch back to Task stack
        ldw     *++SP[2], a4
        mvkl    switchToTaskStackReturn, b3
        mvkh    switchToTaskStackReturn, b3
        nop     2
switchToTaskStackReturn:
        ldw     *+SP[1], b3                 ; restore b3 from stack
        ldw     *++SP[2], a10               ; restore a10 from stack
        nop     3
        bnop    b3, 5                       ; function return
        .endasmfunc

;
;  ======== ti_sysbios_family_c64p_Hwi_switchAndDispatch ========
;
        .sect ".text:_ti_sysbios_family_c64p_Hwi_switchAndDispatch__I"
        .clink
_ti_sysbios_family_c64p_Hwi_switchAndDispatch__I
        .asmfunc
        mvkl    _ti_sysbios_family_c64p_Hwi_Module__state__V, a0
        mvkh    _ti_sysbios_family_c64p_Hwi_Module__state__V, a0
        ldw     *a0(ti_sysbios_family_c64p_Hwi_Module_State.taskSP), b0   ; get current taskSP value
        ldw     *a0(ti_sysbios_family_c64p_Hwi_Module_State.isrStack), b1
        mvkl    _ti_sysbios_family_c64p_Hwi_dispatchCore__I, a1
        mvkh    _ti_sysbios_family_c64p_Hwi_dispatchCore__I, a1
        b       a1
  [!b0] stw     SP, *a0(ti_sysbios_family_c64p_Hwi_Module_State.taskSP)   ; save old SP
  [!b0] mv      b1, SP                  ; set SP to isrStack
        stw     b10, *SP--[2]           ; save b10 on the stack
||      mv  b3, b10                     ; move b3 into b10
        mvkl    dispatch_return, b3     ; update b3 to dispatch_return
        stw b0, *+SP[1]                 ; save old taskSP on stack
||      mvkh    dispatch_return, b3

dispatch_return:
        ldw *+SP[1], b0     ; restore old taskSP to b0
        mvkl    _ti_sysbios_family_c64p_Hwi_Module__state__V, a0
        mvkh    _ti_sysbios_family_c64p_Hwi_Module__state__V, a0
        mvk 0, a1           ; move 0 to a1
        mv  b10, b3         ; restore b3 from b10
  [!b0] ldw     *a0(ti_sysbios_family_c64p_Hwi_Module_State.taskSP), b1   ; get current taskSP value
        b       b3
        ldw *++SP[2], b10   ; restore b10 from the stack
        nop     2
  [!b0] mv  b1, SP          ; set SP = taskSP
  [!b0] stw a1, *a0(ti_sysbios_family_c64p_Hwi_Module_State.taskSP) ; taskSP = 0

        .endasmfunc
