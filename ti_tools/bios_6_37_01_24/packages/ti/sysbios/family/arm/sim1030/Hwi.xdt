%%{
/*
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
%%}
%/*
% *  ======== Hwi.xdt ========
% */
%
%/*
% * Do not generate the vector table or the dispathC if this is a ROM assembly.
% */
%var Hwi = xdc.module("ti.sysbios.family.arm.sim1030.Hwi");
%
%/* 
% * Arm Exception Vector table
% * 
% * The OSK5912 exception table is in ROM.
% * 
% * The reset exception is swallowed by ROM code.
% * 
% * The remainder of the rom exception handlers jump to these locations
% */
#pragma DATA_SECTION(ti_sysbios_family_arm_sim1030_Hwi_vectors, ".vecs");

extern Void `String(Hwi.resetFunc).substr(1)`();
%if (Hwi.undefinedInstFunc !== undefined) {
extern Void `String(Hwi.undefinedInstFunc).substr(1)`();
%}
%if (Hwi.swiFunc !== undefined) {
extern Void `String(Hwi.swiFunc).substr(1)`();
%}
%if (Hwi.prefetchAbortFunc!== undefined) {
extern Void `String(Hwi.prefetchAbortFunc).substr(1)`();
%}
%if (Hwi.dataAbortFunc!== undefined) {
extern Void `String(Hwi.dataAbortFunc).substr(1)`();
%}
extern Void `String(Hwi.irqFunc).substr(1)`();
extern Void `String(Hwi.fiqFunc).substr(1)`();

const UInt32 ti_sysbios_family_arm_sim1030_Hwi_vectors[] = {
    (UInt32)(0xE59FF018),       /*   ldr  pc, resetFunc         */
    (UInt32)(0xE59FF018),       /*   ldr  pc, undefInstFunc     */
    (UInt32)(0xE59FF018),       /*   ldr  pc, swiFunc           */
    (UInt32)(0xE59FF018),       /*   ldr  pc, prefetchAbortFunc */
    (UInt32)(0xE59FF018),       /*   ldr  pc, dataAbortFunc     */
    (UInt32)(0xE59FF018),       /*   ldr  pc, reservedFunc      */
    (UInt32)(0xE59FF018),       /*   ldr  pc, irqFunc           */
    (UInt32)(0xE59FF018),       /*   ldr  pc, fiqFunc           */

/* resetFunc */
    (UInt32)(`String(Hwi.resetFunc)`),

/* undefInstFunc */
%if (Hwi.undefinedInstFunc !== undefined) {
    (UInt32)(`String(Hwi.undefinedInstFunc)`),
%}
%else {
    (UInt32)(&ti_sysbios_family_arm_sim1030_Hwi_vectors[1]), /* spin loop */ 
%}

/* swiFunc */
%if (Hwi.swiFunc !== undefined) {
    (UInt32)(`String(Hwi.swiFunc)`),
%}
%else {
    (UInt32)(&ti_sysbios_family_arm_sim1030_Hwi_vectors[2]), /* spin loop */ 
%}

/* prefetchAbortFunc */
%if (Hwi.prefetchAbortFunc !== undefined) {
    (UInt32)(`String(Hwi.prefetchAbortFunc)`),
%}
%else {
    (UInt32)(&ti_sysbios_family_arm_sim1030_Hwi_vectors[3]), /* spin loop */ 
%}

/* dataAbortFunc */
%if (Hwi.dataAbortFunc !== undefined) {
    (UInt32)(`String(Hwi.dataAbortFunc)`),
%}
%else {
    (UInt32)(&ti_sysbios_family_arm_sim1030_Hwi_vectors[4]), /* spin loop */ 
%}

/* reservedFunc */
%if (Hwi.reservedFunc !== undefined) {
    (UInt32)(`String(Hwi.reservedFunc)`),
%}
%else {
    (UInt32)(&ti_sysbios_family_arm_sim1030_Hwi_vectors[5]), /* spin loop */ 
%}

/* irqFunc */
    (UInt32)(`String(Hwi.irqFunc)`),

/* fiqFunc */
    (UInt32)(`String(Hwi.fiqFunc)`)
};

%var IRQ_func = Program.build.target.asmName("ti_sysbios_family_arm_sim1030_Hwi_IRQ");
%var IRQ_vec = Program.build.target.asmName(String(Hwi.irqFunc).substr(1));
asm("   .state32	                                        ");
asm("   .global  `IRQ_func`                                     ");
asm("   .armfunc `IRQ_func`                                     ");
asm("`IRQ_func`:                                                ");
asm("   mrs     r0, cpsr                                        ");
asm("   add     r1, r14, #4    ; simulate IRQ return address    ");
asm("   ands    r2, r14, #0x01; check Thumb mode bit            ");
asm("   orrne   r0, r0, #0x20                                   ");
asm("   mrs     r2, cpsr                                        ");
asm("   bic     r2, r2, #0x1f                                   ");
asm("   orr     r2, r2, #0x12                                   ");
asm("   msr     cpsr_cf, r2    ; switch to IRQ mode             ");
asm("   msr     spsr_cf, r0                                        ");
asm("   mov     r14, r1                                         ");
asm("   ldr     pc, irq_addr                                    ");

asm("irq_addr:                                                  ");
asm("   .word   `IRQ_vec`                                       ");

