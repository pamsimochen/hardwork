%%{
/*
 * Copyright (c) 2013, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/
%%}
%/*
% *  ======== BIOS.xdt ========
% */
%var BIOS = xdc.module("ti.sysbios.BIOS");
%
Void ti_sysbios_BIOS_exitFunc__I(Int);

%var len = BIOS.startupFxns.length;
%for (var i = 0; i < len; i++) {
%    var cname = BIOS.startupFxns[i].$name;
%    cname = cname.replace(/\./g,'_');
extern Void `cname`();
%}
%if (len != 0) {

%}
Void ti_sysbios_BIOS_startFunc__I()
{
    xdc_runtime_System_atexit(
        (xdc_runtime_System_AtexitHandler)ti_sysbios_BIOS_exitFunc__I);
%for (var i = 0; i < len; i++) {
%    var cname = BIOS.startupFxns[i].$name;
%    cname = cname.replace(/\./g,'_');
    `cname`();
%}
%if (xdc.om['ti.sysbios.hal'].Hwi.$used > 0) {
    ti_sysbios_hal_Hwi_startup();
%}
%if (xdc.om['ti.sysbios.hal'].Timer.$used > 0) {
    ti_sysbios_hal_Timer_startup();
%}
%if ((BIOS.swiEnabled == true) && (xdc.om['ti.sysbios.knl'].Swi.$used > 0)) {
    ti_sysbios_knl_Swi_startup();
%}
%if ((BIOS.taskEnabled == true) && (xdc.om['ti.sysbios.knl'].Task.$used >0)) {
    ti_sysbios_knl_Task_startup();
%}
%else {
    ti_sysbios_knl_Idle_loop(0,0);
%}
}

#if defined(__ti__)
#include <_lock.h>
#endif

%var mobj = '(&ti_sysbios_BIOS_Module__state__V)';
Void ti_sysbios_BIOS_exitFunc__I(Int notused)
{
%if ((BIOS.swiEnabled == true) && (xdc.om['ti.sysbios.knl'].Swi.$used > 0)) {
    ti_sysbios_knl_Swi_disable();
%}
%if ((BIOS.taskEnabled == true) && (xdc.om['ti.sysbios.knl'].Task.$used >0)) {
    ti_sysbios_knl_Task_disable();
%}
    ti_sysbios_BIOS_setThreadType(ti_sysbios_BIOS_ThreadType_Main);

#if defined(__ti__)
%if (Program.$capsule._romAsm) {
    if (`mobj`->rtsGate != NULL) {
        _lock= _nop;
        _unlock = _nop;
    }
%}
%else {
    if (`mobj`->rtsGate != NULL) {
        _register_lock(_nop);
        _register_unlock(_nop);
    }
%}
#endif
}
