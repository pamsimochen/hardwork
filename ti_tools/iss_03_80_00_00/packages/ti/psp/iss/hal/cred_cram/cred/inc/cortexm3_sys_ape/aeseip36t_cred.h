/** ==================================================================
 *  @file   aeseip36t_cred.h                                                  
 *                                                                    
 *  @path   /ti/psp/iss/hal/cred_cram/cred/inc/cortexm3_sys_ape/                                                  
 *                                                                    
 *  @desc   This  File contains.                                      
 * ===================================================================
 *  Copyright (c) Texas Instruments Inc 2011, 2012                    
 *                                                                    
 *  Use of this software is controlled by the terms and conditions found
 *  in the license agreement under which this software has been supplied
 * ===================================================================*/

/* ============================================================================ 
 * TEXAS INSTRUMENTS INCORPORATED PROPRIETARY INFORMATION Property of Texas
 * Instruments For Unrestricted Internal Use Only Unauthorized reproduction
 * and/or distribution is strictly prohibited.  This product is protected
 * under copyright law and trade secret law as an unpublished work.  Created
 * 2008, (C) Copyright 2008 Texas Instruments.  All rights reserved. */

/**
 *  @Component:   AESEIP36T
 *
 *  @Filename:    aeseip36t_cred.h
 *
 *  @Description: Component description is not available
 *
 *  Generated by: Socrates CRED generator prototype
 *
    *//* ====================================================================== */

#ifndef __AESEIP36T_CRED_H
#define __AESEIP36T_CRED_H

#ifdef __cplusplus
extern "C" {
#endif

    /* 
     * Instance AESOCP2_1 of component AESEIP36T mapped in MONICA at address 0x4B400000
     * Instance AESOCP2_2 of component AESEIP36T mapped in MONICA at address 0x4B600000
     */

                                                                              /*-------------------------------------------------------------------------*//**
 * @DEFINITION   BITFIELD
 *
 * @BRIEF        The bitfield must be defined according to register width
 *               of the component - 64/32/16/8
 *
    *//*------------------------------------------------------------------------ */
#undef BITFIELD
#define BITFIELD BITFIELD_32

    /* 
     *  List of Register arrays for component AESEIP36T
     *
     */

    /* 
     *  List of bundle arrays for component AESEIP36T
     *
     */

    /* 
     *  List of bundles for component AESEIP36T
     *
     */

    /* 
     * List of registers for component AESEIP36T
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY2_6
 *
 * @BRIEF        XTS second key / 
 *               CBC-MAC third key 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY2_6                            0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY2_7
 *
 * @BRIEF        XTS second key (MSW for 256-bit key)  / 
 *               CBC-MAC third key (MSW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY2_7                            0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY2_4
 *
 * @BRIEF        XTS / CCM second key / 
 *               CBC-MAC third key (LSW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY2_4                            0x8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY2_5
 *
 * @BRIEF        XTS second key (MSW for 192-bit key)  / 
 *               CBC-MAC third key 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY2_5                            0xCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY2_2
 *
 * @BRIEF        XTS / CCM / CBC-MAC second key / 
 *               Hash Key input 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY2_2                            0x10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY2_3
 *
 * @BRIEF        XTS second key (MSW for 128-bit key) + 
 *               CCM/CBC-MAC second key (MSW) / 
 *               Hash Key input (MSW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY2_3                            0x14ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY2_0
 *
 * @BRIEF        XTS / CCM / CBC-MAC second key (LSW) / 
 *               Hash Key input (LSW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY2_0                            0x18ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY2_1
 *
 * @BRIEF        XTS / CCM / CBC-MAC second key / 
 *               Hash Key input 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY2_1                            0x1Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY1_6
 *
 * @BRIEF        Key (LSW for 256-key) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY1_6                            0x20ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY1_7
 *
 * @BRIEF        Key (MSW for 256-bit key) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY1_7                            0x24ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY1_4
 *
 * @BRIEF        Key (LSW for 192-bit key) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY1_4                            0x28ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY1_5
 *
 * @BRIEF        Key (MSW for 192-bit key) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY1_5                            0x2Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY1_2
 *
 * @BRIEF        Key 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY1_2                            0x30ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY1_3
 *
 * @BRIEF        Key (MSW for 128-bit key) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY1_3                            0x34ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY1_0
 *
 * @BRIEF        Key (LSW for 128-bit key) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY1_0                            0x38ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY1_1
 *
 * @BRIEF        Key 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY1_1                            0x3Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_IV_IN_0
 *
 * @BRIEF        Initialization Vector input (LSW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_IV_IN_0                           0x40ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_IV_IN_1
 *
 * @BRIEF        Initialization vector input 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_IV_IN_1                           0x44ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_IV_IN_2
 *
 * @BRIEF        Initialization vector input 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_IV_IN_2                           0x48ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_IV_IN_3
 *
 * @BRIEF        Initialization Vector input (MSW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_IV_IN_3                           0x4Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL
 *
 * @BRIEF        register determines the mode of operation of the AES Engine 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL                              0x50ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_C_LENGTH_0
 *
 * @BRIEF        Crypto data length registers (LSW and MSW) store the 
 *               cryptographic data length in bytes for all modes. Once 
 *               processing with this context is started, this length 
 *               decrements to zero. Data lengths up to (2^61 ? 1) bytes are 
 *               allowed. 
 *               For GCM, any value up to 2^36 - 32 bytes can be used. This 
 *               is because a 32-bit counter mode is used; the maximum number 
 *               of 128-bit blocks is 2^32 ? 2, resulting in a maximum number 
 *               of bytes of 2^36 - 32. 
 *               A write to this register triggers the engine to start using 
 *               this context. This is valid for all modes except GCM and 
 *               CCM. 
 *               Note that for the combined modes, this length does not 
 *               include the authentication only data; the authentication 
 *               length is specified in the AES_AUTH_LENGTH register below. 
 *               All modes must have a length > 0. For the combined modes, it 
 *               is allowed to have one of the lengths equal to zero. 
 *               For the basic encryption modes (ECB/CBC/CTR/ICM/CFB128) it 
 *               is allowed to program zero to the length field; in that case 
 *               the length is assumed infinite. 
 *               All data must be byte (8-bit) aligned; bit aligned data 
 *               streams are not supported by the AES Engine. 
 *               For a Host read operation, these registers return 
 *               all-zeroes. 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_C_LENGTH_0                        0x54ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_C_LENGTH_1
 *
 * @BRIEF        Crypto data length registers (LSW and MSW) store the 
 *               cryptographic data length in bytes for all modes. Once 
 *               processing with this context is started, this length 
 *               decrements to zero. Data lengths up to (2^61 ? 1) bytes are 
 *               allowed. 
 *               For GCM, any value up to 2^36 - 32 bytes can be used. This 
 *               is because a 32-bit counter mode is used; the maximum number 
 *               of 128-bit blocks is 2^32 ? 2, resulting in a maximum number 
 *               of bytes of 2^36 - 32. 
 *               A write to this register triggers the engine to start using 
 *               this context. This is valid for all modes except GCM and 
 *               CCM. 
 *               Note that for the combined modes, this length does not 
 *               include the authentication only data; the authentication 
 *               length is specified in the AES_AUTH_LENGTH register below. 
 *               All modes must have a length > 0. For the combined modes, it 
 *               is allowed to have one of the lengths equal to zero. 
 *               For the basic encryption modes (ECB/CBC/CTR/ICM/CFB128) it 
 *               is allowed to program zero to the length field; in that case 
 *               the length is assumed infinite. 
 *               All data must be byte (8-bit) aligned; bit aligned data 
 *               streams are not supported by the AES Engine. 
 *               For a Host read operation, these registers return 
 *               all-zeroes. 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_C_LENGTH_1                        0x58ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_AUTH_LENGTH
 *
 * @BRIEF        AAD data length. The authentication length register store 
 *               the authentication data length in bytes for combined modes 
 *               only (GCM or CCM) 
 *               Supported AAD-lengths for CCM are from 0 to (2^16 - 2^8) 
 *               bytes. For GCM any value up to (2^32 - 1) bytes can be used. 
 *               Once processing with this context is started, this length 
 *               decrements to zero. 
 *               A write to this register triggers the engine to start using 
 *               this context for GCM and CCM. 
 *               For XTS this register is optionally used to load ?j?. 
 *               Loading of ?j? is only required if ?j? != 0. ?j? is a 28-bit 
 *               value and must be written to bits [31-4] of this register. 
 *               ?j? represents the sequential number of the 128-bit block 
 *               inside the data unit. For the first block in a unit, this 
 *               value is zero. It is not required to provide a ?j? for each 
 *               new data block within a unit. Note that it is possible to 
 *               start with a ?j? unequal to zero; refer to Table 4 for more 
 *               details. 
 *               For a Host read operation, these registers return 
 *               all-zeroes. 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_AUTH_LENGTH                       0x5Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_DATA_IN_0
 *
 * @BRIEF        Data register to read and write plaintext/ciphertext (MSW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_DATA_IN_0                         0x60ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_DATA_IN_1
 *
 * @BRIEF        Data register to read and write plaintext/ciphertext 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_DATA_IN_1                         0x64ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_DATA_IN_2
 *
 * @BRIEF        Data register to read and write plaintext/ciphertext 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_DATA_IN_2                         0x68ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_DATA_IN_3
 *
 * @BRIEF        Data register to read and write plaintext/ciphertext (LSW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_DATA_IN_3                         0x6Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_TAG_OUT_0
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_TAG_OUT_0                         0x70ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_TAG_OUT_1
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_TAG_OUT_1                         0x74ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_TAG_OUT_2
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_TAG_OUT_2                         0x78ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_TAG_OUT_3
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_TAG_OUT_3                         0x7Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_REVISION
 *
 * @BRIEF        Register AES_REVISION 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_REVISION                          0x80ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG
 *
 * @BRIEF        Register AES_S_SYSCONFIG.This register configures the DMA 
 *               signals and controls the IDLE and reset logic 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG                         0x84ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSSTATUS
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSSTATUS                         0x88ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_IRQSTATUS
 *
 * @BRIEF        This register indicates the interrupt status. If one of the 
 *               interrupt bits is set the interrupt output will be asserted 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_IRQSTATUS                         0x8Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_IRQENABLE
 *
 * @BRIEF        This register contains an enable bit for each unique 
 *               interrupt generated by the module. It matches the layout of 
 *               AES_IRQSTATUS register. An interrupt is enabled when the bit 
 *               in this register is set to ?1?. An interrupt that is enabled 
 *               is propagated to the SINTREQUEST_x output. All interrupts 
 *               need to be enabled explicitly by writing this register. 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_IRQENABLE                         0x90ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_DIRTYBITS
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_DIRTYBITS                         0x94ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_LOCKDOWN
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_LOCKDOWN                          0x98ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY2_6
 *
 * @BRIEF        XTS second key / 
 *               CBC-MAC third key 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY2_6                            0x100000ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY2_7
 *
 * @BRIEF        XTS second key (MSW for 256-bit key)  / 
 *               CBC-MAC third key (MSW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY2_7                            0x100004ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY2_4
 *
 * @BRIEF        XTS / CCM second key / 
 *               CBC-MAC third key (LSW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY2_4                            0x100008ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY2_5
 *
 * @BRIEF        XTS second key (MSW for 192-bit key)  / 
 *               CBC-MAC third key 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY2_5                            0x10000Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY2_2
 *
 * @BRIEF        XTS / CCM / CBC-MAC second key / 
 *               Hash Key input 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY2_2                            0x100010ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY2_3
 *
 * @BRIEF        XTS second key (MSW for 128-bit key) + 
 *               CCM/CBC-MAC second key (MSW) / 
 *               Hash Key input (MSW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY2_3                            0x100014ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY2_0
 *
 * @BRIEF        XTS / CCM / CBC-MAC second key (LSW) / 
 *               Hash Key input (LSW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY2_0                            0x100018ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY2_1
 *
 * @BRIEF        XTS / CCM / CBC-MAC second key / 
 *               Hash Key input 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY2_1                            0x10001Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY1_6
 *
 * @BRIEF        Key (LSW for 256-bit key) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY1_6                            0x100020ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY1_7
 *
 * @BRIEF        Key (MSW for 256-bit key) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY1_7                            0x100024ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY1_4
 *
 * @BRIEF        Key (LSW for 192-bit key) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY1_4                            0x100028ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY1_5
 *
 * @BRIEF        Key (MSW for 192-bit key) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY1_5                            0x10002Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY1_2
 *
 * @BRIEF        Key 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY1_2                            0x100030ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY1_3
 *
 * @BRIEF        Key (MSW for 128-bit key) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY1_3                            0x100034ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY1_0
 *
 * @BRIEF        Key (LSW for 128-bit key) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY1_0                            0x100038ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY1_1
 *
 * @BRIEF        Key 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY1_1                            0x10003Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_IV_IN_0
 *
 * @BRIEF        Initialization Vector input (LSW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_IV_IN_0                           0x100040ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_IV_IN_1
 *
 * @BRIEF        Initialization vector input 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_IV_IN_1                           0x100044ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_IV_IN_2
 *
 * @BRIEF        Initialization vector input 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_IV_IN_2                           0x100048ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_IV_IN_3
 *
 * @BRIEF        Initialization Vector input (MSW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_IV_IN_3                           0x10004Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL
 *
 * @BRIEF        register determines the mode of operation of the AES Engine 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL                              0x100050ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_C_LENGTH_0
 *
 * @BRIEF        Crypto data length registers (LSW and MSW) store the 
 *               cryptographic data length in bytes for all modes. Once 
 *               processing with this context is started, this length 
 *               decrements to zero. Data lengths up to (2^61 ? 1) bytes are 
 *               allowed. 
 *               For GCM, any value up to 2^36 - 32 bytes can be used. This 
 *               is because a 32-bit counter mode is used; the maximum number 
 *               of 128-bit blocks is 2^32 ? 2, resulting in a maximum number 
 *               of bytes of 2^36 - 32. 
 *               A write to this register triggers the engine to start using 
 *               this context. This is valid for all modes except GCM and 
 *               CCM. 
 *               Note that for the combined modes, this length does not 
 *               include the authentication only data; the authentication 
 *               length is specified in the AES_AUTH_LENGTH register below. 
 *               All modes must have a length > 0. For the combined modes, it 
 *               is allowed to have one of the lengths equal to zero. 
 *               For the basic encryption modes (ECB/CBC/CTR/ICM/CFB128) it 
 *               is allowed to program zero to the length field; in that case 
 *               the length is assumed infinite. 
 *               All data must be byte (8-bit) aligned; bit aligned data 
 *               streams are not supported by the AES Engine. 
 *               For a Host read operation, these registers return 
 *               all-zeroes. 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_C_LENGTH_0                        0x100054ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_C_LENGTH_1
 *
 * @BRIEF        Crypto data length registers (LSW and MSW) store the 
 *               cryptographic data length in bytes for all modes. Once 
 *               processing with this context is started, this length 
 *               decrements to zero. Data lengths up to (2^61 ? 1) bytes are 
 *               allowed. 
 *               For GCM, any value up to 2^36 - 32 bytes can be used. This 
 *               is because a 32-bit counter mode is used; the maximum number 
 *               of 128-bit blocks is 2^32 ? 2, resulting in a maximum number 
 *               of bytes of 2^36 - 32. 
 *               A write to this register triggers the engine to start using 
 *               this context. This is valid for all modes except GCM and 
 *               CCM. 
 *               Note that for the combined modes, this length does not 
 *               include the authentication only data; the authentication 
 *               length is specified in the AES_AUTH_LENGTH register below. 
 *               All modes must have a length > 0. For the combined modes, it 
 *               is allowed to have one of the lengths equal to zero. 
 *               For the basic encryption modes (ECB/CBC/CTR/ICM/CFB128) it 
 *               is allowed to program zero to the length field; in that case 
 *               the length is assumed infinite. 
 *               All data must be byte (8-bit) aligned; bit aligned data 
 *               streams are not supported by the AES Engine. 
 *               For a Host read operation, these registers return 
 *               all-zeroes. 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_C_LENGTH_1                        0x100058ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_AUTH_LENGTH
 *
 * @BRIEF        AAD data length. The authentication length register store 
 *               the authentication data length in bytes for combined modes 
 *               only (GCM or CCM) 
 *               Supported AAD-lengths for CCM are from 0 to (2^16 - 2^8) 
 *               bytes. For GCM any value up to (2^32 - 1) bytes can be used. 
 *               Once processing with this context is started, this length 
 *               decrements to zero. 
 *               A write to this register triggers the engine to start using 
 *               this context for GCM and CCM. 
 *               For XTS this register is optionally used to load ?j?. 
 *               Loading of ?j? is only required if ?j? != 0. ?j? is a 28-bit 
 *               value and must be written to bits [31-4] of this register. 
 *               ?j? represents the sequential number of the 128-bit block 
 *               inside the data unit. For the first block in a unit, this 
 *               value is zero. It is not required to provide a ?j? for each 
 *               new data block within a unit. Note that it is possible to 
 *               start with a ?j? unequal to zero; refer to Table 4 for more 
 *               details. 
 *               For a Host read operation, these registers return 
 *               all-zeroes. 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_AUTH_LENGTH                       0x10005Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_DATA_IN_0
 *
 * @BRIEF        Data register to read and write plaintext/ciphertext (MSW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_DATA_IN_0                         0x100060ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_DATA_IN_1
 *
 * @BRIEF        Data register to read and write plaintext/ciphertext 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_DATA_IN_1                         0x100064ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_DATA_IN_2
 *
 * @BRIEF        Data register to read and write plaintext/ciphertext 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_DATA_IN_2                         0x100068ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_DATA_IN_3
 *
 * @BRIEF        Data register to read and write plaintext/ciphertext (LSW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_DATA_IN_3                         0x10006Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_TAG_OUT_0
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_TAG_OUT_0                         0x100070ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_TAG_OUT_1
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_TAG_OUT_1                         0x100074ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_TAG_OUT_2
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_TAG_OUT_2                         0x100078ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_TAG_OUT_3
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_TAG_OUT_3                         0x10007Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_REVISION
 *
 * @BRIEF        Register AES_REVISION 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_REVISION                          0x100080ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_SYSCONFIG
 *
 * @BRIEF        Register AES_P_SYSCONFIG.This register configures the DMA 
 *               signals. 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_SYSCONFIG                         0x100084ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_SYSSTATUS
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_SYSSTATUS                         0x100088ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_IRQSTATUS
 *
 * @BRIEF        This register indicates the interrupt status. If one of the 
 *               interrupt bits is set the interrupt output will be asserted 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_IRQSTATUS                         0x10008Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_IRQENABLE
 *
 * @BRIEF        This register contains an enable bit for each unique 
 *               interrupt generated by the module. It matches the layout of 
 *               AES_IRQSTATUS register. An interrupt is enabled when the bit 
 *               in this register is set to ?1?. An interrupt that is enabled 
 *               is propagated to the SINTREQUEST_x output. All interrupts 
 *               need to be enabled explicitly by writing this register. 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_IRQENABLE                         0x100090ul

    /* 
     * List of register bitfields for component AESEIP36T
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY2_6__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY2_6__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_S_KEY2_6__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY2_7__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY2_7__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_S_KEY2_7__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY2_4__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY2_4__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_S_KEY2_4__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY2_5__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY2_5__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_S_KEY2_5__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY2_2__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY2_2__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_S_KEY2_2__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY2_3__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY2_3__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_S_KEY2_3__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY2_0__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY2_0__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_S_KEY2_0__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY2_1__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY2_1__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_S_KEY2_1__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY1_6__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY1_6__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_S_KEY1_6__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY1_7__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY1_7__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_S_KEY1_7__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY1_4__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY1_4__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_S_KEY1_4__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY1_5__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY1_5__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_S_KEY1_5__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY1_2__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY1_2__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_S_KEY1_2__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY1_3__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY1_3__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_S_KEY1_3__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY1_0__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY1_0__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_S_KEY1_0__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_KEY1_1__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_KEY1_1__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_S_KEY1_1__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_IV_IN_0__DATA   
 *
 * @BRIEF        IV data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_IV_IN_0__DATA                BITFIELD(31, 0)
#define AESEIP36T__AES_S_IV_IN_0__DATA__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_IV_IN_1__DATA   
 *
 * @BRIEF        IV data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_IV_IN_1__DATA                BITFIELD(31, 0)
#define AESEIP36T__AES_S_IV_IN_1__DATA__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_IV_IN_2__DATA   
 *
 * @BRIEF        IV data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_IV_IN_2__DATA                BITFIELD(31, 0)
#define AESEIP36T__AES_S_IV_IN_2__DATA__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_IV_IN_3__DATA   
 *
 * @BRIEF        IV data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_IV_IN_3__DATA                BITFIELD(31, 0)
#define AESEIP36T__AES_S_IV_IN_3__DATA__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__CONTEXT_READY   
 *
 * @BRIEF        If ?1?, this read-only status bit indicates that the context 
 *               data registers can be overwritten and the host is permitted 
 *               to write the next context. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__CONTEXT_READY          BITFIELD(31, 31)
#define AESEIP36T__AES_S_CTRL__CONTEXT_READY__POS     31

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__SAVE_CONTEXT_READY   
 *
 * @BRIEF        If ?1?, this read-only status bit indicates that an AES 
 *               authentication TAG and/or IV block(s) is/are available for 
 *               the host to retrieve. This bit is only asserted if the 
 *               ?save_context? bit is set to ?1?. The bit is mutual 
 *               exclusive with the ?context_ready? bit. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__SAVE_CONTEXT_READY     BITFIELD(30, 30)
#define AESEIP36T__AES_S_CTRL__SAVE_CONTEXT_READY__POS 30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__SAVE_CONTEXT   
 *
 * @BRIEF        This bit is used to indicate that an authentication TAG or 
 *               result IV needs to be stored as a result context. If this 
 *               bit is set, context output DMA and/or interrupt will be 
 *               asserted if the operation is finished and related signals 
 *               are enabled.  - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__SAVE_CONTEXT           BITFIELD(29, 29)
#define AESEIP36T__AES_S_CTRL__SAVE_CONTEXT__POS      29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__CCM_M   
 *
 * @BRIEF        Defines ?M? that indicated the length of the authentication 
 *               field for CCM operations; the authentication field length 
 *               equals two times (the value of CCM-M plus one). Note that 
 *               the AES Engine always returns a 128-bit authentication 
 *               field, of which the M least significant bytes are valid. All 
 *               values are supported. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__CCM_M                  BITFIELD(24, 22)
#define AESEIP36T__AES_S_CTRL__CCM_M__POS             22

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__CCM_L   
 *
 * @BRIEF        Defines ?L? that indicated the width of the length field for 
 *               CCM operations; the length field in bytes equals the value 
 *               of CMM-L plus one. Supported values for L are (programmed 
 *               value): 2 (1), 4 (3) and 8 (7). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__CCM_L                  BITFIELD(21, 19)
#define AESEIP36T__AES_S_CTRL__CCM_L__POS             19

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__CCM   
 *
 * @BRIEF        AES-CCM is selected, this is a combined mode, using AES for 
 *               both authentication and encryption. No additional mode 
 *               selection is required. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__CCM                    BITFIELD(18, 18)
#define AESEIP36T__AES_S_CTRL__CCM__POS               18

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__GCM   
 *
 * @BRIEF        AES-GCM mode is selected.this is a combined mode, using the 
 *               Galois field multiplier GF(2^128) for authentication and 
 *               AES-CTR mode for encryption, the bits specify the GCM mode. 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__GCM                    BITFIELD(17, 16)
#define AESEIP36T__AES_S_CTRL__GCM__POS               16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__CBCMAC   
 *
 * @BRIEF        AES-CBC MAC is selected, the Direction bit must be set to 
 *               ?1? for this mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__CBCMAC                 BITFIELD(15, 15)
#define AESEIP36T__AES_S_CTRL__CBCMAC__POS            15

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__F9   
 *
 * @BRIEF        AES f9 mode is selected, the AES key size must be set to 
 *               128-bit for this mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__F9                     BITFIELD(14, 14)
#define AESEIP36T__AES_S_CTRL__F9__POS                14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__F8   
 *
 * @BRIEF        AES f8 mode is selected, the AES key size must be set to 
 *               128-bit for this mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__F8                     BITFIELD(13, 13)
#define AESEIP36T__AES_S_CTRL__F8__POS                13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__XTS   
 *
 * @BRIEF        AES-XTS operation is selected; the bits specify the XTS 
 *               mode.01 = Previous/intermediate tweak value and ?j? loaded 
 *               (value is loaded via IV, j is loaded via the AAD length 
 *               register)  - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__XTS                    BITFIELD(12, 11)
#define AESEIP36T__AES_S_CTRL__XTS__POS               11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__CFB   
 *
 * @BRIEF        full block AES cipher feedback mode (CFB128) is selected. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__CFB                    BITFIELD(10, 10)
#define AESEIP36T__AES_S_CTRL__CFB__POS               10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__ICM   
 *
 * @BRIEF        AES integer counter mode (ICM) is selected, this is a 
 *               counter mode with a 16-bit wide counter. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__ICM                    BITFIELD(9, 9)
#define AESEIP36T__AES_S_CTRL__ICM__POS               9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__CTR_WIDTH   
 *
 * @BRIEF        Specifies the counter width for AES-CTR mode  - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__CTR_WIDTH              BITFIELD(8, 7)
#define AESEIP36T__AES_S_CTRL__CTR_WIDTH__POS         7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__CTR   
 *
 * @BRIEF        Tthis bit must also be set for GCM and CCM, when 
 *               encryption/decryption is required. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__CTR                    BITFIELD(6, 6)
#define AESEIP36T__AES_S_CTRL__CTR__POS               6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__MODE   
 *
 * @BRIEF        ecb/cbc mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__MODE                   BITFIELD(5, 5)
#define AESEIP36T__AES_S_CTRL__MODE__POS              5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__KEY_SIZE   
 *
 * @BRIEF        key size - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__KEY_SIZE               BITFIELD(4, 3)
#define AESEIP36T__AES_S_CTRL__KEY_SIZE__POS          3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__DIRECTION   
 *
 * @BRIEF        If set to ?1? an encrypt operation is performed. If set to 
 *               ?0? a decrypt operation is performed. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__DIRECTION              BITFIELD(2, 2)
#define AESEIP36T__AES_S_CTRL__DIRECTION__POS         2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__INPUT_READY   
 *
 * @BRIEF        If ?1?, this read-only status bit indicates that the 16-byte 
 *               input buffer is empty, and the host is permitted to write 
 *               the next block of data. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__INPUT_READY            BITFIELD(1, 1)
#define AESEIP36T__AES_S_CTRL__INPUT_READY__POS       1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__OUTPUT_READY   
 *
 * @BRIEF        If ?1?, this read-only status bit indicates that an AES 
 *               output block is available for the host to retrieve. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__OUTPUT_READY           BITFIELD(0, 0)
#define AESEIP36T__AES_S_CTRL__OUTPUT_READY__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_C_LENGTH_0__LENGTH   
 *
 * @BRIEF        Data length (LSW) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_C_LENGTH_0__LENGTH           BITFIELD(31, 0)
#define AESEIP36T__AES_S_C_LENGTH_0__LENGTH__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_C_LENGTH_1__LENGTH   
 *
 * @BRIEF        Data length (MSW) 
 *               length registers (LSW and MSW) store the cryptographic data 
 *               length in bytes for all modes. Once processing with this 
 *               context is started, this length decrements to zero. Data 
 *               lengths up to (2^61 ? 1) bytes are allowed. 
 *               For GCM, any value up to 2^36 - 32 bytes can be used. This 
 *               is because a 32-bit counter mode is used; the maximum number 
 *               of 128-bit blocks is 2^32 ? 2, resulting in a maximum number 
 *               of bytes of 2^36 - 32. 
 *               A write to this register triggers the engine to start using 
 *               this context. This is valid for all modes except GCM and 
 *               CCM. 
 *               Note that for the combined modes, this length does not 
 *               include the authentication only data; the authentication 
 *               length is specified in the AES_AUTH_LENGTH register below. 
 *               All modes must have a length > 0. For the combined modes, it 
 *               is allowed to have one of the lengths equal to zero. 
 *               For the basic encryption modes (ECB/CBC/CTR/ICM/CFB128) it 
 *               is allowed to program zero to the length field; in that case 
 *               the length is assumed infinite. 
 *               All data must be byte (8-bit) aligned; bit aligned data 
 *               streams are not supported by the AES Engine. 
 *               For a Host read operation, these registers return 
 *               all-zeroes. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_C_LENGTH_1__LENGTH           BITFIELD(28, 0)
#define AESEIP36T__AES_S_C_LENGTH_1__LENGTH__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_AUTH_LENGTH__AUTH   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_AUTH_LENGTH__AUTH            BITFIELD(31, 0)
#define AESEIP36T__AES_S_AUTH_LENGTH__AUTH__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_DATA_IN_0__DATA   
 *
 * @BRIEF        Data to encrypt/decrypt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_DATA_IN_0__DATA              BITFIELD(31, 0)
#define AESEIP36T__AES_S_DATA_IN_0__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_DATA_IN_1__DATA   
 *
 * @BRIEF        Data to encrypt/decrypt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_DATA_IN_1__DATA              BITFIELD(31, 0)
#define AESEIP36T__AES_S_DATA_IN_1__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_DATA_IN_2__DATA   
 *
 * @BRIEF        Data to encrypt/decrypt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_DATA_IN_2__DATA              BITFIELD(31, 0)
#define AESEIP36T__AES_S_DATA_IN_2__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_DATA_IN_3__DATA   
 *
 * @BRIEF        Data to encrypt/decrypt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_DATA_IN_3__DATA              BITFIELD(31, 0)
#define AESEIP36T__AES_S_DATA_IN_3__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_TAG_OUT_0__HASH   
 *
 * @BRIEF        Hash result (MSW) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_TAG_OUT_0__HASH              BITFIELD(31, 0)
#define AESEIP36T__AES_S_TAG_OUT_0__HASH__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_TAG_OUT_1__HASH   
 *
 * @BRIEF        Hash result (MSW) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_TAG_OUT_1__HASH              BITFIELD(31, 0)
#define AESEIP36T__AES_S_TAG_OUT_1__HASH__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_TAG_OUT_2__HASH   
 *
 * @BRIEF        Hash result (MSW) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_TAG_OUT_2__HASH              BITFIELD(31, 0)
#define AESEIP36T__AES_S_TAG_OUT_2__HASH__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_TAG_OUT_3__HASH   
 *
 * @BRIEF        Hash result (LSW) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_TAG_OUT_3__HASH              BITFIELD(31, 0)
#define AESEIP36T__AES_S_TAG_OUT_3__HASH__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_REVISION__SCHEME   
 *
 * @BRIEF        Used to distinguish between old scheme and current. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_REVISION__SCHEME             BITFIELD(31, 30)
#define AESEIP36T__AES_S_REVISION__SCHEME__POS        30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_REVISION__FUNC   
 *
 * @BRIEF        Function indicates a software compatible module family.   
 *               If there is no level of software compatibility a new Func 
 *               number (and hence REVISION) should be assigned. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_REVISION__FUNC               BITFIELD(27, 16)
#define AESEIP36T__AES_S_REVISION__FUNC__POS          16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_REVISION__R_RTL   
 *
 * @BRIEF        RTL Version (R), maintained by IP design owner.  
 *               RTL follows a numbering such as X.Y.R.Z which are explained 
 *               in this table.  
 *               R changes ONLY when:  
 *               (1) PDS uploads occur which may have been due to spec 
 *               changes  
 *               (2) Bug fixes occur  
 *               (3) Resets to '0' when X or Y changes.  
 *               Design team has an internal 'Z' (customer invisible) number 
 *               which increments on every drop that happens due to DV and 
 *               RTL updates. Z resets to 0 when R increments. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_REVISION__R_RTL              BITFIELD(15, 11)
#define AESEIP36T__AES_S_REVISION__R_RTL__POS         11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_REVISION__X_MAJOR   
 *
 * @BRIEF        Major Revision (X), maintained by IP specification owner.  
 *               X changes ONLY when:  
 *               (1) There is a major feature addition. An example would be 
 *               adding Master Mode to Utopia Level2. The Func field (or 
 *               Class/Type in old PID format) will remain the same.  
 *               X does NOT change due to:  
 *               (1) Bug fixes  
 *               (2) Change in feature parameters. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_REVISION__X_MAJOR            BITFIELD(10, 8)
#define AESEIP36T__AES_S_REVISION__X_MAJOR__POS       8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_REVISION__CUSTOM   
 *
 * @BRIEF        Indicates a special version for a particular device. 
 *               Consequence of use may avoid use of standard Chip Support 
 *               Library (CSL) / Drivers. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_REVISION__CUSTOM             BITFIELD(7, 6)
#define AESEIP36T__AES_S_REVISION__CUSTOM__POS        6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_REVISION__Y_MINOR   
 *
 * @BRIEF        Minor Revision (Y), maintained by IP specification owner.  
 *               Y changes ONLY when:  
 *               (1) Features are scaled (up or down). Flexibility exists in 
 *               that this feature scalability may either be represented in 
 *               the Y change or a specific register in the IP that indicates 
 *               which features are exactly available.  
 *               (2) When feature creeps from Is-Not list to Is list. But 
 *               this may not be the case once it sees silicon; in which case 
 *               X will change.  
 *               Y does NOT change due to:  
 *               (1) Bug fixes  
 *               (2) Typos or clarifications  
 *               (3) major functional/feature change/addition/deletion. 
 *               Instead these changes may be reflected via R, S, X as 
 *               applicable.  
 *               Spec owner maintains a customer-invisible number 'S' which 
 *               changes due to:  
 *               (1) Typos/clarifications  
 *               (2) Bug documentation. Note that this bug is not due to a 
 *               spec change but due to implementation. Nevertheless, the 
 *               spec tracks the IP bugs. An RTL release (say for silicon 
 *               PG1.1) that occurs due to bug fix should document the 
 *               corresponding spec number (X.Y.S) in its release notes. - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_REVISION__Y_MINOR            BITFIELD(5, 0)
#define AESEIP36T__AES_S_REVISION__Y_MINOR__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__K3   
 *
 * @BRIEF        If this bit is set to zero, a regular cryptographic 
 *               operation is performed. 
 *               This bit may be set to one only if bit directbusen of this 
 *               register and bit key_enc of this register are cleared to 
 *               zero. If this bit is one, the K3 key is used as key for the 
 *               selected cryptographic operation. 
 *               If this mode is selected, the key size should be 128-bit. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__K3                BITFIELD(12, 12)
#define AESEIP36T__AES_S_SYSCONFIG__K3__POS           12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__KEY_ENC   
 *
 * @BRIEF        If this bit is set to zero, a regular cryptographic 
 *               operation is performed. 
 *               This bit may be set to one only if bit directbusen of this 
 *               register is cleared to zero. If this bit is ?1?, the KEK 
 *               (see description of bit kek_mode) key is XOR-ed with a 
 *               predefined constant value before it is used as key for the 
 *               selected cryptographic operation. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__KEY_ENC           BITFIELD(11, 11)
#define AESEIP36T__AES_S_SYSCONFIG__KEY_ENC__POS      11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__KEK_MODE   
 *
 * @BRIEF        If this bit is zero, the direct key is used directly for the 
 *               selected cryptographic operation, if it is selected by 
 *               enabling directbusen of this register. If the direct key is 
 *               not selected, a regular operation is performed. 
 *               This bit may be set to one only if bit directbusen  is set 
 *               to ?1?. If this bit is to one and the direct key bit is 
 *               selected, the direct key is XOR-ed with a predefined 
 *               constant value (constant1  ) before it is used as key for 
 *               the cryptographic operation. If both bits are set to ?1?, 
 *               the direction of the cryptographic operation is forced to 
 *               ?encryption? (independent of the programmed direction in the 
 *               AES_S_CTRL register). The result of the operation with this 
 *               XOR-ed key is automatically stored in a separate internal 
 *               key register (KEK). No output data is provided in this case; 
 *               reading from the data output register returns zeroes. 
 *               If this mode is selected, the cryptographic mode should be 
 *               set to ECB and the key size should be 128-bit. 
 *               Please refer to Appendix A.5 for details on the key 
 *               selection mechanism. 
 *               Note that for correct behavior of the core, this bit should 
 *               only be changed if the core is ready for a new context on 
 *               the secure HIB. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__KEK_MODE          BITFIELD(10, 10)
#define AESEIP36T__AES_S_SYSCONFIG__KEK_MODE__POS     10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__MAP_CONTEXT_OUT_ON_DATA_OUT   
 *
 * @BRIEF        If set to '1' the two context out requests 
 *               (dma_req_context_out_en, Bit [8] above, and context_out 
 *               interrupt enable, Bit [3] of AES_IRQENABLE register) are 
 *               mapped on the corresponding data output request bit. In this 
 *               case, the original ?context out? bit values are ignored.  - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__MAP_CONTEXT_OUT_ON_DATA_OUT BITFIELD(9, 9)
#define AESEIP36T__AES_S_SYSCONFIG__MAP_CONTEXT_OUT_ON_DATA_OUT__POS 9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_CONTEXT_OUT_EN   
 *
 * @BRIEF        If set to ?1?, the DMA context output request is enabled 
 *               (for context data out, e.g. TAG for authentication modes). - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_CONTEXT_OUT_EN BITFIELD(8, 8)
#define AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_CONTEXT_OUT_EN__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_CONTEXT_IN_EN   
 *
 * @BRIEF        If set to ?1?, the DMA context request is enabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_CONTEXT_IN_EN BITFIELD(7, 7)
#define AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_CONTEXT_IN_EN__POS 7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_DATA_OUT_EN   
 *
 * @BRIEF        If set to ?1?, the DMA output request is enabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_DATA_OUT_EN BITFIELD(6, 6)
#define AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_DATA_OUT_EN__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_DATA_IN_EN   
 *
 * @BRIEF        If set to ?1?, the DMA input request is enabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_DATA_IN_EN BITFIELD(5, 5)
#define AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_DATA_IN_EN__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__DIRECTBUSEN   
 *
 * @BRIEF        keys from register or directbus input - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__DIRECTBUSEN       BITFIELD(4, 4)
#define AESEIP36T__AES_S_SYSCONFIG__DIRECTBUSEN__POS  4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__SIDLE   
 *
 * @BRIEF        sidle mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__SIDLE             BITFIELD(3, 2)
#define AESEIP36T__AES_S_SYSCONFIG__SIDLE__POS        2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__SOFTRESET   
 *
 * @BRIEF        softreset - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__SOFTRESET         BITFIELD(1, 1)
#define AESEIP36T__AES_S_SYSCONFIG__SOFTRESET__POS    1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__AUTOIDLE   
 *
 * @BRIEF        autoidle - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__AUTOIDLE          BITFIELD(0, 0)
#define AESEIP36T__AES_S_SYSCONFIG__AUTOIDLE__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSSTATUS__RESETDONE   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSSTATUS__RESETDONE         BITFIELD(0, 0)
#define AESEIP36T__AES_S_SYSSTATUS__RESETDONE__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_IRQSTATUS__CONTEXT_OUT   
 *
 * @BRIEF        This bit indicates authentication tag (and IV) interrupt(s) 
 *               is/are active and triggers the interrupt output.  - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_IRQSTATUS__CONTEXT_OUT       BITFIELD(3, 3)
#define AESEIP36T__AES_S_IRQSTATUS__CONTEXT_OUT__POS  3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_IRQSTATUS__DATA_OUT   
 *
 * @BRIEF        This bit indicates data output interrupt is active and 
 *               triggers the interrupt output. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_IRQSTATUS__DATA_OUT          BITFIELD(2, 2)
#define AESEIP36T__AES_S_IRQSTATUS__DATA_OUT__POS     2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_IRQSTATUS__DATA_IN   
 *
 * @BRIEF        This bit indicates data input interrupt is active and 
 *               triggers the interrupt output. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_IRQSTATUS__DATA_IN           BITFIELD(1, 1)
#define AESEIP36T__AES_S_IRQSTATUS__DATA_IN__POS      1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_IRQSTATUS__CONTEX_IN   
 *
 * @BRIEF        This bit indicates context interrupt is active and triggers 
 *               the interrupt output. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_IRQSTATUS__CONTEX_IN         BITFIELD(0, 0)
#define AESEIP36T__AES_S_IRQSTATUS__CONTEX_IN__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_IRQENABLE__CONTEXT_OUT   
 *
 * @BRIEF        This bit indicates authentication tag (and IV) interrupt(s) 
 *               is/are active and triggers the interrupt output.  - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_IRQENABLE__CONTEXT_OUT       BITFIELD(3, 3)
#define AESEIP36T__AES_S_IRQENABLE__CONTEXT_OUT__POS  3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_IRQENABLE__DATA_OUT   
 *
 * @BRIEF        This bit indicates data output interrupt is active and 
 *               triggers the interrupt output. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_IRQENABLE__DATA_OUT          BITFIELD(2, 2)
#define AESEIP36T__AES_S_IRQENABLE__DATA_OUT__POS     2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_IRQENABLE__DATA_IN   
 *
 * @BRIEF        This bit indicates data input interrupt is active and 
 *               triggers the interrupt output. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_IRQENABLE__DATA_IN           BITFIELD(1, 1)
#define AESEIP36T__AES_S_IRQENABLE__DATA_IN__POS      1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_IRQENABLE__CONTEX_IN   
 *
 * @BRIEF        This bit indicates context interrupt is active and triggers 
 *               the interrupt output. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_IRQENABLE__CONTEX_IN         BITFIELD(0, 0)
#define AESEIP36T__AES_S_IRQENABLE__CONTEX_IN__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_DIRTYBITS__P_DIRTY   
 *
 * @BRIEF        This bit is set to 1 by the module if any of the AES_P_* 
 *               registers is written. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_DIRTYBITS__P_DIRTY           BITFIELD(3, 3)
#define AESEIP36T__AES_S_DIRTYBITS__P_DIRTY__POS      3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_DIRTYBITS__P_ACCESS   
 *
 * @BRIEF        This bit is set to 1 by the module if any of the AES_P_* 
 *               registers is read. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_DIRTYBITS__P_ACCESS          BITFIELD(2, 2)
#define AESEIP36T__AES_S_DIRTYBITS__P_ACCESS__POS     2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_DIRTYBITS__S_DIRTY   
 *
 * @BRIEF        This bit is set to 1 by the module if any of the AES_S_*  
 *               registers is written. 
 *               Except AES_S_DIRTYBITS and AES_S_LOCKDOWN. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_DIRTYBITS__S_DIRTY           BITFIELD(1, 1)
#define AESEIP36T__AES_S_DIRTYBITS__S_DIRTY__POS      1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_DIRTYBITS__S_ACCESS   
 *
 * @BRIEF        This bit is set to 1 by the module if any of the AES_S_* 
 *               registers is read. 
 *               Except AES_S_DIRTYBITS and AES_S_LOCKDOWN. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_DIRTYBITS__S_ACCESS          BITFIELD(0, 0)
#define AESEIP36T__AES_S_DIRTYBITS__S_ACCESS__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_LOCKDOWN__LENGTH_LOCK   
 *
 * @BRIEF        If set to ?1? the DES_P length registers can not be written 
 *               (this lock involves word address from 0x1054 to 0x105c). - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_LOCKDOWN__LENGTH_LOCK        BITFIELD(5, 5)
#define AESEIP36T__AES_S_LOCKDOWN__LENGTH_LOCK__POS   5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_LOCKDOWN__CONTROL_LOCK   
 *
 * @BRIEF        If set to ?1? the AES_P control register can not be written 
 *               (this lock involves word address 0x1050). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_LOCKDOWN__CONTROL_LOCK       BITFIELD(4, 4)
#define AESEIP36T__AES_S_LOCKDOWN__CONTROL_LOCK__POS  4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_LOCKDOWN__IV_LOCK   
 *
 * @BRIEF        If set to ?1? the AES_P IV registers cannot be written (this 
 *               lock involves word addresses 0x1040 up to 0x104C). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_LOCKDOWN__IV_LOCK            BITFIELD(3, 3)
#define AESEIP36T__AES_S_LOCKDOWN__IV_LOCK__POS       3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_LOCKDOWN__KEY3_LOCK   
 *
 * @BRIEF        If set to ?1? the AES_P  key3 registers cannot be written 
 *               (this lock involves word addresses 0x1030 up to 0x103C). - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_LOCKDOWN__KEY3_LOCK          BITFIELD(2, 2)
#define AESEIP36T__AES_S_LOCKDOWN__KEY3_LOCK__POS     2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_LOCKDOWN__KEY2_LOCK   
 *
 * @BRIEF        If set to ?1? the AES_P  key2 registers cannot be written 
 *               (this lock involves word addresses 0x1020 up to 0x102C). - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_LOCKDOWN__KEY2_LOCK          BITFIELD(1, 1)
#define AESEIP36T__AES_S_LOCKDOWN__KEY2_LOCK__POS     1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_LOCKDOWN__KEY_LOCK   
 *
 * @BRIEF        If set to ?1? the AES_P  key registers cannot be written 
 *               (this lock involves word addresses 0x1000 up to 0x101C). - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_LOCKDOWN__KEY_LOCK           BITFIELD(0, 0)
#define AESEIP36T__AES_S_LOCKDOWN__KEY_LOCK__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY2_6__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY2_6__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_P_KEY2_6__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY2_7__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY2_7__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_P_KEY2_7__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY2_4__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY2_4__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_P_KEY2_4__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY2_5__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY2_5__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_P_KEY2_5__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY2_2__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY2_2__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_P_KEY2_2__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY2_3__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY2_3__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_P_KEY2_3__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY2_0__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY2_0__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_P_KEY2_0__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY2_1__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY2_1__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_P_KEY2_1__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY1_6__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY1_6__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_P_KEY1_6__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY1_7__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY1_7__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_P_KEY1_7__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY1_4__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY1_4__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_P_KEY1_4__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY1_5__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY1_5__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_P_KEY1_5__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY1_2__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY1_2__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_P_KEY1_2__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY1_3__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY1_3__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_P_KEY1_3__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY1_0__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY1_0__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_P_KEY1_0__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_KEY1_1__KEY   
 *
 * @BRIEF        key data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_KEY1_1__KEY                  BITFIELD(31, 0)
#define AESEIP36T__AES_P_KEY1_1__KEY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_IV_IN_0__DATA   
 *
 * @BRIEF        IV data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_IV_IN_0__DATA                BITFIELD(31, 0)
#define AESEIP36T__AES_P_IV_IN_0__DATA__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_IV_IN_1__DATA   
 *
 * @BRIEF        IV data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_IV_IN_1__DATA                BITFIELD(31, 0)
#define AESEIP36T__AES_P_IV_IN_1__DATA__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_IV_IN_2__DATA   
 *
 * @BRIEF        IV data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_IV_IN_2__DATA                BITFIELD(31, 0)
#define AESEIP36T__AES_P_IV_IN_2__DATA__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_IV_IN_3__DATA   
 *
 * @BRIEF        IV data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_IV_IN_3__DATA                BITFIELD(31, 0)
#define AESEIP36T__AES_P_IV_IN_3__DATA__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__CONTEXT_READY   
 *
 * @BRIEF        If ?1?, this read-only status bit indicates that the context 
 *               data registers can be overwritten and the host is permitted 
 *               to write the next context. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__CONTEXT_READY          BITFIELD(31, 31)
#define AESEIP36T__AES_P_CTRL__CONTEXT_READY__POS     31

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__SAVE_CONTEXT_READY   
 *
 * @BRIEF        If ?1?, this read-only status bit indicates that an AES 
 *               authentication TAG and/or IV block(s) is/are available for 
 *               the host to retrieve. This bit is only asserted if the 
 *               ?save_context? bit is set to ?1?. The bit is mutual 
 *               exclusive with the ?context_ready? bit. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__SAVE_CONTEXT_READY     BITFIELD(30, 30)
#define AESEIP36T__AES_P_CTRL__SAVE_CONTEXT_READY__POS 30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__SAVE_CONTEXT   
 *
 * @BRIEF        This bit is used to indicate that an authentication TAG or 
 *               result IV needs to be stored as a result context. If this 
 *               bit is set, context output DMA and/or interrupt will be 
 *               asserted if the operation is finished and related signals 
 *               are enabled.  - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__SAVE_CONTEXT           BITFIELD(29, 29)
#define AESEIP36T__AES_P_CTRL__SAVE_CONTEXT__POS      29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__CCM_M   
 *
 * @BRIEF        Defines ?M? that indicated the length of the authentication 
 *               field for CCM operations; the authentication field length 
 *               equals two times (the value of CCM-M plus one). Note that 
 *               the AES Engine always returns a 128-bit authentication 
 *               field, of which the M least significant bytes are valid. All 
 *               values are supported. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__CCM_M                  BITFIELD(24, 22)
#define AESEIP36T__AES_P_CTRL__CCM_M__POS             22

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__CCM_L   
 *
 * @BRIEF        Defines ?L? that indicated the width of the length field for 
 *               CCM operations; the length field in bytes equals the value 
 *               of CMM-L plus one. Supported values for L are (programmed 
 *               value): 2 (1), 4 (3) and 8 (7). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__CCM_L                  BITFIELD(21, 19)
#define AESEIP36T__AES_P_CTRL__CCM_L__POS             19

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__CCM   
 *
 * @BRIEF        AES-CCM is selected, this is a combined mode, using AES for 
 *               both authentication and encryption. No additional mode 
 *               selection is required. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__CCM                    BITFIELD(18, 18)
#define AESEIP36T__AES_P_CTRL__CCM__POS               18

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__GCM   
 *
 * @BRIEF        AES-GCM mode is selected.this is a combined mode, using the 
 *               Galois field multiplier GF(2^128) for authentication and 
 *               AES-CTR mode for encryption, the bits specify the GCM mode. 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__GCM                    BITFIELD(17, 16)
#define AESEIP36T__AES_P_CTRL__GCM__POS               16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__CBCMAC   
 *
 * @BRIEF        AES-CBC MAC is selected, the Direction bit must be set to 
 *               ?1? for this mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__CBCMAC                 BITFIELD(15, 15)
#define AESEIP36T__AES_P_CTRL__CBCMAC__POS            15

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__F9   
 *
 * @BRIEF        AES f9 mode is selected, the AES key size must be set to 
 *               128-bit for this mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__F9                     BITFIELD(14, 14)
#define AESEIP36T__AES_P_CTRL__F9__POS                14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__F8   
 *
 * @BRIEF        AES f8 mode is selected, the AES key size must be set to 
 *               128-bit for this mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__F8                     BITFIELD(13, 13)
#define AESEIP36T__AES_P_CTRL__F8__POS                13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__XTS   
 *
 * @BRIEF        AES-XTS operation is selected; the bits specify the XTS 
 *               mode.01 = Previous/intermediate tweak value and ?j? loaded 
 *               (value is loaded via IV, j is loaded via the AAD length 
 *               register)  - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__XTS                    BITFIELD(12, 11)
#define AESEIP36T__AES_P_CTRL__XTS__POS               11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__CFB   
 *
 * @BRIEF        full block AES cipher feedback mode (CFB128) is selected. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__CFB                    BITFIELD(10, 10)
#define AESEIP36T__AES_P_CTRL__CFB__POS               10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__ICM   
 *
 * @BRIEF        AES integer counter mode (ICM) is selected, this is a 
 *               counter mode with a 16-bit wide counter. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__ICM                    BITFIELD(9, 9)
#define AESEIP36T__AES_P_CTRL__ICM__POS               9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__CTR_WIDTH   
 *
 * @BRIEF        Specifies the counter width for AES-CTR mode  - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__CTR_WIDTH              BITFIELD(8, 7)
#define AESEIP36T__AES_P_CTRL__CTR_WIDTH__POS         7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__CTR   
 *
 * @BRIEF        Tthis bit must also be set for GCM and CCM, when 
 *               encryption/decryption is required. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__CTR                    BITFIELD(6, 6)
#define AESEIP36T__AES_P_CTRL__CTR__POS               6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__MODE   
 *
 * @BRIEF        ecb/cbc mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__MODE                   BITFIELD(5, 5)
#define AESEIP36T__AES_P_CTRL__MODE__POS              5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__KEY_SIZE   
 *
 * @BRIEF        key size - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__KEY_SIZE               BITFIELD(4, 3)
#define AESEIP36T__AES_P_CTRL__KEY_SIZE__POS          3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__DIRECTION   
 *
 * @BRIEF        If set to ?1? an encrypt operation is performed. If set to 
 *               ?0? a decrypt operation is performed. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__DIRECTION              BITFIELD(2, 2)
#define AESEIP36T__AES_P_CTRL__DIRECTION__POS         2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__INPUT_READY   
 *
 * @BRIEF        If ?1?, this read-only status bit indicates that the 16-byte 
 *               input buffer is empty, and the host is permitted to write 
 *               the next block of data. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__INPUT_READY            BITFIELD(1, 1)
#define AESEIP36T__AES_P_CTRL__INPUT_READY__POS       1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__OUTPUT_READY   
 *
 * @BRIEF        If ?1?, this read-only status bit indicates that an AES 
 *               output block is available for the host to retrieve. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__OUTPUT_READY           BITFIELD(0, 0)
#define AESEIP36T__AES_P_CTRL__OUTPUT_READY__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_C_LENGTH_0__LENGTH   
 *
 * @BRIEF        Data length (LSW) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_C_LENGTH_0__LENGTH           BITFIELD(31, 0)
#define AESEIP36T__AES_P_C_LENGTH_0__LENGTH__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_C_LENGTH_1__LENGTH   
 *
 * @BRIEF        Data length (MSW) 
 *               length registers (LSW and MSW) store the cryptographic data 
 *               length in bytes for all modes. Once processing with this 
 *               context is started, this length decrements to zero. Data 
 *               lengths up to (2^61 ? 1) bytes are allowed. 
 *               For GCM, any value up to 2^36 - 32 bytes can be used. This 
 *               is because a 32-bit counter mode is used; the maximum number 
 *               of 128-bit blocks is 2^32 ? 2, resulting in a maximum number 
 *               of bytes of 2^36 - 32. 
 *               A write to this register triggers the engine to start using 
 *               this context. This is valid for all modes except GCM and 
 *               CCM. 
 *               Note that for the combined modes, this length does not 
 *               include the authentication only data; the authentication 
 *               length is specified in the AES_AUTH_LENGTH register below. 
 *               All modes must have a length > 0. For the combined modes, it 
 *               is allowed to have one of the lengths equal to zero. 
 *               For the basic encryption modes (ECB/CBC/CTR/ICM/CFB128) it 
 *               is allowed to program zero to the length field; in that case 
 *               the length is assumed infinite. 
 *               All data must be byte (8-bit) aligned; bit aligned data 
 *               streams are not supported by the AES Engine. 
 *               For a Host read operation, these registers return 
 *               all-zeroes. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_C_LENGTH_1__LENGTH           BITFIELD(28, 0)
#define AESEIP36T__AES_P_C_LENGTH_1__LENGTH__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_AUTH_LENGTH__AUTH   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_AUTH_LENGTH__AUTH            BITFIELD(31, 0)
#define AESEIP36T__AES_P_AUTH_LENGTH__AUTH__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_DATA_IN_0__DATA   
 *
 * @BRIEF        Data to encrypt/decrypt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_DATA_IN_0__DATA              BITFIELD(31, 0)
#define AESEIP36T__AES_P_DATA_IN_0__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_DATA_IN_1__DATA   
 *
 * @BRIEF        Data to encrypt/decrypt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_DATA_IN_1__DATA              BITFIELD(31, 0)
#define AESEIP36T__AES_P_DATA_IN_1__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_DATA_IN_2__DATA   
 *
 * @BRIEF        Data to encrypt/decrypt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_DATA_IN_2__DATA              BITFIELD(31, 0)
#define AESEIP36T__AES_P_DATA_IN_2__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_DATA_IN_3__DATA   
 *
 * @BRIEF        Data to encrypt/decrypt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_DATA_IN_3__DATA              BITFIELD(31, 0)
#define AESEIP36T__AES_P_DATA_IN_3__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_TAG_OUT_0__HASH   
 *
 * @BRIEF        Hash result (MSW) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_TAG_OUT_0__HASH              BITFIELD(31, 0)
#define AESEIP36T__AES_P_TAG_OUT_0__HASH__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_TAG_OUT_1__HASH   
 *
 * @BRIEF        Hash result (MSW) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_TAG_OUT_1__HASH              BITFIELD(31, 0)
#define AESEIP36T__AES_P_TAG_OUT_1__HASH__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_TAG_OUT_2__HASH   
 *
 * @BRIEF        Hash result (MSW) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_TAG_OUT_2__HASH              BITFIELD(31, 0)
#define AESEIP36T__AES_P_TAG_OUT_2__HASH__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_TAG_OUT_3__HASH   
 *
 * @BRIEF        Hash result (LSW) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_TAG_OUT_3__HASH              BITFIELD(31, 0)
#define AESEIP36T__AES_P_TAG_OUT_3__HASH__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_REVISION__SCHEME   
 *
 * @BRIEF        Used to distinguish between old scheme and current. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_REVISION__SCHEME             BITFIELD(31, 30)
#define AESEIP36T__AES_P_REVISION__SCHEME__POS        30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_REVISION__FUNC   
 *
 * @BRIEF        Function indicates a software compatible module family.   
 *               If there is no level of software compatibility a new Func 
 *               number (and hence REVISION) should be assigned. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_REVISION__FUNC               BITFIELD(27, 16)
#define AESEIP36T__AES_P_REVISION__FUNC__POS          16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_REVISION__R_RTL   
 *
 * @BRIEF        RTL Version (R), maintained by IP design owner.  
 *               RTL follows a numbering such as X.Y.R.Z which are explained 
 *               in this table.  
 *               R changes ONLY when:  
 *               (1) PDS uploads occur which may have been due to spec 
 *               changes  
 *               (2) Bug fixes occur  
 *               (3) Resets to '0' when X or Y changes.  
 *               Design team has an internal 'Z' (customer invisible) number 
 *               which increments on every drop that happens due to DV and 
 *               RTL updates. Z resets to 0 when R increments. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_REVISION__R_RTL              BITFIELD(15, 11)
#define AESEIP36T__AES_P_REVISION__R_RTL__POS         11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_REVISION__X_MAJOR   
 *
 * @BRIEF        Major Revision (X), maintained by IP specification owner.  
 *               X changes ONLY when:  
 *               (1) There is a major feature addition. An example would be 
 *               adding Master Mode to Utopia Level2. The Func field (or 
 *               Class/Type in old PID format) will remain the same.  
 *               X does NOT change due to:  
 *               (1) Bug fixes  
 *               (2) Change in feature parameters. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_REVISION__X_MAJOR            BITFIELD(10, 8)
#define AESEIP36T__AES_P_REVISION__X_MAJOR__POS       8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_REVISION__CUSTOM   
 *
 * @BRIEF        Indicates a special version for a particular device. 
 *               Consequence of use may avoid use of standard Chip Support 
 *               Library (CSL) / Drivers. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_REVISION__CUSTOM             BITFIELD(7, 6)
#define AESEIP36T__AES_P_REVISION__CUSTOM__POS        6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_REVISION__Y_MINOR   
 *
 * @BRIEF        Minor Revision (Y), maintained by IP specification owner.  
 *               Y changes ONLY when:  
 *               (1) Features are scaled (up or down). Flexibility exists in 
 *               that this feature scalability may either be represented in 
 *               the Y change or a specific register in the IP that indicates 
 *               which features are exactly available.  
 *               (2) When feature creeps from Is-Not list to Is list. But 
 *               this may not be the case once it sees silicon; in which case 
 *               X will change.  
 *               Y does NOT change due to:  
 *               (1) Bug fixes  
 *               (2) Typos or clarifications  
 *               (3) major functional/feature change/addition/deletion. 
 *               Instead these changes may be reflected via R, S, X as 
 *               applicable.  
 *               Spec owner maintains a customer-invisible number 'S' which 
 *               changes due to:  
 *               (1) Typos/clarifications  
 *               (2) Bug documentation. Note that this bug is not due to a 
 *               spec change but due to implementation. Nevertheless, the 
 *               spec tracks the IP bugs. An RTL release (say for silicon 
 *               PG1.1) that occurs due to bug fix should document the 
 *               corresponding spec number (X.Y.S) in its release notes. - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_REVISION__Y_MINOR            BITFIELD(5, 0)
#define AESEIP36T__AES_P_REVISION__Y_MINOR__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_SYSCONFIG__MAP_CONTEXT_OUT_ON_DATA_OUT   
 *
 * @BRIEF        If set to '1' the two context out requests 
 *               (dma_req_context_out_en, Bit [8] above, and context_out 
 *               interrupt enable, Bit [3] of AES_IRQENABLE register) are 
 *               mapped on the corresponding data output request bit. In this 
 *               case, the original ?context out? bit values are ignored.  - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_SYSCONFIG__MAP_CONTEXT_OUT_ON_DATA_OUT BITFIELD(9, 9)
#define AESEIP36T__AES_P_SYSCONFIG__MAP_CONTEXT_OUT_ON_DATA_OUT__POS 9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_CONTEXT_OUT_EN   
 *
 * @BRIEF        If set to ?1?, the DMA context output request is enabled 
 *               (for context data out, e.g. TAG for authentication modes). - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_CONTEXT_OUT_EN BITFIELD(8, 8)
#define AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_CONTEXT_OUT_EN__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_CONTEXT_IN_EN   
 *
 * @BRIEF        If set to ?1?, the DMA context request is enabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_CONTEXT_IN_EN BITFIELD(7, 7)
#define AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_CONTEXT_IN_EN__POS 7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_DATA_OUT_EN   
 *
 * @BRIEF        If set to ?1?, the DMA output request is enabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_DATA_OUT_EN BITFIELD(6, 6)
#define AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_DATA_OUT_EN__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_DATA_IN_EN   
 *
 * @BRIEF        If set to ?1?, the DMA input request is enabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_DATA_IN_EN BITFIELD(5, 5)
#define AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_DATA_IN_EN__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_SYSSTATUS__RESETDONE   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_SYSSTATUS__RESETDONE         BITFIELD(0, 0)
#define AESEIP36T__AES_P_SYSSTATUS__RESETDONE__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_IRQSTATUS__CONTEXT_OUT   
 *
 * @BRIEF        This bit indicates authentication tag (and IV) interrupt(s) 
 *               is/are active and triggers the interrupt output.  - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_IRQSTATUS__CONTEXT_OUT       BITFIELD(3, 3)
#define AESEIP36T__AES_P_IRQSTATUS__CONTEXT_OUT__POS  3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_IRQSTATUS__DATA_OUT   
 *
 * @BRIEF        This bit indicates data output interrupt is active and 
 *               triggers the interrupt output. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_IRQSTATUS__DATA_OUT          BITFIELD(2, 2)
#define AESEIP36T__AES_P_IRQSTATUS__DATA_OUT__POS     2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_IRQSTATUS__DATA_IN   
 *
 * @BRIEF        This bit indicates data input interrupt is active and 
 *               triggers the interrupt output. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_IRQSTATUS__DATA_IN           BITFIELD(1, 1)
#define AESEIP36T__AES_P_IRQSTATUS__DATA_IN__POS      1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_IRQSTATUS__CONTEX_IN   
 *
 * @BRIEF        This bit indicates context interrupt is active and triggers 
 *               the interrupt output. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_IRQSTATUS__CONTEX_IN         BITFIELD(0, 0)
#define AESEIP36T__AES_P_IRQSTATUS__CONTEX_IN__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_IRQENABLE__CONTEXT_OUT   
 *
 * @BRIEF        This bit indicates authentication tag (and IV) interrupt(s) 
 *               is/are active and triggers the interrupt output.  - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_IRQENABLE__CONTEXT_OUT       BITFIELD(3, 3)
#define AESEIP36T__AES_P_IRQENABLE__CONTEXT_OUT__POS  3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_IRQENABLE__DATA_OUT   
 *
 * @BRIEF        This bit indicates data output interrupt is active and 
 *               triggers the interrupt output. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_IRQENABLE__DATA_OUT          BITFIELD(2, 2)
#define AESEIP36T__AES_P_IRQENABLE__DATA_OUT__POS     2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_IRQENABLE__DATA_IN   
 *
 * @BRIEF        This bit indicates data input interrupt is active and 
 *               triggers the interrupt output. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_IRQENABLE__DATA_IN           BITFIELD(1, 1)
#define AESEIP36T__AES_P_IRQENABLE__DATA_IN__POS      1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_IRQENABLE__CONTEX_IN   
 *
 * @BRIEF        This bit indicates context interrupt is active and triggers 
 *               the interrupt output. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_IRQENABLE__CONTEX_IN         BITFIELD(0, 0)
#define AESEIP36T__AES_P_IRQENABLE__CONTEX_IN__POS    0

    /* 
     * List of register bitfields values for component AESEIP36T
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__CCM__NO_CCM
 *
 * @BRIEF        Other mode selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__CCM__NO_CCM            0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__CCM__CCM
 *
 * @BRIEF        ccm mode selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__CCM__CCM               0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__GCM__NOOP
 *
 * @BRIEF        No operation - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__GCM__NOOP              0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__GCM__GCM01
 *
 * @BRIEF        GHASH with H loaded and Y0-encrypted forced to zero - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__GCM__GCM01             0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__GCM__GCMA10
 *
 * @BRIEF        GHASH with H loaded and Y0-encrypted calculated internally - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__GCM__GCMA10            0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__GCM__GCM11
 *
 * @BRIEF        Autonomous GHASH (both H and Y0-encrypted calculated 
 *               internally) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__GCM__GCM11             0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__CBCMAC__NO_CBCMAC
 *
 * @BRIEF        Other mode selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__CBCMAC__NO_CBCMAC      0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__CBCMAC__CBCMAC
 *
 * @BRIEF        cbcmac mode selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__CBCMAC__CBCMAC         0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__F9__NO_F9
 *
 * @BRIEF        Other mode selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__F9__NO_F9              0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__F9__F9
 *
 * @BRIEF        f9 selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__F9__F9                 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__F8__NO_F8
 *
 * @BRIEF        Other mode selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__F8__NO_F8              0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__F8__F8
 *
 * @BRIEF        f8 selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__F8__F8                 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__XTS__NOOP
 *
 * @BRIEF        No operation - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__XTS__NOOP              0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__XTS__XTS01
 *
 * @BRIEF        Previous/intermediate tweak value and ?j? loaded (value is 
 *               loaded via IV, j is loaded via the AAD length register) - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__XTS__XTS01             0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__XTS__XTS10
 *
 * @BRIEF        Key2, i and j loaded (i is loaded via IV, j is loaded via 
 *               the AAD length register) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__XTS__XTS10             0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__XTS__XTS11
 *
 * @BRIEF        Key2 and i loaded, j=0 (i is loaded via IV) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__XTS__XTS11             0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__CFB__NO_CFB
 *
 * @BRIEF        other mode selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__CFB__NO_CFB            0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__CFB__CFB
 *
 * @BRIEF        cfb selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__CFB__CFB               0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__ICM__NO_ICM
 *
 * @BRIEF        Other mode selected. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__ICM__NO_ICM            0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__ICM__ICM
 *
 * @BRIEF        ICM mode selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__ICM__ICM               0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__CTR_WIDTH__COUNTER32
 *
 * @BRIEF        Counter is 32 bits - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__CTR_WIDTH__COUNTER32   0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__CTR_WIDTH__COUNTER64
 *
 * @BRIEF        Counter is 64 bits - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__CTR_WIDTH__COUNTER64   0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__CTR_WIDTH__COUNTER96
 *
 * @BRIEF        Counter is 96 bits - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__CTR_WIDTH__COUNTER96   0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__CTR_WIDTH__COUNTER128
 *
 * @BRIEF        Counter is 128 bits - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__CTR_WIDTH__COUNTER128  0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__CTR__NOOP
 *
 * @BRIEF        Other mode selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__CTR__NOOP              0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__CTR__CTR
 *
 * @BRIEF        Counter mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__CTR__CTR               0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__MODE__ECB
 *
 * @BRIEF        ecb mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__MODE__ECB              0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__MODE__CBC
 *
 * @BRIEF        cbc mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__MODE__CBC              0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__KEY_SIZE__RESERVED
 *
 * @BRIEF        reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__KEY_SIZE__RESERVED     0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__KEY_SIZE__KEY128
 *
 * @BRIEF        Key is 128 bits. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__KEY_SIZE__KEY128       0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__KEY_SIZE__KEY192
 *
 * @BRIEF        Key is 192 bits - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__KEY_SIZE__KEY192       0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__KEY_SIZE__KEY256
 *
 * @BRIEF        Key is 256 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__KEY_SIZE__KEY256       0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__DIRECTION__DECRYPT
 *
 * @BRIEF        decryption is selected - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__DIRECTION__DECRYPT     0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_CTRL__DIRECTION__ENCRYPT
 *
 * @BRIEF        Encryption is selected - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_CTRL__DIRECTION__ENCRYPT     0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_REVISION__SCHEME__LEGACY
 *
 * @BRIEF        Legacy ASP or WTBU scheme - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_REVISION__SCHEME__LEGACY     0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_REVISION__SCHEME__H08
 *
 * @BRIEF        Highlander 0.8 scheme - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_REVISION__SCHEME__H08        0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_REVISION__CUSTOM__STANDARD
 *
 * @BRIEF        Non custom (standard) revision - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_REVISION__CUSTOM__STANDARD   0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_CONTEXT_OUT_EN__DMA_DIS
 *
 * @BRIEF        Dma disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_CONTEXT_OUT_EN__DMA_DIS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_CONTEXT_OUT_EN__DMA_EN
 *
 * @BRIEF        Dma enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_CONTEXT_OUT_EN__DMA_EN 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_CONTEXT_IN_EN__DMA_DIS
 *
 * @BRIEF        Dma disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_CONTEXT_IN_EN__DMA_DIS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_CONTEXT_IN_EN__DMA_EN
 *
 * @BRIEF        Dma enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_CONTEXT_IN_EN__DMA_EN 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_DATA_OUT_EN__DMA_DIS
 *
 * @BRIEF        Dma disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_DATA_OUT_EN__DMA_DIS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_DATA_OUT_EN__DMA_EN
 *
 * @BRIEF        Dma enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_DATA_OUT_EN__DMA_EN 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_DATA_IN_EN__DMA_DIS
 *
 * @BRIEF        Dma disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_DATA_IN_EN__DMA_DIS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_DATA_IN_EN__DMA_EN
 *
 * @BRIEF        Dma enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__DMA_REQ_DATA_IN_EN__DMA_EN 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__DIRECTBUSEN__KEY
 *
 * @BRIEF        Use the key registers - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__DIRECTBUSEN__KEY  0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__DIRECTBUSEN__DIRECT
 *
 * @BRIEF        Use the directbus - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__DIRECTBUSEN__DIRECT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__SIDLE__FORCEIDLE
 *
 * @BRIEF        Force Idle mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__SIDLE__FORCEIDLE  0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__SIDLE__NOIDLE
 *
 * @BRIEF        No idle - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__SIDLE__NOIDLE     0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__SIDLE__SMARTIDLE
 *
 * @BRIEF        Smart Idle mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__SIDLE__SMARTIDLE  0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__SIDLE__RESERVED
 *
 * @BRIEF        reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__SIDLE__RESERVED   0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__SOFTRESET__NOOP
 *
 * @BRIEF        No operation. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__SOFTRESET__NOOP   0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__SOFTRESET__SOFRESET
 *
 * @BRIEF        When '1', starts softreset sequnce. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__SOFTRESET__SOFRESET 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__AUTOIDLE__CLOCKS_ON
 *
 * @BRIEF        When '0', internal clocks are running. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__AUTOIDLE__CLOCKS_ON 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_S_SYSCONFIG__AUTOIDLE__CLOCKS_OFF
 *
 * @BRIEF        When '1', internal clocks are cut. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_S_SYSCONFIG__AUTOIDLE__CLOCKS_OFF 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__CCM__NO_CCM
 *
 * @BRIEF        Other mode selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__CCM__NO_CCM            0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__CCM__CCM
 *
 * @BRIEF        ccm mode selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__CCM__CCM               0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__GCM__NOOP
 *
 * @BRIEF        No operation - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__GCM__NOOP              0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__GCM__GCM01
 *
 * @BRIEF        GHASH with H loaded and Y0-encrypted forced to zero - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__GCM__GCM01             0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__GCM__GCMA10
 *
 * @BRIEF        GHASH with H loaded and Y0-encrypted calculated internally - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__GCM__GCMA10            0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__GCM__GCM11
 *
 * @BRIEF        Autonomous GHASH (both H and Y0-encrypted calculated 
 *               internally) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__GCM__GCM11             0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__CBCMAC__NO_CBCMAC
 *
 * @BRIEF        Other mode selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__CBCMAC__NO_CBCMAC      0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__CBCMAC__CBCMAC
 *
 * @BRIEF        cbcmac mode selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__CBCMAC__CBCMAC         0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__F9__NO_F9
 *
 * @BRIEF        Other mode selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__F9__NO_F9              0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__F9__F9
 *
 * @BRIEF        f9 selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__F9__F9                 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__F8__NO_F8
 *
 * @BRIEF        Other mode selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__F8__NO_F8              0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__F8__F8
 *
 * @BRIEF        f8 selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__F8__F8                 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__XTS__NOOP
 *
 * @BRIEF        No operation - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__XTS__NOOP              0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__XTS__XTS01
 *
 * @BRIEF        Previous/intermediate tweak value and ?j? loaded (value is 
 *               loaded via IV, j is loaded via the AAD length register) - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__XTS__XTS01             0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__XTS__XTS10
 *
 * @BRIEF        Key2, i and j loaded (i is loaded via IV, j is loaded via 
 *               the AAD length register) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__XTS__XTS10             0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__XTS__XTS11
 *
 * @BRIEF        Key2 and i loaded, j=0 (i is loaded via IV) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__XTS__XTS11             0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__CFB__NO_CFB
 *
 * @BRIEF        other mode selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__CFB__NO_CFB            0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__CFB__CFB
 *
 * @BRIEF        cfb selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__CFB__CFB               0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__ICM__NO_ICM
 *
 * @BRIEF        Other mode selected. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__ICM__NO_ICM            0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__ICM__ICM
 *
 * @BRIEF        ICM mode selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__ICM__ICM               0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__CTR_WIDTH__COUNTER32
 *
 * @BRIEF        Counter is 32 bits - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__CTR_WIDTH__COUNTER32   0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__CTR_WIDTH__COUNTER64
 *
 * @BRIEF        Counter is 64 bits - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__CTR_WIDTH__COUNTER64   0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__CTR_WIDTH__COUNTER96
 *
 * @BRIEF        Counter is 96 bits - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__CTR_WIDTH__COUNTER96   0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__CTR_WIDTH__COUNTER128
 *
 * @BRIEF        Counter is 128 bits - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__CTR_WIDTH__COUNTER128  0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__CTR__NOOP
 *
 * @BRIEF        Other mode selected - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__CTR__NOOP              0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__CTR__CTR
 *
 * @BRIEF        Counter mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__CTR__CTR               0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__MODE__ECB
 *
 * @BRIEF        ecb mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__MODE__ECB              0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__MODE__CBC
 *
 * @BRIEF        cbc mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__MODE__CBC              0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__KEY_SIZE__RESERVED
 *
 * @BRIEF        reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__KEY_SIZE__RESERVED     0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__KEY_SIZE__KEY128
 *
 * @BRIEF        Key is 128 bits. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__KEY_SIZE__KEY128       0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__KEY_SIZE__KEY192
 *
 * @BRIEF        Key is 192 bits - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__KEY_SIZE__KEY192       0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__KEY_SIZE__KEY256
 *
 * @BRIEF        Key is 256 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__KEY_SIZE__KEY256       0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__DIRECTION__DECRYPT
 *
 * @BRIEF        decryption is selected - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__DIRECTION__DECRYPT     0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_CTRL__DIRECTION__ENCRYPT
 *
 * @BRIEF        Encryption is selected - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_CTRL__DIRECTION__ENCRYPT     0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_REVISION__SCHEME__LEGACY
 *
 * @BRIEF        Legacy ASP or WTBU scheme - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_REVISION__SCHEME__LEGACY     0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_REVISION__SCHEME__H08
 *
 * @BRIEF        Highlander 0.8 scheme - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_REVISION__SCHEME__H08        0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_REVISION__CUSTOM__STANDARD
 *
 * @BRIEF        Non custom (standard) revision - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_REVISION__CUSTOM__STANDARD   0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_CONTEXT_OUT_EN__DMA_DIS
 *
 * @BRIEF        Dma disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_CONTEXT_OUT_EN__DMA_DIS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_CONTEXT_OUT_EN__DMA_EN
 *
 * @BRIEF        Dma enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_CONTEXT_OUT_EN__DMA_EN 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_CONTEXT_IN_EN__DMA_DIS
 *
 * @BRIEF        Dma disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_CONTEXT_IN_EN__DMA_DIS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_CONTEXT_IN_EN__DMA_EN
 *
 * @BRIEF        Dma enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_CONTEXT_IN_EN__DMA_EN 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_DATA_OUT_EN__DMA_DIS
 *
 * @BRIEF        Dma disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_DATA_OUT_EN__DMA_DIS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_DATA_OUT_EN__DMA_EN
 *
 * @BRIEF        Dma enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_DATA_OUT_EN__DMA_EN 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_DATA_IN_EN__DMA_DIS
 *
 * @BRIEF        Dma disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_DATA_IN_EN__DMA_DIS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_DATA_IN_EN__DMA_EN
 *
 * @BRIEF        Dma enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define AESEIP36T__AES_P_SYSCONFIG__DMA_REQ_DATA_IN_EN__DMA_EN 0x1ul

#ifdef __cplusplus
}
#endif
#endif                                                     /* __AESEIP36T_CRED_H 
                                                            */
