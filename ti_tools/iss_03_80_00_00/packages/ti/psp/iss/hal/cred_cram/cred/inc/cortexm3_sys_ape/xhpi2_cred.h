/** ==================================================================
 *  @file   xhpi2_cred.h                                                  
 *                                                                    
 *  @path   /ti/psp/iss/hal/cred_cram/cred/inc/cortexm3_sys_ape/                                                  
 *                                                                    
 *  @desc   This  File contains.                                      
 * ===================================================================
 *  Copyright (c) Texas Instruments Inc 2011, 2012                    
 *                                                                    
 *  Use of this software is controlled by the terms and conditions found
 *  in the license agreement under which this software has been supplied
 * ===================================================================*/

/* ============================================================================ 
 * TEXAS INSTRUMENTS INCORPORATED PROPRIETARY INFORMATION Property of Texas
 * Instruments For Unrestricted Internal Use Only Unauthorized reproduction
 * and/or distribution is strictly prohibited.  This product is protected
 * under copyright law and trade secret law as an unpublished work.  Created
 * 2008, (C) Copyright 2008 Texas Instruments.  All rights reserved. */

/**
 *  @Component:   XHPI2
 *
 *  @Filename:    xhpi2_cred.h
 *
 *  @Description: Component description is not available
 *
 *  Generated by: Socrates CRED generator prototype
 *
    *//* ====================================================================== */

#ifndef __XHPI2_CRED_H
#define __XHPI2_CRED_H

#ifdef __cplusplus
extern "C" {
#endif

    /* 
     * Instance XHPI2 of component XHPI2 mapped in MONICA at address 0x4A0F0000
     */

                                                                              /*-------------------------------------------------------------------------*//**
 * @DEFINITION   BITFIELD
 *
 * @BRIEF        The bitfield must be defined according to register width
 *               of the component - 64/32/16/8
 *
    *//*------------------------------------------------------------------------ */
#undef BITFIELD
#define BITFIELD BITFIELD_32

    /* 
     *  List of Register arrays for component XHPI2
     *
     */

    /* 
     *  List of bundle arrays for component XHPI2
     *
     */

    /* 
     *  List of bundles for component XHPI2
     *
     */

    /* 
     * List of registers for component XHPI2
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_REVISION
 *
 * @BRIEF        Module revision 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_REVISION                               0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CTRL
 *
 * @BRIEF        XHPI control 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CTRL                                   0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CFG
 *
 * @BRIEF        XHPI configuration 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CFG                                    0x8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CMD0
 *
 * @BRIEF        Command code 0 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CMD0                                   0xCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CMD1
 *
 * @BRIEF        Command code 1 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CMD1                                   0x10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CMD2
 *
 * @BRIEF        Command code 2 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CMD2                                   0x14ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CMD3
 *
 * @BRIEF        Command code 2 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CMD3                                   0x18ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_ADDR_OFST
 *
 * @BRIEF        Host address offset 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_ADDR_OFST                              0x1Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_MSG_HOST
 *
 * @BRIEF        Message input, from host to slave 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_MSG_HOST                               0x20ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_MSG_SLAVE
 *
 * @BRIEF        Message output, from slave to host 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_MSG_SLAVE                              0x24ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_INTR_STAT
 *
 * @BRIEF        Host interrupt status 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_INTR_STAT                              0x28ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_RD_BYTECNT
 *
 * @BRIEF        Read byte count 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_RD_BYTECNT                             0x2Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_WR_BYTECNT
 *
 * @BRIEF        Write byte count 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_WR_BYTECNT                             0x30ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_IODFT0
 *
 * @BRIEF        IODFT configuration 0 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_IODFT0                                 0x60ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_IODFT1
 *
 * @BRIEF        IODFT configuration 1 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_IODFT1                                 0x64ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_IODFT2
 *
 * @BRIEF        IODFT configuration 2 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_IODFT2                                 0x68ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_IODFT3
 *
 * @BRIEF        IODFT configuration 3 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_IODFT3                                 0x6Cul

    /* 
     * List of register bitfields for component XHPI2
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_REVISION__REV   
 *
 * @BRIEF        Revision number - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_REVISION__REV                     BITFIELD(7, 0)
#define XHPI2__XHPI_REVISION__REV__POS                0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CTRL__IDLE_MODE   
 *
 * @BRIEF        Configuration of the local target state management mode.  By 
 *               definition, target can handle read/write transaction as long 
 *               as it is out of IDLE state. 
 *               0: Force-idle mode: local target's idle state follows 
 *               (acknowledges) the system's idle requests unconditionally, 
 *               i.e. regardless of the IP module's internal requirements.  
 *               Backup mode, for debug only.  
 *               1: No-idle mode: local target never enters idle state.  
 *               Backup mode, for debug only.  
 *               2: Smart-idle mode: local target's idle state eventually 
 *               follows (acknowledges) the system's idle requests, depending 
 *               on the IP module's internal requirements.  IP module shall 
 *               not generate (IRQ- or DMA-request-related) wakeup events.  
 *               3: Smart-idle wakeup-capable mode: local target's idle state 
 *               eventually follows (acknowledges) the system's idle 
 *               requests, depending on the IP module's internal 
 *               requirements.  IP module may generate (IRQ- or 
 *               DMA-request-related) wakeup events when in idle state.  Mode 
 *               is only relevant if the appropriate IP module "swakeup" 
 *               output(s) is (are) implemented. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CTRL__IDLE_MODE                   BITFIELD(5, 4)
#define XHPI2__XHPI_CTRL__IDLE_MODE__POS              4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CTRL__STANDBY_MODE   
 *
 * @BRIEF        Configuration of the local initiator state management mode.  
 *               By definition, initiator may generate read/write transaction 
 *               as long as it is out of STANDBY state. 
 *               0: Force-standby mode: local initiator is unconditionally 
 *               placed in standby state.  Backup mode, for debug only.  
 *               1: No-standby mode: local initiator is unconditionally 
 *               placed out of standby state.  Backup mode, for debug only.  
 *               2: Smart-standby mode: local initiator standby status 
 *               depends on local conditions, i.e. the module's functional 
 *               requirement from the initiator.  IP module shall not 
 *               generate (initiator-related) wakeup events.  
 *               3: Smart-Standby wakeup-capable mode: local initiator 
 *               standby status depends on local conditions, i.e. the 
 *               module's functional requirement from the initiator.  IP 
 *               module may generate (master-related) wakeup events when in 
 *               standby state.  Mode is only relevant if the appropriate IP 
 *               module "mwakeup" output is implemented. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CTRL__STANDBY_MODE                BITFIELD(3, 2)
#define XHPI2__XHPI_CTRL__STANDBY_MODE__POS           2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CTRL__SOFT_RESET   
 *
 * @BRIEF        Read 0: Reset done, no pending action. 
 *               Write 0: No action. 
 *               Write 1: Initiate software reset. 
 *               Read 1: Reset (software or other) ongoing. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CTRL__SOFT_RESET                  BITFIELD(1, 1)
#define XHPI2__XHPI_CTRL__SOFT_RESET__POS             1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CTRL__AUTOGATING   
 *
 * @BRIEF        Internal clock gating on OCP and functional clocks 
 *               0: clocks are free running. 
 *               1: clocks are gated off in subblocks that are not needed for 
 *               operation. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CTRL__AUTOGATING                  BITFIELD(0, 0)
#define XHPI2__XHPI_CTRL__AUTOGATING__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CFG__EN_CMD_ERR   
 *
 * @BRIEF        Interrupt enable for CMD_ERR interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CFG__EN_CMD_ERR                   BITFIELD(31, 31)
#define XHPI2__XHPI_CFG__EN_CMD_ERR__POS              31

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CFG__EN_RD_QUE_OVF_ERR_CPU   
 *
 * @BRIEF        Interrupt enable for RD_QUE_OVF_ERR_CPU interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CFG__EN_RD_QUE_OVF_ERR_CPU        BITFIELD(30, 30)
#define XHPI2__XHPI_CFG__EN_RD_QUE_OVF_ERR_CPU__POS   30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CFG__EN_CMD_DROP_ERR_CPU   
 *
 * @BRIEF        Interrupt enable for CMD_DROP_ERR_CPU interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CFG__EN_CMD_DROP_ERR_CPU          BITFIELD(29, 29)
#define XHPI2__XHPI_CFG__EN_CMD_DROP_ERR_CPU__POS     29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CFG__EN_WR_AFIFO_ERR_CPU   
 *
 * @BRIEF        Interrupt enable for WR_AFIFO_ERR_CPU interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CFG__EN_WR_AFIFO_ERR_CPU          BITFIELD(28, 28)
#define XHPI2__XHPI_CFG__EN_WR_AFIFO_ERR_CPU__POS     28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CFG__EN_WR_BUF_OVF_ERR_CPU   
 *
 * @BRIEF        Interrupt enable for WR_BUF_OVF_ERR_CPU interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CFG__EN_WR_BUF_OVF_ERR_CPU        BITFIELD(27, 27)
#define XHPI2__XHPI_CFG__EN_WR_BUF_OVF_ERR_CPU__POS   27

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CFG__EN_RD_UND_ERR_CPU   
 *
 * @BRIEF        Interrupt enable for RD_UND_ERR_CPU interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CFG__EN_RD_UND_ERR_CPU            BITFIELD(26, 26)
#define XHPI2__XHPI_CFG__EN_RD_UND_ERR_CPU__POS       26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CFG__EN_MSG_SLAVE_CPU   
 *
 * @BRIEF        Interrupt enable for MSG_SLAVE_CPU interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CFG__EN_MSG_SLAVE_CPU             BITFIELD(25, 25)
#define XHPI2__XHPI_CFG__EN_MSG_SLAVE_CPU__POS        25

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CFG__EN_MSG_HOST   
 *
 * @BRIEF        Interrupt enable for MSG_HOST interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CFG__EN_MSG_HOST                  BITFIELD(24, 24)
#define XHPI2__XHPI_CFG__EN_MSG_HOST__POS             24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CFG__RDRDY_LEVEL   
 *
 * @BRIEF        Data level for issuing read data ready interrupt 
 *               (should not be more than local memory size) 
 *               0: 64 bytes 
 *               1: 128 bytes 
 *               2: 256 bytes 
 *               3: 512 bytes 
 *               4: 1K bytes 
 *               5: 2K bytes 
 *               6: 4K bytes 
 *               7: 8K bytes - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CFG__RDRDY_LEVEL                  BITFIELD(22, 20)
#define XHPI2__XHPI_CFG__RDRDY_LEVEL__POS             20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CFG__RDRDY_LEN   
 *
 * @BRIEF        Read data ready interrupt length  
 *               0: 2 bus cycles 
 *               1: 4 bus cycles  
 *               2: 6 bus cycles 
 *               3: 8 bus cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CFG__RDRDY_LEN                    BITFIELD(17, 16)
#define XHPI2__XHPI_CFG__RDRDY_LEN__POS               16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CFG__OCP_TRANS_SIZE   
 *
 * @BRIEF        Size of read/write transaction to system OCP bus. 
 *               0: 16 bytes 
 *               1: 32 bytes 
 *               2: 64 bytes 
 *               3: 128 bytes 
 *               4~15: reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CFG__OCP_TRANS_SIZE               BITFIELD(15, 12)
#define XHPI2__XHPI_CFG__OCP_TRANS_SIZE__POS          12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CFG__MODE   
 *
 * @BRIEF        Mode of operation 
 *               0: command-data mode 
 *               1: address-data mode 
 *               Reset value DEFAULT_MODE, provided as tie-off at module 
 *               boundary - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CFG__MODE                         BITFIELD(9, 9)
#define XHPI2__XHPI_CFG__MODE__POS                    9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CFG__RDRDY_POL   
 *
 * @BRIEF        Read data ready interrupt polarity 
 *               0: active low pulse 
 *               1: active high pulse 
 *               Reset value DEFAULT_RDRDY_POL, provided as tie-off at module 
 *               boundary - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CFG__RDRDY_POL                    BITFIELD(8, 8)
#define XHPI2__XHPI_CFG__RDRDY_POL__POS               8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CFG__IF_WIDTH   
 *
 * @BRIEF        Interface bit width 
 *               0: 8-bit 
 *               1: 16-bit 
 *               Reset value DEFAULT_IF_WIDTH, provided as tie-off at module 
 *               boundary - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CFG__IF_WIDTH                     BITFIELD(7, 7)
#define XHPI2__XHPI_CFG__IF_WIDTH__POS                7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CFG__RESERVED4   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CFG__RESERVED4                    BITFIELD(6, 6)
#define XHPI2__XHPI_CFG__RESERVED4__POS               6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CFG__TECTRL   
 *
 * @BRIEF        TE output pin control 
 *               0:  TE = 0 
 *               1:  TE = VSYNC from display controller 
 *               2:  TE = 1 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CFG__TECTRL                       BITFIELD(5, 4)
#define XHPI2__XHPI_CFG__TECTRL__POS                  4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CFG__ENDIAN   
 *
 * @BRIEF        Endianess of host data bus, let b[0], b[1], b[2], b[3] be 
 *               data bytes in transmission order. 
 *               Note that the module supports little endian for the internal 
 *               OCP interfaces. 
 *               0: Little endian, b[0] is the lowest byte 
 *               1: Big endian, b[0] is the highest byte - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CFG__ENDIAN                       BITFIELD(3, 2)
#define XHPI2__XHPI_CFG__ENDIAN__POS                  2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CFG__APOL   
 *
 * @BRIEF        HPA0 pin polarity: 
 *               0: HPA0 = 0 indicates command or address 
 *                   HPA0 = 1 indicates data or argument 
 *               1: HPA0 = 0 indicates data or argument 
 *                   HPA0 = 1 indicates command or address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CFG__APOL                         BITFIELD(1, 1)
#define XHPI2__XHPI_CFG__APOL__POS                    1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CFG__HPIEN   
 *
 * @BRIEF        Module enable/disable: 
 *               0: disable  
 *               1: enable - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CFG__HPIEN                        BITFIELD(0, 0)
#define XHPI2__XHPI_CFG__HPIEN__POS                   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CMD0__INTR   
 *
 * @BRIEF        Interrupt command code - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CMD0__INTR                        BITFIELD(31, 24)
#define XHPI2__XHPI_CMD0__INTR__POS                   24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CMD0__WRDATA   
 *
 * @BRIEF        Write_data command code - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CMD0__WRDATA                      BITFIELD(23, 16)
#define XHPI2__XHPI_CMD0__WRDATA__POS                 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CMD0__SETUPWR   
 *
 * @BRIEF        Setup_write command code - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CMD0__SETUPWR                     BITFIELD(15, 8)
#define XHPI2__XHPI_CMD0__SETUPWR__POS                8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CMD0__NOP   
 *
 * @BRIEF        NOP command code - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CMD0__NOP                         BITFIELD(7, 0)
#define XHPI2__XHPI_CMD0__NOP__POS                    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CMD1__SETUPRD   
 *
 * @BRIEF        Setup_read command code - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CMD1__SETUPRD                     BITFIELD(31, 24)
#define XHPI2__XHPI_CMD1__SETUPRD__POS                24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CMD1__SETWIDTH   
 *
 * @BRIEF        Set_width_stride command code - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CMD1__SETWIDTH                    BITFIELD(23, 16)
#define XHPI2__XHPI_CMD1__SETWIDTH__POS               16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CMD1__SETWINEND   
 *
 * @BRIEF        Set_win_end command code - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CMD1__SETWINEND                   BITFIELD(15, 8)
#define XHPI2__XHPI_CMD1__SETWINEND__POS              8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CMD1__SETWINSTART   
 *
 * @BRIEF        Set_win_start command code - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CMD1__SETWINSTART                 BITFIELD(7, 0)
#define XHPI2__XHPI_CMD1__SETWINSTART__POS            0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CMD2__RDWRBCNT   
 *
 * @BRIEF        read_wr_bytecnt command code - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CMD2__RDWRBCNT                    BITFIELD(31, 24)
#define XHPI2__XHPI_CMD2__RDWRBCNT__POS               24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CMD2__RDRDBCNT   
 *
 * @BRIEF        Read_rd_bytecnt command code - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CMD2__RDRDBCNT                    BITFIELD(23, 16)
#define XHPI2__XHPI_CMD2__RDRDBCNT__POS               16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CMD2__RDSTAT   
 *
 * @BRIEF        Read_status command code - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CMD2__RDSTAT                      BITFIELD(15, 8)
#define XHPI2__XHPI_CMD2__RDSTAT__POS                 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CMD2__RDDATA   
 *
 * @BRIEF        Read_data command code - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CMD2__RDDATA                      BITFIELD(7, 0)
#define XHPI2__XHPI_CMD2__RDDATA__POS                 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CMD3__RDMSG   
 *
 * @BRIEF        Read_msg command code - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CMD3__RDMSG                       BITFIELD(15, 8)
#define XHPI2__XHPI_CMD3__RDMSG__POS                  8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_CMD3__RDBUFSTAT   
 *
 * @BRIEF        Read_buffer_status command code - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_CMD3__RDBUFSTAT                   BITFIELD(7, 0)
#define XHPI2__XHPI_CMD3__RDBUFSTAT__POS              0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_ADDR_OFST__OFST   
 *
 * @BRIEF        Address offset to translate host ?issued address to system 
 *               memory address. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_ADDR_OFST__OFST                   BITFIELD(31, 0)
#define XHPI2__XHPI_ADDR_OFST__OFST__POS              0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_MSG_HOST__MSG   
 *
 * @BRIEF        Host message input, captured from the argument of interrupt 
 *               command in command-data mode, or MSG write in address-data 
 *               mode. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_MSG_HOST__MSG                     BITFIELD(31, 0)
#define XHPI2__XHPI_MSG_HOST__MSG__POS                0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_MSG_SLAVE__MSG   
 *
 * @BRIEF        Host message output, to return to host with read_msg command 
 *               or reading MSG location - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_MSG_SLAVE__MSG                    BITFIELD(31, 0)
#define XHPI2__XHPI_MSG_SLAVE__MSG__POS               0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_INTR_STAT__CMD_ERR   
 *
 * @BRIEF        Command error interrupt status 
 *               Set when host sends unrecognized command code 
 *               Clear when system processor writes 1 to this bit - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_INTR_STAT__CMD_ERR                BITFIELD(7, 7)
#define XHPI2__XHPI_INTR_STAT__CMD_ERR__POS           7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_INTR_STAT__RD_QUE_OVF_ERR_CPU   
 *
 * @BRIEF        Read queue overflow error interrupt status 
 *               Set when host sends setup_read when there're already 2 
 *               pending 
 *               Clear when system processor writes 1 to this bit - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_INTR_STAT__RD_QUE_OVF_ERR_CPU     BITFIELD(6, 6)
#define XHPI2__XHPI_INTR_STAT__RD_QUE_OVF_ERR_CPU__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_INTR_STAT__CMD_DROP_ERR_CPU   
 *
 * @BRIEF        Command drop error interrupt status 
 *               Set when host commands are dropped after error occurred 
 *               Clear when system processor writes 1 to this bit - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_INTR_STAT__CMD_DROP_ERR_CPU       BITFIELD(5, 5)
#define XHPI2__XHPI_INTR_STAT__CMD_DROP_ERR_CPU__POS  5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_INTR_STAT__WR_AFIFO_ERR_CPU   
 *
 * @BRIEF        Write asynchronous FIFO error interrupt status 
 *               Set when asynchronous error occurs 
 *               Clear when system processor writes 1 to this bit - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_INTR_STAT__WR_AFIFO_ERR_CPU       BITFIELD(4, 4)
#define XHPI2__XHPI_INTR_STAT__WR_AFIFO_ERR_CPU__POS  4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_INTR_STAT__WR_BUF_OVF_ERR_CPU   
 *
 * @BRIEF        Write overflow error interrupt status 
 *               Set when write overflow occurs 
 *               Clear when system processor writes 1 to this bit - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_INTR_STAT__WR_BUF_OVF_ERR_CPU     BITFIELD(3, 3)
#define XHPI2__XHPI_INTR_STAT__WR_BUF_OVF_ERR_CPU__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_INTR_STAT__RD_UND_ERR_CPU   
 *
 * @BRIEF        Read underrun error interrupt status 
 *               Set when underrun occurs 
 *               Clear when system processor writes 1 to this bit - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_INTR_STAT__RD_UND_ERR_CPU         BITFIELD(2, 2)
#define XHPI2__XHPI_INTR_STAT__RD_UND_ERR_CPU__POS    2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_INTR_STAT__MSG_SLAVE_CPU   
 *
 * @BRIEF        Message from slave status 
 *               Set when host reads the status word 
 *               Clear when system processor writes 1 to this bit - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_INTR_STAT__MSG_SLAVE_CPU          BITFIELD(1, 1)
#define XHPI2__XHPI_INTR_STAT__MSG_SLAVE_CPU__POS     1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_INTR_STAT__MSG_HOST   
 *
 * @BRIEF        Messge from host interrupt status 
 *               Set when messge from host is pending 
 *               Clear when system processor writes 1 to this bit - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_INTR_STAT__MSG_HOST               BITFIELD(0, 0)
#define XHPI2__XHPI_INTR_STAT__MSG_HOST__POS          0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_RD_BYTECNT__CNT   
 *
 * @BRIEF        Successfully transferred read byte count - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_RD_BYTECNT__CNT                   BITFIELD(31, 0)
#define XHPI2__XHPI_RD_BYTECNT__CNT__POS              0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_WR_BYTECNT__CNT   
 *
 * @BRIEF        Successfully transferred write byte count - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_WR_BYTECNT__CNT                   BITFIELD(31, 0)
#define XHPI2__XHPI_WR_BYTECNT__CNT__POS              0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_IODFT0__VAL3   
 *
 * @BRIEF        4th value to be driven out by the IODFT sequencer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_IODFT0__VAL3                      BITFIELD(31, 24)
#define XHPI2__XHPI_IODFT0__VAL3__POS                 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_IODFT0__VAL2   
 *
 * @BRIEF        3rd value to be driven out by the IODFT sequencer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_IODFT0__VAL2                      BITFIELD(23, 16)
#define XHPI2__XHPI_IODFT0__VAL2__POS                 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_IODFT0__VAL1   
 *
 * @BRIEF        2nd value to be driven out by the IODFT sequencer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_IODFT0__VAL1                      BITFIELD(15, 8)
#define XHPI2__XHPI_IODFT0__VAL1__POS                 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_IODFT0__VAL0   
 *
 * @BRIEF        1st value to be driven out by the IODFT sequencer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_IODFT0__VAL0                      BITFIELD(7, 0)
#define XHPI2__XHPI_IODFT0__VAL0__POS                 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_IODFT1__BUSY   
 *
 * @BRIEF        When this bit is set to ?1?, it indicates that the IODFT 
 *               loopback engine is currently busy (driving an emulated host 
 *               transaction/command as programmed by user previously). 
 *               User must poll this bit to check is this bit is cleared 
 *               before a new transaction/command can be issued. 
 *               Once this bit is set, any new value programmed by user to 
 *               IODFT0, IODFT1, IODFT2, IODFT3 registers will be ignored, in 
 *               other words, those registers are locked. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_IODFT1__BUSY                      BITFIELD(31, 31)
#define XHPI2__XHPI_IODFT1__BUSY__POS                 31

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_IODFT1__IODFT_EN   
 *
 * @BRIEF        Enables the IODFT mode when set to 1. 
 *               This selects the OCP clock as the source to drive host 
 *               interface. The output enable will be disabled when IODFT is 
 *               enabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_IODFT1__IODFT_EN                  BITFIELD(30, 30)
#define XHPI2__XHPI_IODFT1__IODFT_EN__POS             30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_IODFT1__READ_TRANS   
 *
 * @BRIEF        When asserted, indicates Read transaction is to be issued. 
 *               During Read transaction, ?output enable/OE? (read clock) 
 *               would be asserted in place of ?write enable/WE? (write 
 *               clock) during VALn or DATAn phase of sequence (1) to (4). 
 *               When de-asserted, Write transaction will be issued. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_IODFT1__READ_TRANS                BITFIELD(29, 29)
#define XHPI2__XHPI_IODFT1__READ_TRANS__POS           29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_IODFT1__DATA_8BIT   
 *
 * @BRIEF        When asserted, enables 8 bit data mode. When de-asserted, 
 *               enables 16 bit data mode. 
 *               The sequencer, pattern generator, MISR behavior will change 
 *               with this setting. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_IODFT1__DATA_8BIT                 BITFIELD(28, 28)
#define XHPI2__XHPI_IODFT1__DATA_8BIT__POS            28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_IODFT1__CMD   
 *
 * @BRIEF        The command value to be driven out by the sequencer. User is 
 *               allowed to program any value here. 
 *               In ?Command data? mode, If CMD[7:0] value matches 
 *               ?write_data? command value, then sequence (2) is issued. In 
 *               all other cases, Sequence (1) is issued. 
 *               In ?Address data? mode, If CMD[8:0] value matches 0x100 or 
 *               0x080 value, then sequence (4) is issued. In all other 
 *               cases, Sequence (3) is issued. 
 *               Write to this field has no effect when IODFT_EN is clear. 
 *               Once this field is programmed the sequencer will immediately 
 *               enter busy state. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_IODFT1__CMD                       BITFIELD(24, 16)
#define XHPI2__XHPI_IODFT1__CMD__POS                  16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_IODFT1__LEN   
 *
 * @BRIEF        Length, always a multiple of 4, i.e., LEN[1:0] is always 
 *               assumed to be "00". - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_IODFT1__LEN                       BITFIELD(15, 0)
#define XHPI2__XHPI_IODFT1__LEN__POS                  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_IODFT2__PATTERN   
 *
 * @BRIEF        Initial pattern for the pattern generator. This initial 
 *               pattern is loaded into the pattern generator when the 
 *               sequencer is running the ?Write_Data? transaction/sequence. 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_IODFT2__PATTERN                   BITFIELD(31, 16)
#define XHPI2__XHPI_IODFT2__PATTERN__POS              16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_IODFT2__PC   
 *
 * @BRIEF        Pattern Code. Defines the type of pattern that is selected 
 *               for the artificial pattern generation logic in the LDFT. 
 *               Modes (Output PG Code): 
 *                  000 = Reserved 
 *                  001 = random XOR  
 *                  010 = random XNOR 
 *                  011 = 4-bit shifter 
 *                  100 = hold current register value 
 *                  101 ? 111:  reserved. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_IODFT2__PC                        BITFIELD(2, 0)
#define XHPI2__XHPI_IODFT2__PC__POS                   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   XHPI2__XHPI_IODFT3__MISR   
 *
 * @BRIEF        MISR output. Provides the 16-bit MISR value for the last 
 *               Read transaction - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define XHPI2__XHPI_IODFT3__MISR                      BITFIELD(15, 0)
#define XHPI2__XHPI_IODFT3__MISR__POS                 0

    /* 
     * List of register bitfields values for component XHPI2
     *
     */

#ifdef __cplusplus
}
#endif
#endif                                                     /* __XHPI2_CRED_H */
