/** ==================================================================
 *  @file   usb_otghs_16_cred.h                                                  
 *                                                                    
 *  @path   /ti/psp/iss/hal/cred_cram/cred/inc/cortexm3_sys_ape/                                                  
 *                                                                    
 *  @desc   This  File contains.                                      
 * ===================================================================
 *  Copyright (c) Texas Instruments Inc 2011, 2012                    
 *                                                                    
 *  Use of this software is controlled by the terms and conditions found
 *  in the license agreement under which this software has been supplied
 * ===================================================================*/

/* ============================================================================ 
 * TEXAS INSTRUMENTS INCORPORATED PROPRIETARY INFORMATION Property of Texas
 * Instruments For Unrestricted Internal Use Only Unauthorized reproduction
 * and/or distribution is strictly prohibited.  This product is protected
 * under copyright law and trade secret law as an unpublished work.  Created
 * 2008, (C) Copyright 2008 Texas Instruments.  All rights reserved. */

/**
 *  @Component:   USB_OTGHS_16
 *
 *  @Filename:    usb_otghs_16_cred.h
 *
 * *  @Description: This component represents the USB_OTGHS registers (16bit 
 *                registers) except ENDPOINT0 indexed registers 
 *
 *  Generated by: Socrates CRED generator prototype
 *
    *//* ====================================================================== */

#ifndef __USB_OTGHS_16_CRED_H
#define __USB_OTGHS_16_CRED_H

#ifdef __cplusplus
extern "C" {
#endif

    /* 
     * Instance USB_OTGHS_16 of component USB_OTGHS_16 mapped in USB_OTGHS_16 at address 0x0
     */

                                                                              /*-------------------------------------------------------------------------*//**
 * @DEFINITION   BITFIELD
 *
 * @BRIEF        The bitfield must be defined according to register width
 *               of the component - 64/32/16/8
 *
    *//*------------------------------------------------------------------------ */
#undef BITFIELD
#define BITFIELD BITFIELD_16

    /* 
     *  List of Register arrays for component USB_OTGHS_16
     *
     */

    /* 
     *  List of bundle arrays for component USB_OTGHS_16
     *
     */
                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DMA_16BIT
 *
 * @BRIEF        Bundle description is not available
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DMA_16BIT                            0x204ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DMA_16BIT__ELSIZE
 *
 * @BRIEF        DMA_16BIT bundle array element size in Bytes
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DMA_16BIT__ELSIZE                    0x10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DMA_16BIT__NELEMS
 *
 * @BRIEF        DMA_16BIT bundle array number of elements
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DMA_16BIT__NELEMS                    8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__CSR_EPN_16BIT
 *
 * @BRIEF        Bundle description is not available
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__CSR_EPN_16BIT                        0x110ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__CSR_EPN_16BIT__ELSIZE
 *
 * @BRIEF        CSR_EPN_16BIT bundle array element size in Bytes
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__CSR_EPN_16BIT__ELSIZE                0x10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__CSR_EPN_16BIT__NELEMS
 *
 * @BRIEF        CSR_EPN_16BIT bundle array number of elements
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__CSR_EPN_16BIT__NELEMS                15

    /* 
     *  List of bundles for component USB_OTGHS_16
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DMA_CNTL__OFFSET
 *
 * @BRIEF        Register DMA_CNTL offset in bundle DMA_16BIT 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DMA_CNTL__OFFSET                     0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__CSR_EP0_16BIT
 *
 * @BRIEF        Bundle description is not available
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__CSR_EP0_16BIT                        0x100ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__CSR0__OFFSET
 *
 * @BRIEF        Register CSR0 offset in bundle CSR_EP0_16BIT 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__CSR0__OFFSET                         0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__COUNT0__OFFSET
 *
 * @BRIEF        Register COUNT0 offset in bundle CSR_EP0_16BIT 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__COUNT0__OFFSET                       0x8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXMAXP__OFFSET
 *
 * @BRIEF        Register TXMAXP offset in bundle CSR_EPN_16BIT 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXMAXP__OFFSET                       0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXCSR__OFFSET
 *
 * @BRIEF        Register TXCSR offset in bundle CSR_EPN_16BIT 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXCSR__OFFSET                        0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXMAXP__OFFSET
 *
 * @BRIEF        Register RXMAXP offset in bundle CSR_EPN_16BIT 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXMAXP__OFFSET                       0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXCSR__OFFSET
 *
 * @BRIEF        Register RXCSR offset in bundle CSR_EPN_16BIT 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXCSR__OFFSET                        0x6ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXCOUNT__OFFSET
 *
 * @BRIEF        Register RXCOUNT offset in bundle CSR_EPN_16BIT 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXCOUNT__OFFSET                      0x8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_CSR_EP_16BIT
 *
 * @BRIEF        Bundle description is not available
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_CSR_EP_16BIT                     0x10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_TXMAXP__OFFSET
 *
 * @BRIEF        Register DYN_TXMAXP offset in bundle DYN_CSR_EP_16BIT 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_TXMAXP__OFFSET                   0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_TXCSR__OFFSET
 *
 * @BRIEF        Register DYN_TXCSR offset in bundle DYN_CSR_EP_16BIT 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_TXCSR__OFFSET                    0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXMAXP__OFFSET
 *
 * @BRIEF        Register DYN_RXMAXP offset in bundle DYN_CSR_EP_16BIT 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXMAXP__OFFSET                   0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXCSR__OFFSET
 *
 * @BRIEF        Register DYN_RXCSR offset in bundle DYN_CSR_EP_16BIT 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXCSR__OFFSET                    0x6ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXCOUNT__OFFSET
 *
 * @BRIEF        Register DYN_RXCOUNT offset in bundle DYN_CSR_EP_16BIT 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXCOUNT__OFFSET                  0x8ul

    /* 
     * List of registers for component USB_OTGHS_16
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX
 *
 * @BRIEF        PERIPH MODE: 
 *               Interrupt status for Tx endpoints 1-15 and endpoint 0.  
 *               HOST MODE: not accessible 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX                               0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX
 *
 * @BRIEF        Interrupt status for Rx endpoints 1-15. Status is cleared on 
 *               read. 
 *               Bits relating to endpoints that have not been configured 
 *               will always return 0. 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX                               0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE
 *
 * @BRIEF        Interrupt enable for Tx endpoints 1-15, and endpoint 0. All 
 *               endpoints are enabled (1) by default. 
 *               Bits relating to endpoints that have not been configured 
 *               will always return 0. 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE                              0x6ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE
 *
 * @BRIEF        1. Interrupt enable for Tx endpoints 1-15. All endpoints are 
 *               enabled (1) by default. 
 *               Bits relating to endpoints that have not been configured 
 *               will always return 0. 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE                              0x8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__FRAME
 *
 * @BRIEF        Frame number received in the last-seen Start-Of-[micro]Frame 
 *               (SOF) token on the USB bus. 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__FRAME                                0xCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_TXMAXP
 *
 * @BRIEF        1. Defines the maximum amount of data that can be 
 *               transferred through the selected Tx endpoint in a single 
 *               operation, itself composed of one or several transactions. 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_TXMAXP                           0x10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_TXCSR
 *
 * @BRIEF        INTERPRETATION OF THE BITFIELD OF THIS REGISTER DIFFERS IN 
 *               HOST AND PERIPHERAL MODE 
 *               Control and status bits for transfers through the 
 *               currently-selected Tx endpoint. 
 *               Provides control and status bits for transfers through the 
 *               currently-selected TX endpoint. There 
 *               is a TxCSRL register for each configured TX endpoint (not 
 *               including Endpoint 0). Note: The interpretation of the 
 *               register 
 *               depends on whether the MUSBMHDRC is acting as a peripheral 
 *               or as a host. Users should also be aware that the value 
 *               returned 
 *               when the register is read reflects the status attained e.g. 
 *               as a result of writing to the register. 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_TXCSR                            0x12ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXMAXP
 *
 * @BRIEF        Defines the maximum amount of data that can be transferred 
 *               through the selected Rx endpoint in a single operation, 
 *               itself composed of one or several transactions. 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXMAXP                           0x14ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXCSR
 *
 * @BRIEF        INTERPRETATION OF THE BITFIELD OF THIS REGISTER DIFFERS IN 
 *               HOST AND PERIPHERAL MODE 
 *               Provides control and status bits for transfers through the 
 *               currently-selected Rx endpoint. There is 
 *               a RxCSRL register for each configured Rx endpoint (not 
 *               including Endpoint 0). Note: The interpretation of the 
 *               register depends 
 *               on whether the MUSBMHDRC is acting as a peripheral or as a 
 *               host. Users should also be aware that the value returned 
 *               when the 
 *               register is read reflects the status attained e.g. as a 
 *               result of writing to the register 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXCSR                            0x16ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXCOUNT
 *
 * @BRIEF        holds the number of data bytes in the packet currently in 
 *               line to be read from the Rx 
 *               FIFO. If the packet was transmitted as multiple bulk 
 *               packets, the number given will be for the combined packet. 
 *               Note: The value returned changes as the FIFO is unloaded and 
 *               is only valid while RxPktRdy (RxCSR.D0) is set.u 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXCOUNT                          0x18ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXFIFOADD
 *
 * @BRIEF        Base address of Tx FIFO of endpoint indexed by register 
 *               field INDEX.sel_endpoint 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXFIFOADD                            0x64ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXFIFOADD
 *
 * @BRIEF        Base address of Rx FIFO of endpoint indexed by register 
 *               field INDEX.sel_endpoint 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXFIFOADD                            0x66ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__HWVERS
 *
 * @BRIEF        Version of Mentor Graphics IP core 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__HWVERS                               0x6Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__CSR0
 *
 * @BRIEF        INTERPRETATION OF THE BITFIELD OF THIS REGISTER DIFFERS IN 
 *               HOST AND PERIPHERAL MODE 
 *               CSR0 is a 16-bit register that provides control and status 
 *               bits for Endpoint 0 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__CSR0                                 0x102ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__COUNT0
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__COUNT0                               0x108ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXMAXP
 *
 * @BRIEF        Defines the maximum amount of data that can be transferred 
 *               through the selected Tx endpoint in a single operation, 
 *               itself composed of one or several transactions. 
 *               NOTE: REGISTER INSTANCE 0 CORRESPONDS TO ENDPOINT 1 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXMAXP                               0x110ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXCSR
 *
 * @BRIEF        INTERPRETATION OF THE BITFIELD OF THIS REGISTER DIFFERS IN 
 *               HOST AND PERIPHERAL MODE 
 *               Control and status bits for transfers through the 
 *               currently-selected Tx endpoint. 
 *               Provides control and status bits for transfers through the 
 *               currently-selected TX endpoint. There 
 *               is a TxCSRL register for each configured TX endpoint (not 
 *               including Endpoint 0). Note: The interpretation of the 
 *               register 
 *               depends on whether the MUSBMHDRC is acting as a peripheral 
 *               or as a host. Users should also be aware that the value 
 *               returned 
 *               when the register is read reflects the status attained e.g. 
 *               as a result of writing to the register. 
 *               NOTE: REGISTER INSTANCE 0 CORRESPONDS TO ENDPOINT 1 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXCSR                                0x112ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXMAXP
 *
 * @BRIEF        Defines the maximum amount of data that can be transferred 
 *               through the selected Rx endpoint in a single operation, 
 *               itself composed of one or several transactions. 
 *               NOTE: REGISTER INSTANCE 0 CORRESPONDS TO ENDPOINT 1 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXMAXP                               0x114ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXCSR
 *
 * @BRIEF        INTERPRETATION OF THE BITFIELD OF THIS REGISTER DIFFERS IN 
 *               HOST AND PERIPHERAL MODE 
 *               Provides control and status bits for transfers through the 
 *               currently-selected Rx endpoint. There is 
 *               a RxCSRL register for each configured Rx endpoint (not 
 *               including Endpoint 0). Note: The interpretation of the 
 *               register depends 
 *               on whether the MUSBMHDRC is acting as a peripheral or as a 
 *               host. Users should also be aware that the value returned 
 *               when the 
 *               register is read reflects the status attained e.g. as a 
 *               result of writing to the register 
 *               NOTE: REGISTER INSTANCE 0 CORRESPONDS TO ENDPOINT 1 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXCSR                                0x116ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXCOUNT
 *
 * @BRIEF        holds the number of data bytes in the packet currently in 
 *               line to be read from the Rx 
 *               FIFO. If the packet was transmitted as multiple bulk 
 *               packets, the number given will be for the combined packet. 
 *               Note: The value returned changes as the FIFO is unloaded and 
 *               is only valid while RxPktRdy (RxCSR.D0) is set. 
 *               NOTE: REGISTER INSTANCE 0 CORRESPONDS TO ENDPOINT 1 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXCOUNT                              0x118ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DMA_CNTL
 *
 * @BRIEF        DMA Control Register of channel #N 
 *               Address: 204h + (N-1)*10h;N=channel number 1 thru 8 
 *               This register is only available if the Mentor USB core, 
 *               MUSBMHDRC, is configured to use at least one internal DMA 
 *               channel. This register provides the DMA transfer control for 
 *               each channel. The enabling, transfer direction, transfer 
 *               mode, the DMA burst modes are all controlled by this 
 *               register. 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DMA_CNTL                             0x204ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXDPKTBUFDIS
 *
 * @BRIEF        Receive Double Packet Buffer Disable Register 
 *               RxDPktBufDis is a 16-bit register that indicates which of 
 *               the Rx endpoints have disabled the double packet buffer 
 *               functionality. 
 *               For each Rx Endpoint 1 ? 15, the Mentor USB OTG core, 
 *               MUSBMHDRC, provides a DPktBufDis bit, EPn RxDis (where n is 
 *               the endpoint number), in this register. These 
 *               read/write bits are used to control the use of double packet 
 *               buffering on a per endpoint basis. It is ignored when 
 *               Dynamic FIFO is enabled. When asserted (DPktBufDis equals 
 *               1?b1), the bit will disable double packet buffering for the 
 *               corresponding endpoint regardless of the End Point FIFO Size 
 *               and the INMAXP size relationship. When de-asserted 
 *               (DPktBufDis equals 1?b0), this bit does NOT necessarily 
 *               enable double packet buffering but rather allows double 
 *               packet buffering to be determined based upon the End Point 
 *               FIFO Size and INMAXP size relationship.  
 *               Note: Bits relating to endpoints that have not been 
 *               configured may be asserted by writing a ?1? their respective 
 *               register; however the disable bit will have no observable 
 *               effect. 
 *                configured may be asserted by writing a ?1? their 
 *               respective register; however the disable bit will have no 
 *               observable effect. 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXDPKTBUFDIS                         0x340ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXDPKTBUFDIS
 *
 * @BRIEF        Transmit Double Packet Buffer Disable Register 
 *               Tx DPktBufDis is a 16-bit register that indicates which of 
 *               the TX endpoints have disabled the double packet buffer 
 *               functionality.  
 *               For each Tx Endpoint 1 ? 15, the Mentor USB OTG core, 
 *               MUSBMHDRC, provides a DPktBufDis bit, EPn TxDis (where n is 
 *               the endpoint number), in this register. These 
 *               read/write bits are used to control the use of double packet 
 *               buffering on a per endpoint basis. It is ignored when 
 *               Dynamic FIFO is enabled. When asserted (DPktBufDis equals 
 *               1?b1), the bit will disable double packet buffering for the 
 *               corresponding endpoint regardless of the End Point FIFO Size 
 *               and the INMAXP size relationship. When de-asserted 
 *               (DPktBufDis equals 1?b0), this bit does NOT necessarily 
 *               enable double packet buffering but rather allows double 
 *               packet buffering to be determined based upon the End Point 
 *               FIFO Size and INMAXP size relationship.  
 *               Note: Bits relating to endpoints that have not been 
 *               configured may be asserted by writing a ?1? their respective 
 *               register; however the disable bit will have no observable 
 *               effect. 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXDPKTBUFDIS                         0x342ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__C_T_UCH
 *
 * @BRIEF        Chirp Timeout Register 
 *               This register sets the chirp timeout. This number when 
 *               multiplied by 4 represents the number of XCLK cycles before 
 *               the timeout occurs. That is, if XCLK is 30MHz, this number 
 *               represents the number of 133ns time intervals before the 
 *               timeout occurs. If XCLK is 60MHz, this number represents the 
 *               number of 67ns time intervals before the timeout occurs. 
 *               Although this bit is written by the host in the CLK domain, 
 *               the counter that utilizes this value is in the XCLK domain. 
 *               No time domain crossing is provided as the value in this 
 *               register is a static. 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__C_T_UCH                              0x344ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__C_T_HSRTN
 *
 * @BRIEF        This register sets the delay from the end of High Speed 
 *               resume signaling  
 *               to enable the UTM normal operating mode. This number when 
 *               multiplied by 4 represents the number of XCLK cycles before 
 *               the timeout occurs. That is, if XCLK is 60MHz, this 
 *               number(reset value) represents a delay of   
 *               100us before the timeout occurs. Although this bit is 
 *               written by the host in the CLK domain, the counter that 
 *               utilizes this value is in the XCLK domain. No time domain 
 *               crossing is provided as the value in this register is a 
 *               static. 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__C_T_HSRTN                            0x346ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__LPM_ATTR
 *
 * @BRIEF        This register is used to define the attributes of an LPM 
 *               transaction and sleep cycle. In both the Host mode and the 
 *               Peripheral 
 *               mode, the meaning of this register is the same however the 
 *               source of the data is different for Host and Peripheral as 
 *               follows: 
 *               In Peripheral mode: 
 *               In Peripheral mode, the values in this register will contain 
 *               the equivalent attributes that were received in the last LPM 
 *               transaction 
 *               that was accepted. This register is updated with the LPM 
 *               packet contents if the response to the LPM transaction was 
 *               an ACK. 
 *               This register can be update via software. In all other 
 *               cases, this register will hold its current value. 
 *               In Host mode: 
 *               In HOST mode software will set-up the values in this 
 *               register to define the next LPM transaction that will be 
 *               transmitted. These 
 *               values will be inserted in the payload of the next LPM 
 *               Transaction. 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__LPM_ATTR                             0x360ul

    /* 
     * List of register bitfields for component USB_OTGHS_16
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP15TX   
 *
 * @BRIEF        Interrupt status for Tx endpoint 15 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP15TX                  BITFIELD(15, 15)
#define USB_OTGHS_16__INTRTX__EP15TX__POS             15

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP14TX   
 *
 * @BRIEF        Interrupt status for Tx endpoint 14 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP14TX                  BITFIELD(14, 14)
#define USB_OTGHS_16__INTRTX__EP14TX__POS             14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP13TX   
 *
 * @BRIEF        Interrupt status for Tx endpoint 13 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP13TX                  BITFIELD(13, 13)
#define USB_OTGHS_16__INTRTX__EP13TX__POS             13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP12TX   
 *
 * @BRIEF        Interrupt status for Tx endpoint 12 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP12TX                  BITFIELD(12, 12)
#define USB_OTGHS_16__INTRTX__EP12TX__POS             12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP11TX   
 *
 * @BRIEF        Interrupt status for Tx endpoint 11 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP11TX                  BITFIELD(11, 11)
#define USB_OTGHS_16__INTRTX__EP11TX__POS             11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP10TX   
 *
 * @BRIEF        Interrupt status for Tx endpoint 10 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP10TX                  BITFIELD(10, 10)
#define USB_OTGHS_16__INTRTX__EP10TX__POS             10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP9TX   
 *
 * @BRIEF        Interrupt status for Tx endpoint 9 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP9TX                   BITFIELD(9, 9)
#define USB_OTGHS_16__INTRTX__EP9TX__POS              9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP8TX   
 *
 * @BRIEF        Interrupt status for Tx endpoint 8 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP8TX                   BITFIELD(8, 8)
#define USB_OTGHS_16__INTRTX__EP8TX__POS              8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP7TX   
 *
 * @BRIEF        Interrupt status for Tx endpoint 7 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP7TX                   BITFIELD(7, 7)
#define USB_OTGHS_16__INTRTX__EP7TX__POS              7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP6TX   
 *
 * @BRIEF        Interrupt status for Tx endpoint 6 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP6TX                   BITFIELD(6, 6)
#define USB_OTGHS_16__INTRTX__EP6TX__POS              6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP5TX   
 *
 * @BRIEF        Interrupt status for Tx endpoint 5 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP5TX                   BITFIELD(5, 5)
#define USB_OTGHS_16__INTRTX__EP5TX__POS              5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP4TX   
 *
 * @BRIEF        Interrupt status for Tx endpoint 4 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP4TX                   BITFIELD(4, 4)
#define USB_OTGHS_16__INTRTX__EP4TX__POS              4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP3TX   
 *
 * @BRIEF        Interrupt status for Tx endpoint 3 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP3TX                   BITFIELD(3, 3)
#define USB_OTGHS_16__INTRTX__EP3TX__POS              3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP2TX   
 *
 * @BRIEF        Interrupt status for Tx endpoint 2 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP2TX                   BITFIELD(2, 2)
#define USB_OTGHS_16__INTRTX__EP2TX__POS              2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP1TX   
 *
 * @BRIEF        Interrupt status for Tx endpoint 1 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP1TX                   BITFIELD(1, 1)
#define USB_OTGHS_16__INTRTX__EP1TX__POS              1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP0   
 *
 * @BRIEF        Interrupt status for endpoint 0 (control endpoint 0 is 
 *               considered neither Tx nor Rx) - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP0                     BITFIELD(0, 0)
#define USB_OTGHS_16__INTRTX__EP0__POS                0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP15RX   
 *
 * @BRIEF        Interrupt status for Rx endpoint 15 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP15RX                  BITFIELD(15, 15)
#define USB_OTGHS_16__INTRRX__EP15RX__POS             15

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP14RX   
 *
 * @BRIEF        Interrupt status for Rx endpoint 14 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP14RX                  BITFIELD(14, 14)
#define USB_OTGHS_16__INTRRX__EP14RX__POS             14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP13RX   
 *
 * @BRIEF        Interrupt status for Rx endpoint 13 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP13RX                  BITFIELD(13, 13)
#define USB_OTGHS_16__INTRRX__EP13RX__POS             13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP12RX   
 *
 * @BRIEF        Interrupt status for Rx endpoint 12 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP12RX                  BITFIELD(12, 12)
#define USB_OTGHS_16__INTRRX__EP12RX__POS             12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP11RX   
 *
 * @BRIEF        Interrupt status for Rx endpoint 11 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP11RX                  BITFIELD(11, 11)
#define USB_OTGHS_16__INTRRX__EP11RX__POS             11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP10RX   
 *
 * @BRIEF        Interrupt status for Rx endpoint 10 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP10RX                  BITFIELD(10, 10)
#define USB_OTGHS_16__INTRRX__EP10RX__POS             10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP9RX   
 *
 * @BRIEF        Interrupt status for Rx endpoint 9 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP9RX                   BITFIELD(9, 9)
#define USB_OTGHS_16__INTRRX__EP9RX__POS              9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP8RX   
 *
 * @BRIEF        Interrupt status for Rx endpoint 8 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP8RX                   BITFIELD(8, 8)
#define USB_OTGHS_16__INTRRX__EP8RX__POS              8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP7RX   
 *
 * @BRIEF        Interrupt status for Rx endpoint 7 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP7RX                   BITFIELD(7, 7)
#define USB_OTGHS_16__INTRRX__EP7RX__POS              7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP6RX   
 *
 * @BRIEF        Interrupt status for Rx endpoint 6 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP6RX                   BITFIELD(6, 6)
#define USB_OTGHS_16__INTRRX__EP6RX__POS              6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP5RX   
 *
 * @BRIEF        Interrupt status for Rx endpoint 5 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP5RX                   BITFIELD(5, 5)
#define USB_OTGHS_16__INTRRX__EP5RX__POS              5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP4RX   
 *
 * @BRIEF        Interrupt status for Rx endpoint 4 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP4RX                   BITFIELD(4, 4)
#define USB_OTGHS_16__INTRRX__EP4RX__POS              4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP3RX   
 *
 * @BRIEF        Interrupt status for Rx endpoint 3 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP3RX                   BITFIELD(3, 3)
#define USB_OTGHS_16__INTRRX__EP3RX__POS              3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP2RX   
 *
 * @BRIEF        Interrupt status for Rx endpoint 2 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP2RX                   BITFIELD(2, 2)
#define USB_OTGHS_16__INTRRX__EP2RX__POS              2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP1RX   
 *
 * @BRIEF        Interrupt status for Rx endpoint 1 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP1RX                   BITFIELD(1, 1)
#define USB_OTGHS_16__INTRRX__EP1RX__POS              1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP15TX   
 *
 * @BRIEF        Interrupt enable for Tx endpoint 15 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP15TX                 BITFIELD(15, 15)
#define USB_OTGHS_16__INTRTXE__EP15TX__POS            15

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP14TX   
 *
 * @BRIEF        Interrupt enable for Tx endpoint 14 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP14TX                 BITFIELD(14, 14)
#define USB_OTGHS_16__INTRTXE__EP14TX__POS            14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP13TX   
 *
 * @BRIEF        Interrupt enable for Tx endpoint 13 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP13TX                 BITFIELD(13, 13)
#define USB_OTGHS_16__INTRTXE__EP13TX__POS            13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP12TX   
 *
 * @BRIEF        Interrupt enable for Tx endpoint 12 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP12TX                 BITFIELD(12, 12)
#define USB_OTGHS_16__INTRTXE__EP12TX__POS            12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP11TX   
 *
 * @BRIEF        Interrupt enable for Tx endpoint 11 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP11TX                 BITFIELD(11, 11)
#define USB_OTGHS_16__INTRTXE__EP11TX__POS            11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP10TX   
 *
 * @BRIEF        Interrupt enable for Tx endpoint 10 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP10TX                 BITFIELD(10, 10)
#define USB_OTGHS_16__INTRTXE__EP10TX__POS            10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP9TX   
 *
 * @BRIEF        Interrupt enable for Tx endpoint 9 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP9TX                  BITFIELD(9, 9)
#define USB_OTGHS_16__INTRTXE__EP9TX__POS             9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP8TX   
 *
 * @BRIEF        Interrupt enable for Tx endpoint 8 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP8TX                  BITFIELD(8, 8)
#define USB_OTGHS_16__INTRTXE__EP8TX__POS             8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP7TX   
 *
 * @BRIEF        Interrupt enable for Tx endpoint 7 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP7TX                  BITFIELD(7, 7)
#define USB_OTGHS_16__INTRTXE__EP7TX__POS             7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP6TX   
 *
 * @BRIEF        Interrupt enable for Tx endpoint 6 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP6TX                  BITFIELD(6, 6)
#define USB_OTGHS_16__INTRTXE__EP6TX__POS             6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP5TX   
 *
 * @BRIEF        Interrupt enable for Tx endpoint 5 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP5TX                  BITFIELD(5, 5)
#define USB_OTGHS_16__INTRTXE__EP5TX__POS             5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP4TX   
 *
 * @BRIEF        Interrupt enable for Tx endpoint 4 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP4TX                  BITFIELD(4, 4)
#define USB_OTGHS_16__INTRTXE__EP4TX__POS             4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP3TX   
 *
 * @BRIEF        Interrupt enable for Tx endpoint 3 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP3TX                  BITFIELD(3, 3)
#define USB_OTGHS_16__INTRTXE__EP3TX__POS             3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP2TX   
 *
 * @BRIEF        Interrupt enable for Tx endpoint 2 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP2TX                  BITFIELD(2, 2)
#define USB_OTGHS_16__INTRTXE__EP2TX__POS             2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP1TX   
 *
 * @BRIEF        Interrupt enable for Tx endpoint 1 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP1TX                  BITFIELD(1, 1)
#define USB_OTGHS_16__INTRTXE__EP1TX__POS             1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP0   
 *
 * @BRIEF        Interrupt enable for endpoint 0 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP0                    BITFIELD(0, 0)
#define USB_OTGHS_16__INTRTXE__EP0__POS               0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP15RX   
 *
 * @BRIEF        Interrupt enable for Rx endpoint 15 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP15RX                 BITFIELD(15, 15)
#define USB_OTGHS_16__INTRRXE__EP15RX__POS            15

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP14RX   
 *
 * @BRIEF        Interrupt enable for Rx endpoint 14 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP14RX                 BITFIELD(14, 14)
#define USB_OTGHS_16__INTRRXE__EP14RX__POS            14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP13RX   
 *
 * @BRIEF        Interrupt enable for Rx endpoint 13 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP13RX                 BITFIELD(13, 13)
#define USB_OTGHS_16__INTRRXE__EP13RX__POS            13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP12RX   
 *
 * @BRIEF        Interrupt enable for Rx endpoint 12 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP12RX                 BITFIELD(12, 12)
#define USB_OTGHS_16__INTRRXE__EP12RX__POS            12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP11RX   
 *
 * @BRIEF        Interrupt enable for Rx endpoint 11 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP11RX                 BITFIELD(11, 11)
#define USB_OTGHS_16__INTRRXE__EP11RX__POS            11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP10RX   
 *
 * @BRIEF        Interrupt enable for Rx endpoint 10 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP10RX                 BITFIELD(10, 10)
#define USB_OTGHS_16__INTRRXE__EP10RX__POS            10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP9RX   
 *
 * @BRIEF        Interrupt enable for Rx endpoint 9 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP9RX                  BITFIELD(9, 9)
#define USB_OTGHS_16__INTRRXE__EP9RX__POS             9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP8RX   
 *
 * @BRIEF        Interrupt enable for Rx endpoint 8 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP8RX                  BITFIELD(8, 8)
#define USB_OTGHS_16__INTRRXE__EP8RX__POS             8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP7RX   
 *
 * @BRIEF        Interrupt enable for Rx endpoint 7 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP7RX                  BITFIELD(7, 7)
#define USB_OTGHS_16__INTRRXE__EP7RX__POS             7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP6RX   
 *
 * @BRIEF        Interrupt enable for Rx endpoint 6 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP6RX                  BITFIELD(6, 6)
#define USB_OTGHS_16__INTRRXE__EP6RX__POS             6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP5RX   
 *
 * @BRIEF        Interrupt enable for Rx endpoint 5 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP5RX                  BITFIELD(5, 5)
#define USB_OTGHS_16__INTRRXE__EP5RX__POS             5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP4RX   
 *
 * @BRIEF        Interrupt enable for Rx endpoint 4 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP4RX                  BITFIELD(4, 4)
#define USB_OTGHS_16__INTRRXE__EP4RX__POS             4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP3RX   
 *
 * @BRIEF        Interrupt enable for Rx endpoint 3 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP3RX                  BITFIELD(3, 3)
#define USB_OTGHS_16__INTRRXE__EP3RX__POS             3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP2RX   
 *
 * @BRIEF        Interrupt enable for Rx endpoint 2 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP2RX                  BITFIELD(2, 2)
#define USB_OTGHS_16__INTRRXE__EP2RX__POS             2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP1RX   
 *
 * @BRIEF        Interrupt enable for Rx endpoint 1 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP1RX                  BITFIELD(1, 1)
#define USB_OTGHS_16__INTRRXE__EP1RX__POS             1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__FRAME__FRAME_NUM   
 *
 * @BRIEF        last received 11-bit USB frame number. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__FRAME__FRAME_NUM                BITFIELD(10, 0)
#define USB_OTGHS_16__FRAME__FRAME_NUM__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_TXMAXP__M_MINUS_ONE   
 *
 * @BRIEF        For the support of High-bandwidth Isochronous/Interrupt 
 *               endpoints and of packet splitting on Bulk 
 *               endpoints, the register includes either 2 or 5 further bits 
 *               that define a multiplier m which is equal to 
 *               one more than the value recorded. 
 *               In the case of Bulk endpoints with the packet splitting 
 *               option enabled, the multiplier m can be up to 
 *               32 and defines the maximum number of \u2018USB\u2019 packets 
 *               (i.e. packets for transmission over the USB) 
 *               of the specified payload into which a single data packet 
 *               placed in the FIFO should be split, prior to 
 *               transfer. Note: The data packet is required to be an exact 
 *               multiple of the payload specified by bits 
 *               10:0, which is itself required to be either 8, 16, 32, 64 or 
 *               (in the case of High Speed transfers) 512 
 *               bytes. 
 *               For Isochronous/Interrupt endpoints operating in High-Speed 
 *               mode and with the High-bandwidth 
 *               option enabled, m may only be either 2 or 3 (corresponding 
 *               to bit 11 set or bit 12 set, respectively) 
 *               and it specifies the maximum number of such transactions 
 *               that can take place in a single 
 *               microframe. If either bit 11 or bit 12 is non-zero, the 
 *               USBOTGHS will automatically split any data 
 *               packet written to the FIFO into up to 2 or 3 \u2018USB\u2019 
 *               packets, each containing the specified payload (or 
 *               less). The maximum payload for each transaction is 1024 
 *               bytes, so this allows up to 3072 bytes to be 
 *               transmitted in each microframe. (For Isochronous/Interrupt 
 *               transfers in Full-speed mode or if Highbandwidth 
 *               is not enabled, bits 11 and 12 are ignored. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_TXMAXP__M_MINUS_ONE         BITFIELD(15, 11)
#define USB_OTGHS_16__DYN_TXMAXP__M_MINUS_ONE__POS    11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_TXMAXP__MAXPAYLOAD   
 *
 * @BRIEF        Defines (in bytes) the maximum payload transmitted in a 
 *               single transaction. The value set 
 *               can be up to 1024 bytes but is subject to the constraints 
 *               placed by the USB Specification on packet 
 *               sizes for Bulk, Interrupt and Isochronous transfers in 
 *               Full-speed and High-speed operations. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_TXMAXP__MAXPAYLOAD          BITFIELD(10, 0)
#define USB_OTGHS_16__DYN_TXMAXP__MAXPAYLOAD__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_TXCSR__AUTOSET   
 *
 * @BRIEF        If the CPU sets this bit, TxPktRdy will be automatically set 
 *               when data of the maximum packet size (value in TxMaxP) is 
 *               loaded into the Tx FIFO. If a packet of less than the 
 *               maximum packet size is loaded, then TxPktRdy will have to be 
 *               set manually. Note: Should not be set for high-bandwidth 
 *               Isochronous endpoints. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_TXCSR__AUTOSET              BITFIELD(15, 15)
#define USB_OTGHS_16__DYN_TXCSR__AUTOSET__POS         15

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_TXCSR__ISO   
 *
 * @BRIEF        PERIPHERAL MODE ONLY BITFIELD 
 *               The CPU sets this bit to enable the Tx endpoint for 
 *               Isochronous transfers, and clears it to enable the Tx 
 *               endpoint for Bulk or Interrupt transfers. Note: This bit 
 *               only has any effect in Peripheral mode. In Host mode, it 
 *               always returns zero. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_TXCSR__ISO                  BITFIELD(14, 14)
#define USB_OTGHS_16__DYN_TXCSR__ISO__POS             14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_TXCSR__MODE   
 *
 * @BRIEF        The CPU sets this bit to enable the endpoint direction as 
 *               Tx, and clears it to enable the endpoint direction as Rx. 
 *               Note: This bit only has any effect where the same endpoint 
 *               FIFO is used for both Tx and Rx transactions. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_TXCSR__MODE                 BITFIELD(13, 13)
#define USB_OTGHS_16__DYN_TXCSR__MODE__POS            13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_TXCSR__DMAREQENAB   
 *
 * @BRIEF        The CPU sets this bit to enable the DMA request for the Tx 
 *               endpoint. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_TXCSR__DMAREQENAB           BITFIELD(12, 12)
#define USB_OTGHS_16__DYN_TXCSR__DMAREQENAB__POS      12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_TXCSR__FRCDATATOG   
 *
 * @BRIEF        The CPU sets this bit to force the endpoint data toggle to 
 *               switch and the data packet to be cleared from the FIFO, 
 *               regardless of whether an ACK was received. This can be used 
 *               by Interrupt Tx endpoints that are used to communicate rate 
 *               feedback for Isochronous endpoints. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_TXCSR__FRCDATATOG           BITFIELD(11, 11)
#define USB_OTGHS_16__DYN_TXCSR__FRCDATATOG__POS      11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_TXCSR__DMAREQMODE   
 *
 * @BRIEF        The CPU sets this bit to select DMA Mode 1 and clears this 
 *               bit to select DMA Mode 0. 
 *               Note: This bit must not be cleared either before or in the 
 *               same cycle as the above DMAReqEnab bit is cleared. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_TXCSR__DMAREQMODE           BITFIELD(10, 10)
#define USB_OTGHS_16__DYN_TXCSR__DMAREQMODE__POS      10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_TXCSR__DATATOGGLEWRENABLE   
 *
 * @BRIEF        HOST MODE ONLY BITFIELD 
 *               The CPU writes a 1 to this bit to enable the current state 
 *               of the Tx Endpoint data toggle to be written (see Data 
 *               Toggle bit, below). This bit is automatically cleared once 
 *               the new value is written. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_TXCSR__DATATOGGLEWRENABLE   BITFIELD(9, 9)
#define USB_OTGHS_16__DYN_TXCSR__DATATOGGLEWRENABLE__POS 9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_TXCSR__DATATOGGLE   
 *
 * @BRIEF        HOST MODE ONLY BITFIELD  
 *               When read, this bit indicates the current state of the Tx 
 *               Endpoint data toggle. If D9 is high, this bit may be written 
 *               with the required setting of the data toggle. If D9 is low, 
 *               any value written to this bit is ignored. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_TXCSR__DATATOGGLE           BITFIELD(8, 8)
#define USB_OTGHS_16__DYN_TXCSR__DATATOGGLE__POS      8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_TXCSR__NAKTIMEOUTORINCOMPTX   
 *
 * @BRIEF        HOST MODE: 
 *               This bit will be set when the Tx endpoint is halted 
 *               following the receipt of NAK responses for longer than the 
 *               time set as the NAK Limit by the TxInterval register. The 
 *               CPU should clear this bit to allow the endpoint to continue. 
 *               Note: Valid only for Bulk endpoints. 
 *               PERIPHERAL MODE: 
 *               When the endpoint is being used for high-bandwidth 
 *               Isochronous/Interrupt transfers, this bit is set to indicate 
 *               where a large packet has been split into 2 or 3 packets for 
 *               transmission but insufficient IN tokens have been received 
 *               to send all the parts. Note: In anything other than a 
 *               high-bandwidth transfer, this bit will always return 0. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_TXCSR__NAKTIMEOUTORINCOMPTX BITFIELD(7, 7)
#define USB_OTGHS_16__DYN_TXCSR__NAKTIMEOUTORINCOMPTX__POS 7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_TXCSR__CLRDATATOG   
 *
 * @BRIEF        The CPU writes a 1 to this bit to reset the endpoint data 
 *               toggle to 0. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_TXCSR__CLRDATATOG           BITFIELD(6, 6)
#define USB_OTGHS_16__DYN_TXCSR__CLRDATATOG__POS      6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_TXCSR__RXSTALLORSENTSTALL   
 *
 * @BRIEF        HOST MODE:  
 *               This bit is set when a STALL handshake is received. When 
 *               this bit is set, any DMA request that is in progress is 
 *               stopped, the FIFO is completely flushed and the TxPktRdy bit 
 *               is cleared (see below). The CPU should clear this bit. 
 *               PERIPHERAL MODE: 
 *               This bit is set when a STALL handshake is transmitted. The 
 *               FIFO is flushed and the TxPktRdy bit is cleared (see below). 
 *               The CPU should clear this bit. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_TXCSR__RXSTALLORSENTSTALL   BITFIELD(5, 5)
#define USB_OTGHS_16__DYN_TXCSR__RXSTALLORSENTSTALL__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_TXCSR__SETUPPKTORSENDSTALL   
 *
 * @BRIEF        HOST MODE: 
 *               The CPU sets this bit, at the same time as the TxPktRdy bit 
 *               is set, to send a SETUP token instead of an OUT token for 
 *               the transaction. Note: Setting this bit also clears the Data 
 *               Toggle. 
 *               PERIPHERAL MODE: 
 *               The CPU writes a 1 to this bit to issue a STALL handshake to 
 *               an IN token. The CPU clears this bit to terminate the stall 
 *               condition. Note: This bit has no effect where the endpoint 
 *               is being used for Isochronous transfers. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_TXCSR__SETUPPKTORSENDSTALL  BITFIELD(4, 4)
#define USB_OTGHS_16__DYN_TXCSR__SETUPPKTORSENDSTALL__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_TXCSR__FLUSHFIFO   
 *
 * @BRIEF        The CPU writes a 1 to this bit to flush the latest packet 
 *               from the endpoint Tx FIFO. The FIFO pointer is reset, the 
 *               TxPktRdy bit (below) is cleared and an interrupt is 
 *               generated. May be set simultaneously with TxPktRdy to abort 
 *               the packet that is currently being loaded into the FIFO. 
 *               Note: FlushFIFO has no effect unless TxPktRdy is set. Also 
 *               note that, if the FIFO is double-buffered, FlushFIFO may 
 *               need to be set twice to completely clear the FIFO. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_TXCSR__FLUSHFIFO            BITFIELD(3, 3)
#define USB_OTGHS_16__DYN_TXCSR__FLUSHFIFO__POS       3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_TXCSR__ERRORORUNDERRUN   
 *
 * @BRIEF        HOST MODE: 
 *               The USB sets this bit when 3 attempts have been made to send 
 *               a packet and no handshake packet has been received. When the 
 *               bit is set, an interrupt is generated, TxPktRdy is cleared 
 *               and the FIFO is completely flushed. The CPU should clear 
 *               this bit. Valid only when the endpoint is operating in Bulk 
 *               or Interrupt mode. 
 *               PERIPHERAL MODE: 
 *               The USB sets this bit if an IN token is received when the 
 *               TxPktRdy bit not set. The CPU should clear this bit. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_TXCSR__ERRORORUNDERRUN      BITFIELD(2, 2)
#define USB_OTGHS_16__DYN_TXCSR__ERRORORUNDERRUN__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_TXCSR__FIFONOTEMPTY   
 *
 * @BRIEF        The USB sets this bit when there is at least 1 packet in the 
 *               Tx FIFO. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_TXCSR__FIFONOTEMPTY         BITFIELD(1, 1)
#define USB_OTGHS_16__DYN_TXCSR__FIFONOTEMPTY__POS    1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_TXCSR__TXPKTRDY   
 *
 * @BRIEF        The CPU sets this bit after loading a data packet into the 
 *               FIFO. It is cleared automatically when a data packet has 
 *               been transmitted. An interrupt is also generated at this 
 *               point (if enabled). TxPktRdy is also automatically cleared 
 *               (but no interrupt is generated) prior to loading a second 
 *               packet into a double-buffered FIFO. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_TXCSR__TXPKTRDY             BITFIELD(0, 0)
#define USB_OTGHS_16__DYN_TXCSR__TXPKTRDY__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXMAXP__M_MINUS_ONE   
 *
 * @BRIEF        For the support of High-bandwidth Isochronous/Interrupt 
 *               endpoints and of Bulk packets combining, 
 *               the register includes either 2 or 5 further bits that define 
 *               a multiplier m which is equal to one more 
 *               than the value recorded. 
 *               For Bulk endpoints with the packet combining option enabled, 
 *               the multiplier m can be up to 32 and 
 *               defines the number of USB packets of the specified payload 
 *               which are to be combined into a single 
 *               data packet within the FIFO. 
 *               For Isochronous/Interrupt endpoints operating in High-Speed 
 *               mode and with the High-bandwidth 
 *               option enabled, m may only be either 2 or 3 (corresponding 
 *               to bit 11 set or bit 12 set, respectively) 
 *               and it specifies the maximum number of such transactions 
 *               that can take place in a single 
 *               microframe. If either bit 11 or bit 12 is non-zero, the 
 *               USBOTGHS will automatically combine the 
 *               separate USB packets received in any microframe into a 
 *               single packet within the Rx FIFO. The 
 *               maximum payload for each transaction is 1024 bytes, so this 
 *               allows up to 3072 bytes to be received in 
 *               each microframe. (For Isochronous/Interrupt transfers in 
 *               Full-speed mode or if High-bandwidth is not 
 *               enabled, bits 11 and 12 are ignored.) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXMAXP__M_MINUS_ONE         BITFIELD(15, 11)
#define USB_OTGHS_16__DYN_RXMAXP__M_MINUS_ONE__POS    11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXMAXP__MAXPAYLOAD   
 *
 * @BRIEF        Defines (in bytes) the maximum payload transmitted in a 
 *               single transaction. The value set 
 *               can be up to 1024 bytes but is subject to the constraints 
 *               placed by the USB Specification on packet 
 *               sizes for Bulk, Interrupt and Isochronous transfers in 
 *               Full-speed and High-speed operations. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXMAXP__MAXPAYLOAD          BITFIELD(10, 0)
#define USB_OTGHS_16__DYN_RXMAXP__MAXPAYLOAD__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXCSR__AUTOCLR   
 *
 * @BRIEF        If the CPU sets this bit then the RxPktRdy bit will be 
 *               automatically cleared when a packet of RxMaxP bytes has been 
 *               unloaded from the Rx FIFO. When packets of less than the 
 *               maximum packet size are unloaded, RxPktRdy will have to be 
 *               cleared manually. Note: Should not be set for high-bandwidth 
 *               Isochronous endpoints. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXCSR__AUTOCLR              BITFIELD(15, 15)
#define USB_OTGHS_16__DYN_RXCSR__AUTOCLR__POS         15

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXCSR__AUTOREQORISO   
 *
 * @BRIEF        HOST MODE: 
 *               If the CPU sets this bit, the ReqPkt bit will be 
 *               automatically set when the RxPktRdy bit is cleared.  
 *               Note: This bit is automatically cleared when a short packet 
 *               is received. 
 *               PERIPHERAL MODE: 
 *               The CPU sets this bit to enable the Rx endpoint for 
 *               Isochronous transfers, and clears it to enable the Rx 
 *               endpoint for Bulk/Interrupt transfers. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXCSR__AUTOREQORISO         BITFIELD(14, 14)
#define USB_OTGHS_16__DYN_RXCSR__AUTOREQORISO__POS    14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXCSR__DMAREQENAB   
 *
 * @BRIEF        The CPU sets this bit to enable the DMA request for the Rx 
 *               endpoint. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXCSR__DMAREQENAB           BITFIELD(13, 13)
#define USB_OTGHS_16__DYN_RXCSR__DMAREQENAB__POS      13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXCSR__PIDERRORORDISNYET   
 *
 * @BRIEF        HOST MODE: 
 *               ISO Transactions Only: The core sets this bit to indicate a 
 *               PID error in the received packet. Bulk/Interrupt 
 *               Transactions: The setting of this bit is ignored. 
 *               PERIPHERAL MODE: 
 *               The CPU sets this bit to disable the sending of NYET 
 *               handshakes. When set, all successfully received Rx packets 
 *               are ACK'd including at the point at which the FIFO becomes 
 *               full. Note: This bit only has any effect in High-speed mode, 
 *               in which mode it should be set for all Interrupt endpoints. 
 *               ISO Transactions: The core sets this bit to indicate a PID 
 *               error in the received packet. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXCSR__PIDERRORORDISNYET    BITFIELD(12, 12)
#define USB_OTGHS_16__DYN_RXCSR__PIDERRORORDISNYET__POS 12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXCSR__DMAREQMODE   
 *
 * @BRIEF        The CPU sets this bit to select DMA Mode 1 and clears this 
 *               bit to select DMA Mode 0. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXCSR__DMAREQMODE           BITFIELD(11, 11)
#define USB_OTGHS_16__DYN_RXCSR__DMAREQMODE__POS      11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXCSR__DATATOGGLEWRITEENABLE   
 *
 * @BRIEF        HOST MODE ONLY BITFIELD 
 *               The CPU writes a 1 to this bit to enable the current state 
 *               of the Rx Endpoint data toggle to be written (see Data 
 *               Toggle bit, below). This bit is automatically cleared once 
 *               the new value is written. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXCSR__DATATOGGLEWRITEENABLE BITFIELD(10, 10)
#define USB_OTGHS_16__DYN_RXCSR__DATATOGGLEWRITEENABLE__POS 10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXCSR__DATATOGGLE   
 *
 * @BRIEF        HOST MODE ONLY BITFIELD 
 *               When read, this bit indicates the current state of the Rx 
 *               Endpoint data toggle. If D10 is high, this bit may be 
 *               written with the required setting of the data toggle. If D10 
 *               is low, any value written to this bit is ignored. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXCSR__DATATOGGLE           BITFIELD(9, 9)
#define USB_OTGHS_16__DYN_RXCSR__DATATOGGLE__POS      9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXCSR__INCOMPRX   
 *
 * @BRIEF        This bit will be set in a high-bandwidth Isochronous 
 *               transfer if the packet received is incomplete. It will be 
 *               cleared when RxPktRdy is cleared. Note: If USB protocols are 
 *               followed correctly, this bit should never be set. The bit 
 *               becoming set indicates a failure of the associated 
 *               Peripheral device to behave correctly. (In anything other 
 *               than a high-bandwidth Isochronous transfer, this bit will 
 *               always return 0.) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXCSR__INCOMPRX             BITFIELD(8, 8)
#define USB_OTGHS_16__DYN_RXCSR__INCOMPRX__POS        8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXCSR__CLRDATATOG   
 *
 * @BRIEF        The CPU writes a 1 to this bit to reset the endpoint data 
 *               toggle to 0. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXCSR__CLRDATATOG           BITFIELD(7, 7)
#define USB_OTGHS_16__DYN_RXCSR__CLRDATATOG__POS      7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXCSR__RXSTALLORSENTSTALL   
 *
 * @BRIEF        HOST MODE: 
 *               When a STALL handshake is received, this bit is set and an 
 *               interrupt is generated. The CPU should clear this bit. 
 *               PERIPHERAL MODE: 
 *               This bit is set when a STALL handshake is transmitted. The 
 *               CPU should clear this bit. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXCSR__RXSTALLORSENTSTALL   BITFIELD(6, 6)
#define USB_OTGHS_16__DYN_RXCSR__RXSTALLORSENTSTALL__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXCSR__REQPKTORSENDSTALL   
 *
 * @BRIEF        HOST MODE: 
 *               The CPU writes a 1 to this bit to request an IN transaction. 
 *               It is cleared when RxPktRdy is set. 
 *               PERIPHERAL MODE: 
 *               The CPU writes a 1 to this bit to issue a STALL handshake. 
 *               The CPU clears this bit to terminate the stall condition. 
 *               Note: This bit has no effect where the endpoint is being 
 *               used for Isochronous transfers. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXCSR__REQPKTORSENDSTALL    BITFIELD(5, 5)
#define USB_OTGHS_16__DYN_RXCSR__REQPKTORSENDSTALL__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXCSR__FLUSHFIFO   
 *
 * @BRIEF        The CPU writes a 1 to this bit to flush the next packet to 
 *               be read from the endpoint Rx FIFO.  
 *               The FIFO pointer is reset and the RxPktRdy bit (below) is 
 *               cleared. Note: FlushFIFO has no effect unless RxPktRdy is 
 *               set. Also note that, if the FIFO is double-buffered, 
 *               FlushFIFO may need to be set twice to completely clear the 
 *               FIFO. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXCSR__FLUSHFIFO            BITFIELD(4, 4)
#define USB_OTGHS_16__DYN_RXCSR__FLUSHFIFO__POS       4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXCSR__NAKTIMEOUTORDATAERROR   
 *
 * @BRIEF        HOST MODE: 
 *               When operating in ISO mode, this bit is set when RxPktRdy is 
 *               set if the data packet has a CRC or bit-stuff error and 
 *               cleared when RxPktRdy is cleared. In Bulk mode, this bit 
 *               will be set when the Rx endpoint is halted following the 
 *               receipt of NAK responses for longer than the time set as the 
 *               NAK Limit by the RxInterval register. The CPU should clear 
 *               this bit to allow the endpoint to continue. 
 *               PERIPHERAL MODE: 
 *               This bit is set when RxPktRdy is set if the data packet has 
 *               a CRC or bit-stuff error. It is cleared when RxPktRdy is 
 *               cleared. Note: This bit is only valid when the endpoint is 
 *               operating in ISO mode. In Bulk mode, it always returns zero. 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXCSR__NAKTIMEOUTORDATAERROR BITFIELD(3, 3)
#define USB_OTGHS_16__DYN_RXCSR__NAKTIMEOUTORDATAERROR__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXCSR__ERROROROVERRUN   
 *
 * @BRIEF        HOST MODE: 
 *               The USB sets this bit when 3 attempts have been made to 
 *               receive a packet and no data packet has been received. The 
 *               CPU should clear this bit. An interrupt is generated when 
 *               the bit is set.  
 *               Note: This bit is only valid when the Tx endpoint is 
 *               operating in Bulk or Interrupt mode. In ISO mode, it always 
 *               returns zero. 
 *               PERIPHERAL MODE: 
 *               This bit is set if an OUT packet cannot be loaded into the 
 *               Rx FIFO. The CPU should clear this bit. Note: This bit is 
 *               only valid when the endpoint is operating in ISO mode. In 
 *               Bulk mode, it always returns zero. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXCSR__ERROROROVERRUN       BITFIELD(2, 2)
#define USB_OTGHS_16__DYN_RXCSR__ERROROROVERRUN__POS  2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXCSR__FIFOFULL   
 *
 * @BRIEF        This bit is set when no more packets can be loaded into the 
 *               Rx FIFO. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXCSR__FIFOFULL             BITFIELD(1, 1)
#define USB_OTGHS_16__DYN_RXCSR__FIFOFULL__POS        1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXCSR__RXPKTRDY   
 *
 * @BRIEF        This bit is set when a data packet has been received. The 
 *               CPU should clear this bit when the packet has been unloaded 
 *               from the Rx FIFO. An interrupt is generated when the bit is 
 *               set. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXCSR__RXPKTRDY             BITFIELD(0, 0)
#define USB_OTGHS_16__DYN_RXCSR__RXPKTRDY__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DYN_RXCOUNT__COUNT   
 *
 * @BRIEF        holds the number of data bytes in the packet currently in 
 *               line to be read from the Rx 
 *               FIFO. If the packet was transmitted as multiple bulk 
 *               packets, the number given will be for the combined packet. 
 *               Note: The value returned changes as the FIFO is unloaded and 
 *               is only valid while RxPktRdy (RxCSR.D0) is set.u - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DYN_RXCOUNT__COUNT              BITFIELD(12, 0)
#define USB_OTGHS_16__DYN_RXCOUNT__COUNT__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXFIFOADD__AD_TX   
 *
 * @BRIEF        Address in units of 8 bytes. Current implementation has 16 
 *               KBytes of memory = 11 bits (2^11 x 8 = 16K) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXFIFOADD__AD_TX                BITFIELD(10, 0)
#define USB_OTGHS_16__TXFIFOADD__AD_TX__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXFIFOADD__AD_RX   
 *
 * @BRIEF        Address in units of 8 bytes. Current implementation has 16 
 *               KBytes of memory = 11 bits (2^11 x 8 = 16K) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXFIFOADD__AD_RX                BITFIELD(10, 0)
#define USB_OTGHS_16__RXFIFOADD__AD_RX__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__HWVERS__RC   
 *
 * @BRIEF        Set to '1' if RTL is used from a Release candidate rather 
 *               than from the full release of the core - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__HWVERS__RC                      BITFIELD(15, 15)
#define USB_OTGHS_16__HWVERS__RC__POS                 15

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__HWVERS__XX   
 *
 * @BRIEF        Major Version Number (Range 0 -31) - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__HWVERS__XX                      BITFIELD(14, 10)
#define USB_OTGHS_16__HWVERS__XX__POS                 10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__HWVERS__YYY   
 *
 * @BRIEF        Minor Version Number(Range 0 - 999) - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__HWVERS__YYY                     BITFIELD(9, 0)
#define USB_OTGHS_16__HWVERS__YYY__POS                0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__CSR0__DISPING   
 *
 * @BRIEF        HOST MODE ONLY BITFIELD 
 *               The CPU writes a 1 to this bit to instruct the core not to 
 *               issue PING tokens in data and status 
 *               phases of a high-speed Control transfer (for use with 
 *               devices that do not respond to PING). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__CSR0__DISPING                   BITFIELD(11, 11)
#define USB_OTGHS_16__CSR0__DISPING__POS              11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__CSR0__DATATOGGLEWREN   
 *
 * @BRIEF        HOST MODE ONLY BITFIELD 
 *               The CPU writes a 1 to this bit to enable the current state 
 *               of the Endpoint 0 data toggle to be written (see Data Toggle 
 *               bit, below). This bit is automatically cleared once the new 
 *               value is written. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__CSR0__DATATOGGLEWREN            BITFIELD(10, 10)
#define USB_OTGHS_16__CSR0__DATATOGGLEWREN__POS       10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__CSR0__DATATOGGLE   
 *
 * @BRIEF        HOST MODE ONLY BITFIELD 
 *               When read, this bit indicates the current state of the 
 *               Endpoint 0 data toggle. If D10 is high, this bit may be 
 *               written with the required setting of the data toggle. If D10 
 *               is low, any value written to this bit is ignored. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__CSR0__DATATOGGLE                BITFIELD(9, 9)
#define USB_OTGHS_16__CSR0__DATATOGGLE__POS           9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__CSR0__FLUSHFIFO   
 *
 * @BRIEF        The CPU writes a 1 to this bit to flush the next packet to 
 *               be transmitted/read from the Endpoint 0 FIFO. The FIFO 
 *               pointer is reset (FIFO buffer ?TX or RX is cleared) and the 
 *               TxPktRdy/RxPktRdy bit (below) is cleared. 
 *               Note: FlushFIFO should only be used when TxPktRdy/RxPktRdy 
 *               is set. At other times, it may cause data to be corrupted. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__CSR0__FLUSHFIFO                 BITFIELD(8, 8)
#define USB_OTGHS_16__CSR0__FLUSHFIFO__POS            8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__CSR0__NAKTIMEOUTORSERVICEDSETUPEND   
 *
 * @BRIEF        HOST MODE: 
 *               This bit will be set when Endpoint 0 is halted following the 
 *               receipt of NAK responses for longer than the time set by the 
 *               NAKLimit0 register. The CPU should clear this bit to allow 
 *               the endpoint to continue. 
 *               PERIPHERAL MODE: 
 *               The CPU writes a 1 to this bit to clear the SetupEnd bit. It 
 *               is cleared automatically. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__CSR0__NAKTIMEOUTORSERVICEDSETUPEND BITFIELD(7, 7)
#define USB_OTGHS_16__CSR0__NAKTIMEOUTORSERVICEDSETUPEND__POS 7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__CSR0__STATUSPKTORSERVICEDRXPKTRDY   
 *
 * @BRIEF        HOST MODE: 
 *               The CPU sets this bit at the same time as the TxPktRdy or 
 *               ReqPkt bit is set, to perform a status stage transaction. 
 *               Setting this bit ensures that the data toggle is set to 1 so 
 *               that a DATA1 packet is used for the Status Stage 
 *               transaction. 
 *               PERIPHERAL MODE: 
 *               The CPU writes a 1 to this bit to clear the RxPktRdy bit. It 
 *               is cleared automatically. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__CSR0__STATUSPKTORSERVICEDRXPKTRDY BITFIELD(6, 6)
#define USB_OTGHS_16__CSR0__STATUSPKTORSERVICEDRXPKTRDY__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__CSR0__REQPKTORSENDSTALL   
 *
 * @BRIEF        HOST MODE: 
 *               The CPU sets this bit to request an IN transaction. It is 
 *               cleared when RxPktRdy is set. 
 *               PERIPHERAL MODE: 
 *               The CPU writes a 1 to this bit to terminate the current 
 *               transaction. The STALL handshake will be transmitted and 
 *               then this bit will be cleared automatically. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__CSR0__REQPKTORSENDSTALL         BITFIELD(5, 5)
#define USB_OTGHS_16__CSR0__REQPKTORSENDSTALL__POS    5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__CSR0__ERRORORSETUPEND   
 *
 * @BRIEF        HOST MODE: 
 *               This bit will be set when three attempts have been made to 
 *               perform a transaction with no response from the peripheral. 
 *               The CPU should clear this bit. An interrupt is generated 
 *               when this bit is set. 
 *               PERIPHERAL MODE: 
 *               This bit will be set when a control transaction ends before 
 *               the DataEnd bit has been set. An interrupt will be generated 
 *               and the FIFO flushed at this time. The bit is cleared by  
 *               the CPU writing a 1 to the ServicedSetupEnd bit. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__CSR0__ERRORORSETUPEND           BITFIELD(4, 4)
#define USB_OTGHS_16__CSR0__ERRORORSETUPEND__POS      4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__CSR0__SETUPPKTORDATAEND   
 *
 * @BRIEF        HOST MODE: 
 *               The CPU sets this bit, at the same time as the TxPktRdy bit 
 *               is set, to send a SETUP token instead of an OUT token for 
 *               the transaction. Note: Setting this bit also clears the Data 
 *               Toggle. 
 *               PERIPHERAL MODE: 
 *               The CPU sets this bit: 
 *               1. When setting TxPktRdy for the last data packet. 
 *               2. When clearing RxPktRdy after unloading the last data 
 *               packet. 
 *               3. When setting TxPktRdy for a zero length data packet. 
 *               It is cleared automatically. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__CSR0__SETUPPKTORDATAEND         BITFIELD(3, 3)
#define USB_OTGHS_16__CSR0__SETUPPKTORDATAEND__POS    3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__CSR0__RXSTALLORSENTSTALL   
 *
 * @BRIEF        HOST MODE: 
 *               This bit is set when a STALL handshake is received. The CPU 
 *               should clear this bit. 
 *               PERIPHERAL MODE: 
 *               This bit is set when a STALL handshake is transmitted. The 
 *               CPU should clear this bit. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__CSR0__RXSTALLORSENTSTALL        BITFIELD(2, 2)
#define USB_OTGHS_16__CSR0__RXSTALLORSENTSTALL__POS   2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__CSR0__TXPKTRDY   
 *
 * @BRIEF        The CPU sets this bit after loading a data packet into the 
 *               FIFO. It is cleared automatically when the data packet has 
 *               been transmitted. An interrupt is generated (if enabled) 
 *               when the bit is cleared. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__CSR0__TXPKTRDY                  BITFIELD(1, 1)
#define USB_OTGHS_16__CSR0__TXPKTRDY__POS             1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__CSR0__RXPKTRDY   
 *
 * @BRIEF        HOST MODE:  
 *               This bit is set when a data packet has been received. An 
 *               interrupt is generated (if enabled) when this bit is set. 
 *               The CPU should clear this bit, by writing a 0 to it when the 
 *               packet has been read from the FIFO. 
 *               PERIHERAL MODE: 
 *               This bit is set when a data packet has been received. An 
 *               interrupt is generated when this bit is set. The CPU clears 
 *               this bit by setting the ServicedRxPktRdy bit. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__CSR0__RXPKTRDY                  BITFIELD(0, 0)
#define USB_OTGHS_16__CSR0__RXPKTRDY__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__COUNT0__RESERVED   
 *
 * @BRIEF        Bitfield description is not available - (NA)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__COUNT0__RESERVED                BITFIELD(15, 8)
#define USB_OTGHS_16__COUNT0__RESERVED__POS           8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__COUNT0__ENDPOINT0RXCNT   
 *
 * @BRIEF        Count0 is a 7-bit read-only register that indicates the 
 *               number of received data bytes in the Endpoint 0 FIFO. The 
 *               value returned 
 *               changes as the contents of the FIFO change and is only valid 
 *               while RxPktRdy (CSR0.D0) is set.h - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__COUNT0__ENDPOINT0RXCNT          BITFIELD(7, 0)
#define USB_OTGHS_16__COUNT0__ENDPOINT0RXCNT__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXMAXP__M_MINUS_ONE   
 *
 * @BRIEF        For the support of High-bandwidth Isochronous/Interrupt 
 *               endpoints and of packet splitting on Bulk 
 *               endpoints, the register includes either 2 or 5 further bits 
 *               that define a multiplier m which is equal to 
 *               one more than the value recorded. 
 *               In the case of Bulk endpoints with the packet splitting 
 *               option enabled, the multiplier m can be up to 
 *               32 and defines the maximum number of \u2018USB\u2019 packets 
 *               (i.e. packets for transmission over the USB) 
 *               of the specified payload into which a single data packet 
 *               placed in the FIFO should be split, prior to 
 *               transfer. Note: The data packet is required to be an exact 
 *               multiple of the payload specified by bits 
 *               10:0, which is itself required to be either 8, 16, 32, 64 or 
 *               (in the case of High Speed transfers) 512 
 *               bytes. 
 *               For Isochronous/Interrupt endpoints operating in High-Speed 
 *               mode and with the High-bandwidth 
 *               option enabled, m may only be either 2 or 3 (corresponding 
 *               to bit 11 set or bit 12 set, respectively) 
 *               and it specifies the maximum number of such transactions 
 *               that can take place in a single 
 *               microframe. If either bit 11 or bit 12 is non-zero, the 
 *               USBOTGHS will automatically split any data 
 *               packet written to the FIFO into up to 2 or 3 \u2018USB\u2019 
 *               packets, each containing the specified payload (or 
 *               less). The maximum payload for each transaction is 1024 
 *               bytes, so this allows up to 3072 bytes to be 
 *               transmitted in each microframe. (For Isochronous/Interrupt 
 *               transfers in Full-speed mode or if Highbandwidth 
 *               is not enabled, bits 11 and 12 are ignored. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXMAXP__M_MINUS_ONE             BITFIELD(15, 11)
#define USB_OTGHS_16__TXMAXP__M_MINUS_ONE__POS        11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXMAXP__MAXPAYLOAD   
 *
 * @BRIEF        Defines (in bytes) the maximum payload transmitted in a 
 *               single transaction. The value set 
 *               can be up to 1024 bytes but is subject to the constraints 
 *               placed by the USB Specification on packet 
 *               sizes for Bulk, Interrupt and Isochronous transfers in 
 *               Full-speed and High-speed operations. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXMAXP__MAXPAYLOAD              BITFIELD(10, 0)
#define USB_OTGHS_16__TXMAXP__MAXPAYLOAD__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXCSR__AUTOSET   
 *
 * @BRIEF        If the CPU sets this bit, TxPktRdy will be automatically set 
 *               when data of the maximum packet size (value in TxMaxP) is 
 *               loaded into the Tx FIFO. If a packet of less than the 
 *               maximum packet size is loaded, then TxPktRdy will have to be 
 *               set manually. Note: Should not be set for high-bandwidth 
 *               Isochronous endpoints. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXCSR__AUTOSET                  BITFIELD(15, 15)
#define USB_OTGHS_16__TXCSR__AUTOSET__POS             15

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXCSR__ISO   
 *
 * @BRIEF        PERIPHERAL MODE ONLY BITFIELD 
 *               The CPU sets this bit to enable the Tx endpoint for 
 *               Isochronous transfers, and clears it to enable the Tx 
 *               endpoint for Bulk or Interrupt transfers. Note: This bit 
 *               only has any effect in Peripheral mode. In Host mode, it 
 *               always returns zero. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXCSR__ISO                      BITFIELD(14, 14)
#define USB_OTGHS_16__TXCSR__ISO__POS                 14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXCSR__MODE   
 *
 * @BRIEF        The CPU sets this bit to enable the endpoint direction as 
 *               Tx, and clears it to enable the endpoint direction as Rx. 
 *               Note: This bit only has any effect where the same endpoint 
 *               FIFO is used for both Tx and Rx transactions. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXCSR__MODE                     BITFIELD(13, 13)
#define USB_OTGHS_16__TXCSR__MODE__POS                13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXCSR__DMAREQENAB   
 *
 * @BRIEF        The CPU sets this bit to enable the DMA request for the Tx 
 *               endpoint. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXCSR__DMAREQENAB               BITFIELD(12, 12)
#define USB_OTGHS_16__TXCSR__DMAREQENAB__POS          12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXCSR__FRCDATATOG   
 *
 * @BRIEF        The CPU sets this bit to force the endpoint data toggle to 
 *               switch and the data packet to be cleared from the FIFO, 
 *               regardless of whether an ACK was received. This can be used 
 *               by Interrupt Tx endpoints that are used to communicate rate 
 *               feedback for Isochronous endpoints. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXCSR__FRCDATATOG               BITFIELD(11, 11)
#define USB_OTGHS_16__TXCSR__FRCDATATOG__POS          11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXCSR__DMAREQMODE   
 *
 * @BRIEF        The CPU sets this bit to select DMA Mode 1 and clears this 
 *               bit to select DMA Mode 0. 
 *               Note: This bit must not be cleared either before or in the 
 *               same cycle as the above DMAReqEnab bit is cleared. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXCSR__DMAREQMODE               BITFIELD(10, 10)
#define USB_OTGHS_16__TXCSR__DMAREQMODE__POS          10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXCSR__DATATOGGLEWRENABLE   
 *
 * @BRIEF        HOST MODE ONLY BITFIELD 
 *               The CPU writes a 1 to this bit to enable the current state 
 *               of the Tx Endpoint data toggle to be written (see Data 
 *               Toggle bit, below). This bit is automatically cleared once 
 *               the new value is written. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXCSR__DATATOGGLEWRENABLE       BITFIELD(9, 9)
#define USB_OTGHS_16__TXCSR__DATATOGGLEWRENABLE__POS  9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXCSR__DATATOGGLE   
 *
 * @BRIEF        HOST MODE ONLY BITFIELD  
 *               When read, this bit indicates the current state of the Tx 
 *               Endpoint data toggle. If D9 is high, this bit may be written 
 *               with the required setting of the data toggle. If D9 is low, 
 *               any value written to this bit is ignored. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXCSR__DATATOGGLE               BITFIELD(8, 8)
#define USB_OTGHS_16__TXCSR__DATATOGGLE__POS          8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXCSR__NAKTIMEOUTORINCOMPTX   
 *
 * @BRIEF        HOST MODE: 
 *               This bit will be set when the Tx endpoint is halted 
 *               following the receipt of NAK responses for longer than the 
 *               time set as the NAK Limit by the TxInterval register. The 
 *               CPU should clear this bit to allow the endpoint to continue. 
 *               Note: Valid only for Bulk endpoints. 
 *               PERIPHERAL MODE: 
 *               When the endpoint is being used for high-bandwidth 
 *               Isochronous/Interrupt transfers, this bit is set to indicate 
 *               where a large packet has been split into 2 or 3 packets for 
 *               transmission but insufficient IN tokens have been received 
 *               to send all the parts. Note: In anything other than a 
 *               high-bandwidth transfer, this bit will always return 0. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXCSR__NAKTIMEOUTORINCOMPTX     BITFIELD(7, 7)
#define USB_OTGHS_16__TXCSR__NAKTIMEOUTORINCOMPTX__POS 7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXCSR__CLRDATATOG   
 *
 * @BRIEF        The CPU writes a 1 to this bit to reset the endpoint data 
 *               toggle to 0. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXCSR__CLRDATATOG               BITFIELD(6, 6)
#define USB_OTGHS_16__TXCSR__CLRDATATOG__POS          6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXCSR__RXSTALLORSENTSTALL   
 *
 * @BRIEF        HOST MODE:  
 *               This bit is set when a STALL handshake is received. When 
 *               this bit is set, any DMA request that is in progress is 
 *               stopped, the FIFO is completely flushed and the TxPktRdy bit 
 *               is cleared (see below). The CPU should clear this bit. 
 *               PERIPHERAL MODE: 
 *               This bit is set when a STALL handshake is transmitted. The 
 *               FIFO is flushed and the TxPktRdy bit is cleared (see below). 
 *               The CPU should clear this bit. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXCSR__RXSTALLORSENTSTALL       BITFIELD(5, 5)
#define USB_OTGHS_16__TXCSR__RXSTALLORSENTSTALL__POS  5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXCSR__SETUPPKTORSENDSTALL   
 *
 * @BRIEF        HOST MODE: 
 *               The CPU sets this bit, at the same time as the TxPktRdy bit 
 *               is set, to send a SETUP token instead of an OUT token for 
 *               the transaction. Note: Setting this bit also clears the Data 
 *               Toggle. 
 *               PERIPHERAL MODE: 
 *               The CPU writes a 1 to this bit to issue a STALL handshake to 
 *               an IN token. The CPU clears this bit to terminate the stall 
 *               condition. Note: This bit has no effect where the endpoint 
 *               is being used for Isochronous transfers. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXCSR__SETUPPKTORSENDSTALL      BITFIELD(4, 4)
#define USB_OTGHS_16__TXCSR__SETUPPKTORSENDSTALL__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXCSR__FLUSHFIFO   
 *
 * @BRIEF        The CPU writes a 1 to this bit to flush the latest packet 
 *               from the endpoint Tx FIFO. The FIFO pointer is reset, the 
 *               TxPktRdy bit (below) is cleared and an interrupt is 
 *               generated. May be set simultaneously with TxPktRdy to abort 
 *               the packet that is currently being loaded into the FIFO. 
 *               Note: FlushFIFO has no effect unless TxPktRdy is set. Also 
 *               note that, if the FIFO is double-buffered, FlushFIFO may 
 *               need to be set twice to completely clear the FIFO. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXCSR__FLUSHFIFO                BITFIELD(3, 3)
#define USB_OTGHS_16__TXCSR__FLUSHFIFO__POS           3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXCSR__ERRORORUNDERRUN   
 *
 * @BRIEF        HOST MODE: 
 *               The USB sets this bit when 3 attempts have been made to send 
 *               a packet and no handshake packet has been received. When the 
 *               bit is set, an interrupt is generated, TxPktRdy is cleared 
 *               and the FIFO is completely flushed. The CPU should clear 
 *               this bit. Valid only when the endpoint is operating in Bulk 
 *               or Interrupt mode. 
 *               PERIPHERAL MODE: 
 *               The USB sets this bit if an IN token is received when the 
 *               TxPktRdy bit not set. The CPU should clear this bit. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXCSR__ERRORORUNDERRUN          BITFIELD(2, 2)
#define USB_OTGHS_16__TXCSR__ERRORORUNDERRUN__POS     2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXCSR__FIFONOTEMPTY   
 *
 * @BRIEF        The USB sets this bit when there is at least 1 packet in the 
 *               Tx FIFO. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXCSR__FIFONOTEMPTY             BITFIELD(1, 1)
#define USB_OTGHS_16__TXCSR__FIFONOTEMPTY__POS        1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXCSR__TXPKTRDY   
 *
 * @BRIEF        The CPU sets this bit after loading a data packet into the 
 *               FIFO. It is cleared automatically when a data packet has 
 *               been transmitted. An interrupt is also generated at this 
 *               point (if enabled). TxPktRdy is also automatically cleared 
 *               (but no interrupt is generated) prior to loading a second 
 *               packet into a double-buffered FIFO. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXCSR__TXPKTRDY                 BITFIELD(0, 0)
#define USB_OTGHS_16__TXCSR__TXPKTRDY__POS            0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXMAXP__M_MINUS_ONE   
 *
 * @BRIEF        For the support of High-bandwidth Isochronous/Interrupt 
 *               endpoints and of Bulk packets combining, 
 *               the register includes either 2 or 5 further bits that define 
 *               a multiplier m which is equal to one more 
 *               than the value recorded. 
 *               For Bulk endpoints with the packet combining option enabled, 
 *               the multiplier m can be up to 32 and 
 *               defines the number of USB packets of the specified payload 
 *               which are to be combined into a single 
 *               data packet within the FIFO. 
 *               For Isochronous/Interrupt endpoints operating in High-Speed 
 *               mode and with the High-bandwidth 
 *               option enabled, m may only be either 2 or 3 (corresponding 
 *               to bit 11 set or bit 12 set, respectively) 
 *               and it specifies the maximum number of such transactions 
 *               that can take place in a single 
 *               microframe. If either bit 11 or bit 12 is non-zero, the 
 *               USBOTGHS will automatically combine the 
 *               separate USB packets received in any microframe into a 
 *               single packet within the Rx FIFO. The 
 *               maximum payload for each transaction is 1024 bytes, so this 
 *               allows up to 3072 bytes to be received in 
 *               each microframe. (For Isochronous/Interrupt transfers in 
 *               Full-speed mode or if High-bandwidth is not 
 *               enabled, bits 11 and 12 are ignored.) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXMAXP__M_MINUS_ONE             BITFIELD(15, 11)
#define USB_OTGHS_16__RXMAXP__M_MINUS_ONE__POS        11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXMAXP__MAXPAYLOAD   
 *
 * @BRIEF        Defines (in bytes) the maximum payload transmitted in a 
 *               single transaction. The value set 
 *               can be up to 1024 bytes but is subject to the constraints 
 *               placed by the USB Specification on packet 
 *               sizes for Bulk, Interrupt and Isochronous transfers in 
 *               Full-speed and High-speed operations. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXMAXP__MAXPAYLOAD              BITFIELD(10, 0)
#define USB_OTGHS_16__RXMAXP__MAXPAYLOAD__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXCSR__AUTOCLR   
 *
 * @BRIEF        If the CPU sets this bit then the RxPktRdy bit will be 
 *               automatically cleared when a packet of RxMaxP bytes has been 
 *               unloaded from the Rx FIFO. When packets of less than the 
 *               maximum packet size are unloaded, RxPktRdy will have to be 
 *               cleared manually. Note: Should not be set for high-bandwidth 
 *               Isochronous endpoints. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXCSR__AUTOCLR                  BITFIELD(15, 15)
#define USB_OTGHS_16__RXCSR__AUTOCLR__POS             15

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXCSR__AUTOREQORISO   
 *
 * @BRIEF        HOST MODE: 
 *               If the CPU sets this bit, the ReqPkt bit will be 
 *               automatically set when the RxPktRdy bit is cleared.  
 *               Note: This bit is automatically cleared when a short packet 
 *               is received. 
 *               PERIPHERAL MODE: 
 *               The CPU sets this bit to enable the Rx endpoint for 
 *               Isochronous transfers, and clears it to enable the Rx 
 *               endpoint for Bulk/Interrupt transfers. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXCSR__AUTOREQORISO             BITFIELD(14, 14)
#define USB_OTGHS_16__RXCSR__AUTOREQORISO__POS        14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXCSR__DMAREQENAB   
 *
 * @BRIEF        The CPU sets this bit to enable the DMA request for the Rx 
 *               endpoint. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXCSR__DMAREQENAB               BITFIELD(13, 13)
#define USB_OTGHS_16__RXCSR__DMAREQENAB__POS          13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXCSR__PIDERRORORDISNYET   
 *
 * @BRIEF        HOST MODE: 
 *               ISO Transactions Only: The core sets this bit to indicate a 
 *               PID error in the received packet. Bulk/Interrupt 
 *               Transactions: The setting of this bit is ignored. 
 *               PERIPHERAL MODE: 
 *               The CPU sets this bit to disable the sending of NYET 
 *               handshakes. When set, all successfully received Rx packets 
 *               are ACK'd including at the point at which the FIFO becomes 
 *               full. Note: This bit only has any effect in High-speed mode, 
 *               in which mode it should be set for all Interrupt endpoints. 
 *               ISO Transactions: The core sets this bit to indicate a PID 
 *               error in the received packet. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXCSR__PIDERRORORDISNYET        BITFIELD(12, 12)
#define USB_OTGHS_16__RXCSR__PIDERRORORDISNYET__POS   12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXCSR__DMAREQMODE   
 *
 * @BRIEF        The CPU sets this bit to select DMA Mode 1 and clears this 
 *               bit to select DMA Mode 0. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXCSR__DMAREQMODE               BITFIELD(11, 11)
#define USB_OTGHS_16__RXCSR__DMAREQMODE__POS          11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXCSR__DATATOGGLEWRITEENABLE   
 *
 * @BRIEF        HOST MODE ONLY BITFIELD 
 *               The CPU writes a 1 to this bit to enable the current state 
 *               of the Rx Endpoint data toggle to be written (see Data 
 *               Toggle bit, below). This bit is automatically cleared once 
 *               the new value is written. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXCSR__DATATOGGLEWRITEENABLE    BITFIELD(10, 10)
#define USB_OTGHS_16__RXCSR__DATATOGGLEWRITEENABLE__POS 10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXCSR__DATATOGGLE   
 *
 * @BRIEF        HOST MODE ONLY BITFIELD 
 *               When read, this bit indicates the current state of the Rx 
 *               Endpoint data toggle. If D10 is high, this bit may be 
 *               written with the required setting of the data toggle. If D10 
 *               is low, any value written to this bit is ignored. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXCSR__DATATOGGLE               BITFIELD(9, 9)
#define USB_OTGHS_16__RXCSR__DATATOGGLE__POS          9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXCSR__INCOMPRX   
 *
 * @BRIEF        This bit will be set in a high-bandwidth Isochronous 
 *               transfer if the packet received is incomplete. It will be 
 *               cleared when RxPktRdy is cleared. Note: If USB protocols are 
 *               followed correctly, this bit should never be set. The bit 
 *               becoming set indicates a failure of the associated 
 *               Peripheral device to behave correctly. (In anything other 
 *               than a high-bandwidth Isochronous transfer, this bit will 
 *               always return 0.) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXCSR__INCOMPRX                 BITFIELD(8, 8)
#define USB_OTGHS_16__RXCSR__INCOMPRX__POS            8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXCSR__CLRDATATOG   
 *
 * @BRIEF        The CPU writes a 1 to this bit to reset the endpoint data 
 *               toggle to 0. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXCSR__CLRDATATOG               BITFIELD(7, 7)
#define USB_OTGHS_16__RXCSR__CLRDATATOG__POS          7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXCSR__RXSTALLORSENTSTALL   
 *
 * @BRIEF        HOST MODE: 
 *               When a STALL handshake is received, this bit is set and an 
 *               interrupt is generated. The CPU should clear this bit. 
 *               PERIPHERAL MODE: 
 *               This bit is set when a STALL handshake is transmitted. The 
 *               CPU should clear this bit. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXCSR__RXSTALLORSENTSTALL       BITFIELD(6, 6)
#define USB_OTGHS_16__RXCSR__RXSTALLORSENTSTALL__POS  6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXCSR__REQPKTORSENDSTALL   
 *
 * @BRIEF        HOST MODE: 
 *               The CPU writes a 1 to this bit to request an IN transaction. 
 *               It is cleared when RxPktRdy is set. 
 *               PERIPHERAL MODE: 
 *               The CPU writes a 1 to this bit to issue a STALL handshake. 
 *               The CPU clears this bit to terminate the stall condition. 
 *               Note: This bit has no effect where the endpoint is being 
 *               used for Isochronous transfers. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXCSR__REQPKTORSENDSTALL        BITFIELD(5, 5)
#define USB_OTGHS_16__RXCSR__REQPKTORSENDSTALL__POS   5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXCSR__FLUSHFIFO   
 *
 * @BRIEF        The CPU writes a 1 to this bit to flush the next packet to 
 *               be read from the endpoint Rx FIFO.  
 *               The FIFO pointer is reset and the RxPktRdy bit (below) is 
 *               cleared. Note: FlushFIFO has no effect unless RxPktRdy is 
 *               set. Also note that, if the FIFO is double-buffered, 
 *               FlushFIFO may need to be set twice to completely clear the 
 *               FIFO. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXCSR__FLUSHFIFO                BITFIELD(4, 4)
#define USB_OTGHS_16__RXCSR__FLUSHFIFO__POS           4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXCSR__NAKTIMEOUTORDATAERROR   
 *
 * @BRIEF        HOST MODE: 
 *               When operating in ISO mode, this bit is set when RxPktRdy is 
 *               set if the data packet has a CRC or bit-stuff error and 
 *               cleared when RxPktRdy is cleared. In Bulk mode, this bit 
 *               will be set when the Rx endpoint is halted following the 
 *               receipt of NAK responses for longer than the time set as the 
 *               NAK Limit by the RxInterval register. The CPU should clear 
 *               this bit to allow the endpoint to continue. 
 *               PERIPHERAL MODE: 
 *               This bit is set when RxPktRdy is set if the data packet has 
 *               a CRC or bit-stuff error. It is cleared when RxPktRdy is 
 *               cleared. Note: This bit is only valid when the endpoint is 
 *               operating in ISO mode. In Bulk mode, it always returns zero. 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXCSR__NAKTIMEOUTORDATAERROR    BITFIELD(3, 3)
#define USB_OTGHS_16__RXCSR__NAKTIMEOUTORDATAERROR__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXCSR__ERROROROVERRUN   
 *
 * @BRIEF        HOST MODE: 
 *               The USB sets this bit when 3 attempts have been made to 
 *               receive a packet and no data packet has been received. The 
 *               CPU should clear this bit. An interrupt is generated when 
 *               the bit is set.  
 *               Note: This bit is only valid when the Tx endpoint is 
 *               operating in Bulk or Interrupt mode. In ISO mode, it always 
 *               returns zero. 
 *               PERIPHERAL MODE: 
 *               This bit is set if an OUT packet cannot be loaded into the 
 *               Rx FIFO. The CPU should clear this bit. Note: This bit is 
 *               only valid when the endpoint is operating in ISO mode. In 
 *               Bulk mode, it always returns zero. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXCSR__ERROROROVERRUN           BITFIELD(2, 2)
#define USB_OTGHS_16__RXCSR__ERROROROVERRUN__POS      2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXCSR__FIFOFULL   
 *
 * @BRIEF        This bit is set when no more packets can be loaded into the 
 *               Rx FIFO. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXCSR__FIFOFULL                 BITFIELD(1, 1)
#define USB_OTGHS_16__RXCSR__FIFOFULL__POS            1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXCSR__RXPKTRDY   
 *
 * @BRIEF        This bit is set when a data packet has been received. The 
 *               CPU should clear this bit when the packet has been unloaded 
 *               from the Rx FIFO. An interrupt is generated when the bit is 
 *               set. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXCSR__RXPKTRDY                 BITFIELD(0, 0)
#define USB_OTGHS_16__RXCSR__RXPKTRDY__POS            0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXCOUNT__COUNT   
 *
 * @BRIEF        holds the number of data bytes in the packet currently in 
 *               line to be read from the Rx 
 *               FIFO. If the packet was transmitted as multiple bulk 
 *               packets, the number given will be for the combined packet. 
 *               Note: The value returned changes as the FIFO is unloaded and 
 *               is only valid while RxPktRdy (RxCSR.D0) is set.u - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXCOUNT__COUNT                  BITFIELD(12, 0)
#define USB_OTGHS_16__RXCOUNT__COUNT__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DMA_CNTL__DMA_BRSTM   
 *
 * @BRIEF        Burst Mode 
 *               00 = Burst Mode 0 : Bursts of unspecified length 
 *               01 = Burst Mode 1 : INCR4 or unspecified length 
 *               10 = Burst Mode 2 : INCR8, INCR4 or unspecified length 
 *               11 = Burst Mode 3 : INCR16, INCR8, INCR4 or unspecified 
 *               length - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DMA_CNTL__DMA_BRSTM             BITFIELD(10, 9)
#define USB_OTGHS_16__DMA_CNTL__DMA_BRSTM__POS        9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DMA_CNTL__DMA_ERR   
 *
 * @BRIEF        Bus Error Bit. Indicates that a bus error has been observed 
 *               on the input 
 *               AHB_HRESPM[1:0]. This bit is cleared by software. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DMA_CNTL__DMA_ERR               BITFIELD(8, 8)
#define USB_OTGHS_16__DMA_CNTL__DMA_ERR__POS          8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DMA_CNTL__DMAEP   
 *
 * @BRIEF        The endpoint number this channel is assigned to. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DMA_CNTL__DMAEP                 BITFIELD(7, 4)
#define USB_OTGHS_16__DMA_CNTL__DMAEP__POS            4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DMA_CNTL__DMAIE   
 *
 * @BRIEF        DMA Interrupt Enable. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DMA_CNTL__DMAIE                 BITFIELD(3, 3)
#define USB_OTGHS_16__DMA_CNTL__DMAIE__POS            3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DMA_CNTL__DMAMODE   
 *
 * @BRIEF        This bit selects the DMA Transfer Mode. 
 *               0 = DMA Mode0 Transfer 
 *               1 = DMA Mode1 Transfer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DMA_CNTL__DMAMODE               BITFIELD(2, 2)
#define USB_OTGHS_16__DMA_CNTL__DMAMODE__POS          2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DMA_CNTL__DMA_DIR   
 *
 * @BRIEF        This bit selects the DMA Transfer Direction. 
 *               0 = DMA Write (RX Endpoint) 
 *               1 = DMA Read (TX Endpoint) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DMA_CNTL__DMA_DIR               BITFIELD(1, 1)
#define USB_OTGHS_16__DMA_CNTL__DMA_DIR__POS          1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DMA_CNTL__DMA_ENAB   
 *
 * @BRIEF        This bit enables the DMA transfer and will cause the 
 *               transfer to begin. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DMA_CNTL__DMA_ENAB              BITFIELD(0, 0)
#define USB_OTGHS_16__DMA_CNTL__DMA_ENAB__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXDPKTBUFDIS__EP15RXDIS   
 *
 * @BRIEF        Rx Double Packet Buffer Disable for Endpoint 15 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXDPKTBUFDIS__EP15RXDIS         BITFIELD(15, 15)
#define USB_OTGHS_16__RXDPKTBUFDIS__EP15RXDIS__POS    15

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXDPKTBUFDIS__EP14RXDIS   
 *
 * @BRIEF        Rx Double Packet Buffer Disable for Endpoint 14 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXDPKTBUFDIS__EP14RXDIS         BITFIELD(14, 14)
#define USB_OTGHS_16__RXDPKTBUFDIS__EP14RXDIS__POS    14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXDPKTBUFDIS__EP13RXDIS   
 *
 * @BRIEF        Rx Double Packet Buffer Disable for Endpoint 13 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXDPKTBUFDIS__EP13RXDIS         BITFIELD(13, 13)
#define USB_OTGHS_16__RXDPKTBUFDIS__EP13RXDIS__POS    13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXDPKTBUFDIS__EP12RXDIS   
 *
 * @BRIEF        Rx Double Packet Buffer Disable for Endpoint 11 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXDPKTBUFDIS__EP12RXDIS         BITFIELD(12, 12)
#define USB_OTGHS_16__RXDPKTBUFDIS__EP12RXDIS__POS    12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXDPKTBUFDIS__EP11RXDIS   
 *
 * @BRIEF        Rx Double Packet Buffer Disable for Endpoint 11 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXDPKTBUFDIS__EP11RXDIS         BITFIELD(11, 11)
#define USB_OTGHS_16__RXDPKTBUFDIS__EP11RXDIS__POS    11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXDPKTBUFDIS__EP10RXDIS   
 *
 * @BRIEF        Rx Double Packet Buffer Disable for Endpoint 10 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXDPKTBUFDIS__EP10RXDIS         BITFIELD(10, 10)
#define USB_OTGHS_16__RXDPKTBUFDIS__EP10RXDIS__POS    10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXDPKTBUFDIS__EP9RXDIS   
 *
 * @BRIEF        Rx Double Packet Buffer Disable for Endpoint 9 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXDPKTBUFDIS__EP9RXDIS          BITFIELD(9, 9)
#define USB_OTGHS_16__RXDPKTBUFDIS__EP9RXDIS__POS     9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXDPKTBUFDIS__EP8RXDIS   
 *
 * @BRIEF        Rx Double Packet Buffer Disable for Endpoint 8 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXDPKTBUFDIS__EP8RXDIS          BITFIELD(8, 8)
#define USB_OTGHS_16__RXDPKTBUFDIS__EP8RXDIS__POS     8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXDPKTBUFDIS__EP7RXDIS   
 *
 * @BRIEF        Rx Double Packet Buffer Disable for Endpoint 7 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXDPKTBUFDIS__EP7RXDIS          BITFIELD(7, 7)
#define USB_OTGHS_16__RXDPKTBUFDIS__EP7RXDIS__POS     7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXDPKTBUFDIS__EP6RXDIS   
 *
 * @BRIEF        Rx Double Packet Buffer Disable for Endpoint 6 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXDPKTBUFDIS__EP6RXDIS          BITFIELD(6, 6)
#define USB_OTGHS_16__RXDPKTBUFDIS__EP6RXDIS__POS     6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXDPKTBUFDIS__EP5RXDIS   
 *
 * @BRIEF        Rx Double Packet Buffer Disable for Endpoint 5 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXDPKTBUFDIS__EP5RXDIS          BITFIELD(5, 5)
#define USB_OTGHS_16__RXDPKTBUFDIS__EP5RXDIS__POS     5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXDPKTBUFDIS__EP4RXDIS   
 *
 * @BRIEF        Rx Double Packet Buffer Disable for Endpoint 4 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXDPKTBUFDIS__EP4RXDIS          BITFIELD(4, 4)
#define USB_OTGHS_16__RXDPKTBUFDIS__EP4RXDIS__POS     4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXDPKTBUFDIS__EP3RXDIS   
 *
 * @BRIEF        Rx Double Packet Buffer Disable for Endpoint 3 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXDPKTBUFDIS__EP3RXDIS          BITFIELD(3, 3)
#define USB_OTGHS_16__RXDPKTBUFDIS__EP3RXDIS__POS     3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXDPKTBUFDIS__EP2RXDIS   
 *
 * @BRIEF        Rx Double Packet Buffer Disable for Endpoint 2 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXDPKTBUFDIS__EP2RXDIS          BITFIELD(2, 2)
#define USB_OTGHS_16__RXDPKTBUFDIS__EP2RXDIS__POS     2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__RXDPKTBUFDIS__EP1RXDIS   
 *
 * @BRIEF        Rx Double Packet Buffer Disable for Endpoint 1 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__RXDPKTBUFDIS__EP1RXDIS          BITFIELD(1, 1)
#define USB_OTGHS_16__RXDPKTBUFDIS__EP1RXDIS__POS     1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXDPKTBUFDIS__EP15TXDIS   
 *
 * @BRIEF        Tx Double Packet Buffer Disable for Endpoint 15 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXDPKTBUFDIS__EP15TXDIS         BITFIELD(15, 15)
#define USB_OTGHS_16__TXDPKTBUFDIS__EP15TXDIS__POS    15

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXDPKTBUFDIS__EP14TXDIS   
 *
 * @BRIEF        Tx Double Packet Buffer Disable for Endpoint 14 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXDPKTBUFDIS__EP14TXDIS         BITFIELD(14, 14)
#define USB_OTGHS_16__TXDPKTBUFDIS__EP14TXDIS__POS    14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXDPKTBUFDIS__EP13TXDIS   
 *
 * @BRIEF        Tx Double Packet Buffer Disable for Endpoint 13 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXDPKTBUFDIS__EP13TXDIS         BITFIELD(13, 13)
#define USB_OTGHS_16__TXDPKTBUFDIS__EP13TXDIS__POS    13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXDPKTBUFDIS__EP12TXDIS   
 *
 * @BRIEF        Tx Double Packet Buffer Disable for Endpoint 12 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXDPKTBUFDIS__EP12TXDIS         BITFIELD(12, 12)
#define USB_OTGHS_16__TXDPKTBUFDIS__EP12TXDIS__POS    12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXDPKTBUFDIS__EP11TXDIS   
 *
 * @BRIEF        Tx Double Packet Buffer Disable for Endpoint 11 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXDPKTBUFDIS__EP11TXDIS         BITFIELD(11, 11)
#define USB_OTGHS_16__TXDPKTBUFDIS__EP11TXDIS__POS    11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXDPKTBUFDIS__EP10TXDIS   
 *
 * @BRIEF        Tx Double Packet Buffer Disable for Endpoint 10 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXDPKTBUFDIS__EP10TXDIS         BITFIELD(10, 10)
#define USB_OTGHS_16__TXDPKTBUFDIS__EP10TXDIS__POS    10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXDPKTBUFDIS__EP9TXDIS   
 *
 * @BRIEF        Tx Double Packet Buffer Disable for Endpoint 9 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXDPKTBUFDIS__EP9TXDIS          BITFIELD(9, 9)
#define USB_OTGHS_16__TXDPKTBUFDIS__EP9TXDIS__POS     9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXDPKTBUFDIS__EP8TXDIS   
 *
 * @BRIEF        Rx Double Packet Buffer Disable for Endpoint 8 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXDPKTBUFDIS__EP8TXDIS          BITFIELD(8, 8)
#define USB_OTGHS_16__TXDPKTBUFDIS__EP8TXDIS__POS     8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXDPKTBUFDIS__EP7TXDIS   
 *
 * @BRIEF        Tx Double Packet Buffer Disable for Endpoint 7 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXDPKTBUFDIS__EP7TXDIS          BITFIELD(7, 7)
#define USB_OTGHS_16__TXDPKTBUFDIS__EP7TXDIS__POS     7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXDPKTBUFDIS__EP6TXDIS   
 *
 * @BRIEF        Tx Double Packet Buffer Disable for Endpoint 6 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXDPKTBUFDIS__EP6TXDIS          BITFIELD(6, 6)
#define USB_OTGHS_16__TXDPKTBUFDIS__EP6TXDIS__POS     6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXDPKTBUFDIS__EP5TXDIS   
 *
 * @BRIEF        Tx Double Packet Buffer Disable for Endpoint 5 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXDPKTBUFDIS__EP5TXDIS          BITFIELD(5, 5)
#define USB_OTGHS_16__TXDPKTBUFDIS__EP5TXDIS__POS     5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXDPKTBUFDIS__EP4TXDIS   
 *
 * @BRIEF        Tx Double Packet Buffer Disable for Endpoint 4 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXDPKTBUFDIS__EP4TXDIS          BITFIELD(4, 4)
#define USB_OTGHS_16__TXDPKTBUFDIS__EP4TXDIS__POS     4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXDPKTBUFDIS__EP3TXDIS   
 *
 * @BRIEF        Tx Double Packet Buffer Disable for Endpoint 3 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXDPKTBUFDIS__EP3TXDIS          BITFIELD(3, 3)
#define USB_OTGHS_16__TXDPKTBUFDIS__EP3TXDIS__POS     3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXDPKTBUFDIS__EP2TXDIS   
 *
 * @BRIEF        Tx Double Packet Buffer Disable for Endpoint 2 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXDPKTBUFDIS__EP2TXDIS          BITFIELD(2, 2)
#define USB_OTGHS_16__TXDPKTBUFDIS__EP2TXDIS__POS     2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__TXDPKTBUFDIS__EP1TXDIS   
 *
 * @BRIEF        Tx Double Packet Buffer Disable for Endpoint 1 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__TXDPKTBUFDIS__EP1TXDIS          BITFIELD(1, 1)
#define USB_OTGHS_16__TXDPKTBUFDIS__EP1TXDIS__POS     1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__C_T_UCH__C_T_UCH   
 *
 * @BRIEF        Configurable Chirp Timeout timer; The default value is 
 *               determined by compiler directive in 
 *               musbhsfc_xcfg.v file. The default value is 203Ah if the host 
 *               PHY data width is 16 bits (XCLK is 
 *               30MHz) and 4074h if the PHY data width is 8 bits (XCLK is 
 *               60Mhz) corresponding to a delay of 
 *               1.1ms. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__C_T_UCH__C_T_UCH                BITFIELD(15, 0)
#define USB_OTGHS_16__C_T_UCH__C_T_UCH__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__C_T_HSRTN__C_T_HSRTN   
 *
 * @BRIEF        The delay from the end of High Speed resume signaling to 
 *               enabling UTM normal operating mode. The default value is 
 *               5E6h corresponding to a delay of 100us. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__C_T_HSRTN__C_T_HSRTN            BITFIELD(15, 0)
#define USB_OTGHS_16__C_T_HSRTN__C_T_HSRTN__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__LPM_ATTR__ENDPNT   
 *
 * @BRIEF        This is the EndPnt that in the Token Packet of the LPM 
 *               transaction. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__LPM_ATTR__ENDPNT                BITFIELD(15, 12)
#define USB_OTGHS_16__LPM_ATTR__ENDPNT__POS           12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__LPM_ATTR__RMTWAK   
 *
 * @BRIEF        This bit is the remote wakeup enable bit. 
 *               RmtWak = 1'b0 : Remote wakeup is not enabled. 
 *               RmtWak = 1'b1: Remote wakeup is enabled. 
 *               This bit is applied on a temporary basis only and is only 
 *               applied to the current suspend 
 *               state. After the current suspend cycle, the remote wakeup 
 *               capability that was negotiated 
 *               upon enumeration will apply. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__LPM_ATTR__RMTWAK                BITFIELD(8, 8)
#define USB_OTGHS_16__LPM_ATTR__RMTWAK__POS           8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__LPM_ATTR__HIRD   
 *
 * @BRIEF        This is the Host Initiated Resume Duration. This value is 
 *               the minimum time the host will 
 *               drive resume on the Bus. The value in this register 
 *               corresponds to an actual resume time 
 *               of : 
 *               Resume Time = 50us + HIRD*75us. This results a range 50us to 
 *               1200us. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__LPM_ATTR__HIRD                  BITFIELD(7, 4)
#define USB_OTGHS_16__LPM_ATTR__HIRD__POS             4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__LPM_ATTR__LINKSTATE   
 *
 * @BRIEF        This value is provided by the host to the peripheral to 
 *               indicate what state the peripheral 
 *               must transition to after the receipt and acceptance of a LPM 
 *               transaction. 
 *               LinkState = 4'h0 - Reserved 
 *               LinkState = 4'h1 - Sleep State (L1) 
 *               LinkState = 4'h2 - Reserved 
 *               LinkState = 4'h3 - Reserved - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__LPM_ATTR__LINKSTATE             BITFIELD(3, 0)
#define USB_OTGHS_16__LPM_ATTR__LINKSTATE__POS        0

    /* 
     * List of register bitfields values for component USB_OTGHS_16
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP15TX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP15TX__NONACTIVE       0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP15TX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP15TX__ACTIVE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP14TX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP14TX__NONACTIVE       0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP14TX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP14TX__ACTIVE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP13TX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP13TX__NONACTIVE       0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP13TX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP13TX__ACTIVE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP12TX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP12TX__NONACTIVE       0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP12TX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP12TX__ACTIVE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP11TX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP11TX__NONACTIVE       0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP11TX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP11TX__ACTIVE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP10TX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP10TX__NONACTIVE       0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP10TX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP10TX__ACTIVE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP9TX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP9TX__NONACTIVE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP9TX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP9TX__ACTIVE           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP8TX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP8TX__NONACTIVE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP8TX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP8TX__ACTIVE           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP7TX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP7TX__NONACTIVE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP7TX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP7TX__ACTIVE           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP6TX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP6TX__NONACTIVE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP6TX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP6TX__ACTIVE           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP5TX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP5TX__NONACTIVE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP5TX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP5TX__ACTIVE           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP4TX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP4TX__NONACTIVE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP4TX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP4TX__ACTIVE           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP3TX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP3TX__NONACTIVE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP3TX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP3TX__ACTIVE           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP2TX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP2TX__NONACTIVE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP2TX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP2TX__ACTIVE           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP1TX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP1TX__NONACTIVE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP1TX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP1TX__ACTIVE           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP0__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP0__NONACTIVE          0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTX__EP0__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTX__EP0__ACTIVE             0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP15RX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP15RX__NONACTIVE       0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP15RX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP15RX__ACTIVE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP14RX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP14RX__NONACTIVE       0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP14RX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP14RX__ACTIVE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP13RX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP13RX__NONACTIVE       0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP13RX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP13RX__ACTIVE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP12RX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP12RX__NONACTIVE       0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP12RX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP12RX__ACTIVE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP11RX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP11RX__NONACTIVE       0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP11RX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP11RX__ACTIVE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP10RX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP10RX__NONACTIVE       0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP10RX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP10RX__ACTIVE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP9RX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP9RX__NONACTIVE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP9RX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP9RX__ACTIVE           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP8RX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP8RX__NONACTIVE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP8RX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP8RX__ACTIVE           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP7RX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP7RX__NONACTIVE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP7RX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP7RX__ACTIVE           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP6RX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP6RX__NONACTIVE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP6RX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP6RX__ACTIVE           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP5RX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP5RX__NONACTIVE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP5RX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP5RX__ACTIVE           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP4RX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP4RX__NONACTIVE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP4RX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP4RX__ACTIVE           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP3RX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP3RX__NONACTIVE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP3RX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP3RX__ACTIVE           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP2RX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP2RX__NONACTIVE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP2RX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP2RX__ACTIVE           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP1RX__NONACTIVE
 *
 * @BRIEF        Interrupt not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP1RX__NONACTIVE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRX__EP1RX__ACTIVE
 *
 * @BRIEF        Interrupt active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRX__EP1RX__ACTIVE           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP15TX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP15TX__DISABLE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP15TX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP15TX__ENABLE         0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP14TX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP14TX__DISABLE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP14TX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP14TX__ENABLE         0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP13TX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP13TX__DISABLE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP13TX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP13TX__ENABLE         0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP12TX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP12TX__DISABLE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP12TX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP12TX__ENABLE         0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP11TX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP11TX__DISABLE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP11TX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP11TX__ENABLE         0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP10TX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP10TX__DISABLE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP10TX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP10TX__ENABLE         0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP9TX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP9TX__DISABLE         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP9TX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP9TX__ENABLE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP8TX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP8TX__DISABLE         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP8TX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP8TX__ENABLE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP7TX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP7TX__DISABLE         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP7TX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP7TX__ENABLE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP6TX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP6TX__DISABLE         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP6TX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP6TX__ENABLE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP5TX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP5TX__DISABLE         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP5TX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP5TX__ENABLE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP4TX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP4TX__DISABLE         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP4TX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP4TX__ENABLE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP3TX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP3TX__DISABLE         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP3TX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP3TX__ENABLE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP2TX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP2TX__DISABLE         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP2TX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP2TX__ENABLE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP1TX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP1TX__DISABLE         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP1TX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP1TX__ENABLE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP0__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP0__DISABLE           0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRTXE__EP0__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRTXE__EP0__ENABLE            0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP15RX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP15RX__DISABLE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP15RX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP15RX__ENABLE         0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP14RX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP14RX__DISABLE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP14RX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP14RX__ENABLE         0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP13RX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP13RX__DISABLE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP13RX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP13RX__ENABLE         0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP12RX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP12RX__DISABLE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP12RX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP12RX__ENABLE         0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP11RX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP11RX__DISABLE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP11RX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP11RX__ENABLE         0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP10RX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP10RX__DISABLE        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP10RX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP10RX__ENABLE         0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP9RX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP9RX__DISABLE         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP9RX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP9RX__ENABLE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP8RX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP8RX__DISABLE         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP8RX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP8RX__ENABLE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP7RX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP7RX__DISABLE         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP7RX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP7RX__ENABLE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP6RX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP6RX__DISABLE         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP6RX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP6RX__ENABLE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP5RX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP5RX__DISABLE         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP5RX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP5RX__ENABLE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP4RX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP4RX__DISABLE         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP4RX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP4RX__ENABLE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP3RX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP3RX__DISABLE         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP3RX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP3RX__ENABLE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP2RX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP2RX__DISABLE         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP2RX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP2RX__ENABLE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP1RX__DISABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP1RX__DISABLE         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__INTRRXE__EP1RX__ENABLE
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__INTRRXE__EP1RX__ENABLE          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DMA_CNTL__DMA_BRSTM__BM0
 *
 * @BRIEF        bursts of unspecified length - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DMA_CNTL__DMA_BRSTM__BM0        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DMA_CNTL__DMA_BRSTM__BM1
 *
 * @BRIEF        INCR4 or unspecified length - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DMA_CNTL__DMA_BRSTM__BM1        0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DMA_CNTL__DMA_BRSTM__BM2
 *
 * @BRIEF        INCR8, INCR4 or unspecified length - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DMA_CNTL__DMA_BRSTM__BM2        0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   USB_OTGHS_16__DMA_CNTL__DMA_BRSTM__BM3
 *
 * @BRIEF        INCR16, INCR8, INCR4 or unspecified length - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define USB_OTGHS_16__DMA_CNTL__DMA_BRSTM__BM3        0x3ul

#ifdef __cplusplus
}
#endif
#endif                                                     /* __USB_OTGHS_16_CRED_H 
                                                            */
