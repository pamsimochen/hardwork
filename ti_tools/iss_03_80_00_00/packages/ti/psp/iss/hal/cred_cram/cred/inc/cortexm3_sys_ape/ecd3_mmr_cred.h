/** ==================================================================
 *  @file   ecd3_mmr_cred.h                                                  
 *                                                                    
 *  @path   /ti/psp/iss/hal/cred_cram/cred/inc/cortexm3_sys_ape/                                                  
 *                                                                    
 *  @desc   This  File contains.                                      
 * ===================================================================
 *  Copyright (c) Texas Instruments Inc 2011, 2012                    
 *                                                                    
 *  Use of this software is controlled by the terms and conditions found
 *  in the license agreement under which this software has been supplied
 * ===================================================================*/

/* ============================================================================ 
 * TEXAS INSTRUMENTS INCORPORATED PROPRIETARY INFORMATION Property of Texas
 * Instruments For Unrestricted Internal Use Only Unauthorized reproduction
 * and/or distribution is strictly prohibited.  This product is protected
 * under copyright law and trade secret law as an unpublished work.  Created
 * 2008, (C) Copyright 2008 Texas Instruments.  All rights reserved. */

/**
 *  @Component:   ECD3_MMR
 *
 *  @Filename:    ecd3_mmr_cred.h
 *
 *  @Description: Component description is not available
 *
 *  Generated by: Socrates CRED generator prototype
 *
    *//* ====================================================================== */

#ifndef __ECD3_MMR_CRED_H
#define __ECD3_MMR_CRED_H

#ifdef __cplusplus
extern "C" {
#endif

    /* 
     * Instance ECD3_CFG__MMR of component ECD3_MMR mapped in MONICA at address 0x5A059800
     */

                                                                              /*-------------------------------------------------------------------------*//**
 * @DEFINITION   BITFIELD
 *
 * @BRIEF        The bitfield must be defined according to register width
 *               of the component - 64/32/16/8
 *
    *//*------------------------------------------------------------------------ */
#undef BITFIELD
#define BITFIELD BITFIELD_32

    /* 
     *  List of Register arrays for component ECD3_MMR
     *
     */

    /* 
     *  List of bundle arrays for component ECD3_MMR
     *
     */

    /* 
     *  List of bundles for component ECD3_MMR
     *
     */

    /* 
     * List of registers for component ECD3_MMR
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__ECD_PID
 *
 * @BRIEF        Product Identification 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__ECD_PID                                  0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__ECD_COUNT
 *
 * @BRIEF        Cycle Counter 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__ECD_COUNT                                0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__ECD_CTRL
 *
 * @BRIEF        Control 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__ECD_CTRL                                 0x8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__ECD_STAT
 *
 * @BRIEF        ECD Status 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__ECD_STAT                                 0xCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_CTRL
 *
 * @BRIEF        Stream Buffer Controller Control 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_CTRL                                 0x10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_STAT
 *
 * @BRIEF        Stream Buffer Controller Status 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_STAT                                 0x14ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_BUFCFG
 *
 * @BRIEF        Stream Buffer Controller Buffer Configuration 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_BUFCFG                               0x18ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_A_BITPTR
 *
 * @BRIEF        Stream Buffer Controller A Bit Pointer 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_A_BITPTR                             0x1Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_A_DMAPG
 *
 * @BRIEF        Stream Buffer Controller A DMA Page 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_A_DMAPG                              0x20ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_B_BITPTR
 *
 * @BRIEF        Stream Buffer Controller B Bit Pointer 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_B_BITPTR                             0x24ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_B_DMAPG
 *
 * @BRIEF        Stream Buffer Controller B DMA Page 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_B_DMAPG                              0x28ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_TTLCNT
 *
 * @BRIEF        Stream Buffer Controller Total Bit Counter 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_TTLCNT                               0x2Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_RSDCNT
 *
 * @BRIEF        Stream Buffer Controller Residual Layer Bit Counter 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_RSDCNT                               0x30ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_SRCH_PG_CNT
 *
 * @BRIEF        Buffer page counter for start code searching. 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_SRCH_PG_CNT                          0x38ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_FMO_DMA_STAT
 *
 * @BRIEF        FMO_DMA status register 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_FMO_DMA_STAT                         0x3Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__MBPC_PIC_DIM
 *
 * @BRIEF        Picture Dimension 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__MBPC_PIC_DIM                             0x40ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__MBPC_STAT
 *
 * @BRIEF        MB Position Controller Status 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__MBPC_STAT                                0x50ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__MBPC_POS
 *
 * @BRIEF        Macroblock Position 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__MBPC_POS                                 0x54ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__MBPC_PMC
 *
 * @BRIEF        Macroblock Count In Picture 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__MBPC_PMC                                 0x58ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__MBPC_SMC
 *
 * @BRIEF        Macroblock Count In Slice 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__MBPC_SMC                                 0x5Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_BP_MB
 *
 * @BRIEF        Data Buffer Controller MB Base Buffer Pointer 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_BP_MB                               0x64ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_BP_COL
 *
 * @BRIEF        Data Buffer Controller Co-located MB Buffer Base Pointer 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_BP_COL                              0x68ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_BP_RSD
 *
 * @BRIEF        Data Buffer Controller Residual Buffer Base Pointer 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_BP_RSD                              0x6Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_UL
 *
 * @BRIEF        Data Buffer Controller Data Pointer 0 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_UL                               0x70ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_UU_UR
 *
 * @BRIEF        Data Buffer Controller Data Pointer 1 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_UU_UR                            0x74ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_LL_CUR
 *
 * @BRIEF        Data Buffer Controller Data Pointer 2 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_LL_CUR                           0x78ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_ULUR2
 *
 * @BRIEF        Data Buffer Controller Data Pointer 5 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_ULUR2                            0x84ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_SLICE
 *
 * @BRIEF        SLice data pointer 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_SLICE                            0x88ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_LL2
 *
 * @BRIEF        Data Buffer Controller data pointer 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_LL2                              0x8Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_CUR_MB_SIZE
 *
 * @BRIEF        Current Picture Macro Block element size 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_CUR_MB_SIZE                         0x90ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__CDC_MODE
 *
 * @BRIEF        Codec Mode (also works as view page). 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__CDC_MODE                                 0xA0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__INT_STATUS
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__INT_STATUS                               0xA4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__INT_MASK
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__INT_MASK                                 0xA8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__JPEG_CTRL
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__JPEG_CTRL                                0xACul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__VLC_HUFFPTR_DC
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__VLC_HUFFPTR_DC                           0xB0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__VLC_HUFFPTR_AC
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__VLC_HUFFPTR_AC                           0xB4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CTRL_TBPTR_DC
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CTRL_TBPTR_DC                       0xB8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CTRL_TBPTR_AC
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CTRL_TBPTR_AC                       0xBCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CODE_TBPTR_DC
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CODE_TBPTR_DC                       0xC0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CODE_TBPTR_AC
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CODE_TBPTR_AC                       0xC4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_TBL_TYPE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_TBL_TYPE                            0xC8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DC_PRED_CHROMA
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DC_PRED_CHROMA                           0xCCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__CMDP_GPR0
 *
 * @BRIEF        Command Processor General Purpose Register 0 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__CMDP_GPR0                                0xF0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__CMDP_GPR1
 *
 * @BRIEF        Command Processor General Purpose Register 1 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__CMDP_GPR1                                0xF4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__CMDP_GPR2
 *
 * @BRIEF        Command Processor General Purpose Register 2 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__CMDP_GPR2                                0xF8ul

    /* 
     * List of register bitfields for component ECD3_MMR
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__ECD_PID__ECD_PID   
 *
 * @BRIEF        ECD_PID displays the product identification code. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__ECD_PID__ECD_PID                    BITFIELD(31, 0)
#define ECD3_MMR__ECD_PID__ECD_PID__POS               0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__ECD_COUNT__CNT_EN   
 *
 * @BRIEF        CNT_EN enables / disables the cycle counter. CNT_EN = 0: 
 *               disable, CNT_EN = 1: enable. While CNT_EN = 1 and EN (of 
 *               ECD_CTRL) = 1, ECD3 increments the value of COUNT for each 
 *               cycle. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__ECD_COUNT__CNT_EN                   BITFIELD(31, 31)
#define ECD3_MMR__ECD_COUNT__CNT_EN__POS              31

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__ECD_COUNT__CNT_RST   
 *
 * @BRIEF        CNT_RST resets the cycle counter COUNT value to zero. 
 *               Writing 1 to CNT_RST clears COUNT. Writing 0 has no effect. 
 *               This bit always reads zero. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__ECD_COUNT__CNT_RST                  BITFIELD(30, 30)
#define ECD3_MMR__ECD_COUNT__CNT_RST__POS             30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__ECD_COUNT__COUNT   
 *
 * @BRIEF        COUNT displays the current counter value. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__ECD_COUNT__COUNT                    BITFIELD(15, 0)
#define ECD3_MMR__ECD_COUNT__COUNT__POS               0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__ECD_CTRL__CDM_ADD_15_12   
 *
 * @BRIEF        CDM_ADD specifies the starting byte address of command 
 *               sequence stored in ECDABUF. Note that LSB 4 bits are fixed 
 *               to zero since command codes are to be stored from an 16-byte 
 *               aligned position. ECD3 reads and executes commands in a 
 *               linear order from this address. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__ECD_CTRL__CDM_ADD_15_12             BITFIELD(23, 20)
#define ECD3_MMR__ECD_CTRL__CDM_ADD_15_12__POS        20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__ECD_CTRL__CDM_ADD_11_4   
 *
 * @BRIEF        CDM_ADD specifies the starting byte address of command 
 *               sequence stored in ECDABUF. Note that LSB 4 bits are fixed 
 *               to zero since command codes are to be stored from an 16-byte 
 *               aligned position. ECD3 reads and executes commands in a 
 *               linear order from this address. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__ECD_CTRL__CDM_ADD_11_4              BITFIELD(19, 12)
#define ECD3_MMR__ECD_CTRL__CDM_ADD_11_4__POS         12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__ECD_CTRL__CDM_ADD_3_0   
 *
 * @BRIEF        CDM_ADD specifies the starting byte address of command 
 *               sequence stored in ECDABUF. Note that LSB 4 bits are fixed 
 *               to zero since command codes are to be stored from an 16-byte 
 *               aligned position. ECD3 reads and executes commands in a 
 *               linear order from this address. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__ECD_CTRL__CDM_ADD_3_0               BITFIELD(11, 8)
#define ECD3_MMR__ECD_CTRL__CDM_ADD_3_0__POS          8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__ECD_CTRL__SSM   
 *
 * @BRIEF        SSM = 1 enables single command mode. In single command mode, 
 *               ECD3 core executes only one command. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__ECD_CTRL__SSM                       BITFIELD(2, 2)
#define ECD3_MMR__ECD_CTRL__SSM__POS                  2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__ECD_CTRL__CSB   
 *
 * @BRIEF        CSB = 1 indicates that ECD3 found an undefined op-code 
 *               during the last operation, and aborted command processing. 
 *               CSB = 0 indicates that the last command processing ended 
 *               normally with an END command. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__ECD_CTRL__CSB                       BITFIELD(1, 1)
#define ECD3_MMR__ECD_CTRL__CSB__POS                  1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__ECD_CTRL__EN   
 *
 * @BRIEF        EN is the ECD3 enable bit. By writing 1 to EN when EN = 0, 
 *               ECD3 starts operation (command processing), and EN stays 1 
 *               until ECD3 ends its operation. When ECD3 ends its operation, 
 *               EN is turned to zero by ECD3. While EN = 1, no write access 
 *               to ECD_CTRL is allowed. If ECD_CTRL is written while EN = 1, 
 *               the result is unknown. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__ECD_CTRL__EN                        BITFIELD(0, 0)
#define ECD3_MMR__ECD_CTRL__EN__POS                   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__ECD_STAT__EOS_ACK_DIS   
 *
 * @BRIEF        EOS_ACK_DIS = 1 indicates that the EOS interrupt handshake 
 *               between ECD3 and SyncBox is disabled and the acknowledge 
 *               signal is ignored. When it is disabled, ECD3 does not wait 
 *               for an acknowledge for EOS interrupt. 0 indicates that ECD3 
 *               waits for an acknowledge from SyncBox after EOS is set to 1. 
 *               ECD3 stays BUSY state until the acknowledge or EOS is 
 *               cleared. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__ECD_STAT__EOS_ACK_DIS               BITFIELD(30, 30)
#define ECD3_MMR__ECD_STAT__EOS_ACK_DIS__POS          30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__ECD_STAT__ERR_ACK_DIS   
 *
 * @BRIEF        ERR_ACK_DIS = 1 indicates that the ERR interrupt handshake 
 *               between ECD3 and SyncBox is disabled and the acknowledge 
 *               signal is ignored. When it is disabled, ECD3 does not wait 
 *               for an acknowledge for ERR interrupt. 0 indicates that ECD3 
 *               waits for an acknowledge from SyncBox after ERR is set to 1. 
 *               ECD3 stays BUSY state until the acknowledge or ERR is 
 *               cleared. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__ECD_STAT__ERR_ACK_DIS               BITFIELD(29, 29)
#define ECD3_MMR__ECD_STAT__ERR_ACK_DIS__POS          29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__ECD_STAT__EOS   
 *
 * @BRIEF        EOS = 1 indicates that the last macroblock is at the end of 
 *               the slice. Writing 0 to this bit force to exit busy state 
 *               while waiting for an acknowledge of EOS interrupt from 
 *               SyncBox. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__ECD_STAT__EOS                       BITFIELD(2, 2)
#define ECD3_MMR__ECD_STAT__EOS__POS                  2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__ECD_STAT__ERR   
 *
 * @BRIEF        ERR = 1 indicates an error was found in the stream while 
 *               decoding. Writing 0 to this bit force to exit busy state 
 *               while waiting for an acknowledge of ERR interrupt from 
 *               SyncBox. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__ECD_STAT__ERR                       BITFIELD(1, 1)
#define ECD3_MMR__ECD_STAT__ERR__POS                  1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__ECD_STAT__BUSY   
 *
 * @BRIEF        BUSY = 1 indicates that ECD3 Core is busy. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__ECD_STAT__BUSY                      BITFIELD(0, 0)
#define ECD3_MMR__ECD_STAT__BUSY__POS                 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_CTRL__SBC_RST   
 *
 * @BRIEF        SBC_RST resets the Stream Buffer Controller. Writing 1 to 
 *               this register resets all registers of Stream Buffer 
 *               Controller and brings it back to idle state. This has the 
 *               same effect as hardware reset to Stream Buffer Controller, 
 *               but no effect to other part of ECD3 Core. Writing 0 has no 
 *               effect. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_CTRL__SBC_RST                   BITFIELD(31, 31)
#define ECD3_MMR__SBC_CTRL__SBC_RST__POS              31

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_CTRL__SBC_CLOSE   
 *
 * @BRIEF        SBC_CLOSE close the bit stream data. When encoding, writing 
 *               1 to this register flushes bit stream data in Stream Buffer. 
 *               When decoding, writing 1 to this register brings it back to 
 *               idle state and discard bit stream data in the buffer. 
 *               Writing 0 has no effect. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_CTRL__SBC_CLOSE                 BITFIELD(16, 16)
#define ECD3_MMR__SBC_CTRL__SBC_CLOSE__POS            16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_CTRL__SBC_DMA_TRG_B   
 *
 * @BRIEF        SBC_DMA_TRG_B start DMA to fill empty page in the Buffer B 
 *               manually. Writing 1 to this register sends a DMA request for 
 *               Buffer B. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_CTRL__SBC_DMA_TRG_B             BITFIELD(12, 12)
#define ECD3_MMR__SBC_CTRL__SBC_DMA_TRG_B__POS        12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_CTRL__SBC_DMA_TRG_A   
 *
 * @BRIEF        SBC_DMA_TRG_A start DMA to fill empty page in the Buffer A 
 *               manually. Writing 1 to this register sends a DMA request for 
 *               Buffer A. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_CTRL__SBC_DMA_TRG_A             BITFIELD(8, 8)
#define ECD3_MMR__SBC_CTRL__SBC_DMA_TRG_A__POS        8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_CTRL__SBC_BIT_CNT_RST   
 *
 * @BRIEF        SBC_BIT_CNT_RST reset bit counter in the Stream Buffer. - 
 *               (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_CTRL__SBC_BIT_CNT_RST           BITFIELD(4, 4)
#define ECD3_MMR__SBC_CTRL__SBC_BIT_CNT_RST__POS      4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_CTRL__SBC_BUFSEL   
 *
 * @BRIEF        SBC_BUFSEL selects active buffer between A and B 
 *               0: Buffer A is selected 
 *               1: Buffer B is selected 
 *               This bit is ignored if SBC_DBL = 0. If SBC_DBL = 0, buffer A 
 *               is always selected. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_CTRL__SBC_BUFSEL                BITFIELD(0, 0)
#define ECD3_MMR__SBC_CTRL__SBC_BUFSEL__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_STAT__SBC_ST_SRCH   
 *
 * @BRIEF        SBC_ST_SRCH  = 1 indicates that the Stream Buffer Controller 
 *               searching start code by request from codec engine. This bit 
 *               is cleared when start code is found or page counter value 
 *               reaches SBC_SRCH_PG_CNT. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_STAT__SBC_ST_SRCH               BITFIELD(6, 6)
#define ECD3_MMR__SBC_STAT__SBC_ST_SRCH__POS          6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_STAT__SBC_DMA_B   
 *
 * @BRIEF        SBC_DMA_B = 1 indicates that the Stream Buffer Controller is 
 *               waiting an acknoledge from DMA for buffer B. Writing 0 to 
 *               this bit force to exit busy state while waiting for an 
 *               acknowledge of DMA for buffer B interrupt from SyncBox. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_STAT__SBC_DMA_B                 BITFIELD(5, 5)
#define ECD3_MMR__SBC_STAT__SBC_DMA_B__POS            5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_STAT__SBC_DMA_A   
 *
 * @BRIEF        SBC_DMA_A = 1 indicates that the Stream Buffer Controller is 
 *               waiting an acknoledge from DMA for buffer A. Writing 0 to 
 *               this bit force to exit busy state while waiting for an 
 *               acknowledge of DMA for buffer A interrupt from SyncBox. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_STAT__SBC_DMA_A                 BITFIELD(4, 4)
#define ECD3_MMR__SBC_STAT__SBC_DMA_A__POS            4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_STAT__SBC_WR_HLT   
 *
 * @BRIEF        SBC_WR_HLT = 1 indicates that the Stream Buffer Controller 
 *               halted while writing (encoding) and is waiting an acknoledge 
 *               from DMA. If this register = 1, SBC_DMA_A or SBC_DMA_B 
 *               should also be asserted. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_STAT__SBC_WR_HLT                BITFIELD(3, 3)
#define ECD3_MMR__SBC_STAT__SBC_WR_HLT__POS           3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_STAT__SBC_RD_HLT   
 *
 * @BRIEF        SBC_RD_HLT = 1 indicates that the Stream Buffer Controller 
 *               halted while reading (decoding) and is waiting an acknoledge 
 *               from DMA. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_STAT__SBC_RD_HLT                BITFIELD(2, 2)
#define ECD3_MMR__SBC_STAT__SBC_RD_HLT__POS           2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_STAT__SBC_WR   
 *
 * @BRIEF        SBC_WR = 1 indicates that the Stream Buffer Controller is in 
 *               writing (encoding) mode. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_STAT__SBC_WR                    BITFIELD(1, 1)
#define ECD3_MMR__SBC_STAT__SBC_WR__POS               1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_STAT__SBC_RD   
 *
 * @BRIEF        SBC_RD = 1 indicates that the Stream Buffer Controller is in 
 *               reading (decoding) mode. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_STAT__SBC_RD                    BITFIELD(0, 0)
#define ECD3_MMR__SBC_STAT__SBC_RD__POS               0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_BUFCFG__SBC_FLUSH_MODE   
 *
 * @BRIEF        SBC_FLUSH_MODE SBC FIFO flush mode select for encoding. 
 *               0: Flush FIFO when EOS flag is sent by Codec Engine, 
 *               1: Flush FIFO when DONE or EOS flag is sent by Codec Engine. 
 *               (This is for debug) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_BUFCFG__SBC_FLUSH_MODE          BITFIELD(31, 31)
#define ECD3_MMR__SBC_BUFCFG__SBC_FLUSH_MODE__POS     31

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_BUFCFG__SBC_FMO_MODE   
 *
 * @BRIEF        SBC FIFO flush mode select for encoding. 
 *               0: Buffer A and B pointers are used for Stream Data access. 
 *               FMO_DMA_ID will be ignored.  
 *               1: Buffer A pointer and FMO_DMA_ID are used for Stream Data 
 *               access. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_BUFCFG__SBC_FMO_MODE            BITFIELD(30, 30)
#define ECD3_MMR__SBC_BUFCFG__SBC_FMO_MODE__POS       30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_BUFCFG__SBC_DBL   
 *
 * @BRIEF        SBC_DBL enables double buffer mode. 
 *               0: disabled (buffer A only mode), 
 *               1: enabled (buffer A and buffer B). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_BUFCFG__SBC_DBL                 BITFIELD(24, 24)
#define ECD3_MMR__SBC_BUFCFG__SBC_DBL__POS            24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_BUFCFG__SBC_PGSZ   
 *
 * @BRIEF        SBC_PGSZ specifies the page size of buffer A and B in the 
 *               unit of 1024 [byte]. If SBC_PGSZ = 0, it is treated as 
 *               though SBC_PGSZ = 4 i.e. the page size is set to 4096 
 *               [byte]. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_BUFCFG__SBC_PGSZ                BITFIELD(21, 20)
#define ECD3_MMR__SBC_BUFCFG__SBC_PGSZ__POS           20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_BUFCFG__SBC_BUFTOP_17_4   
 *
 * @BRIEF        SBC_BUFTOP specifies the base address of the bit-stream 
 *               buffer in SL2. Note that the LSB 4 bits are fixed to zero 
 *               because of the 128-bit alignment of the buffer area. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_BUFCFG__SBC_BUFTOP_17_4         BITFIELD(17, 4)
#define ECD3_MMR__SBC_BUFCFG__SBC_BUFTOP_17_4__POS    4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_BUFCFG__SBC_BUFTOP_3_0   
 *
 * @BRIEF        SBC_BUFTOP specifies the base address of the bit-stream 
 *               buffer in SL2. Note that the LSB 4 bits are fixed to zero 
 *               because of the 128-bit alignment of the buffer area. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_BUFCFG__SBC_BUFTOP_3_0          BITFIELD(3, 0)
#define ECD3_MMR__SBC_BUFCFG__SBC_BUFTOP_3_0__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_A_BITPTR__FMO_DMA_ID   
 *
 * @BRIEF        FMO_DMA_ID indicates the ID number of bit stream data in SL2 
 *               memory. The ID number is applied to FMO_DMA flag in 
 *               SBC_FMO_DMA_STAT. The ID valid when SBC_FMO_MODE=1. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_A_BITPTR__FMO_DMA_ID            BITFIELD(30, 28)
#define ECD3_MMR__SBC_A_BITPTR__FMO_DMA_ID__POS       28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_A_BITPTR__NUM_ZERO_A   
 *
 * @BRIEF        NUM_ZERO_A indicates the number of zero bytes in the past 
 *               for buffer A. This is used for emulation prevention byte 
 *               manipulation. Note that the counting zero bytes in decoding 
 *               is different from that in encoding. 0 <= NUM_ZERO_A <= 2. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_A_BITPTR__NUM_ZERO_A            BITFIELD(25, 24)
#define ECD3_MMR__SBC_A_BITPTR__NUM_ZERO_A__POS       24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_A_BITPTR__BYTEPTR_A   
 *
 * @BRIEF        BYTEPTR_A indicates the current byte offset address in 
 *               Buffer A of the byte containing the next bit in the 
 *               bit-stream. 0 <= BYTEPTR_A < 2 * (page size). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_A_BITPTR__BYTEPTR_A             BITFIELD(21, 8)
#define ECD3_MMR__SBC_A_BITPTR__BYTEPTR_A__POS        8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_A_BITPTR__BITPTR_A   
 *
 * @BRIEF        BITPTR_A indicates the next bit position in the byte at 
 *               BYTEPTR_A. 0 <= BITPTR_A <= 7. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_A_BITPTR__BITPTR_A              BITFIELD(2, 0)
#define ECD3_MMR__SBC_A_BITPTR__BITPTR_A__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_A_DMAPG__DMAPG_A   
 *
 * @BRIEF        DMAPG_A indicates the page that is being accessed from DMA 
 *               for bit-stream data transfering. If DMA is not accessing to 
 *               the buffer, this register indicates the page that is 
 *               currently being accessed from ECD3 Core. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_A_DMAPG__DMAPG_A                BITFIELD(7, 0)
#define ECD3_MMR__SBC_A_DMAPG__DMAPG_A__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_B_BITPTR__NUM_ZERO_B   
 *
 * @BRIEF        NUM_ZERO_B indicates the number of zero bytes in the past 
 *               for buffer B. This is used for emulation prevention byte 
 *               manipulation. Note that the counting zero bytes in decoding 
 *               is different from that in encoding. 0 <= NUM_ZERO_B <= 2. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_B_BITPTR__NUM_ZERO_B            BITFIELD(25, 24)
#define ECD3_MMR__SBC_B_BITPTR__NUM_ZERO_B__POS       24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_B_BITPTR__BYTEPTR_B   
 *
 * @BRIEF        BYTEPTR_B indicates the current byte offset address in 
 *               Buffer B of the byte containing the next bit in the 
 *               bit-stream. 0 <= BYTEPTR_B < 2 * (page size). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_B_BITPTR__BYTEPTR_B             BITFIELD(21, 8)
#define ECD3_MMR__SBC_B_BITPTR__BYTEPTR_B__POS        8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_B_BITPTR__BITPTR_B   
 *
 * @BRIEF        BITPTR_B indicates the next bit position in the byte at 
 *               BYTEPTR_B. 0 <= BITPTR_B <= 7. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_B_BITPTR__BITPTR_B              BITFIELD(2, 0)
#define ECD3_MMR__SBC_B_BITPTR__BITPTR_B__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_B_DMAPG__DMAPG_B   
 *
 * @BRIEF        DMAPG_B indicates the page that is being accessed from DMA 
 *               for bit-stream data transfering. If DMA is not accessing to 
 *               the buffer, this register indicates the page that is 
 *               currently being accessed from ECD3 Core. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_B_DMAPG__DMAPG_B                BITFIELD(0, 0)
#define ECD3_MMR__SBC_B_DMAPG__DMAPG_B__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_TTLCNT__SBC_TTLCNT   
 *
 * @BRIEF        SBC_TTLCNT displays the total bit count. This counter does 
 *               not count during start code searching. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_TTLCNT__SBC_TTLCNT              BITFIELD(31, 0)
#define ECD3_MMR__SBC_TTLCNT__SBC_TTLCNT__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_RSDCNT__SBC_RSDCNT   
 *
 * @BRIEF        SBC_RSDCNT displays the bit count for residual layer. total 
 *               bit count ? header info =  residual data (transform 
 *               coefficients) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_RSDCNT__SBC_RSDCNT              BITFIELD(31, 0)
#define ECD3_MMR__SBC_RSDCNT__SBC_RSDCNT__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_SRCH_PG_CNT__SBC_SRCH_PG_CNT   
 *
 * @BRIEF        SBC_SRCH_PG_CNT ECD3 search start code untill the page 
 *               counter reach this number. If the start code is not found, 
 *               error pulse is sent to codec engine and codec engine stop 
 *               operation then generates an error interrupt. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_SRCH_PG_CNT__SBC_SRCH_PG_CNT    BITFIELD(15, 0)
#define ECD3_MMR__SBC_SRCH_PG_CNT__SBC_SRCH_PG_CNT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__SBC_FMO_DMA_STAT__FMO_DMA   
 *
 * @BRIEF        SBC_FMO_DMA_STAT indicates FMO_DMA_ID for stream interrupt 
 *               at buffer page boundary. FMO_DMA_ID range is 0 to 7. When 
 *               the interrupt is asserted, corresponding bit is set. Write 0 
 *               to clear the flag. Writing 1 does not affect this register. 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__SBC_FMO_DMA_STAT__FMO_DMA           BITFIELD(7, 0)
#define ECD3_MMR__SBC_FMO_DMA_STAT__FMO_DMA__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__MBPC_PIC_DIM__CUR_MBAFF   
 *
 * @BRIEF        CUR_MBAFF = 1 indicates that current picture is in H.264 
 *               MBAFF mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__MBPC_PIC_DIM__CUR_MBAFF             BITFIELD(31, 31)
#define ECD3_MMR__MBPC_PIC_DIM__CUR_MBAFF__POS        31

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__MBPC_PIC_DIM__PIC_H   
 *
 * @BRIEF        PIC_H specifies the picture height in macroblocks which is 
 *               calculated by 
 *               PIC_H = ((picture height in pixels) + 15) / 16. 
 *               0 < PIC_H <= 8192. 
 *               All codec maximum picture height in pixels except JPEG is 
 *               4096. (PIC_H = 256) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__MBPC_PIC_DIM__PIC_H                 BITFIELD(29, 16)
#define ECD3_MMR__MBPC_PIC_DIM__PIC_H__POS            16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__MBPC_PIC_DIM__PIC_W   
 *
 * @BRIEF        PIC_W specifies the picture width in macroblocks which is 
 *               calculated by 
 *               PIC_W = ((picture width in pixels) + 15) / 16. 
 *               0 < PIC_W <= 8192. 
 *               All codec maximum picture width in pixels except JPEG is 
 *               4096. (PIC_W = 256) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__MBPC_PIC_DIM__PIC_W                 BITFIELD(13, 0)
#define ECD3_MMR__MBPC_PIC_DIM__PIC_W__POS            0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__MBPC_STAT__PIC_END_FLAG   
 *
 * @BRIEF        PIC_END_FLAG = 1 indicates that the macroblock will be 
 *               processed is at the end of the picture. (In other words, 
 *               this field is set to 1 before last MB process execution.) - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__MBPC_STAT__PIC_END_FLAG             BITFIELD(9, 9)
#define ECD3_MMR__MBPC_STAT__PIC_END_FLAG__POS        9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__MBPC_STAT__FIRST_MB_FLAG   
 *
 * @BRIEF        FIRST_MB_FLAG = 1 indicates that the macroblock will be 
 *               processed  is the first macroblock in the slice. (In other 
 *               words, this field is set to 1 after last MB process 
 *               execution.) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__MBPC_STAT__FIRST_MB_FLAG            BITFIELD(8, 8)
#define ECD3_MMR__MBPC_STAT__FIRST_MB_FLAG__POS       8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__MBPC_STAT__PIC_BOUND   
 *
 * @BRIEF        PIC_BOUND indicates that the picture boundary status of the 
 *               current macroblock (in case of MBAFF mode, the unit is 
 *               macroblock-pair). 
 *               PIC_BOUND[0] = 1 indicates that the left macroblock edge is 
 *               an picture boundary. 
 *               PIC_BOUND[1] = 1 indicates that the upper edge is an picture 
 *               boundary. 
 *               PIC_BOUND[2] = 1 indicates that the right edge is an picture 
 *               boundary. 
 *               PIC_BOUND[3] = 1 indicates that the bottom edge is an 
 *               picture boundary. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__MBPC_STAT__PIC_BOUND                BITFIELD(7, 4)
#define ECD3_MMR__MBPC_STAT__PIC_BOUND__POS           4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__MBPC_STAT__MB_AVAIL   
 *
 * @BRIEF        MB_AVAIL indicates that the availabilities of neighbouring 
 *               macroblocks (in case of MBAFF mode, the unit is 
 *               macroblock-pair). 
 *               MB_AVAIL[0] : left macroblock, 
 *               MB_AVAIL[1] : upper left macroblock, 
 *               MB_AVAIL[2] : upper macroblock, 
 *               MB_AVAIL[3] :.upper right macroblock. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__MBPC_STAT__MB_AVAIL                 BITFIELD(3, 0)
#define ECD3_MMR__MBPC_STAT__MB_AVAIL__POS            0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__MBPC_POS__MB_Y   
 *
 * @BRIEF        MB_Y equals the macroblock y-position in the picture. 0 <= 
 *               MB_Y < PIC_H. 
 *               All codec maximum MB Y position except JPEG is 255. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__MBPC_POS__MB_Y                      BITFIELD(28, 16)
#define ECD3_MMR__MBPC_POS__MB_Y__POS                 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__MBPC_POS__MB_X   
 *
 * @BRIEF        MB_X equals the macroblock x-position in the picture. 0 <= 
 *               MB_X < PIC_W. 
 *               All codec maximum MB X position except JPEG is 255. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__MBPC_POS__MB_X                      BITFIELD(12, 0)
#define ECD3_MMR__MBPC_POS__MB_X__POS                 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__MBPC_PMC__PIC_MB_CNT   
 *
 * @BRIEF        PIC_MB_CNT equals the macroblock count in the picture. 0 <= 
 *               PIC_MB_CNT < (PIC_W * PIC_H). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__MBPC_PMC__PIC_MB_CNT                BITFIELD(25, 0)
#define ECD3_MMR__MBPC_PMC__PIC_MB_CNT__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__MBPC_SMC__SLC_MB_CNT   
 *
 * @BRIEF        SLC_MB_CNT equals the macroblock count in the slice. 0 <= 
 *               SLC_MB_CNT < (PIC_W * PIC_H). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__MBPC_SMC__SLC_MB_CNT                BITFIELD(25, 0)
#define ECD3_MMR__MBPC_SMC__SLC_MB_CNT__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_BP_MB__BP_MB_UR_15_12   
 *
 * @BRIEF        BP_MB_UR specifies the base pointer to the upper macroblock 
 *               buffer. 0x8000-0x8FFF. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_BP_MB__BP_MB_UR_15_12          BITFIELD(31, 28)
#define ECD3_MMR__DTBC_BP_MB__BP_MB_UR_15_12__POS     28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_BP_MB__BP_MB_UR_11_4   
 *
 * @BRIEF        BP_MB_UR specifies the base pointer to the upper macroblock 
 *               buffer. 0x8000-0x8FFF. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_BP_MB__BP_MB_UR_11_4           BITFIELD(27, 20)
#define ECD3_MMR__DTBC_BP_MB__BP_MB_UR_11_4__POS      20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_BP_MB__BP_MB_UR_3_0   
 *
 * @BRIEF        BP_MB_UR specifies the base pointer to the upper macroblock 
 *               buffer. 0x8000-0x8FFF. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_BP_MB__BP_MB_UR_3_0            BITFIELD(19, 16)
#define ECD3_MMR__DTBC_BP_MB__BP_MB_UR_3_0__POS       16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_BP_MB__BP_MB_CUR_15_12   
 *
 * @BRIEF        BP_MB_CUR specifies the base pointer to the current 
 *               macroblock buffer. 0x8000-0x8FFF. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_BP_MB__BP_MB_CUR_15_12         BITFIELD(15, 12)
#define ECD3_MMR__DTBC_BP_MB__BP_MB_CUR_15_12__POS    12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_BP_MB__BP_MB_CUR_11_4   
 *
 * @BRIEF        BP_MB_CUR specifies the base pointer to the current 
 *               macroblock buffer. 0x8000-0x8FFF. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_BP_MB__BP_MB_CUR_11_4          BITFIELD(11, 4)
#define ECD3_MMR__DTBC_BP_MB__BP_MB_CUR_11_4__POS     4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_BP_MB__BP_MB_CUR_3_0   
 *
 * @BRIEF        BP_MB_CUR specifies the base pointer to the current 
 *               macroblock buffer. 0x8000-0x8FFF. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_BP_MB__BP_MB_CUR_3_0           BITFIELD(3, 0)
#define ECD3_MMR__DTBC_BP_MB__BP_MB_CUR_3_0__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_BP_COL__BP_COL_B_15_12   
 *
 * @BRIEF        BP_COL_B specifies the base pointer to the co-located 
 *               macroblock buffer B. 0x8000-0x8FFF. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_BP_COL__BP_COL_B_15_12         BITFIELD(31, 28)
#define ECD3_MMR__DTBC_BP_COL__BP_COL_B_15_12__POS    28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_BP_COL__BP_COL_B_11_4   
 *
 * @BRIEF        BP_COL_B specifies the base pointer to the co-located 
 *               macroblock buffer B. 0x8000-0x8FFF. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_BP_COL__BP_COL_B_11_4          BITFIELD(27, 20)
#define ECD3_MMR__DTBC_BP_COL__BP_COL_B_11_4__POS     20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_BP_COL__BP_COL_B_3_0   
 *
 * @BRIEF        BP_COL_B specifies the base pointer to the co-located 
 *               macroblock buffer B. 0x8000-0x8FFF. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_BP_COL__BP_COL_B_3_0           BITFIELD(19, 16)
#define ECD3_MMR__DTBC_BP_COL__BP_COL_B_3_0__POS      16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_BP_COL__BP_COL_A_15_12   
 *
 * @BRIEF        BP_COL_A specifies the base pointer to the co-located 
 *               macroblock buffer A. 0x8000-0x8FFF. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_BP_COL__BP_COL_A_15_12         BITFIELD(15, 12)
#define ECD3_MMR__DTBC_BP_COL__BP_COL_A_15_12__POS    12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_BP_COL__BP_COL_A_11_4   
 *
 * @BRIEF        BP_COL_A specifies the base pointer to the co-located 
 *               macroblock buffer A. 0x8000-0x8FFF. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_BP_COL__BP_COL_A_11_4          BITFIELD(11, 4)
#define ECD3_MMR__DTBC_BP_COL__BP_COL_A_11_4__POS     4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_BP_COL__BP_COL_A_3_0   
 *
 * @BRIEF        BP_COL_A specifies the base pointer to the co-located 
 *               macroblock buffer A. 0x8000-0x8FFF. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_BP_COL__BP_COL_A_3_0           BITFIELD(3, 0)
#define ECD3_MMR__DTBC_BP_COL__BP_COL_A_3_0__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_BP_RSD__BP_RSD_15_12   
 *
 * @BRIEF        BP_RSD specifies the base pointer to the residual data 
 *               buffer. 0xE000-0xEFFF. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_BP_RSD__BP_RSD_15_12           BITFIELD(31, 28)
#define ECD3_MMR__DTBC_BP_RSD__BP_RSD_15_12__POS      28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_BP_RSD__BP_RSD_11_4   
 *
 * @BRIEF        BP_RSD specifies the base pointer to the residual data 
 *               buffer. 0xE000-0xEFFF. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_BP_RSD__BP_RSD_11_4            BITFIELD(27, 20)
#define ECD3_MMR__DTBC_BP_RSD__BP_RSD_11_4__POS       20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_BP_RSD__BP_RSD_3_0   
 *
 * @BRIEF        BP_RSD specifies the base pointer to the residual data 
 *               buffer. 0xE000-0xEFFF. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_BP_RSD__BP_RSD_3_0             BITFIELD(19, 16)
#define ECD3_MMR__DTBC_BP_RSD__BP_RSD_3_0__POS        16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_UL__PTR_MB_UL_15_13   
 *
 * @BRIEF        PTR_MB_UL equals the current pointer to the upper left 
 *               macroblock data in work buffer. Set MB_UL base pointer by 
 *               writing PTR_MB_UL before start ECD3. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_UL__PTR_MB_UL_15_13         BITFIELD(15, 13)
#define ECD3_MMR__DTBC_DP_UL__PTR_MB_UL_15_13__POS    13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_UL__PTR_MB_UL_12_4   
 *
 * @BRIEF        PTR_MB_UL equals the current pointer to the upper left 
 *               macroblock data in work buffer. Set MB_UL base pointer by 
 *               writing PTR_MB_UL before start ECD3. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_UL__PTR_MB_UL_12_4          BITFIELD(12, 4)
#define ECD3_MMR__DTBC_DP_UL__PTR_MB_UL_12_4__POS     4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_UL__PTR_MB_UL_3_0   
 *
 * @BRIEF        PTR_MB_UL equals the current pointer to the upper left 
 *               macroblock data in work buffer. Set MB_UL base pointer by 
 *               writing PTR_MB_UL before start ECD3. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_UL__PTR_MB_UL_3_0           BITFIELD(3, 0)
#define ECD3_MMR__DTBC_DP_UL__PTR_MB_UL_3_0__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_UU_UR__PTR_MB_UU_15_13   
 *
 * @BRIEF        PTR_MB_UU equals the current pointer to the upper macroblock 
 *               data in work buffer. Set MB_UU base pointer by writing 
 *               PTR_MB_UU before start ECD3. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_UU_UR__PTR_MB_UU_15_13      BITFIELD(31, 29)
#define ECD3_MMR__DTBC_DP_UU_UR__PTR_MB_UU_15_13__POS 29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_UU_UR__PTR_MB_UU_12_4   
 *
 * @BRIEF        PTR_MB_UU equals the current pointer to the upper macroblock 
 *               data in work buffer. Set MB_UU base pointer by writing 
 *               PTR_MB_UU before start ECD3. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_UU_UR__PTR_MB_UU_12_4       BITFIELD(28, 20)
#define ECD3_MMR__DTBC_DP_UU_UR__PTR_MB_UU_12_4__POS  20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_UU_UR__PTR_MB_UU_3_0   
 *
 * @BRIEF        PTR_MB_UU equals the current pointer to the upper macroblock 
 *               data in work buffer. Set MB_UU base pointer by writing 
 *               PTR_MB_UU before start ECD3. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_UU_UR__PTR_MB_UU_3_0        BITFIELD(19, 16)
#define ECD3_MMR__DTBC_DP_UU_UR__PTR_MB_UU_3_0__POS   16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_UU_UR__PTR_MB_UR_15_13   
 *
 * @BRIEF        PTR_MB_UR equals the current pointer to the upper right 
 *               macroblock data in work buffer. Set MB_UR base pointer by 
 *               writing PTR_MB_UR before start ECD3. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_UU_UR__PTR_MB_UR_15_13      BITFIELD(15, 13)
#define ECD3_MMR__DTBC_DP_UU_UR__PTR_MB_UR_15_13__POS 13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_UU_UR__PTR_MB_UR_12_4   
 *
 * @BRIEF        PTR_MB_UR equals the current pointer to the upper right 
 *               macroblock data in work buffer. Set MB_UR base pointer by 
 *               writing PTR_MB_UR before start ECD3. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_UU_UR__PTR_MB_UR_12_4       BITFIELD(12, 4)
#define ECD3_MMR__DTBC_DP_UU_UR__PTR_MB_UR_12_4__POS  4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_UU_UR__PTR_MB_UR_3_0   
 *
 * @BRIEF        PTR_MB_UR equals the current pointer to the upper right 
 *               macroblock data in work buffer. Set MB_UR base pointer by 
 *               writing PTR_MB_UR before start ECD3. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_UU_UR__PTR_MB_UR_3_0        BITFIELD(3, 0)
#define ECD3_MMR__DTBC_DP_UU_UR__PTR_MB_UR_3_0__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_LL_CUR__PTR_MB_LL_15_13   
 *
 * @BRIEF        PTR_MB_LL equals the current pointer to the left macroblock 
 *               data in work buffer. Set MB_LL base pointer by writing 
 *               PTR_MB_LL before start ECD3. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_LL_CUR__PTR_MB_LL_15_13     BITFIELD(31, 29)
#define ECD3_MMR__DTBC_DP_LL_CUR__PTR_MB_LL_15_13__POS 29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_LL_CUR__PTR_MB_LL_12_4   
 *
 * @BRIEF        PTR_MB_LL equals the current pointer to the left macroblock 
 *               data in work buffer. Set MB_LL base pointer by writing 
 *               PTR_MB_LL before start ECD3. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_LL_CUR__PTR_MB_LL_12_4      BITFIELD(28, 20)
#define ECD3_MMR__DTBC_DP_LL_CUR__PTR_MB_LL_12_4__POS 20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_LL_CUR__PTR_MB_LL_3_0   
 *
 * @BRIEF        PTR_MB_LL equals the current pointer to the left macroblock 
 *               data in work buffer. Set MB_LL base pointer by writing 
 *               PTR_MB_LL before start ECD3. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_LL_CUR__PTR_MB_LL_3_0       BITFIELD(19, 16)
#define ECD3_MMR__DTBC_DP_LL_CUR__PTR_MB_LL_3_0__POS  16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_LL_CUR__PTR_MB_CUR_15_13   
 *
 * @BRIEF        PTR_MB_CUR equals the current pointer to the current 
 *               macroblock data in work buffer. Set MB_CUR base pointer by 
 *               writing PTR_MB_CUR before start ECD3. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_LL_CUR__PTR_MB_CUR_15_13    BITFIELD(15, 13)
#define ECD3_MMR__DTBC_DP_LL_CUR__PTR_MB_CUR_15_13__POS 13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_LL_CUR__PTR_MB_CUR_12_4   
 *
 * @BRIEF        PTR_MB_CUR equals the current pointer to the current 
 *               macroblock data in work buffer. Set MB_CUR base pointer by 
 *               writing PTR_MB_CUR before start ECD3. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_LL_CUR__PTR_MB_CUR_12_4     BITFIELD(12, 4)
#define ECD3_MMR__DTBC_DP_LL_CUR__PTR_MB_CUR_12_4__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_LL_CUR__PTR_MB_CUR_3_0   
 *
 * @BRIEF        PTR_MB_CUR equals the current pointer to the current 
 *               macroblock data in work buffer. Set MB_CUR base pointer by 
 *               writing PTR_MB_CUR before start ECD3. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_LL_CUR__PTR_MB_CUR_3_0      BITFIELD(3, 0)
#define ECD3_MMR__DTBC_DP_LL_CUR__PTR_MB_CUR_3_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_ULUR2__PTR_MB_UL2_15_13   
 *
 * @BRIEF        PTR_MB_UL2 equals the current pointer to the macroblock left 
 *               to the upper left macroblock data in work buffer. This 
 *               pointer is maintained only for On2 (CDC_MODE = 0x0A). Set 
 *               MB_UL2 base pointer by writing PTR_MB_UL2 before start ECD3. 
 *               - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_ULUR2__PTR_MB_UL2_15_13     BITFIELD(31, 29)
#define ECD3_MMR__DTBC_DP_ULUR2__PTR_MB_UL2_15_13__POS 29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_ULUR2__PTR_MB_UL2_12_4   
 *
 * @BRIEF        PTR_MB_UL2 equals the current pointer to the macroblock left 
 *               to the upper left macroblock data in work buffer. This 
 *               pointer is maintained only for On2 (CDC_MODE = 0x0A). Set 
 *               MB_UL2 base pointer by writing PTR_MB_UL2 before start ECD3. 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_ULUR2__PTR_MB_UL2_12_4      BITFIELD(28, 20)
#define ECD3_MMR__DTBC_DP_ULUR2__PTR_MB_UL2_12_4__POS 20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_ULUR2__PTR_MB_UL2_3_0   
 *
 * @BRIEF        PTR_MB_UL2 equals the current pointer to the macroblock left 
 *               to the upper left macroblock data in work buffer. This 
 *               pointer is maintained only for On2 (CDC_MODE = 0x0A). Set 
 *               MB_UL2 base pointer by writing PTR_MB_UL2 before start ECD3. 
 *               - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_ULUR2__PTR_MB_UL2_3_0       BITFIELD(19, 16)
#define ECD3_MMR__DTBC_DP_ULUR2__PTR_MB_UL2_3_0__POS  16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_ULUR2__PTR_MB_UR2_15_13   
 *
 * @BRIEF        PTR_MB_UR2 equals the current pointer to the macroblock 
 *               right to the upper right macroblock data in work buffer. 
 *               This pointer is maintained only for On2 (CDC_MODE = 0x0A). 
 *               Set MB_UR2 base pointer by writing PTR_MB_UR2 before start 
 *               ECD3. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_ULUR2__PTR_MB_UR2_15_13     BITFIELD(15, 13)
#define ECD3_MMR__DTBC_DP_ULUR2__PTR_MB_UR2_15_13__POS 13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_ULUR2__PTR_MB_UR2_12_4   
 *
 * @BRIEF        PTR_MB_UR2 equals the current pointer to the macroblock 
 *               right to the upper right macroblock data in work buffer. 
 *               This pointer is maintained only for On2 (CDC_MODE = 0x0A). 
 *               Set MB_UR2 base pointer by writing PTR_MB_UR2 before start 
 *               ECD3. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_ULUR2__PTR_MB_UR2_12_4      BITFIELD(12, 4)
#define ECD3_MMR__DTBC_DP_ULUR2__PTR_MB_UR2_12_4__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_ULUR2__PTR_MB_UR2_3_0   
 *
 * @BRIEF        PTR_MB_UR2 equals the current pointer to the macroblock 
 *               right to the upper right macroblock data in work buffer. 
 *               This pointer is maintained only for On2 (CDC_MODE = 0x0A). 
 *               Set MB_UR2 base pointer by writing PTR_MB_UR2 before start 
 *               ECD3. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_ULUR2__PTR_MB_UR2_3_0       BITFIELD(3, 0)
#define ECD3_MMR__DTBC_DP_ULUR2__PTR_MB_UR2_3_0__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_SLICE__PTR_SLICE_15_13   
 *
 * @BRIEF        PTR_SLICE specifies the pointer to slice or picture 
 *               information data. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_SLICE__PTR_SLICE_15_13      BITFIELD(15, 13)
#define ECD3_MMR__DTBC_DP_SLICE__PTR_SLICE_15_13__POS 13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_SLICE__PTR_SLICE_12_4   
 *
 * @BRIEF        PTR_SLICE specifies the pointer to slice or picture 
 *               information data. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_SLICE__PTR_SLICE_12_4       BITFIELD(12, 4)
#define ECD3_MMR__DTBC_DP_SLICE__PTR_SLICE_12_4__POS  4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_SLICE__PTR_SLICE_3_0   
 *
 * @BRIEF        PTR_SLICE specifies the pointer to slice or picture 
 *               information data. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_SLICE__PTR_SLICE_3_0        BITFIELD(3, 0)
#define ECD3_MMR__DTBC_DP_SLICE__PTR_SLICE_3_0__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_LL2__PTR_MB_LL2_15_13   
 *
 * @BRIEF        PTR_MB_LL2 equals the current pointer to the macroblock left 
 *               to the left macroblock data in work buffer. This pointer is 
 *               maintained only for On2 (CDC_MODE = 0x0A). Set MB_LL2 base 
 *               pointer by writing PTR_MB_LL2 before start ECD3. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_LL2__PTR_MB_LL2_15_13       BITFIELD(15, 13)
#define ECD3_MMR__DTBC_DP_LL2__PTR_MB_LL2_15_13__POS  13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_LL2__PTR_MB_LL2_12_4   
 *
 * @BRIEF        PTR_MB_LL2 equals the current pointer to the macroblock left 
 *               to the left macroblock data in work buffer. This pointer is 
 *               maintained only for On2 (CDC_MODE = 0x0A). Set MB_LL2 base 
 *               pointer by writing PTR_MB_LL2 before start ECD3. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_LL2__PTR_MB_LL2_12_4        BITFIELD(12, 4)
#define ECD3_MMR__DTBC_DP_LL2__PTR_MB_LL2_12_4__POS   4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_DP_LL2__PTR_MB_LL2_3_0   
 *
 * @BRIEF        PTR_MB_LL2 equals the current pointer to the macroblock left 
 *               to the left macroblock data in work buffer. This pointer is 
 *               maintained only for On2 (CDC_MODE = 0x0A). Set MB_LL2 base 
 *               pointer by writing PTR_MB_LL2 before start ECD3. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_DP_LL2__PTR_MB_LL2_3_0         BITFIELD(3, 0)
#define ECD3_MMR__DTBC_DP_LL2__PTR_MB_LL2_3_0__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_CUR_MB_SIZE__CUR_MB_SIZE_11_4   
 *
 * @BRIEF        CUR_MB_SIZE data element size for Current MB, Upper right MB 
 *               in AUX buffer and Upper MB, Current/Left MB in WORK buffer. 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_CUR_MB_SIZE__CUR_MB_SIZE_11_4  BITFIELD(11, 4)
#define ECD3_MMR__DTBC_CUR_MB_SIZE__CUR_MB_SIZE_11_4__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DTBC_CUR_MB_SIZE__CUR_MB_SIZE_3_0   
 *
 * @BRIEF        CUR_MB_SIZE data element size for Current MB, Upper right MB 
 *               in AUX buffer and Upper MB, Current/Left MB in WORK buffer. 
 *               - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DTBC_CUR_MB_SIZE__CUR_MB_SIZE_3_0   BITFIELD(3, 0)
#define ECD3_MMR__DTBC_CUR_MB_SIZE__CUR_MB_SIZE_3_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__CDC_MODE__CDC_DIR   
 *
 * @BRIEF        CDC_DIR selects the codec direction. 0 indicates the codec 
 *               engine is decoding. 1 indicates encoding. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__CDC_MODE__CDC_DIR                   BITFIELD(4, 4)
#define ECD3_MMR__CDC_MODE__CDC_DIR__POS              4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__CDC_MODE__CDC_MODE   
 *
 * @BRIEF        CDC_MODE selects the active codec. Value range of this 
 *               register and the codecs to be selected is listed in below. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__CDC_MODE__CDC_MODE                  BITFIELD(3, 0)
#define ECD3_MMR__CDC_MODE__CDC_MODE__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__INT_STATUS__PRCS_DONE   
 *
 * @BRIEF        If encoding or decoding of a picture is finished, an 
 *               interrupt pulse is asserted and this status bit becomes 
 *               high. It makes no sense to write ?0? to this register bit. 
 *                0: not finished. 
 *                1: processing done - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__INT_STATUS__PRCS_DONE               BITFIELD(31, 31)
#define ECD3_MMR__INT_STATUS__PRCS_DONE__POS          31

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__INT_STATUS__EOS_DONE   
 *
 * @BRIEF        If encoding of decoding of a scan is finished, an interrupt 
 *               pulse is asserted and this status bit becomes high. It makes 
 *               no sense to write ?0? to this register bit. 
 *                0: not finished. 
 *                1: processing done - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__INT_STATUS__EOS_DONE                BITFIELD(30, 30)
#define ECD3_MMR__INT_STATUS__EOS_DONE__POS           30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__INT_STATUS__BLK_COEF_NUM_ERR   
 *
 * @BRIEF        If current MCU has a block which has more than 64 
 *               coefficients, this error bit becomes high. 
 *                0: correct (all blocks inside the current MCU have 
 *               64[coef/block]) 
 *                1: incorrect (some blocks inside the current MCU have more 
 *               than 64[coef/block]). - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__INT_STATUS__BLK_COEF_NUM_ERR        BITFIELD(2, 2)
#define ECD3_MMR__INT_STATUS__BLK_COEF_NUM_ERR__POS   2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__INT_STATUS__RSTRT_INTVL_ERR   
 *
 * @BRIEF        If number of MCU between neighboured restart markers is not 
 *               equal to restart interval, this error bit becomes high. It 
 *               makes no sense to write ?0? to this register bit. 
 *                0: no error. 
 *                1: restart interval error occurs - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__INT_STATUS__RSTRT_INTVL_ERR         BITFIELD(1, 1)
#define ECD3_MMR__INT_STATUS__RSTRT_INTVL_ERR__POS    1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__INT_STATUS__VLD_TBL_ERR   
 *
 * @BRIEF        If stream data which is out of table is detected, the JPEG 
 *               core makes this bit high. It makes no sense to write ?0? to 
 *               this register bit. 
 *                0: no error. 
 *                1: out of table error occurs. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__INT_STATUS__VLD_TBL_ERR             BITFIELD(0, 0)
#define ECD3_MMR__INT_STATUS__VLD_TBL_ERR__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__INT_MASK__PRCS_DONE_MASK   
 *
 * @BRIEF        Mask register for prcs_done pulse signal. 
 *                0: ?prcs_done? pulse disable. 
 *                1: ?prce_done? pulse enable - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__INT_MASK__PRCS_DONE_MASK            BITFIELD(31, 31)
#define ECD3_MMR__INT_MASK__PRCS_DONE_MASK__POS       31

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__INT_MASK__EOS_MASK   
 *
 * @BRIEF        Mask register for eos_done pulse signal 
 *                0: ?eos_done? pulse disable. 
 *                1: ?eos_done? pulse enable. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__INT_MASK__EOS_MASK                  BITFIELD(30, 30)
#define ECD3_MMR__INT_MASK__EOS_MASK__POS             30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__INT_MASK__VLD_TBL_ERR   
 *
 * @BRIEF        Mask register for control of error interrupt assertion. 
 *                0: no error interrupt is asserted though condition is hit. 
 *                1: error interrupt is asserted if condition is hit. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__INT_MASK__VLD_TBL_ERR               BITFIELD(0, 0)
#define ECD3_MMR__INT_MASK__VLD_TBL_ERR__POS          0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__JPEG_CTRL__DC_PRED_Y   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__JPEG_CTRL__DC_PRED_Y                BITFIELD(31, 16)
#define ECD3_MMR__JPEG_CTRL__DC_PRED_Y__POS           16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__JPEG_CTRL__RSTRT_MRKR_CNT   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__JPEG_CTRL__RSTRT_MRKR_CNT           BITFIELD(10, 8)
#define ECD3_MMR__JPEG_CTRL__RSTRT_MRKR_CNT__POS      8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__JPEG_CTRL__DC_PRED_RST   
 *
 * @BRIEF        If this register bit is high, DC prediction for the first 
 *               block of the current MCU is not executed. This register bit 
 *               should be used in case of error recovery, and valid in 
 *               decoder. In encoder, the configured value is ignored, 
 *               The configured value is automatically reset after processor 
 *               kicks JPEG core. 
 *                0: DC prediction is executed. 
 *                1: DC prediction is reset. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__JPEG_CTRL__DC_PRED_RST              BITFIELD(1, 1)
#define ECD3_MMR__JPEG_CTRL__DC_PRED_RST__POS         1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__JPEG_CTRL__INIT_EN   
 *
 * @BRIEF        This bit controls initialization of JPEG core on ECD module. 
 *               If this bit is high, all counter values are reset and all 
 *               address pointer for picture configuration data and Huffman 
 *               code tables are loaded. 
 *               Please notice that this bit should be activated once before 
 *               starting processing of ECD module, and after all 
 *               configuration of memory address is done. During period that 
 *               this bit is high, any writing access is ignored. 
 *                0: initialize disable. 
 *                1: initialize start. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__JPEG_CTRL__INIT_EN                  BITFIELD(0, 0)
#define ECD3_MMR__JPEG_CTRL__INIT_EN__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__VLC_HUFFPTR_DC__VLCHUFFPTR_DC_CHROMA_31_29   
 *
 * @BRIEF        Indicating start address of Huffman table for VLC DC chroma. 
 *               The address value should be aligned to 64bit word boundary - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__VLC_HUFFPTR_DC__VLCHUFFPTR_DC_CHROMA_31_29 BITFIELD(31, 29)
#define ECD3_MMR__VLC_HUFFPTR_DC__VLCHUFFPTR_DC_CHROMA_31_29__POS 29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__VLC_HUFFPTR_DC__VLCHUFFPTR_DC_CHROMA_28_19   
 *
 * @BRIEF        Indicating start address of Huffman table for VLC DC chroma. 
 *               The address value should be aligned to 64bit word boundary - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__VLC_HUFFPTR_DC__VLCHUFFPTR_DC_CHROMA_28_19 BITFIELD(28, 19)
#define ECD3_MMR__VLC_HUFFPTR_DC__VLCHUFFPTR_DC_CHROMA_28_19__POS 19

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__VLC_HUFFPTR_DC__VLCHUFFPTR_DC_CHROMA_18_16   
 *
 * @BRIEF        Indicating start address of Huffman table for VLC DC chroma. 
 *               The address value should be aligned to 64bit word boundary - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__VLC_HUFFPTR_DC__VLCHUFFPTR_DC_CHROMA_18_16 BITFIELD(18, 16)
#define ECD3_MMR__VLC_HUFFPTR_DC__VLCHUFFPTR_DC_CHROMA_18_16__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__VLC_HUFFPTR_DC__VLCHUFFPTR_DC_LUMA_15_13   
 *
 * @BRIEF        Indicating start address of Huffman table for VLC DC-luma. 
 *               The address value should be aligned to 64bit word boundary - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__VLC_HUFFPTR_DC__VLCHUFFPTR_DC_LUMA_15_13 BITFIELD(15, 13)
#define ECD3_MMR__VLC_HUFFPTR_DC__VLCHUFFPTR_DC_LUMA_15_13__POS 13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__VLC_HUFFPTR_DC__VLCHUFFPTR_DC_LUMA_12_3   
 *
 * @BRIEF        Indicating start address of Huffman table for VLC DC-luma. 
 *               The address value should be aligned to 64bit word boundary - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__VLC_HUFFPTR_DC__VLCHUFFPTR_DC_LUMA_12_3 BITFIELD(12, 3)
#define ECD3_MMR__VLC_HUFFPTR_DC__VLCHUFFPTR_DC_LUMA_12_3__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__VLC_HUFFPTR_DC__VLCHUFFPTR_DC_LUMA_2_0   
 *
 * @BRIEF        Indicating start address of Huffman table for VLC DC-luma. 
 *               The address value should be aligned to 64bit word boundary - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__VLC_HUFFPTR_DC__VLCHUFFPTR_DC_LUMA_2_0 BITFIELD(2, 0)
#define ECD3_MMR__VLC_HUFFPTR_DC__VLCHUFFPTR_DC_LUMA_2_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__VLC_HUFFPTR_AC__VLCHUFFPTR_AC_CHROMA_31_29   
 *
 * @BRIEF        Indicating start address of Huffman table for VLC AC chroma. 
 *               The address value should be aligned to 64bit word boundary - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__VLC_HUFFPTR_AC__VLCHUFFPTR_AC_CHROMA_31_29 BITFIELD(31, 29)
#define ECD3_MMR__VLC_HUFFPTR_AC__VLCHUFFPTR_AC_CHROMA_31_29__POS 29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__VLC_HUFFPTR_AC__VLCHUFFPTR_AC_CHROMA_28_19   
 *
 * @BRIEF        Indicating start address of Huffman table for VLC AC chroma. 
 *               The address value should be aligned to 64bit word boundary - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__VLC_HUFFPTR_AC__VLCHUFFPTR_AC_CHROMA_28_19 BITFIELD(28, 19)
#define ECD3_MMR__VLC_HUFFPTR_AC__VLCHUFFPTR_AC_CHROMA_28_19__POS 19

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__VLC_HUFFPTR_AC__VLCHUFFPTR_AC_CHROMA_18_16   
 *
 * @BRIEF        Indicating start address of Huffman table for VLC AC chroma. 
 *               The address value should be aligned to 64bit word boundary - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__VLC_HUFFPTR_AC__VLCHUFFPTR_AC_CHROMA_18_16 BITFIELD(18, 16)
#define ECD3_MMR__VLC_HUFFPTR_AC__VLCHUFFPTR_AC_CHROMA_18_16__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__VLC_HUFFPTR_AC__VLCHUFFPTR_AC_LUMA_15_13   
 *
 * @BRIEF        Indicating start address of Huffman table for VLC AC-luma. 
 *               The address value should be aligned to 64bit word boundary - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__VLC_HUFFPTR_AC__VLCHUFFPTR_AC_LUMA_15_13 BITFIELD(15, 13)
#define ECD3_MMR__VLC_HUFFPTR_AC__VLCHUFFPTR_AC_LUMA_15_13__POS 13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__VLC_HUFFPTR_AC__VLCHUFFPTR_AC_LUMA_12_3   
 *
 * @BRIEF        Indicating start address of Huffman table for VLC AC-luma. 
 *               The address value should be aligned to 64bit word boundary - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__VLC_HUFFPTR_AC__VLCHUFFPTR_AC_LUMA_12_3 BITFIELD(12, 3)
#define ECD3_MMR__VLC_HUFFPTR_AC__VLCHUFFPTR_AC_LUMA_12_3__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__VLC_HUFFPTR_AC__VLCHUFFPTR_AC_LUMA_2_0   
 *
 * @BRIEF        Indicating start address of Huffman table for VLC AC-luma. 
 *               The address value should be aligned to 64bit word boundary - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__VLC_HUFFPTR_AC__VLCHUFFPTR_AC_LUMA_2_0 BITFIELD(2, 0)
#define ECD3_MMR__VLC_HUFFPTR_AC__VLCHUFFPTR_AC_LUMA_2_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CTRL_TBPTR_DC__UVLD_CTRL_DC_CHROMA_31_29   
 *
 * @BRIEF        Indicating start address of control table for UVLD 
 *               DC-chroma. The address value should be aligned to 64bit word 
 *               boundary - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CTRL_TBPTR_DC__UVLD_CTRL_DC_CHROMA_31_29 BITFIELD(31, 29)
#define ECD3_MMR__UVLD_CTRL_TBPTR_DC__UVLD_CTRL_DC_CHROMA_31_29__POS 29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CTRL_TBPTR_DC__UVLD_CTRL_DC_CHROMA_28_19   
 *
 * @BRIEF        Indicating start address of control table for UVLD 
 *               DC-chroma. The address value should be aligned to 64bit word 
 *               boundary - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CTRL_TBPTR_DC__UVLD_CTRL_DC_CHROMA_28_19 BITFIELD(28, 19)
#define ECD3_MMR__UVLD_CTRL_TBPTR_DC__UVLD_CTRL_DC_CHROMA_28_19__POS 19

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CTRL_TBPTR_DC__UVLD_CTRL_DC_CHROMA_18_16   
 *
 * @BRIEF        Indicating start address of control table for UVLD 
 *               DC-chroma. The address value should be aligned to 64bit word 
 *               boundary - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CTRL_TBPTR_DC__UVLD_CTRL_DC_CHROMA_18_16 BITFIELD(18, 16)
#define ECD3_MMR__UVLD_CTRL_TBPTR_DC__UVLD_CTRL_DC_CHROMA_18_16__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CTRL_TBPTR_DC__UVLD_CTRL_DC_LUMA_15_13   
 *
 * @BRIEF        Indicating start address of control table for UVLD DC-luma. 
 *               The address value should be aligned to 64bit word boundary. 
 *               - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CTRL_TBPTR_DC__UVLD_CTRL_DC_LUMA_15_13 BITFIELD(15, 13)
#define ECD3_MMR__UVLD_CTRL_TBPTR_DC__UVLD_CTRL_DC_LUMA_15_13__POS 13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CTRL_TBPTR_DC__UVLD_CTRL_DC_LUMA_12_3   
 *
 * @BRIEF        Indicating start address of control table for UVLD DC-luma. 
 *               The address value should be aligned to 64bit word boundary. 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CTRL_TBPTR_DC__UVLD_CTRL_DC_LUMA_12_3 BITFIELD(12, 3)
#define ECD3_MMR__UVLD_CTRL_TBPTR_DC__UVLD_CTRL_DC_LUMA_12_3__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CTRL_TBPTR_DC__UVLD_CTRL_DC_LUMA_2_0   
 *
 * @BRIEF        Indicating start address of control table for UVLD DC-luma. 
 *               The address value should be aligned to 64bit word boundary. 
 *               - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CTRL_TBPTR_DC__UVLD_CTRL_DC_LUMA_2_0 BITFIELD(2, 0)
#define ECD3_MMR__UVLD_CTRL_TBPTR_DC__UVLD_CTRL_DC_LUMA_2_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CTRL_TBPTR_AC__UVLD_CTRL_AC_CHROMA_31_29   
 *
 * @BRIEF        Indicating start address of control table for UVLD 
 *               AC-chroma. The address value should be aligned to 64bit word 
 *               boundary - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CTRL_TBPTR_AC__UVLD_CTRL_AC_CHROMA_31_29 BITFIELD(31, 29)
#define ECD3_MMR__UVLD_CTRL_TBPTR_AC__UVLD_CTRL_AC_CHROMA_31_29__POS 29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CTRL_TBPTR_AC__UVLD_CTRL_AC_CHROMA_28_19   
 *
 * @BRIEF        Indicating start address of control table for UVLD 
 *               AC-chroma. The address value should be aligned to 64bit word 
 *               boundary - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CTRL_TBPTR_AC__UVLD_CTRL_AC_CHROMA_28_19 BITFIELD(28, 19)
#define ECD3_MMR__UVLD_CTRL_TBPTR_AC__UVLD_CTRL_AC_CHROMA_28_19__POS 19

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CTRL_TBPTR_AC__UVLD_CTRL_AC_CHROMA_18_16   
 *
 * @BRIEF        Indicating start address of control table for UVLD 
 *               AC-chroma. The address value should be aligned to 64bit word 
 *               boundary - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CTRL_TBPTR_AC__UVLD_CTRL_AC_CHROMA_18_16 BITFIELD(18, 16)
#define ECD3_MMR__UVLD_CTRL_TBPTR_AC__UVLD_CTRL_AC_CHROMA_18_16__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CTRL_TBPTR_AC__UVLD_CTRL_AC_LUMA_15_13   
 *
 * @BRIEF        Indicating start address of control table for UVLD AC-luma. 
 *               The address value should be aligned to 64bit word boundary - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CTRL_TBPTR_AC__UVLD_CTRL_AC_LUMA_15_13 BITFIELD(15, 13)
#define ECD3_MMR__UVLD_CTRL_TBPTR_AC__UVLD_CTRL_AC_LUMA_15_13__POS 13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CTRL_TBPTR_AC__UVLD_CTRL_AC_LUMA_12_3   
 *
 * @BRIEF        Indicating start address of control table for UVLD AC-luma. 
 *               The address value should be aligned to 64bit word boundary - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CTRL_TBPTR_AC__UVLD_CTRL_AC_LUMA_12_3 BITFIELD(12, 3)
#define ECD3_MMR__UVLD_CTRL_TBPTR_AC__UVLD_CTRL_AC_LUMA_12_3__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CTRL_TBPTR_AC__UVLD_CTRL_AC_LUMA_2_0   
 *
 * @BRIEF        Indicating start address of control table for UVLD AC-luma. 
 *               The address value should be aligned to 64bit word boundary - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CTRL_TBPTR_AC__UVLD_CTRL_AC_LUMA_2_0 BITFIELD(2, 0)
#define ECD3_MMR__UVLD_CTRL_TBPTR_AC__UVLD_CTRL_AC_LUMA_2_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CODE_TBPTR_DC__UVLD_CODE_DC_CHROMA31_29   
 *
 * @BRIEF        Indicating start address of code table for UVLD DC-chroma. 
 *               The address value should be aligned to 64bit word boundary - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CODE_TBPTR_DC__UVLD_CODE_DC_CHROMA31_29 BITFIELD(31, 29)
#define ECD3_MMR__UVLD_CODE_TBPTR_DC__UVLD_CODE_DC_CHROMA31_29__POS 29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CODE_TBPTR_DC__UVLD_CODE_DC_CHROMA_28_19   
 *
 * @BRIEF        Indicating start address of code table for UVLD DC-chroma. 
 *               The address value should be aligned to 64bit word boundary - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CODE_TBPTR_DC__UVLD_CODE_DC_CHROMA_28_19 BITFIELD(28, 19)
#define ECD3_MMR__UVLD_CODE_TBPTR_DC__UVLD_CODE_DC_CHROMA_28_19__POS 19

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CODE_TBPTR_DC__UVLD_CODE_DC_CHROMA_18_16   
 *
 * @BRIEF        Indicating start address of code table for UVLD DC-chroma. 
 *               The address value should be aligned to 64bit word boundary - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CODE_TBPTR_DC__UVLD_CODE_DC_CHROMA_18_16 BITFIELD(18, 16)
#define ECD3_MMR__UVLD_CODE_TBPTR_DC__UVLD_CODE_DC_CHROMA_18_16__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CODE_TBPTR_DC__UVLD_CODE_DC_LUMA_15_13   
 *
 * @BRIEF        Indicating start address of code table for UVLD DC-luma. The 
 *               address value should be aligned to 64bit word boundary - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CODE_TBPTR_DC__UVLD_CODE_DC_LUMA_15_13 BITFIELD(15, 13)
#define ECD3_MMR__UVLD_CODE_TBPTR_DC__UVLD_CODE_DC_LUMA_15_13__POS 13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CODE_TBPTR_DC__UVLD_CODE_DC_LUMA_12_3   
 *
 * @BRIEF        Indicating start address of code table for UVLD DC-luma. The 
 *               address value should be aligned to 64bit word boundary - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CODE_TBPTR_DC__UVLD_CODE_DC_LUMA_12_3 BITFIELD(12, 3)
#define ECD3_MMR__UVLD_CODE_TBPTR_DC__UVLD_CODE_DC_LUMA_12_3__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CODE_TBPTR_DC__UVLD_CODE_DC_LUMA_2_0   
 *
 * @BRIEF        Indicating start address of code table for UVLD DC-luma. The 
 *               address value should be aligned to 64bit word boundary - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CODE_TBPTR_DC__UVLD_CODE_DC_LUMA_2_0 BITFIELD(2, 0)
#define ECD3_MMR__UVLD_CODE_TBPTR_DC__UVLD_CODE_DC_LUMA_2_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CODE_TBPTR_AC__UVLD_CODE_AC_CHROMA_31_29   
 *
 * @BRIEF        Indicating start address of code table for UVLD AC chroma. 
 *               The address value should be aligned to 64bit word boundary - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CODE_TBPTR_AC__UVLD_CODE_AC_CHROMA_31_29 BITFIELD(31, 29)
#define ECD3_MMR__UVLD_CODE_TBPTR_AC__UVLD_CODE_AC_CHROMA_31_29__POS 29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CODE_TBPTR_AC__UVLD_CODE_AC_CHROMA_28_19   
 *
 * @BRIEF        Indicating start address of code table for UVLD AC chroma. 
 *               The address value should be aligned to 64bit word boundary - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CODE_TBPTR_AC__UVLD_CODE_AC_CHROMA_28_19 BITFIELD(28, 19)
#define ECD3_MMR__UVLD_CODE_TBPTR_AC__UVLD_CODE_AC_CHROMA_28_19__POS 19

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CODE_TBPTR_AC__UVLD_CODE_AC_CHROMA_18_16   
 *
 * @BRIEF        Indicating start address of code table for UVLD AC chroma. 
 *               The address value should be aligned to 64bit word boundary - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CODE_TBPTR_AC__UVLD_CODE_AC_CHROMA_18_16 BITFIELD(18, 16)
#define ECD3_MMR__UVLD_CODE_TBPTR_AC__UVLD_CODE_AC_CHROMA_18_16__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CODE_TBPTR_AC__UVLD_CODE_AC_LUMA_15_13   
 *
 * @BRIEF        Indicating start address of code table for UVLD AC-luma. The 
 *               address value should be aligned to 64bit word boundary - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CODE_TBPTR_AC__UVLD_CODE_AC_LUMA_15_13 BITFIELD(15, 13)
#define ECD3_MMR__UVLD_CODE_TBPTR_AC__UVLD_CODE_AC_LUMA_15_13__POS 13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CODE_TBPTR_AC__UVLD_CODE_AC_LUMA_12_3   
 *
 * @BRIEF        Indicating start address of code table for UVLD AC-luma. The 
 *               address value should be aligned to 64bit word boundary - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CODE_TBPTR_AC__UVLD_CODE_AC_LUMA_12_3 BITFIELD(12, 3)
#define ECD3_MMR__UVLD_CODE_TBPTR_AC__UVLD_CODE_AC_LUMA_12_3__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_CODE_TBPTR_AC__UVLD_CODE_AC_LUMA_2_0   
 *
 * @BRIEF        Indicating start address of code table for UVLD AC-luma. The 
 *               address value should be aligned to 64bit word boundary - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_CODE_TBPTR_AC__UVLD_CODE_AC_LUMA_2_0 BITFIELD(2, 0)
#define ECD3_MMR__UVLD_CODE_TBPTR_AC__UVLD_CODE_AC_LUMA_2_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_TBL_TYPE__UVLD_AC_CHROMA   
 *
 * @BRIEF        Indicating type of UVLD code table for AC-chroma data. 
 *                0: zero-leading. 
 *                1: one-leading. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_TBL_TYPE__UVLD_AC_CHROMA       BITFIELD(29, 29)
#define ECD3_MMR__UVLD_TBL_TYPE__UVLD_AC_CHROMA__POS  29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_TBL_TYPE__UVLD_AC_CHROMA_LEN_MAX   
 *
 * @BRIEF        This data defines maximum code length of universal VLD code 
 *               table for AC-chroma. The ECD H/W checks this value only in 
 *               decoder of RAM mode. 
 *               Maximum value is 16 (0x10), which is restriction of JPEG 
 *               standard. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_TBL_TYPE__UVLD_AC_CHROMA_LEN_MAX BITFIELD(28, 24)
#define ECD3_MMR__UVLD_TBL_TYPE__UVLD_AC_CHROMA_LEN_MAX__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_TBL_TYPE__UVLD_AC_LUMA   
 *
 * @BRIEF        Indicating type of UVLD code table for AC-luma data. 
 *                0: zero-leading. 
 *                1: one-leading - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_TBL_TYPE__UVLD_AC_LUMA         BITFIELD(21, 21)
#define ECD3_MMR__UVLD_TBL_TYPE__UVLD_AC_LUMA__POS    21

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_TBL_TYPE__UVLD_AC_LUMA_LEN_MAX   
 *
 * @BRIEF        This data defines maximum code length of universal VLD code 
 *               table for AC-luma. The ECD H/W checks this value only in 
 *               decoder of RAM mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_TBL_TYPE__UVLD_AC_LUMA_LEN_MAX BITFIELD(20, 16)
#define ECD3_MMR__UVLD_TBL_TYPE__UVLD_AC_LUMA_LEN_MAX__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_TBL_TYPE__UVLD_DC_CHROMA   
 *
 * @BRIEF        Indicating type of UVLD code table for DC-chroma data. 
 *                0: zero-leading. 
 *                1: one-leading - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_TBL_TYPE__UVLD_DC_CHROMA       BITFIELD(13, 13)
#define ECD3_MMR__UVLD_TBL_TYPE__UVLD_DC_CHROMA__POS  13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_TBL_TYPE__UVLD_DC_CHROMA_LEN_MAX   
 *
 * @BRIEF        This data defines maximum code length of universal VLD code 
 *               table for DC-chroma. The ECD H/W checks this value only in 
 *               decoder of RAM mode. 
 *               Maximum value is 16 (0x10), which is restriction of JPEG 
 *               standard. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_TBL_TYPE__UVLD_DC_CHROMA_LEN_MAX BITFIELD(12, 8)
#define ECD3_MMR__UVLD_TBL_TYPE__UVLD_DC_CHROMA_LEN_MAX__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_TBL_TYPE__UVLD_DC_LUMA   
 *
 * @BRIEF        Indicating type of UVLD code table for DC-luma data. 
 *                0: zero-leading. 
 *                1: one-leading - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_TBL_TYPE__UVLD_DC_LUMA         BITFIELD(5, 5)
#define ECD3_MMR__UVLD_TBL_TYPE__UVLD_DC_LUMA__POS    5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__UVLD_TBL_TYPE__UVLD_DC_LUMA_LEN_MAX   
 *
 * @BRIEF        This data defines maximum code length of universal VLD code 
 *               table for DC-luma. The ECD H/W checks this value only in 
 *               decoder of RAM mode. 
 *               Maximum value is 16 (0x10), which is restriction of JPEG 
 *               standard. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__UVLD_TBL_TYPE__UVLD_DC_LUMA_LEN_MAX BITFIELD(4, 0)
#define ECD3_MMR__UVLD_TBL_TYPE__UVLD_DC_LUMA_LEN_MAX__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DC_PRED_CHROMA__DC_PRED_CB   
 *
 * @BRIEF        Chrominance (Cb) DC prediction value is stored in register.  
 *               H/W regards this value as previous DC value (source of DC 
 *               prediction) except in a block just after restart marker. 
 *               In case other than TI internal test, this register value 
 *               should not be written externally. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DC_PRED_CHROMA__DC_PRED_CB          BITFIELD(31, 16)
#define ECD3_MMR__DC_PRED_CHROMA__DC_PRED_CB__POS     16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__DC_PRED_CHROMA__DC_PRED_CR   
 *
 * @BRIEF        Chrominance (Cr) DC prediction value is stored in register. 
 *               H/W regards this value as previous DC value (source of DC 
 *               prediction) except in a block just after restart marker. 
 *               In case other than TI internal test, this register value 
 *               should not be written externally. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__DC_PRED_CHROMA__DC_PRED_CR          BITFIELD(15, 0)
#define ECD3_MMR__DC_PRED_CHROMA__DC_PRED_CR__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__CMDP_GPR0__CMDP_GPR0   
 *
 * @BRIEF        Command Processor General purpose registers (GPR0, GPR1, and 
 *               GPR2) are 32-bit registers which can be used freely. They 
 *               are accessible through these addresses. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__CMDP_GPR0__CMDP_GPR0                BITFIELD(31, 0)
#define ECD3_MMR__CMDP_GPR0__CMDP_GPR0__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__CMDP_GPR1__CMDP_GPR1   
 *
 * @BRIEF        Command Processor General purpose registers (GPR0, GPR1, and 
 *               GPR2) are 32-bit registers which can be used freely. They 
 *               are accessible through these addresses. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__CMDP_GPR1__CMDP_GPR1                BITFIELD(31, 0)
#define ECD3_MMR__CMDP_GPR1__CMDP_GPR1__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__CMDP_GPR2__CMDP_GPR2   
 *
 * @BRIEF        Command Processor General purpose registers (GPR0, GPR1, and 
 *               GPR2) are 32-bit registers which can be used freely. They 
 *               are accessible through these addresses. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__CMDP_GPR2__CMDP_GPR2                BITFIELD(31, 0)
#define ECD3_MMR__CMDP_GPR2__CMDP_GPR2__POS           0

    /* 
     * List of register bitfields values for component ECD3_MMR
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__CDC_MODE__CDC_MODE__JPG
 *
 * @BRIEF        Selected Codec:  JPEG   
 *               Selected Codec Engine: JPG - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__CDC_MODE__CDC_MODE__JPG             0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__CDC_MODE__CDC_MODE__NA
 *
 * @BRIEF        Selected Code:  n/a      
 *               Selected Codec Engine: n/a - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__CDC_MODE__CDC_MODE__NA              0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__CDC_MODE__CDC_MODE__MP1
 *
 * @BRIEF        Selected Codec:  MPEG-1   
 *               Selected Codec Engine: MP1 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__CDC_MODE__CDC_MODE__MP1             0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__CDC_MODE__CDC_MODE__MP2
 *
 * @BRIEF        Selected Codec:  MPEG-2   
 *               Selected Codec Engine: MP2 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__CDC_MODE__CDC_MODE__MP2             0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__CDC_MODE__CDC_MODE__MP4
 *
 * @BRIEF        Selected Codec:  MPEG-4 / H.263   
 *               Selected Codec Engine: MP4 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__CDC_MODE__CDC_MODE__MP4             0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__CDC_MODE__CDC_MODE__VC1AD
 *
 * @BRIEF        Selected Codec:  VC-1 Advanced  
 *               Selected Codec Engine: VC1 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__CDC_MODE__CDC_MODE__VC1AD           0x5ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__CDC_MODE__CDC_MODE__H264
 *
 * @BRIEF        Selected Codec:  H.264   
 *               Selected Codec Engine: H264 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__CDC_MODE__CDC_MODE__H264            0x6ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__CDC_MODE__CDC_MODE__VC1SM
 *
 * @BRIEF        Selected Codec:  VC-1 Simple/Main 
 *               Selected Codec Engine: VC1 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__CDC_MODE__CDC_MODE__VC1SM           0x7ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__CDC_MODE__CDC_MODE__AVS
 *
 * @BRIEF        Selected Codec:  AVS   
 *               Selected Codec Engine: AVS - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__CDC_MODE__CDC_MODE__AVS             0x8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__CDC_MODE__CDC_MODE__RV
 *
 * @BRIEF        Selected Codec:  RealVideo  
 *               Selected Codec Engine: RV - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__CDC_MODE__CDC_MODE__RV              0x9ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ECD3_MMR__CDC_MODE__CDC_MODE__ON2
 *
 * @BRIEF        Selected Codec:  On2 (VP6, VP7)  
 *               Selected Codec Engine: ON2 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ECD3_MMR__CDC_MODE__CDC_MODE__ON2             0xAul

#ifdef __cplusplus
}
#endif
#endif                                                     /* __ECD3_MMR_CRED_H 
                                                            */
