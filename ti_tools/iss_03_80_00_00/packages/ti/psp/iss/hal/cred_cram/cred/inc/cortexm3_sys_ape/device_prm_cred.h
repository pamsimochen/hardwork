/** ==================================================================
 *  @file   device_prm_cred.h                                                  
 *                                                                    
 *  @path   /ti/psp/iss/hal/cred_cram/cred/inc/cortexm3_sys_ape/                                                  
 *                                                                    
 *  @desc   This  File contains.                                      
 * ===================================================================
 *  Copyright (c) Texas Instruments Inc 2011, 2012                    
 *                                                                    
 *  Use of this software is controlled by the terms and conditions found
 *  in the license agreement under which this software has been supplied
 * ===================================================================*/

/* ============================================================================ 
 * TEXAS INSTRUMENTS INCORPORATED PROPRIETARY INFORMATION Property of Texas
 * Instruments For Unrestricted Internal Use Only Unauthorized reproduction
 * and/or distribution is strictly prohibited.  This product is protected
 * under copyright law and trade secret law as an unpublished work.  Created
 * 2008, (C) Copyright 2008 Texas Instruments.  All rights reserved. */

/**
 *  @Component:   DEVICE_PRM
 *
 *  @Filename:    device_prm_cred.h
 *
 *  @Description: Component description is not available
 *
 *  Generated by: Socrates CRED generator prototype
 *
    *//* ====================================================================== */

#ifndef __DEVICE_PRM_CRED_H
#define __DEVICE_PRM_CRED_H

#ifdef __cplusplus
extern "C" {
#endif

    /* 
     * Instance DEVICE_PRM of component DEVICE_PRM mapped in MONICA at address 0x4A307B00
     */

                                                                              /*-------------------------------------------------------------------------*//**
 * @DEFINITION   BITFIELD
 *
 * @BRIEF        The bitfield must be defined according to register width
 *               of the component - 64/32/16/8
 *
    *//*------------------------------------------------------------------------ */
#undef BITFIELD
#define BITFIELD BITFIELD_32

    /* 
     *  List of Register arrays for component DEVICE_PRM
     *
     */

    /* 
     *  List of bundle arrays for component DEVICE_PRM
     *
     */

    /* 
     *  List of bundles for component DEVICE_PRM
     *
     */

    /* 
     * List of registers for component DEVICE_PRM
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTCTRL
 *
 * @BRIEF        Global software cold and warm reset control. This register 
 *               is auto-cleared.  
 *               Only write 1 is possible. A read returns 0 only. 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTCTRL                            0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST
 *
 * @BRIEF        This register logs the global reset sources. Each bit is set 
 *               upon release of the domain reset signal.  Must be cleared by 
 *               software. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST                              0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTTIME
 *
 * @BRIEF        Reset duration control. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTTIME                            0x8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_CLKREQCTRL
 *
 * @BRIEF        This register allows controlling the CLKREQ signal towards 
 *               SCRM. 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_CLKREQCTRL                         0xCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL
 *
 * @BRIEF        This register provides voltage domain management controls. 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL                           0x10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_PWRREQCTRL
 *
 * @BRIEF        This register allows controlling the PWRREQ signal towards 
 *               power IC. 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_PWRREQCTRL                         0x14ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_PSCON_COUNT
 *
 * @BRIEF        This register allows controlling 2 parameters for power 
 *               state controller. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_PSCON_COUNT                        0x18ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_IO_COUNT
 *
 * @BRIEF        This register allows controlling LPDDR2 IO isolation removal 
 *               setup. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_IO_COUNT                           0x1Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_IO_PMCTRL
 *
 * @BRIEF        This register allows controlling power management features 
 *               of the IOs. 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_IO_PMCTRL                          0x20ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_WARMRESET
 *
 * @BRIEF        This register provides bit-fields for specifying voltage 
 *               stabilization duration upon a global warm reset. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_WARMRESET                0x24ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF
 *
 * @BRIEF        This register provides bit-fields for specifying voltage 
 *               ramp-up and ramp-down times for PRM managed external 
 *               regulators. These values are used for VDD_CORE_L domain 
 *               transitions with OFF state. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF                 0x28ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF
 *
 * @BRIEF        This register provides bit-fields for specifying voltage 
 *               ramp-up and ramp-down times for PRM managed external 
 *               regulators. These values are used for VDD_MPU_L domain 
 *               transitions to or from OFF state. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF                  0x2Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF
 *
 * @BRIEF        This register provides bit-fields for specifying voltage 
 *               ramp-up and ramp-down times for PRM managed external 
 *               regulators. These values are used for VDD_IVA_L domain 
 *               transitions to or from OFF state. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF                  0x30ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP
 *
 * @BRIEF        This register provides bit-fields for specifying voltage 
 *               ramp-up and ramp-down times for PRM managed external 
 *               regulators. These values are used for VDD_CORE_L domain 
 *               transitions between ON and RET or SLEEP state. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP           0x34ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP
 *
 * @BRIEF        This register provides bit-fields for specifying voltage 
 *               ramp-up and ramp-down times for PRM managed external 
 *               regulators. These values are used for VDD_MPU_L domain 
 *               transitions  between ON and RET or SLEEP state. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP            0x38ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP
 *
 * @BRIEF        This register provides bit-fields for specifying voltage 
 *               ramp-up and ramp-down times for PRM managed external 
 *               regulators. These values are used for VDD_IVA_L domain 
 *               transitions  between ON and RET or SLEEP state. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP            0x3Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_CONFIG
 *
 * @BRIEF        This register allows the configuration of the Voltage 
 *               Processor dedicated to CORE Voltage Domain (VDD_CORE_L). 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_CONFIG                     0x40ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_STATUS
 *
 * @BRIEF        This register reflects the idle state of the Voltage 
 *               Processor dedicated to the CORE Voltage Domain (VDD_CORE_L. 
 *               This register is read only and automatically updated. 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_STATUS                     0x44ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_VLIMITTO
 *
 * @BRIEF        This register allows the configuration of the voltage limits 
 *               and timeout values of the Voltage Processor dedicated to the 
 *               CORE Voltage Domain (VDD_CORE_L). 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_VLIMITTO                   0x48ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_VOLTAGE
 *
 * @BRIEF        This register indicates the current value of the SMPS 
 *               voltage for the Voltage Processor dedicated to the CORE 
 *               Voltage Domain (VDD_CORE_L). 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_VOLTAGE                    0x4Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_VSTEPMAX
 *
 * @BRIEF        This register allows the programming of the maximum voltage 
 *               step and waiting time of the Voltage Processor dedicated to 
 *               CORE Voltage Domain (VDD_CORE_L). 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_VSTEPMAX                   0x50ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_VSTEPMIN
 *
 * @BRIEF        This register allows the programming of the minimum voltage 
 *               step and waiting time of the Voltage Processor dedicated to 
 *               the CORE Voltage Domain (VDD_CORE_L). 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_VSTEPMIN                   0x54ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_CONFIG
 *
 * @BRIEF        This register allows the configuration of the Voltage 
 *               Processor dedicated to MPU Voltage Domain (VDD_MPU_L). 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_CONFIG                      0x58ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_STATUS
 *
 * @BRIEF        This register reflects the idle state of the Voltage 
 *               Processor dedicated to the MPU Voltage Domain (VDD_MPU_L. 
 *               This register is read only and automatically updated. 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_STATUS                      0x5Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_VLIMITTO
 *
 * @BRIEF        This register allows the configuration of the voltage limits 
 *               and timeout values of the Voltage Processor dedicated to the 
 *               MPU Voltage Domain (VDD_MPU_L). 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_VLIMITTO                    0x60ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_VOLTAGE
 *
 * @BRIEF        This register indicates the current value of the SMPS 
 *               voltage for the Voltage Processor dedicated to the MPU 
 *               Voltage Domain (VDD_MPU_L). 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_VOLTAGE                     0x64ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_VSTEPMAX
 *
 * @BRIEF        This register allows the programming of the maximum voltage 
 *               step and waiting time of the Voltage Processor dedicated to 
 *               MPU Voltage Domain (VDD_MPU_L). 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_VSTEPMAX                    0x68ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_VSTEPMIN
 *
 * @BRIEF        This register allows the programming of the minimum voltage 
 *               step and waiting time of the Voltage Processor dedicated to 
 *               the MPU Voltage Domain (VDD_MPU_L). 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_VSTEPMIN                    0x6Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_CONFIG
 *
 * @BRIEF        This register allows the configuration of the Voltage 
 *               Processor dedicated to IVAVoltage Domain (VDD_IVA_L). 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_CONFIG                      0x70ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_STATUS
 *
 * @BRIEF        This register reflects the idle state of the Voltage 
 *               Processor dedicated to the MPU Voltage Domain (VDD_IVA_L. 
 *               This register is read only and automatically updated. 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_STATUS                      0x74ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_VLIMITTO
 *
 * @BRIEF        This register allows the configuration of the voltage limits 
 *               and timeout values of the Voltage Processor dedicated to the 
 *               IVA Voltage Domain (VDD_IVA_L). 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_VLIMITTO                    0x78ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_VOLTAGE
 *
 * @BRIEF        This register indicates the current value of the SMPS 
 *               voltage for the Voltage Processor dedicated to the IVA 
 *               Voltage Domain (VDD_IVA_L). 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_VOLTAGE                     0x7Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_VSTEPMAX
 *
 * @BRIEF        This register allows the programming of the maximum voltage 
 *               step and waiting time of the Voltage Processor dedicated to 
 *               IVA Voltage Domain (VDD_IVA_L). 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_VSTEPMAX                    0x80ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_VSTEPMIN
 *
 * @BRIEF        This register allows the programming of the minimum voltage 
 *               step and waiting time of the Voltage Processor dedicated to 
 *               the IVA Voltage Domain (VDD_IVA_L). 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_VSTEPMIN                    0x84ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_SMPS_SA
 *
 * @BRIEF        This register allows the setting of the I2C slave address of 
 *               the Power IC device. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_SMPS_SA                         0x88ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_SMPS_RA_VOL
 *
 * @BRIEF        This register allows the setting of the voltage 
 *               configuration register address for the VDD channels. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_SMPS_RA_VOL                 0x8Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_SMPS_RA_CMD
 *
 * @BRIEF        Command (ON/ON-Low-Power/Retention/OFF) configuration 
 *               register address values for the VDD channels (if used SMPS 
 *               chips have different command configuration register than 
 *               voltage configuration register). 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_SMPS_RA_CMD                 0x90ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_CMD_VDD_CORE_L
 *
 * @BRIEF        This register allows the setting of the 
 *               ON/ON-Low-Power/Retention/OFF command values for VDD_CORE_L 
 *               channel. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_CORE_L              0x94ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_CMD_VDD_MPU_L
 *
 * @BRIEF        This register allows the setting of the 
 *               ON/ON-Low-Power/Retention/OFF command values for VDD_MPU_L 
 *               channel. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_MPU_L               0x98ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_CMD_VDD_IVA_L
 *
 * @BRIEF        This register allows the setting of the 
 *               ON/ON-Low-Power/Retention/OFF command values for VDD_IVA_L 
 *               channel. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_IVA_L               0x9Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_BYPASS
 *
 * @BRIEF        Bypass data values register used for bypass command channel 
 *               to send other configuration information (other then voltage 
 *               configuration parameters) for SMPS chips which have no other 
 *               configuration interface then this I2C interface. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_BYPASS                      0xA0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL
 *
 * @BRIEF        This register allows the configuration pointers for both VDD 
 *               channels. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL                     0xA4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_I2C_MODE
 *
 * @BRIEF        I2C configuration register. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_I2C_MODE                    0xA8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_I2C_CLK
 *
 * @BRIEF        I2C Interface clock configuration parameters. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_I2C_CLK                     0xACul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_SRAM_COUNT
 *
 * @BRIEF        Common setup for SRAM LDO transition counters. Applies to 
 *               all voltage domains. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_SRAM_COUNT                         0xB0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_SRAM_WKUP_SETUP
 *
 * @BRIEF        Setup of memory in WKUP voltage domain. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_SRAM_WKUP_SETUP                    0xB4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP
 *
 * @BRIEF        Setup of the SRAM LDO for CORE voltage domain. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP                0xB8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_CTRL
 *
 * @BRIEF        Control and status of the SRAM LDO for CORE voltage domain. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_CTRL                 0xBCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP
 *
 * @BRIEF        Setup of the SRAM LDO for MPU voltage domain. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP                 0xC0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_CTRL
 *
 * @BRIEF        Control and status of the SRAM LDO for MPU voltage domain. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_CTRL                  0xC4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP
 *
 * @BRIEF        Setup of the SRAM LDO for IVA voltage domain. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP                 0xC8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_CTRL
 *
 * @BRIEF        Control and status of the SRAM LDO for IVA voltage domain. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_CTRL                  0xCCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP
 *
 * @BRIEF        Selects the MPU_ABB LDO mode. 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP                  0xD0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL
 *
 * @BRIEF        Control and Status of ABB on MPU voltage domain. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL                   0xD4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP
 *
 * @BRIEF        Selects the IVA_ABB LDO mode. 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP                  0xD8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL
 *
 * @BRIEF        Control and Status of ABB on IVA voltage domain. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL                   0xDCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_BANDGAP_SETUP
 *
 * @BRIEF        Setup of the bandgap. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_BANDGAP_SETUP                  0xE0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_DEVICE_OFF_CTRL
 *
 * @BRIEF        This register is used to control device OFF transition. 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_DEVICE_OFF_CTRL                    0xE4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_PHASE1_CNDP
 *
 * @BRIEF        This register stores the start descriptor address of 
 *               automatic restore phase1. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_PHASE1_CNDP                        0xE8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_PHASE2A_CNDP
 *
 * @BRIEF        This register stores the start descriptor address of 
 *               automatic restore phase2A. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_PHASE2A_CNDP                       0xECul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_PHASE2B_CNDP
 *
 * @BRIEF        This register stores the start descriptor address of 
 *               automatic restore phase2B. 
 *               [warm reset insensitive] 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_PHASE2B_CNDP                       0xF0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_MODEM_IF_CTRL
 *
 * @BRIEF        This register is used to control dedicated interfaces 
 *               between on-chip modem and APE. 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_MODEM_IF_CTRL                      0xF4ul

    /* 
     * List of register bitfields for component DEVICE_PRM
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTCTRL__RST_GLOBAL_COLD_SW   
 *
 * @BRIEF        Global COLD software reset control.  
 *               This bit is reset only upon a global cold source of reset. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTCTRL__RST_GLOBAL_COLD_SW   BITFIELD(1, 1)
#define DEVICE_PRM__PRM_RSTCTRL__RST_GLOBAL_COLD_SW__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTCTRL__RST_GLOBAL_WARM_SW   
 *
 * @BRIEF        Global WARM software reset control.  This bit is reset upon 
 *               any global source of reset (warm and cold). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTCTRL__RST_GLOBAL_WARM_SW   BITFIELD(0, 0)
#define DEVICE_PRM__PRM_RSTCTRL__RST_GLOBAL_WARM_SW__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__ICEPICK_RST   
 *
 * @BRIEF        IcePick reset event.  
 *               This is a source of global warm reset initiated by the 
 *               emulation. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__ICEPICK_RST            BITFIELD(9, 9)
#define DEVICE_PRM__PRM_RSTST__ICEPICK_RST__POS       9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__VDD_CORE_VOLT_MGR_RST   
 *
 * @BRIEF        VDD_CORE voltage manager reset event 
 *               This is a source of global WARM reset. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__VDD_CORE_VOLT_MGR_RST  BITFIELD(8, 8)
#define DEVICE_PRM__PRM_RSTST__VDD_CORE_VOLT_MGR_RST__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__VDD_IVA_VOLT_MGR_RST   
 *
 * @BRIEF        VDD_IVA voltage manager reset event 
 *               This is a source of global WARM reset. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__VDD_IVA_VOLT_MGR_RST   BITFIELD(7, 7)
#define DEVICE_PRM__PRM_RSTST__VDD_IVA_VOLT_MGR_RST__POS 7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__VDD_MPU_VOLT_MGR_RST   
 *
 * @BRIEF        VDD_MPU voltage manager reset event 
 *               This is a source of global WARM reset. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__VDD_MPU_VOLT_MGR_RST   BITFIELD(6, 6)
#define DEVICE_PRM__PRM_RSTST__VDD_MPU_VOLT_MGR_RST__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__EXTERNAL_WARM_RST   
 *
 * @BRIEF        External warm reset event - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__EXTERNAL_WARM_RST      BITFIELD(5, 5)
#define DEVICE_PRM__PRM_RSTST__EXTERNAL_WARM_RST__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__SECURE_WDT_RST   
 *
 * @BRIEF        Secure Watchdog timer reset event. 
 *               This is a source of global WARM reset. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__SECURE_WDT_RST         BITFIELD(4, 4)
#define DEVICE_PRM__PRM_RSTST__SECURE_WDT_RST__POS    4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__MPU_WDT_RST   
 *
 * @BRIEF        MPU Watchdog timer reset event. 
 *               This is a source of global WARM reset. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__MPU_WDT_RST            BITFIELD(3, 3)
#define DEVICE_PRM__PRM_RSTST__MPU_WDT_RST__POS       3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__MPU_SECURITY_VIOL_RST   
 *
 * @BRIEF        Security violation reset event triggered by Security State 
 *               Machine inside MPUSS. This is a source of global WARM reset. 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__MPU_SECURITY_VIOL_RST  BITFIELD(2, 2)
#define DEVICE_PRM__PRM_RSTST__MPU_SECURITY_VIOL_RST__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__GLOBAL_WARM_SW_RST   
 *
 * @BRIEF        Global warm software reset event - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__GLOBAL_WARM_SW_RST     BITFIELD(1, 1)
#define DEVICE_PRM__PRM_RSTST__GLOBAL_WARM_SW_RST__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__GLOBAL_COLD_RST   
 *
 * @BRIEF        Power-on (cold) reset event - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__GLOBAL_COLD_RST        BITFIELD(0, 0)
#define DEVICE_PRM__PRM_RSTST__GLOBAL_COLD_RST__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTTIME__RSTTIME2   
 *
 * @BRIEF        Power domain reset duration 2 in number of RM.SYSCLK clock 
 *               cycles. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTTIME__RSTTIME2             BITFIELD(14, 10)
#define DEVICE_PRM__PRM_RSTTIME__RSTTIME2__POS        10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTTIME__RSTTIME1   
 *
 * @BRIEF        Global reset duration 1 in number of Func_32k_clk clock 
 *               cycles. 
 *               This bit-field is only sensitive to the external power-on 
 *               reset (WKUP_SYS_PWRON_RST reset line) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTTIME__RSTTIME1             BITFIELD(9, 0)
#define DEVICE_PRM__PRM_RSTTIME__RSTTIME1__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_CLKREQCTRL__CLKREQ_COND   
 *
 * @BRIEF        Control upon which condition CLKREQ signal is de-asserted. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_CLKREQCTRL__CLKREQ_COND       BITFIELD(2, 0)
#define DEVICE_PRM__PRM_CLKREQCTRL__CLKREQ_COND__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__VDD_IVA_I2C_DISABLE   
 *
 * @BRIEF        This bit allows disabling I2C interface with powerIC for IVA 
 *               voltage (for debug purpose only). 
 *               [warm reset insensitive] - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__VDD_IVA_I2C_DISABLE BITFIELD(14, 14)
#define DEVICE_PRM__PRM_VOLTCTRL__VDD_IVA_I2C_DISABLE__POS 14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__VDD_MPU_I2C_DISABLE   
 *
 * @BRIEF        This bit allows disabling I2C interface with powerIC for MPU 
 *               voltage (for debug purpose only). 
 *               [warm reset insensitive] - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__VDD_MPU_I2C_DISABLE BITFIELD(13, 13)
#define DEVICE_PRM__PRM_VOLTCTRL__VDD_MPU_I2C_DISABLE__POS 13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__VDD_CORE_I2C_DISABLE   
 *
 * @BRIEF        This bit allows disabling I2C interface with powerIC for 
 *               CORE voltage (for debug purpose only). 
 *               [warm reset insensitive] - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__VDD_CORE_I2C_DISABLE BITFIELD(12, 12)
#define DEVICE_PRM__PRM_VOLTCTRL__VDD_CORE_I2C_DISABLE__POS 12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__VDD_IVA_PRESENCE   
 *
 * @BRIEF        This bit control the presence of IVA voltage in device. 
 *               [warm reset insensitive] - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__VDD_IVA_PRESENCE    BITFIELD(9, 9)
#define DEVICE_PRM__PRM_VOLTCTRL__VDD_IVA_PRESENCE__POS 9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__VDD_MPU_PRESENCE   
 *
 * @BRIEF        This bit control the presence of MPU voltage in device. 
 *               [warm reset insensitive] - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__VDD_MPU_PRESENCE    BITFIELD(8, 8)
#define DEVICE_PRM__PRM_VOLTCTRL__VDD_MPU_PRESENCE__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_IVA_L   
 *
 * @BRIEF        This bit field specifies the state to which the hardware can 
 *               automatically transition the VDD_IVA_L voltage domain. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_IVA_L BITFIELD(5, 4)
#define DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_IVA_L__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_MPU_L   
 *
 * @BRIEF        This bit field specifies the state to which the hardware can 
 *               automatically transition the VDD_MPU_L voltage domain. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_MPU_L BITFIELD(3, 2)
#define DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_MPU_L__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_CORE_L   
 *
 * @BRIEF        This bit field specifies the state to which the hardware can 
 *               automatically transition the VDD_CORE_L voltage domain. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_CORE_L BITFIELD(1, 0)
#define DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_CORE_L__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_PWRREQCTRL__PWRREQ_COND   
 *
 * @BRIEF        Control upon which condition from MPU, IVA and CORE voltage 
 *               domains PWRREQ is de-asserted. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_PWRREQCTRL__PWRREQ_COND       BITFIELD(1, 0)
#define DEVICE_PRM__PRM_PWRREQCTRL__PWRREQ_COND__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_PSCON_COUNT__PONOUT_2_PGOODIN_TIME   
 *
 * @BRIEF        The value "NbCycles" set in this field determines the 
 *               duration of the PONOUT to PGOODIN transition for power 
 *               domain without DPS. The duration is computed as 8 x NbCycles 
 *               of system clock cycles. Target is 10us. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_PSCON_COUNT__PONOUT_2_PGOODIN_TIME BITFIELD(15, 8)
#define DEVICE_PRM__PRM_PSCON_COUNT__PONOUT_2_PGOODIN_TIME__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_PSCON_COUNT__PCHARGE_TIME   
 *
 * @BRIEF        Number of system clock cycles for the SRAM pre-charge 
 *               duration. Target is 600ns. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_PSCON_COUNT__PCHARGE_TIME     BITFIELD(7, 0)
#define DEVICE_PRM__PRM_PSCON_COUNT__PCHARGE_TIME__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_IO_COUNT__ISO_2_ON_TIME   
 *
 * @BRIEF        Determines the setup time of the LPDDR2 IOs going out of 
 *               isolation. Counting on the system clock. Target is 1.5us. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_IO_COUNT__ISO_2_ON_TIME       BITFIELD(7, 0)
#define DEVICE_PRM__PRM_IO_COUNT__ISO_2_ON_TIME__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_IO_PMCTRL__GLOBAL_WUEN   
 *
 * @BRIEF        Global IO wakeup enable. This is a gating condition to all 
 *               individual IO WUEN coming from control module. Gating is 
 *               done in the Spinner logic. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_IO_PMCTRL__GLOBAL_WUEN        BITFIELD(16, 16)
#define DEVICE_PRM__PRM_IO_PMCTRL__GLOBAL_WUEN__POS   16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_IO_PMCTRL__WUCLK_STATUS   
 *
 * @BRIEF        Gives value of WUCLKOUT signal coming back from IO pad ring. 
 *               - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_IO_PMCTRL__WUCLK_STATUS       BITFIELD(9, 9)
#define DEVICE_PRM__PRM_IO_PMCTRL__WUCLK_STATUS__POS  9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_IO_PMCTRL__WUCLK_CTRL   
 *
 * @BRIEF        Direct control on WUCLKIN signal to IO pad ring. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_IO_PMCTRL__WUCLK_CTRL         BITFIELD(8, 8)
#define DEVICE_PRM__PRM_IO_PMCTRL__WUCLK_CTRL__POS    8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_IO_PMCTRL__IO_ON_STATUS   
 *
 * @BRIEF        Gives the functional status of the IO ring. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_IO_PMCTRL__IO_ON_STATUS       BITFIELD(5, 5)
#define DEVICE_PRM__PRM_IO_PMCTRL__IO_ON_STATUS__POS  5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_IO_PMCTRL__ISOOVR_EXTEND   
 *
 * @BRIEF        Control non-EMIF IO isolation extension upon a device wakeup 
 *               from OFF mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_IO_PMCTRL__ISOOVR_EXTEND      BITFIELD(4, 4)
#define DEVICE_PRM__PRM_IO_PMCTRL__ISOOVR_EXTEND__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_IO_PMCTRL__ISOCLK_STATUS   
 *
 * @BRIEF        Gives value of ISOCLKOUT signal coming back from IO pad 
 *               ring. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_IO_PMCTRL__ISOCLK_STATUS      BITFIELD(1, 1)
#define DEVICE_PRM__PRM_IO_PMCTRL__ISOCLK_STATUS__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_IO_PMCTRL__ISOCLK_OVERRIDE   
 *
 * @BRIEF        Override control on ISOCLKIN signal to IO pad ring. Used at 
 *               boot time when it is needed to change the mode of an IO from 
 *               1.8V default mode to 1.2V mode. When not overriden, this 
 *               signal is controlled by hardware only. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_IO_PMCTRL__ISOCLK_OVERRIDE    BITFIELD(0, 0)
#define DEVICE_PRM__PRM_IO_PMCTRL__ISOCLK_OVERRIDE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_WARMRESET__STABLE_PRESCAL   
 *
 * @BRIEF        Determines prescaler for stabilization duration counting. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_WARMRESET__STABLE_PRESCAL BITFIELD(9, 8)
#define DEVICE_PRM__PRM_VOLTSETUP_WARMRESET__STABLE_PRESCAL__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_WARMRESET__STABLE_COUNT   
 *
 * @BRIEF        Determines the stabilization duration of all VDD_xxx_L 
 *               regulators upon a global warm reset assertion. The duration 
 *               is computed according to Stable_Prescal. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_WARMRESET__STABLE_COUNT BITFIELD(5, 0)
#define DEVICE_PRM__PRM_VOLTSETUP_WARMRESET__STABLE_COUNT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_DOWN_PRESCAL   
 *
 * @BRIEF        Determines prescaler for ramp-down duration counting. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_DOWN_PRESCAL BITFIELD(25, 24)
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_DOWN_PRESCAL__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_DOWN_COUNT   
 *
 * @BRIEF        Determines the ramp-down duration of VDD_CORE_L regulators. 
 *               The duration is computed according to Ramp_Down_Prescal. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_DOWN_COUNT BITFIELD(21, 16)
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_DOWN_COUNT__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_UP_PRESCAL   
 *
 * @BRIEF        Determines prescaler for ramp-up duration counting. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_UP_PRESCAL BITFIELD(9, 8)
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_UP_PRESCAL__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_UP_COUNT   
 *
 * @BRIEF        Determines the ramp-up duration of VDD_CORE_L regulators. 
 *               The duration is computed according to Ramp_Up_Prescal.  At 
 *               cold reset, PRCM assumes that VDD_CORE_L will be at a valid 
 *               ON voltage before SYS_NRESPWRON is de-asserted. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_UP_COUNT BITFIELD(5, 0)
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_UP_COUNT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_DOWN_PRESCAL   
 *
 * @BRIEF        Determines prescaler for ramp-down duration counting. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_DOWN_PRESCAL BITFIELD(25, 24)
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_DOWN_PRESCAL__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_DOWN_COUNT   
 *
 * @BRIEF        Determines the ramp-down duration of VDD_CORE_L regulators. 
 *               The duration is computed according to Ramp_Down_Prescal. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_DOWN_COUNT BITFIELD(21, 16)
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_DOWN_COUNT__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_UP_PRESCAL   
 *
 * @BRIEF        Determines prescaler for ramp-up duration counting. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_UP_PRESCAL BITFIELD(9, 8)
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_UP_PRESCAL__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_UP_COUNT   
 *
 * @BRIEF        Determines the ramp-up duration of VDD_CORE_L regulators. 
 *               The duration is computed according to Ramp_Up_Prescal.  At 
 *               cold reset, PRCM assumes that VDD_CORE_L will be at a valid 
 *               ON voltage before SYS_NRESPWRON is de-asserted. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_UP_COUNT BITFIELD(5, 0)
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_UP_COUNT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_DOWN_PRESCAL   
 *
 * @BRIEF        Determines prescaler for ramp-down duration counting. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_DOWN_PRESCAL BITFIELD(25, 24)
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_DOWN_PRESCAL__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_DOWN_COUNT   
 *
 * @BRIEF        Determines the ramp-down duration of VDD_CORE_L regulators. 
 *               The duration is computed according to Ramp_Down_Prescal. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_DOWN_COUNT BITFIELD(21, 16)
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_DOWN_COUNT__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_UP_PRESCAL   
 *
 * @BRIEF        Determines prescaler for ramp-up duration counting. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_UP_PRESCAL BITFIELD(9, 8)
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_UP_PRESCAL__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_UP_COUNT   
 *
 * @BRIEF        Determines the ramp-up duration of VDD_CORE_L regulators. 
 *               The duration is computed according to Ramp_Up_Prescal.  At 
 *               cold reset, PRCM assumes that VDD_CORE_L will be at a valid 
 *               ON voltage before SYS_NRESPWRON is de-asserted. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_UP_COUNT BITFIELD(5, 0)
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_UP_COUNT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_DOWN_PRESCAL   
 *
 * @BRIEF        Determines prescaler for ramp-down duration counting. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_DOWN_PRESCAL BITFIELD(25, 24)
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_DOWN_PRESCAL__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_DOWN_COUNT   
 *
 * @BRIEF        Determines the ramp-down duration of VDD_CORE_L regulators. 
 *               The duration is computed according to Ramp_Down_Prescal. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_DOWN_COUNT BITFIELD(21, 16)
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_DOWN_COUNT__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_UP_PRESCAL   
 *
 * @BRIEF        Determines prescaler for ramp-up duration counting. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_UP_PRESCAL BITFIELD(9, 8)
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_UP_PRESCAL__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_UP_COUNT   
 *
 * @BRIEF        Determines the ramp-up duration of VDD_CORE_L regulators. 
 *               The duration is computed according to Ramp_Up_Prescal. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_UP_COUNT BITFIELD(5, 0)
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_UP_COUNT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_DOWN_PRESCAL   
 *
 * @BRIEF        Determines prescaler for ramp-down duration counting. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_DOWN_PRESCAL BITFIELD(25, 24)
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_DOWN_PRESCAL__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_DOWN_COUNT   
 *
 * @BRIEF        Determines the ramp-down duration of VDD_CORE_L regulators. 
 *               The duration is computed according to Ramp_Down_Prescal. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_DOWN_COUNT BITFIELD(21, 16)
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_DOWN_COUNT__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_UP_PRESCAL   
 *
 * @BRIEF        Determines prescaler for ramp-up duration counting. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_UP_PRESCAL BITFIELD(9, 8)
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_UP_PRESCAL__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_UP_COUNT   
 *
 * @BRIEF        Determines the ramp-up duration of VDD_CORE_L regulators. 
 *               The duration is computed according to Ramp_Up_Prescal. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_UP_COUNT BITFIELD(5, 0)
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_UP_COUNT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_DOWN_PRESCAL   
 *
 * @BRIEF        Determines prescaler for ramp-down duration counting. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_DOWN_PRESCAL BITFIELD(25, 24)
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_DOWN_PRESCAL__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_DOWN_COUNT   
 *
 * @BRIEF        Determines the ramp-down duration of VDD_CORE_L regulators. 
 *               The duration is computed according to Ramp_Down_Prescal. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_DOWN_COUNT BITFIELD(21, 16)
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_DOWN_COUNT__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_UP_PRESCAL   
 *
 * @BRIEF        Determines prescaler for ramp-up duration counting. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_UP_PRESCAL BITFIELD(9, 8)
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_UP_PRESCAL__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_UP_COUNT   
 *
 * @BRIEF        Determines the ramp-up duration of VDD_CORE_L regulators. 
 *               The duration is computed according to Ramp_Up_Prescal. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_UP_COUNT BITFIELD(5, 0)
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_UP_COUNT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_CONFIG__ERROROFFSET   
 *
 * @BRIEF        Offset value in the Error to Voltage converter (two's 
 *               complement number). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_CONFIG__ERROROFFSET   BITFIELD(31, 24)
#define DEVICE_PRM__PRM_VP_CORE_CONFIG__ERROROFFSET__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_CONFIG__ERRORGAIN   
 *
 * @BRIEF        Gain value in the Error to Voltage converter (two's 
 *               complement number). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_CONFIG__ERRORGAIN     BITFIELD(23, 16)
#define DEVICE_PRM__PRM_VP_CORE_CONFIG__ERRORGAIN__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_CONFIG__INITVOLTAGE   
 *
 * @BRIEF        Set the initial voltage level of the SMPS. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_CONFIG__INITVOLTAGE   BITFIELD(15, 8)
#define DEVICE_PRM__PRM_VP_CORE_CONFIG__INITVOLTAGE__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_CONFIG__TIMEOUTEN   
 *
 * @BRIEF        Enable or disable the timeout capability of the Voltage 
 *               Controller State Machine. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_CONFIG__TIMEOUTEN     BITFIELD(3, 3)
#define DEVICE_PRM__PRM_VP_CORE_CONFIG__TIMEOUTEN__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_CONFIG__INITVDD   
 *
 * @BRIEF        Initializes the voltage in the Voltage Processor. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_CONFIG__INITVDD       BITFIELD(2, 2)
#define DEVICE_PRM__PRM_VP_CORE_CONFIG__INITVDD__POS  2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_CONFIG__FORCEUPDATE   
 *
 * @BRIEF        Forces an update of the SMPS. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_CONFIG__FORCEUPDATE   BITFIELD(1, 1)
#define DEVICE_PRM__PRM_VP_CORE_CONFIG__FORCEUPDATE__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_CONFIG__VPENABLE   
 *
 * @BRIEF        Enables or disables the Voltage Processor updates on 
 *               SR_SInterruptz. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_CONFIG__VPENABLE      BITFIELD(0, 0)
#define DEVICE_PRM__PRM_VP_CORE_CONFIG__VPENABLE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_STATUS__VPINIDLE   
 *
 * @BRIEF        CORE Voltage Processor idle status. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_STATUS__VPINIDLE      BITFIELD(0, 0)
#define DEVICE_PRM__PRM_VP_CORE_STATUS__VPINIDLE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_VLIMITTO__VDDMAX   
 *
 * @BRIEF        Defines the maximum voltage supply level. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_VLIMITTO__VDDMAX      BITFIELD(31, 24)
#define DEVICE_PRM__PRM_VP_CORE_VLIMITTO__VDDMAX__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_VLIMITTO__VDDMIN   
 *
 * @BRIEF        Defines the minimum voltage supply level. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_VLIMITTO__VDDMIN      BITFIELD(23, 16)
#define DEVICE_PRM__PRM_VP_CORE_VLIMITTO__VDDMIN__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_VLIMITTO__TIMEOUT   
 *
 * @BRIEF        Defines Voltage Controller maximum wait time for responses. 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_VLIMITTO__TIMEOUT     BITFIELD(15, 0)
#define DEVICE_PRM__PRM_VP_CORE_VLIMITTO__TIMEOUT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_VOLTAGE__FORCEUPDATEWAIT   
 *
 * @BRIEF        The time voltage processor needs to wait for SMPS to be 
 *               settled after receiving SMPS acknowledge. This wait only be 
 *               used during force_update operation. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_VOLTAGE__FORCEUPDATEWAIT BITFIELD(31, 8)
#define DEVICE_PRM__PRM_VP_CORE_VOLTAGE__FORCEUPDATEWAIT__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_VOLTAGE__VPVOLTAGE   
 *
 * @BRIEF        Indicates the current SMPS programmed voltage. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_VOLTAGE__VPVOLTAGE    BITFIELD(7, 0)
#define DEVICE_PRM__PRM_VP_CORE_VOLTAGE__VPVOLTAGE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_VSTEPMAX__SMPSWAITTIMEMAX   
 *
 * @BRIEF        Slew rate for positive voltage step (in number of cycles per 
 *               step). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_VSTEPMAX__SMPSWAITTIMEMAX BITFIELD(23, 8)
#define DEVICE_PRM__PRM_VP_CORE_VSTEPMAX__SMPSWAITTIMEMAX__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_VSTEPMAX__VSTEPMAX   
 *
 * @BRIEF        Maximum voltage step - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_VSTEPMAX__VSTEPMAX    BITFIELD(7, 0)
#define DEVICE_PRM__PRM_VP_CORE_VSTEPMAX__VSTEPMAX__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_VSTEPMIN__SMPSWAITTIMEMIN   
 *
 * @BRIEF        Slew rate for negative voltage step (in number of cycles per 
 *               step). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_VSTEPMIN__SMPSWAITTIMEMIN BITFIELD(23, 8)
#define DEVICE_PRM__PRM_VP_CORE_VSTEPMIN__SMPSWAITTIMEMIN__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_VSTEPMIN__VSTEPMIN   
 *
 * @BRIEF        Minimum voltage step - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_VSTEPMIN__VSTEPMIN    BITFIELD(7, 0)
#define DEVICE_PRM__PRM_VP_CORE_VSTEPMIN__VSTEPMIN__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_CONFIG__ERROROFFSET   
 *
 * @BRIEF        Offset value in the Error to Voltage converter (two's 
 *               complement number). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_CONFIG__ERROROFFSET    BITFIELD(31, 24)
#define DEVICE_PRM__PRM_VP_MPU_CONFIG__ERROROFFSET__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_CONFIG__ERRORGAIN   
 *
 * @BRIEF        Gain value in the Error to Voltage converter (two's 
 *               complement number). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_CONFIG__ERRORGAIN      BITFIELD(23, 16)
#define DEVICE_PRM__PRM_VP_MPU_CONFIG__ERRORGAIN__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_CONFIG__INITVOLTAGE   
 *
 * @BRIEF        Set the initial voltage level of the SMPS. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_CONFIG__INITVOLTAGE    BITFIELD(15, 8)
#define DEVICE_PRM__PRM_VP_MPU_CONFIG__INITVOLTAGE__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_CONFIG__TIMEOUTEN   
 *
 * @BRIEF        Enable or disable the timeout capability of the Voltage 
 *               Controller State Machine. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_CONFIG__TIMEOUTEN      BITFIELD(3, 3)
#define DEVICE_PRM__PRM_VP_MPU_CONFIG__TIMEOUTEN__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_CONFIG__INITVDD   
 *
 * @BRIEF        Initializes the voltage in the Voltage Processor. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_CONFIG__INITVDD        BITFIELD(2, 2)
#define DEVICE_PRM__PRM_VP_MPU_CONFIG__INITVDD__POS   2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_CONFIG__FORCEUPDATE   
 *
 * @BRIEF        Forces an update of the SMPS. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_CONFIG__FORCEUPDATE    BITFIELD(1, 1)
#define DEVICE_PRM__PRM_VP_MPU_CONFIG__FORCEUPDATE__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_CONFIG__VPENABLE   
 *
 * @BRIEF        Enables or disables the Voltage Processor updates on 
 *               SR_SInterruptz. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_CONFIG__VPENABLE       BITFIELD(0, 0)
#define DEVICE_PRM__PRM_VP_MPU_CONFIG__VPENABLE__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_STATUS__VPINIDLE   
 *
 * @BRIEF        Voltage Processor 1 idle status. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_STATUS__VPINIDLE       BITFIELD(0, 0)
#define DEVICE_PRM__PRM_VP_MPU_STATUS__VPINIDLE__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_VLIMITTO__VDDMAX   
 *
 * @BRIEF        Defines the maximum voltage supply level. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_VLIMITTO__VDDMAX       BITFIELD(31, 24)
#define DEVICE_PRM__PRM_VP_MPU_VLIMITTO__VDDMAX__POS  24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_VLIMITTO__VDDMIN   
 *
 * @BRIEF        Defines the minimum voltage supply level. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_VLIMITTO__VDDMIN       BITFIELD(23, 16)
#define DEVICE_PRM__PRM_VP_MPU_VLIMITTO__VDDMIN__POS  16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_VLIMITTO__TIMEOUT   
 *
 * @BRIEF        Defines Voltage Controller maximum wait time for responses. 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_VLIMITTO__TIMEOUT      BITFIELD(15, 0)
#define DEVICE_PRM__PRM_VP_MPU_VLIMITTO__TIMEOUT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_VOLTAGE__FORCEUPDATEWAIT   
 *
 * @BRIEF        The time voltage processor needs to wait for SMPS to be 
 *               settled after receiving SMPS acknowledge. This wait only be 
 *               used during force_update operation. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_VOLTAGE__FORCEUPDATEWAIT BITFIELD(31, 8)
#define DEVICE_PRM__PRM_VP_MPU_VOLTAGE__FORCEUPDATEWAIT__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_VOLTAGE__VPVOLTAGE   
 *
 * @BRIEF        Indicates the current SMPS programmed voltage. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_VOLTAGE__VPVOLTAGE     BITFIELD(7, 0)
#define DEVICE_PRM__PRM_VP_MPU_VOLTAGE__VPVOLTAGE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_VSTEPMAX__SMPSWAITTIMEMAX   
 *
 * @BRIEF        Slew rate for positive voltage step (in number of cycles per 
 *               step). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_VSTEPMAX__SMPSWAITTIMEMAX BITFIELD(23, 8)
#define DEVICE_PRM__PRM_VP_MPU_VSTEPMAX__SMPSWAITTIMEMAX__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_VSTEPMAX__VSTEPMAX   
 *
 * @BRIEF        Maximum voltage step - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_VSTEPMAX__VSTEPMAX     BITFIELD(7, 0)
#define DEVICE_PRM__PRM_VP_MPU_VSTEPMAX__VSTEPMAX__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_VSTEPMIN__SMPSWAITTIMEMIN   
 *
 * @BRIEF        Slew rate for negative voltage step (in number of cycles per 
 *               step). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_VSTEPMIN__SMPSWAITTIMEMIN BITFIELD(23, 8)
#define DEVICE_PRM__PRM_VP_MPU_VSTEPMIN__SMPSWAITTIMEMIN__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_VSTEPMIN__VSTEPMIN   
 *
 * @BRIEF        Minimum voltage step - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_VSTEPMIN__VSTEPMIN     BITFIELD(7, 0)
#define DEVICE_PRM__PRM_VP_MPU_VSTEPMIN__VSTEPMIN__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_CONFIG__ERROROFFSET   
 *
 * @BRIEF        Offset value in the Error to Voltage converter (two's 
 *               complement number). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_CONFIG__ERROROFFSET    BITFIELD(31, 24)
#define DEVICE_PRM__PRM_VP_IVA_CONFIG__ERROROFFSET__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_CONFIG__ERRORGAIN   
 *
 * @BRIEF        Gain value in the Error to Voltage converter (two's 
 *               complement number). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_CONFIG__ERRORGAIN      BITFIELD(23, 16)
#define DEVICE_PRM__PRM_VP_IVA_CONFIG__ERRORGAIN__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_CONFIG__INITVOLTAGE   
 *
 * @BRIEF        Set the initial voltage level of the SMPS. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_CONFIG__INITVOLTAGE    BITFIELD(15, 8)
#define DEVICE_PRM__PRM_VP_IVA_CONFIG__INITVOLTAGE__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_CONFIG__TIMEOUTEN   
 *
 * @BRIEF        Enable or disable the timeout capability of the Voltage 
 *               Controller State Machine. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_CONFIG__TIMEOUTEN      BITFIELD(3, 3)
#define DEVICE_PRM__PRM_VP_IVA_CONFIG__TIMEOUTEN__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_CONFIG__INITVDD   
 *
 * @BRIEF        Initializes the voltage in the Voltage Processor. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_CONFIG__INITVDD        BITFIELD(2, 2)
#define DEVICE_PRM__PRM_VP_IVA_CONFIG__INITVDD__POS   2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_CONFIG__FORCEUPDATE   
 *
 * @BRIEF        Forces an update of the SMPS. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_CONFIG__FORCEUPDATE    BITFIELD(1, 1)
#define DEVICE_PRM__PRM_VP_IVA_CONFIG__FORCEUPDATE__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_CONFIG__VPENABLE   
 *
 * @BRIEF        Enables or disables the Voltage Processor updates on 
 *               SR_SInterruptz. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_CONFIG__VPENABLE       BITFIELD(0, 0)
#define DEVICE_PRM__PRM_VP_IVA_CONFIG__VPENABLE__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_STATUS__VPINIDLE   
 *
 * @BRIEF        Voltage Processor 1 idle status. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_STATUS__VPINIDLE       BITFIELD(0, 0)
#define DEVICE_PRM__PRM_VP_IVA_STATUS__VPINIDLE__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_VLIMITTO__VDDMAX   
 *
 * @BRIEF        Defines the maximum voltage supply level. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_VLIMITTO__VDDMAX       BITFIELD(31, 24)
#define DEVICE_PRM__PRM_VP_IVA_VLIMITTO__VDDMAX__POS  24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_VLIMITTO__VDDMIN   
 *
 * @BRIEF        Defines the minimum voltage supply level. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_VLIMITTO__VDDMIN       BITFIELD(23, 16)
#define DEVICE_PRM__PRM_VP_IVA_VLIMITTO__VDDMIN__POS  16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_VLIMITTO__TIMEOUT   
 *
 * @BRIEF        Defines Voltage Controller maximum wait time for responses. 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_VLIMITTO__TIMEOUT      BITFIELD(15, 0)
#define DEVICE_PRM__PRM_VP_IVA_VLIMITTO__TIMEOUT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_VOLTAGE__FORCEUPDATEWAIT   
 *
 * @BRIEF        The time voltage processor needs to wait for SMPS to be 
 *               settled after receiving SMPS acknowledge. This wait only be 
 *               used during force_update operation. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_VOLTAGE__FORCEUPDATEWAIT BITFIELD(31, 8)
#define DEVICE_PRM__PRM_VP_IVA_VOLTAGE__FORCEUPDATEWAIT__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_VOLTAGE__VPVOLTAGE   
 *
 * @BRIEF        Indicates the current SMPS programmed voltage. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_VOLTAGE__VPVOLTAGE     BITFIELD(7, 0)
#define DEVICE_PRM__PRM_VP_IVA_VOLTAGE__VPVOLTAGE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_VSTEPMAX__SMPSWAITTIMEMAX   
 *
 * @BRIEF        Slew rate for positive voltage step (in number of cycles per 
 *               step). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_VSTEPMAX__SMPSWAITTIMEMAX BITFIELD(23, 8)
#define DEVICE_PRM__PRM_VP_IVA_VSTEPMAX__SMPSWAITTIMEMAX__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_VSTEPMAX__VSTEPMAX   
 *
 * @BRIEF        Maximum voltage step - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_VSTEPMAX__VSTEPMAX     BITFIELD(7, 0)
#define DEVICE_PRM__PRM_VP_IVA_VSTEPMAX__VSTEPMAX__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_VSTEPMIN__SMPSWAITTIMEMIN   
 *
 * @BRIEF        Slew rate for negative voltage step (in number of cycles per 
 *               step). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_VSTEPMIN__SMPSWAITTIMEMIN BITFIELD(23, 8)
#define DEVICE_PRM__PRM_VP_IVA_VSTEPMIN__SMPSWAITTIMEMIN__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_VSTEPMIN__VSTEPMIN   
 *
 * @BRIEF        Minimum voltage step - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_VSTEPMIN__VSTEPMIN     BITFIELD(7, 0)
#define DEVICE_PRM__PRM_VP_IVA_VSTEPMIN__VSTEPMIN__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_SMPS_SA__SA_VDD_MPU_L   
 *
 * @BRIEF        Set the I2C slave address value for the third (if any) Power 
 *               IC device. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_SMPS_SA__SA_VDD_MPU_L      BITFIELD(22, 16)
#define DEVICE_PRM__PRM_VC_SMPS_SA__SA_VDD_MPU_L__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_SMPS_SA__SA_VDD_IVA_L   
 *
 * @BRIEF        Set the I2C slave address value for the second (if any) 
 *               Power IC device. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_SMPS_SA__SA_VDD_IVA_L      BITFIELD(14, 8)
#define DEVICE_PRM__PRM_VC_SMPS_SA__SA_VDD_IVA_L__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_SMPS_SA__SA_VDD_CORE_L   
 *
 * @BRIEF        Set the I2C slave address value for the first Power IC 
 *               device. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_SMPS_SA__SA_VDD_CORE_L     BITFIELD(6, 0)
#define DEVICE_PRM__PRM_VC_SMPS_SA__SA_VDD_CORE_L__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_SMPS_RA_VOL__VOLRA_VDD_MPU_L   
 *
 * @BRIEF        Voltage configuration register address value for VDD_MPU_L 
 *               channel (if VDD_MPU_L source is placed in same chip as 
 *               VDD_CORE_L source and have different voltage configuration 
 *               register) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_SMPS_RA_VOL__VOLRA_VDD_MPU_L BITFIELD(23, 16)
#define DEVICE_PRM__PRM_VC_VAL_SMPS_RA_VOL__VOLRA_VDD_MPU_L__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_SMPS_RA_VOL__VOLRA_VDD_IVA_L   
 *
 * @BRIEF        Voltage configuration register address value for VDD_IVA_L 
 *               channel (if VDD_IVA_L source is placed in same chip as 
 *               VDD_CORE_L source and have different voltage configuration 
 *               register) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_SMPS_RA_VOL__VOLRA_VDD_IVA_L BITFIELD(15, 8)
#define DEVICE_PRM__PRM_VC_VAL_SMPS_RA_VOL__VOLRA_VDD_IVA_L__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_SMPS_RA_VOL__VOLRA_VDD_CORE_L   
 *
 * @BRIEF        Set the voltage configuration register address value for the 
 *               VDD_CORE_L channel. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_SMPS_RA_VOL__VOLRA_VDD_CORE_L BITFIELD(7, 0)
#define DEVICE_PRM__PRM_VC_VAL_SMPS_RA_VOL__VOLRA_VDD_CORE_L__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_SMPS_RA_CMD__CMDRA_VDD_MPU_L   
 *
 * @BRIEF        Command (ON/ON-Low-Power /Retention/OFF) configuration 
 *               register address value for VDD_MPU_L channel (if VDD_IVA_L 
 *               source has different command configuration register than 
 *               voltage VDD_CORE_L) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_SMPS_RA_CMD__CMDRA_VDD_MPU_L BITFIELD(23, 16)
#define DEVICE_PRM__PRM_VC_VAL_SMPS_RA_CMD__CMDRA_VDD_MPU_L__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_SMPS_RA_CMD__CMDRA_VDD_IVA_L   
 *
 * @BRIEF        Command (ON/ON-Low-Power /Retention/OFF) configuration 
 *               register address value for VDD_IVA_L channel (if VDD_IVA_L 
 *               source has different command configuration register than 
 *               voltage VDD_CORE_L) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_SMPS_RA_CMD__CMDRA_VDD_IVA_L BITFIELD(15, 8)
#define DEVICE_PRM__PRM_VC_VAL_SMPS_RA_CMD__CMDRA_VDD_IVA_L__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_SMPS_RA_CMD__CMDRA_VDD_CORE_L   
 *
 * @BRIEF        Command (ON/ON-Low-Power /Retention/OFF) configuration 
 *               register address value for VDD_CORE_L channel. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_SMPS_RA_CMD__CMDRA_VDD_CORE_L BITFIELD(7, 0)
#define DEVICE_PRM__PRM_VC_VAL_SMPS_RA_CMD__CMDRA_VDD_CORE_L__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_CMD_VDD_CORE_L__ON   
 *
 * @BRIEF        Set the ON command value. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_CORE_L__ON     BITFIELD(31, 24)
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_CORE_L__ON__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_CMD_VDD_CORE_L__ONLP   
 *
 * @BRIEF        Set the ON-Low-Power command value. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_CORE_L__ONLP   BITFIELD(23, 16)
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_CORE_L__ONLP__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_CMD_VDD_CORE_L__RET   
 *
 * @BRIEF        Set the RET command value. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_CORE_L__RET    BITFIELD(15, 8)
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_CORE_L__RET__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_CMD_VDD_CORE_L__OFF   
 *
 * @BRIEF        Set the OFF command value. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_CORE_L__OFF    BITFIELD(7, 0)
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_CORE_L__OFF__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_CMD_VDD_MPU_L__ON   
 *
 * @BRIEF        Set the ON command value. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_MPU_L__ON      BITFIELD(31, 24)
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_MPU_L__ON__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_CMD_VDD_MPU_L__ONLP   
 *
 * @BRIEF        Set the ON-Low-Power command value. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_MPU_L__ONLP    BITFIELD(23, 16)
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_MPU_L__ONLP__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_CMD_VDD_MPU_L__RET   
 *
 * @BRIEF        Set the RET command value. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_MPU_L__RET     BITFIELD(15, 8)
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_MPU_L__RET__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_CMD_VDD_MPU_L__OFF   
 *
 * @BRIEF        Set the OFF command value. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_MPU_L__OFF     BITFIELD(7, 0)
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_MPU_L__OFF__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_CMD_VDD_IVA_L__ON   
 *
 * @BRIEF        Set the ON command value. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_IVA_L__ON      BITFIELD(31, 24)
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_IVA_L__ON__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_CMD_VDD_IVA_L__ONLP   
 *
 * @BRIEF        Set the ON-Low-Power command value. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_IVA_L__ONLP    BITFIELD(23, 16)
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_IVA_L__ONLP__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_CMD_VDD_IVA_L__RET   
 *
 * @BRIEF        Set the RET command value. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_IVA_L__RET     BITFIELD(15, 8)
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_IVA_L__RET__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_CMD_VDD_IVA_L__OFF   
 *
 * @BRIEF        Set the OFF command value. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_IVA_L__OFF     BITFIELD(7, 0)
#define DEVICE_PRM__PRM_VC_VAL_CMD_VDD_IVA_L__OFF__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_BYPASS__VALID   
 *
 * @BRIEF        This bit validates the bypass command. It is automatically 
 *               cleared by HW either after getting the acknowledge back from 
 *               the SMPS or if an error occured. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_BYPASS__VALID          BITFIELD(24, 24)
#define DEVICE_PRM__PRM_VC_VAL_BYPASS__VALID__POS     24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_BYPASS__DATA   
 *
 * @BRIEF        Data to send to the Power IC device. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_BYPASS__DATA           BITFIELD(23, 16)
#define DEVICE_PRM__PRM_VC_VAL_BYPASS__DATA__POS      16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_BYPASS__REGADDR   
 *
 * @BRIEF        Set the address of Power IC device register to configure. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_BYPASS__REGADDR        BITFIELD(15, 8)
#define DEVICE_PRM__PRM_VC_VAL_BYPASS__REGADDR__POS   8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_BYPASS__SLAVEADDR   
 *
 * @BRIEF        Set the I2C slave address value. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_BYPASS__SLAVEADDR      BITFIELD(6, 0)
#define DEVICE_PRM__PRM_VC_VAL_BYPASS__SLAVEADDR__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__RACEN_VDD_MPU_L   
 *
 * @BRIEF        Enable bit for usage of RAC_VDD_MPU_L - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RACEN_VDD_MPU_L BITFIELD(20, 20)
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RACEN_VDD_MPU_L__POS 20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAC_VDD_MPU_L   
 *
 * @BRIEF        Command (ON/ON-Low-Power/Retention/OFF) configuration 
 *               register address pointer for VDD_MPU_L channel - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAC_VDD_MPU_L BITFIELD(19, 19)
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAC_VDD_MPU_L__POS 19

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAV_VDD_MPU_L   
 *
 * @BRIEF        Voltage configuration register address pointer for VDD_MPU_L 
 *               channel. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAV_VDD_MPU_L BITFIELD(18, 18)
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAV_VDD_MPU_L__POS 18

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__CMD_VDD_MPU_L   
 *
 * @BRIEF        Command values (ON/ON-Low-Power/Retention/OFF voltage 
 *               values) set selection for VDD_MPU_L channel - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__CMD_VDD_MPU_L BITFIELD(17, 17)
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__CMD_VDD_MPU_L__POS 17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__SA_VDD_MPU_L   
 *
 * @BRIEF        Slave address pointer for VDD_MPU_L channel. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__SA_VDD_MPU_L  BITFIELD(16, 16)
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__SA_VDD_MPU_L__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__CMD_VDD_IVA_L   
 *
 * @BRIEF        Command values (ON/ON-Low-Power/Retention/OFF voltage 
 *               values) set selection for VDD_IVA_L channel - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__CMD_VDD_IVA_L BITFIELD(12, 12)
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__CMD_VDD_IVA_L__POS 12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__RACEN_VDD_IVA_L   
 *
 * @BRIEF        Enable bit for usage of RAC_VDD_IVA_L - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RACEN_VDD_IVA_L BITFIELD(11, 11)
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RACEN_VDD_IVA_L__POS 11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAC_VDD_IVA_L   
 *
 * @BRIEF        Command (ON/ON-Low-Power/Retention/OFF) configuration 
 *               register address pointer for VDD_IVA_L channel - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAC_VDD_IVA_L BITFIELD(10, 10)
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAC_VDD_IVA_L__POS 10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAV_VDD_IVA_L   
 *
 * @BRIEF        Voltage configuration register address pointer for VDD_IVA_L 
 *               channel. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAV_VDD_IVA_L BITFIELD(9, 9)
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAV_VDD_IVA_L__POS 9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__SA_VDD_IVA_L   
 *
 * @BRIEF        Slave address pointer for VDD_IVA_L channel. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__SA_VDD_IVA_L  BITFIELD(8, 8)
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__SA_VDD_IVA_L__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__CMD_VDD_CORE_L   
 *
 * @BRIEF        Command values (ON/ON-Low-Power/Retention/OFF voltage 
 *               values) set selection for VDD_CORE_L channel 
 *               (This bit has no influence on VDD_CORE_L channel) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__CMD_VDD_CORE_L BITFIELD(4, 4)
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__CMD_VDD_CORE_L__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__RACEN_VDD_CORE_L   
 *
 * @BRIEF        Enable bit for usage of RAC_VDD_CORE_L. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RACEN_VDD_CORE_L BITFIELD(3, 3)
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RACEN_VDD_CORE_L__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAC_VDD_CORE_L   
 *
 * @BRIEF        Command (ON/ON-Low-Power/Retention/OFF) configuration 
 *               register address pointer for VDD_CORE_L channel. 
 *               (This bit has no influence on first VDD_CORE_L channel) - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAC_VDD_CORE_L BITFIELD(2, 2)
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAC_VDD_CORE_L__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAV_VDD_CORE_L   
 *
 * @BRIEF        Voltage configuration register address pointer for 
 *               VDD_CORE_L channel. 
 *               (This bit has no influence on VDD_CORE_L channel) 
 *               . - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAV_VDD_CORE_L BITFIELD(1, 1)
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAV_VDD_CORE_L__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__SA_VDD_CORE_L   
 *
 * @BRIEF        Slave address pointer for VDD_CORE_L channel. 
 *               (This bit has no influence on first VDD_CORE_L channel) - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__SA_VDD_CORE_L BITFIELD(0, 0)
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__SA_VDD_CORE_L__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_I2C_MODE__DFILTEREN   
 *
 * @BRIEF        This field enables double filter procedure for I2C input 
 *               lines - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_I2C_MODE__DFILTEREN    BITFIELD(6, 6)
#define DEVICE_PRM__PRM_VC_CFG_I2C_MODE__DFILTEREN__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_I2C_MODE__SRMODEEN   
 *
 * @BRIEF        Enables the I2C repeated start operation mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_I2C_MODE__SRMODEEN     BITFIELD(4, 4)
#define DEVICE_PRM__PRM_VC_CFG_I2C_MODE__SRMODEEN__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_I2C_MODE__HSMODEEN   
 *
 * @BRIEF        Enables I2C bus High Speed mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_I2C_MODE__HSMODEEN     BITFIELD(3, 3)
#define DEVICE_PRM__PRM_VC_CFG_I2C_MODE__HSMODEEN__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_I2C_MODE__HSMCODE   
 *
 * @BRIEF        Master code value for I2C High Speed preamble transmission. 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_I2C_MODE__HSMCODE      BITFIELD(2, 0)
#define DEVICE_PRM__PRM_VC_CFG_I2C_MODE__HSMCODE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_I2C_CLK__HSSCLL   
 *
 * @BRIEF        Number of the system clock cycles, necessary to count the 
 *               low period of the I2C clock signal, when the I2C interface 
 *               runs in High-Speed mode of operation. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_I2C_CLK__HSSCLL        BITFIELD(31, 24)
#define DEVICE_PRM__PRM_VC_CFG_I2C_CLK__HSSCLL__POS   24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_I2C_CLK__HSSCLH   
 *
 * @BRIEF        Number of the system clock cycles, necessary to count the 
 *               high period of the I2C clock signal, when the I2C interface 
 *               runs in High-Speed mode of operation. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_I2C_CLK__HSSCLH        BITFIELD(23, 16)
#define DEVICE_PRM__PRM_VC_CFG_I2C_CLK__HSSCLH__POS   16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_I2C_CLK__SCLL   
 *
 * @BRIEF        Number of the system clock cycles, necessary to count the 
 *               low period of the I2C clock signal, when the I2C interface 
 *               runs in Fast mode of operation. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_I2C_CLK__SCLL          BITFIELD(15, 8)
#define DEVICE_PRM__PRM_VC_CFG_I2C_CLK__SCLL__POS     8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_I2C_CLK__SCLH   
 *
 * @BRIEF        Number of the system clock cycles, necessary to count the 
 *               high period of the I2C clock signal, when the I2C interface 
 *               runs in Fast mode of operation. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_I2C_CLK__SCLH          BITFIELD(7, 0)
#define DEVICE_PRM__PRM_VC_CFG_I2C_CLK__SCLH__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_SRAM_COUNT__STARTUP_COUNT   
 *
 * @BRIEF        Determines the start-up duration of SRAM and ABB LDO. The 
 *               duration is computed as 16 x NbCycles of system clock 
 *               cycles. Target is 50us. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_SRAM_COUNT__STARTUP_COUNT     BITFIELD(31, 24)
#define DEVICE_PRM__PRM_SRAM_COUNT__STARTUP_COUNT__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_SRAM_COUNT__SLPCNT_VALUE   
 *
 * @BRIEF        Delay between retention/off assertion of last SRAM bank and 
 *               SRAMALLRET signal to LDO is driven high. Counting on system 
 *               clock. Target is 2us. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_SRAM_COUNT__SLPCNT_VALUE      BITFIELD(23, 16)
#define DEVICE_PRM__PRM_SRAM_COUNT__SLPCNT_VALUE__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_SRAM_COUNT__VSETUPCNT_VALUE   
 *
 * @BRIEF        SRAM LDO rampup time from retention to active mode. The 
 *               duration is computed as 8 x NbCycles of system clock cycles. 
 *               Target is 30us. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_SRAM_COUNT__VSETUPCNT_VALUE   BITFIELD(15, 8)
#define DEVICE_PRM__PRM_SRAM_COUNT__VSETUPCNT_VALUE__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_SRAM_COUNT__PCHARGECNT_VALUE   
 *
 * @BRIEF        Delay between de-assertion of standby_rta_ret_on and 
 *               standby_rta_ret_good. Counting on system clock. Target is 
 *               600ns. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_SRAM_COUNT__PCHARGECNT_VALUE  BITFIELD(5, 0)
#define DEVICE_PRM__PRM_SRAM_COUNT__PCHARGECNT_VALUE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_SRAM_WKUP_SETUP__DISABLE_RTA_EXPORT   
 *
 * @BRIEF        Control for HD memory RTA feature. 
 *               After PowerOn reset and Efuse sensing, this bitfield is 
 *               automatically loaded with an Efuse value from control 
 *               module. Bitfield remains writable after this. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_SRAM_WKUP_SETUP__DISABLE_RTA_EXPORT BITFIELD(0, 0)
#define DEVICE_PRM__PRM_SRAM_WKUP_SETUP__DISABLE_RTA_EXPORT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__AIPOFF   
 *
 * @BRIEF        Override on AIPOFF input of SRAM LDO. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__AIPOFF   BITFIELD(8, 8)
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__AIPOFF__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC5   
 *
 * @BRIEF        ENFUNC5 input of SRAM LDO. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC5  BITFIELD(7, 7)
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC5__POS 7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC4   
 *
 * @BRIEF        ENFUNC4 input of SRAM LDO. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC4  BITFIELD(6, 6)
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC4__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC3_EXPORT   
 *
 * @BRIEF        ENFUNC3 input of SRAM LDO. 
 *               After PowerOn reset and Efuse sensing, this bitfield is 
 *               automatically loaded with an Efuse value from control 
 *               module. Bitfield remains writable after this. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC3_EXPORT BITFIELD(5, 5)
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC3_EXPORT__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC2_EXPORT   
 *
 * @BRIEF        ENFUNC2 input of SRAM LDO. 
 *               After PowerOn reset and Efuse sensing, this bitfield is 
 *               automatically loaded with an Efuse value from control 
 *               module. Bitfield remains writable after this. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC2_EXPORT BITFIELD(4, 4)
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC2_EXPORT__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC1_EXPORT   
 *
 * @BRIEF        ENFUNC1 input of SRAM LDO. 
 *               After PowerOn reset and Efuse sensing, this bitfield is 
 *               automatically loaded with an Efuse value from control 
 *               module. Bitfield remains writable after this. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC1_EXPORT BITFIELD(3, 3)
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC1_EXPORT__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ABBOFF_SLEEP_EXPORT   
 *
 * @BRIEF        Determines whether SRAMNWA is supplied by VDDS or VDDAR 
 *               during deep-sleep. 
 *               After PowerOn reset and Efuse sensing, this bitfield is 
 *               automatically loaded with an Efuse value from control 
 *               module. Bitfield remains writable after this. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ABBOFF_SLEEP_EXPORT BITFIELD(2, 2)
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ABBOFF_SLEEP_EXPORT__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ABBOFF_ACT_EXPORT   
 *
 * @BRIEF        Determines whether SRAMNWA is supplied by VDDS or VDDAR 
 *               during active mode. 
 *               After PowerOn reset and Efuse sensing, this bitfield is 
 *               automatically loaded with an Efuse value from control 
 *               module. Bitfield remains writable after this. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ABBOFF_ACT_EXPORT BITFIELD(1, 1)
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ABBOFF_ACT_EXPORT__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__DISABLE_RTA_EXPORT   
 *
 * @BRIEF        Control for HD memory RTA feature. 
 *               After PowerOn reset and Efuse sensing, this bitfield is 
 *               automatically loaded with an Efuse value from control 
 *               module. Bitfield remains writable after this. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__DISABLE_RTA_EXPORT BITFIELD(0, 0)
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__DISABLE_RTA_EXPORT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_CTRL__SRAM_IN_TRANSITION   
 *
 * @BRIEF        Status indicating SRAM LDO state machine state. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_CTRL__SRAM_IN_TRANSITION BITFIELD(9, 9)
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_CTRL__SRAM_IN_TRANSITION__POS 9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_CTRL__SRAMLDO_STATUS   
 *
 * @BRIEF        SRAMLDO status - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_CTRL__SRAMLDO_STATUS BITFIELD(8, 8)
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_CTRL__SRAMLDO_STATUS__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_CTRL__RETMODE_ENABLE   
 *
 * @BRIEF        Control if the SRAM LDO retention mode is used or not. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_CTRL__RETMODE_ENABLE BITFIELD(0, 0)
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_CTRL__RETMODE_ENABLE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__AIPOFF   
 *
 * @BRIEF        Override on AIPOFF input of SRAM LDO. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__AIPOFF    BITFIELD(8, 8)
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__AIPOFF__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC5   
 *
 * @BRIEF        ENFUNC5 input of SRAM LDO. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC5   BITFIELD(7, 7)
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC5__POS 7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC4   
 *
 * @BRIEF        ENFUNC4 input of SRAM LDO. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC4   BITFIELD(6, 6)
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC4__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC3_EXPORT   
 *
 * @BRIEF        ENFUNC3 input of SRAM LDO. 
 *               After PowerOn reset and Efuse sensing, this bitfield is 
 *               automatically loaded with an Efuse value from control 
 *               module. Bitfield remains writable after this. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC3_EXPORT BITFIELD(5, 5)
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC3_EXPORT__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC2_EXPORT   
 *
 * @BRIEF        ENFUNC2 input of SRAM LDO. 
 *               After PowerOn reset and Efuse sensing, this bitfield is 
 *               automatically loaded with an Efuse value from control 
 *               module. Bitfield remains writable after this. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC2_EXPORT BITFIELD(4, 4)
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC2_EXPORT__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC1_EXPORT   
 *
 * @BRIEF        ENFUNC1 input of SRAM LDO. 
 *               After PowerOn reset and Efuse sensing, this bitfield is 
 *               automatically loaded with an Efuse value from control 
 *               module. Bitfield remains writable after this. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC1_EXPORT BITFIELD(3, 3)
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC1_EXPORT__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ABBOFF_SLEEP_EXPORT   
 *
 * @BRIEF        Determines whether SRAMNWA is supplied by VDDS or VDDAR 
 *               during deep-sleep. 
 *               After PowerOn reset and Efuse sensing, this bitfield is 
 *               automatically loaded with an Efuse value from control 
 *               module. Bitfield remains writable after this. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ABBOFF_SLEEP_EXPORT BITFIELD(2, 2)
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ABBOFF_SLEEP_EXPORT__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ABBOFF_ACT_EXPORT   
 *
 * @BRIEF        Determines whether SRAMNWA is supplied by VDDS or VDDAR 
 *               during active mode. 
 *               After PowerOn reset and Efuse sensing, this bitfield is 
 *               automatically loaded with an Efuse value from control 
 *               module. Bitfield remains writable after this. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ABBOFF_ACT_EXPORT BITFIELD(1, 1)
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ABBOFF_ACT_EXPORT__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__DISABLE_RTA_EXPORT   
 *
 * @BRIEF        Control for HD memory RTA feature. 
 *               After PowerOn reset and Efuse sensing, this bitfield is 
 *               automatically loaded with an Efuse value from control 
 *               module. Bitfield remains writable after this. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__DISABLE_RTA_EXPORT BITFIELD(0, 0)
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__DISABLE_RTA_EXPORT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_CTRL__SRAM_IN_TRANSITION   
 *
 * @BRIEF        Status indicating SRAM LDO state machine state. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_CTRL__SRAM_IN_TRANSITION BITFIELD(9, 9)
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_CTRL__SRAM_IN_TRANSITION__POS 9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_CTRL__SRAMLDO_STATUS   
 *
 * @BRIEF        SRAMLDO status - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_CTRL__SRAMLDO_STATUS BITFIELD(8, 8)
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_CTRL__SRAMLDO_STATUS__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_CTRL__RETMODE_ENABLE   
 *
 * @BRIEF        Control if the SRAM LDO retention mode is used or not. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_CTRL__RETMODE_ENABLE BITFIELD(0, 0)
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_CTRL__RETMODE_ENABLE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__AIPOFF   
 *
 * @BRIEF        Override on AIPOFF input of SRAM LDO. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__AIPOFF    BITFIELD(8, 8)
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__AIPOFF__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC5   
 *
 * @BRIEF        ENFUNC5 input of SRAM LDO. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC5   BITFIELD(7, 7)
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC5__POS 7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC4   
 *
 * @BRIEF        ENFUNC4 input of SRAM LDO. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC4   BITFIELD(6, 6)
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC4__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC3_EXPORT   
 *
 * @BRIEF        ENFUNC3 input of SRAM LDO. 
 *               After PowerOn reset and Efuse sensing, this bitfield is 
 *               automatically loaded with an Efuse value from control 
 *               module. Bitfield remains writable after this. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC3_EXPORT BITFIELD(5, 5)
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC3_EXPORT__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC2_EXPORT   
 *
 * @BRIEF        ENFUNC2 input of SRAM LDO. 
 *               After PowerOn reset and Efuse sensing, this bitfield is 
 *               automatically loaded with an Efuse value from control 
 *               module. Bitfield remains writable after this. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC2_EXPORT BITFIELD(4, 4)
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC2_EXPORT__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC1_EXPORT   
 *
 * @BRIEF        ENFUNC1 input of SRAM LDO. 
 *               After PowerOn reset and Efuse sensing, this bitfield is 
 *               automatically loaded with an Efuse value from control 
 *               module. Bitfield remains writable after this. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC1_EXPORT BITFIELD(3, 3)
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC1_EXPORT__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ABBOFF_SLEEP_EXPORT   
 *
 * @BRIEF        Determines whether SRAMNWA is supplied by VDDS or VDDAR 
 *               during deep-sleep. 
 *               After PowerOn reset and Efuse sensing, this bitfield is 
 *               automatically loaded with an Efuse value from control 
 *               module. Bitfield remains writable after this. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ABBOFF_SLEEP_EXPORT BITFIELD(2, 2)
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ABBOFF_SLEEP_EXPORT__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ABBOFF_ACT_EXPORT   
 *
 * @BRIEF        Determines whether SRAMNWA is supplied by VDDS or VDDAR 
 *               during active mode. 
 *               After PowerOn reset and Efuse sensing, this bitfield is 
 *               automatically loaded with an Efuse value from control 
 *               module. Bitfield remains writable after this. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ABBOFF_ACT_EXPORT BITFIELD(1, 1)
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ABBOFF_ACT_EXPORT__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__DISABLE_RTA_EXPORT   
 *
 * @BRIEF        Control for HD memory RTA feature. 
 *               After PowerOn reset and Efuse sensing, this bitfield is 
 *               automatically loaded with an Efuse value from control 
 *               module. Bitfield remains writable after this. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__DISABLE_RTA_EXPORT BITFIELD(0, 0)
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__DISABLE_RTA_EXPORT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_CTRL__SRAM_IN_TRANSITION   
 *
 * @BRIEF        Status indicating SRAM LDO state machine state. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_CTRL__SRAM_IN_TRANSITION BITFIELD(9, 9)
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_CTRL__SRAM_IN_TRANSITION__POS 9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_CTRL__SRAMLDO_STATUS   
 *
 * @BRIEF        SRAMLDO status - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_CTRL__SRAMLDO_STATUS BITFIELD(8, 8)
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_CTRL__SRAMLDO_STATUS__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_CTRL__RETMODE_ENABLE   
 *
 * @BRIEF        Control if the SRAM LDO retention mode is used or not. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_CTRL__RETMODE_ENABLE BITFIELD(0, 0)
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_CTRL__RETMODE_ENABLE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__SR2_WTCNT_VALUE   
 *
 * @BRIEF        LDO settling time for active-mode OPP change. Counting at a 
 *               16 system clock cycles rate. Target is 50us.  
 *               [warm reset insensitive] - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__SR2_WTCNT_VALUE BITFIELD(15, 8)
#define DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__SR2_WTCNT_VALUE__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__NOCAP_EXPORT   
 *
 * @BRIEF        Defines whether ABB LDO is cap-less or not. 
 *               After PowerOn reset and Efuse sensing, this bitfield is 
 *               automatically loaded with an Efuse value from control 
 *               module. Bitfield remains writable after this. 
 *               [warm reset insensitive] - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__NOCAP_EXPORT BITFIELD(4, 4)
#define DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__NOCAP_EXPORT__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__SLEEP_RBB_SEL   
 *
 * @BRIEF        Defines ABB LDO mode when voltage is in sleep. 
 *               [warm reset insensitive] - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__SLEEP_RBB_SEL BITFIELD(3, 3)
#define DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__SLEEP_RBB_SEL__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__ACTIVE_FBB_SEL   
 *
 * @BRIEF        Defines ABB LDO mode when voltage is in slow fast OPP. 
 *               [warm reset insensitive] - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__ACTIVE_FBB_SEL BITFIELD(2, 2)
#define DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__ACTIVE_FBB_SEL__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__ACTIVE_RBB_SEL   
 *
 * @BRIEF        Defines ABB LDO mode when voltage is in slow OPP. 
 *               [warm reset insensitive] - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__ACTIVE_RBB_SEL BITFIELD(1, 1)
#define DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__ACTIVE_RBB_SEL__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__SR2EN   
 *
 * @BRIEF        Enable ABB power management - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__SR2EN      BITFIELD(0, 0)
#define DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__SR2EN__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__SR2_IN_TRANSITION   
 *
 * @BRIEF        Indicates VBBLDO_CON is or is not in transition state.   
 *               This output should be used by programming interface to clear 
 *               OPP_CHANGE bit as an indication of OPP change completion. - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__SR2_IN_TRANSITION BITFIELD(6, 6)
#define DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__SR2_IN_TRANSITION__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__SR2_STATUS   
 *
 * @BRIEF        Indicate ABB LDO current operation status - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__SR2_STATUS  BITFIELD(4, 3)
#define DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__SR2_STATUS__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__OPP_CHANGE   
 *
 * @BRIEF        When OPP_CHANGE is set to 1, VBBLDO_CON samples OPP_SEL & 
 *               ACTIVE_FBB_SEL/ACTIVE_RBB_SEL upon detecting rising edge.  
 *               VBBLDO_CON asserts signal SR2_IN_TRANSITION in response to 
 *               OPP_CHANGE. 
 *               OPP_CHANGE should be cleared to 0 when SR2_IN_TRANSITION 
 *               from VBBLDO_CON is de-asserted. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__OPP_CHANGE  BITFIELD(2, 2)
#define DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__OPP_CHANGE__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__OPP_SEL   
 *
 * @BRIEF        Selects the OPP at which the MPU voltage domain is operating 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__OPP_SEL     BITFIELD(1, 0)
#define DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__OPP_SEL__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__SR2_WTCNT_VALUE   
 *
 * @BRIEF        LDO settling time for active-mode OPP change. Counting at a 
 *               16 system clock cycles rate. Target is 50us. 
 *               [warm reset insensitive] - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__SR2_WTCNT_VALUE BITFIELD(15, 8)
#define DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__SR2_WTCNT_VALUE__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__NOCAP_EXPORT   
 *
 * @BRIEF        Defines whether ABB LDO is cap-less or not. 
 *               After PowerOn reset and Efuse sensing, this bitfield is 
 *               automatically loaded with an Efuse value from control 
 *               module. Bitfield remains writable after this. 
 *               [warm reset insensitive] - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__NOCAP_EXPORT BITFIELD(4, 4)
#define DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__NOCAP_EXPORT__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__SLEEP_RBB_SEL   
 *
 * @BRIEF        Defines ABB LDO mode when voltage is in sleep. 
 *               [warm reset insensitive] - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__SLEEP_RBB_SEL BITFIELD(3, 3)
#define DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__SLEEP_RBB_SEL__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__ACTIVE_FBB_SEL   
 *
 * @BRIEF        Defines ABB LDO mode when voltage is in slow fast OPP. 
 *               [warm reset insensitive] - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__ACTIVE_FBB_SEL BITFIELD(2, 2)
#define DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__ACTIVE_FBB_SEL__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__ACTIVE_RBB_SEL   
 *
 * @BRIEF        Defines ABB LDO mode when voltage is in slow OPP. 
 *               [warm reset insensitive] - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__ACTIVE_RBB_SEL BITFIELD(1, 1)
#define DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__ACTIVE_RBB_SEL__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__SR2EN   
 *
 * @BRIEF        Enable ABB power management - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__SR2EN      BITFIELD(0, 0)
#define DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__SR2EN__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__SR2_IN_TRANSITION   
 *
 * @BRIEF        Indicates VBBLDO_CON is or is not in transition state.   
 *               This output should be used by programming interface to clear 
 *               OPP_CHANGE bit as an indication of OPP change completion. - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__SR2_IN_TRANSITION BITFIELD(6, 6)
#define DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__SR2_IN_TRANSITION__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__SR2_STATUS   
 *
 * @BRIEF        Indicate ABB LDO current operation status - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__SR2_STATUS  BITFIELD(4, 3)
#define DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__SR2_STATUS__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__OPP_CHANGE   
 *
 * @BRIEF        When OPP_CHANGE is set to 1, VBBLDO_CON samples OPP_SEL & 
 *               ACTIVE_FBB_SEL/ACTIVE_RBB_SEL upon detecting rising edge.  
 *               VBBLDO_CON asserts signal SR2_IN_TRANSITION in response to 
 *               OPP_CHANGE. 
 *               OPP_CHANGE should be cleared to 0 when SR2_IN_TRANSITION 
 *               from VBBLDO_CON is de-asserted. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__OPP_CHANGE  BITFIELD(2, 2)
#define DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__OPP_CHANGE__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__OPP_SEL   
 *
 * @BRIEF        Selects the OPP at which the IVA voltage domain is operating 
 *               (Fast OPP, Nominal OPP or Slow OPP) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__OPP_SEL     BITFIELD(1, 0)
#define DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__OPP_SEL__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_BANDGAP_SETUP__STARTUP_COUNT   
 *
 * @BRIEF        Determines the start-up duration of BANDGAP. The duration is 
 *               computed as 32 x NbCycles of system clock cycles. Target is 
 *               100us. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_BANDGAP_SETUP__STARTUP_COUNT BITFIELD(7, 0)
#define DEVICE_PRM__PRM_LDO_BANDGAP_SETUP__STARTUP_COUNT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_DEVICE_OFF_CTRL__DEVICE_OFF_ENABLE   
 *
 * @BRIEF        Controls transition to device OFF mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_DEVICE_OFF_CTRL__DEVICE_OFF_ENABLE BITFIELD(0, 0)
#define DEVICE_PRM__PRM_DEVICE_OFF_CTRL__DEVICE_OFF_ENABLE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_PHASE1_CNDP__PHASE1_CNDP   
 *
 * @BRIEF        Start descriptor address of automatic restore phase1. 
 *               Hard-coded to SAR_ROM base address. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_PHASE1_CNDP__PHASE1_CNDP      BITFIELD(31, 0)
#define DEVICE_PRM__PRM_PHASE1_CNDP__PHASE1_CNDP__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_PHASE2A_CNDP__PHASE2A_CNDP   
 *
 * @BRIEF        Start descriptor address of automatic restore phase2A - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_PHASE2A_CNDP__PHASE2A_CNDP    BITFIELD(31, 0)
#define DEVICE_PRM__PRM_PHASE2A_CNDP__PHASE2A_CNDP__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_PHASE2B_CNDP__PHASE2B_CNDP   
 *
 * @BRIEF        Start descriptor address of automatic restore phase2B - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_PHASE2B_CNDP__PHASE2B_CNDP    BITFIELD(31, 0)
#define DEVICE_PRM__PRM_PHASE2B_CNDP__PHASE2B_CNDP__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_SLEEP_ST   
 *
 * @BRIEF        Modem sleep status - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_SLEEP_ST BITFIELD(16, 16)
#define DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_SLEEP_ST__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_SHUTDOWN_IRQ   
 *
 * @BRIEF        Controls an interrupt signal to shutdown modem. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_SHUTDOWN_IRQ BITFIELD(9, 9)
#define DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_SHUTDOWN_IRQ__POS 9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_WAKE_IRQ   
 *
 * @BRIEF        Controls an interrupt signal to wakeup modem. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_WAKE_IRQ BITFIELD(8, 8)
#define DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_WAKE_IRQ__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_READY   
 *
 * @BRIEF        Modem readyness status for OCP access. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_READY    BITFIELD(1, 1)
#define DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_READY__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_MODEM_IF_CTRL__WAKE_MODEM   
 *
 * @BRIEF        Controls a wakeup request signal towards modem, in order to 
 *               be accessed from OCP. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_MODEM_IF_CTRL__WAKE_MODEM     BITFIELD(0, 0)
#define DEVICE_PRM__PRM_MODEM_IF_CTRL__WAKE_MODEM__POS 0

    /* 
     * List of register bitfields values for component DEVICE_PRM
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTCTRL__RST_GLOBAL_COLD_SW__0X0
 *
 * @BRIEF        Global COLD software reset is cleared. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTCTRL__RST_GLOBAL_COLD_SW__0X0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTCTRL__RST_GLOBAL_COLD_SW__0X1
 *
 * @BRIEF        Triggers a global COLD software reset. 
 *               The software must ensure the SDRAM is properly  
 *               put in sef-refresh mode before applying this reset. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTCTRL__RST_GLOBAL_COLD_SW__0X1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTCTRL__RST_GLOBAL_WARM_SW__0X0
 *
 * @BRIEF        Global warm software reset is cleared. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTCTRL__RST_GLOBAL_WARM_SW__0X0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTCTRL__RST_GLOBAL_WARM_SW__0X1
 *
 * @BRIEF        Triggers a global warm software reset. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTCTRL__RST_GLOBAL_WARM_SW__0X1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__ICEPICK_RST__0X0
 *
 * @BRIEF        No ICEPICK reset. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__ICEPICK_RST__0X0       0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__ICEPICK_RST__0X1
 *
 * @BRIEF        IcePick reset has occurred. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__ICEPICK_RST__0X1       0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__VDD_CORE_VOLT_MGR_RST__0X0
 *
 * @BRIEF        No VDD_CORE voltage manager reset. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__VDD_CORE_VOLT_MGR_RST__0X0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__VDD_CORE_VOLT_MGR_RST__0X1
 *
 * @BRIEF        VDD_CORE voltage manager reset has occurred. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__VDD_CORE_VOLT_MGR_RST__0X1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__VDD_IVA_VOLT_MGR_RST__0X0
 *
 * @BRIEF        No VDD_IVA voltage manager reset. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__VDD_IVA_VOLT_MGR_RST__0X0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__VDD_IVA_VOLT_MGR_RST__0X1
 *
 * @BRIEF        VDD_IVA voltage manager reset has occurred. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__VDD_IVA_VOLT_MGR_RST__0X1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__VDD_MPU_VOLT_MGR_RST__0X0
 *
 * @BRIEF        No VDD_MPU voltage manager reset. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__VDD_MPU_VOLT_MGR_RST__0X0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__VDD_MPU_VOLT_MGR_RST__0X1
 *
 * @BRIEF        VDD_MPU voltage manager reset has occurred. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__VDD_MPU_VOLT_MGR_RST__0X1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__EXTERNAL_WARM_RST__0X0
 *
 * @BRIEF        No global warm reset. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__EXTERNAL_WARM_RST__0X0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__EXTERNAL_WARM_RST__0X1
 *
 * @BRIEF        Global external warm reset has occurred. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__EXTERNAL_WARM_RST__0X1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__SECURE_WDT_RST__0X0
 *
 * @BRIEF        No Secure watchdog reset. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__SECURE_WDT_RST__0X0    0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__SECURE_WDT_RST__0X1
 *
 * @BRIEF        Secure wachtdog reset has occurred. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__SECURE_WDT_RST__0X1    0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__MPU_WDT_RST__0X0
 *
 * @BRIEF        No MPU watchdog reset. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__MPU_WDT_RST__0X0       0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__MPU_WDT_RST__0X1
 *
 * @BRIEF        MPU wachtdog reset has occurred. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__MPU_WDT_RST__0X1       0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__MPU_SECURITY_VIOL_RST__0X0
 *
 * @BRIEF        No security violation reset. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__MPU_SECURITY_VIOL_RST__0X0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__MPU_SECURITY_VIOL_RST__0X1
 *
 * @BRIEF        Security violation reset has occurred. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__MPU_SECURITY_VIOL_RST__0X1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__GLOBAL_WARM_SW_RST__0X0
 *
 * @BRIEF        No global warm SW reset - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__GLOBAL_WARM_SW_RST__0X0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__GLOBAL_WARM_SW_RST__0X1
 *
 * @BRIEF        Global warm SW reset has occurred. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__GLOBAL_WARM_SW_RST__0X1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__GLOBAL_COLD_RST__0X0
 *
 * @BRIEF        No power-on reset. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__GLOBAL_COLD_RST__0X0   0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTST__GLOBAL_COLD_RST__0X1
 *
 * @BRIEF        Power-on reset has occurred. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTST__GLOBAL_COLD_RST__0X1   0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTTIME__RSTTIME2__RESERVED
 *
 * @BRIEF        Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTTIME__RSTTIME2__RESERVED   0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_RSTTIME__RSTTIME1__RESERVED
 *
 * @BRIEF        Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_RSTTIME__RSTTIME1__RESERVED   0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_CLKREQCTRL__CLKREQ_COND__NEVER
 *
 * @BRIEF        CLKREQ is never de-asserted - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_CLKREQCTRL__CLKREQ_COND__NEVER 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_CLKREQCTRL__CLKREQ_COND__OFF
 *
 * @BRIEF        CLKREQ is de-asserted when system clock is not required by 
 *               any function in the device and if all voltage domains are in 
 *               OFF state. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_CLKREQCTRL__CLKREQ_COND__OFF  0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_CLKREQCTRL__CLKREQ_COND__RET
 *
 * @BRIEF        CLKREQ is de-asserted when system clock is not required by 
 *               any function in the device and if all voltage domains are in 
 *               RET or OFF state. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_CLKREQCTRL__CLKREQ_COND__RET  0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_CLKREQCTRL__CLKREQ_COND__SLEEP
 *
 * @BRIEF        CLKREQ is de-asserted when system clock is not required by 
 *               any function in the device and if all voltage domains are in 
 *               SLEEP or RET or OFF state. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_CLKREQCTRL__CLKREQ_COND__SLEEP 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_CLKREQCTRL__CLKREQ_COND__ON
 *
 * @BRIEF        CLKREQ is de-asserted when system clock is not required by 
 *               any function in the device. This is designed for low-power 
 *               use-cases using the DPLL cascading scheme (ex: MP3) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_CLKREQCTRL__CLKREQ_COND__ON   0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_CLKREQCTRL__CLKREQ_COND__RESERVED_5
 *
 * @BRIEF        Reserved - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_CLKREQCTRL__CLKREQ_COND__RESERVED_5 0x5ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_CLKREQCTRL__CLKREQ_COND__RESERVED_6
 *
 * @BRIEF        Reserved - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_CLKREQCTRL__CLKREQ_COND__RESERVED_6 0x6ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_CLKREQCTRL__CLKREQ_COND__RESERVED_7
 *
 * @BRIEF        Reserved - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_CLKREQCTRL__CLKREQ_COND__RESERVED_7 0x7ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__VDD_IVA_I2C_DISABLE__I2C_ENABLED
 *
 * @BRIEF        Normal mode: I2C is enabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__VDD_IVA_I2C_DISABLE__I2C_ENABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__VDD_IVA_I2C_DISABLE__I2C_DISABLED
 *
 * @BRIEF        Debug mode: I2C is disabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__VDD_IVA_I2C_DISABLE__I2C_DISABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__VDD_MPU_I2C_DISABLE__I2C_ENABLED
 *
 * @BRIEF        Normal mode: I2C is enabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__VDD_MPU_I2C_DISABLE__I2C_ENABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__VDD_MPU_I2C_DISABLE__I2C_DISABLED
 *
 * @BRIEF        Debug mode: I2C is disabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__VDD_MPU_I2C_DISABLE__I2C_DISABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__VDD_CORE_I2C_DISABLE__I2C_ENABLED
 *
 * @BRIEF        Normal mode: I2C is enabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__VDD_CORE_I2C_DISABLE__I2C_ENABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__VDD_CORE_I2C_DISABLE__I2C_DISABLED
 *
 * @BRIEF        Debug mode: I2C is disabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__VDD_CORE_I2C_DISABLE__I2C_DISABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__VDD_IVA_PRESENCE__VOLTAGE_ABSENT
 *
 * @BRIEF        IVA voltage is not present as an individual voltage: 
 *               IVA voltage is merged with MPU voltage if 
 *               VDD_MPU_presence=1. 
 *               IVA voltage is merged with CORE voltage if 
 *               VDD_MPU_presence=0. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__VDD_IVA_PRESENCE__VOLTAGE_ABSENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__VDD_IVA_PRESENCE__VOLTAGE_PRESENT
 *
 * @BRIEF        IVA voltage is present on the device. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__VDD_IVA_PRESENCE__VOLTAGE_PRESENT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__VDD_MPU_PRESENCE__VOLTAGE_ABSENT
 *
 * @BRIEF        MPU voltage is not present as an individual voltage: 
 *               MPU voltage is merged with IVA voltage if 
 *               VDD_IVA_presence=1. 
 *               MPU voltage is merged with CORE voltage if 
 *               VDD_IVA_presence=0. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__VDD_MPU_PRESENCE__VOLTAGE_ABSENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__VDD_MPU_PRESENCE__VOLTAGE_PRESENT
 *
 * @BRIEF        MPU voltage is present on the device. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__VDD_MPU_PRESENCE__VOLTAGE_PRESENT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_IVA_L__DISABLED
 *
 * @BRIEF        Voltage domain transitions are disabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_IVA_L__DISABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_IVA_L__AUTO_SLEEP
 *
 * @BRIEF        Voltage domain transitions to SLEEP are enabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_IVA_L__AUTO_SLEEP 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_IVA_L__AUTO_RET
 *
 * @BRIEF        Voltage domain transitions to RET are enabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_IVA_L__AUTO_RET 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_IVA_L__RESERVED
 *
 * @BRIEF        reserved - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_IVA_L__RESERVED 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_MPU_L__DISABLED
 *
 * @BRIEF        Voltage domain transitions are disabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_MPU_L__DISABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_MPU_L__AUTO_SLEEP
 *
 * @BRIEF        Voltage domain transitions to SLEEP are enabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_MPU_L__AUTO_SLEEP 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_MPU_L__AUTO_RET
 *
 * @BRIEF        Voltage domain transitions to RET are enabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_MPU_L__AUTO_RET 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_MPU_L__RESERVED
 *
 * @BRIEF        reserved  - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_MPU_L__RESERVED 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_CORE_L__DISABLED
 *
 * @BRIEF        Voltage domain transitions are disabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_CORE_L__DISABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_CORE_L__AUTO_SLEEP
 *
 * @BRIEF        Voltage domain transitions to SLEEP are enabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_CORE_L__AUTO_SLEEP 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_CORE_L__AUTO_RET
 *
 * @BRIEF        Voltage domain transitions to RET are enabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_CORE_L__AUTO_RET 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_CORE_L__RESERVED
 *
 * @BRIEF        reserved - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTCTRL__AUTO_CTRL_VDD_CORE_L__RESERVED 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_PWRREQCTRL__PWRREQ_COND__NEVER
 *
 * @BRIEF        PWRREQ is never de-asserted - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_PWRREQCTRL__PWRREQ_COND__NEVER 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_PWRREQCTRL__PWRREQ_COND__SLEEP
 *
 * @BRIEF        PWRREQ is de-asserted if all voltage domain are in SLEEP, 
 *               RET or OFF state. Conversely, PWRREQ is asserted upon any 
 *               voltage domain entering or staying in ON state. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_PWRREQCTRL__PWRREQ_COND__SLEEP 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_PWRREQCTRL__PWRREQ_COND__RET
 *
 * @BRIEF        PWRREQ is de-asserted if all voltage domain are in RET or 
 *               OFF state. Conversely, PWRREQ is asserted upon any voltage 
 *               domain entering or staying in ON or SLEEP state. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_PWRREQCTRL__PWRREQ_COND__RET  0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_PWRREQCTRL__PWRREQ_COND__OFF
 *
 * @BRIEF        PWRREQ is de-asserted if all voltage domain are in OFF 
 *               state. Conversely, PWRREQ is asserted upon any voltage 
 *               domain entering or staying in ON or SLEEP or RET state. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_PWRREQCTRL__PWRREQ_COND__OFF  0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_IO_PMCTRL__GLOBAL_WUEN__DISABLED
 *
 * @BRIEF        All individual IO WUEN are gated in the Spinner logic 
 *               (overriden to 0). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_IO_PMCTRL__GLOBAL_WUEN__DISABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_IO_PMCTRL__GLOBAL_WUEN__ENABLED
 *
 * @BRIEF        All individual IO WUEN from control module are going to IOs. 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_IO_PMCTRL__GLOBAL_WUEN__ENABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_IO_PMCTRL__WUCLK_CTRL__LOW
 *
 * @BRIEF        WUCLKIN signal is driven to 0. 
 *               IO wakeup daisy chain is functional as well as IO whose 
 *               wakeup feature is enabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_IO_PMCTRL__WUCLK_CTRL__LOW    0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_IO_PMCTRL__WUCLK_CTRL__HIGH
 *
 * @BRIEF        WUCLKIN signal is driven to 1. 
 *               IO wakeup daisy chain is reset and is latching current pad 
 *               states and WUEN inputs. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_IO_PMCTRL__WUCLK_CTRL__HIGH   0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_IO_PMCTRL__IO_ON_STATUS__LOW
 *
 * @BRIEF        Part or all of the IOs are not in the ON state, that is are 
 *               in isolation state. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_IO_PMCTRL__IO_ON_STATUS__LOW  0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_IO_PMCTRL__IO_ON_STATUS__HIGH
 *
 * @BRIEF        All IOs are in the ON state. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_IO_PMCTRL__IO_ON_STATUS__HIGH 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_IO_PMCTRL__ISOOVR_EXTEND__NOOVERRIDE
 *
 * @BRIEF        Non-EMIF IO isolation is not extended. "EMIF_ON" IO 
 *               transition happens as soon as automatic restore is 
 *               completed. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_IO_PMCTRL__ISOOVR_EXTEND__NOOVERRIDE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_IO_PMCTRL__ISOOVR_EXTEND__OVERRIDE
 *
 * @BRIEF        Non-EMIF IO isolation is extended. "EMIF_ON" IO transition 
 *               is stalled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_IO_PMCTRL__ISOOVR_EXTEND__OVERRIDE 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_IO_PMCTRL__ISOCLK_OVERRIDE__NOOVERRIDE
 *
 * @BRIEF        ISOCLKIN signal is not overriden. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_IO_PMCTRL__ISOCLK_OVERRIDE__NOOVERRIDE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_IO_PMCTRL__ISOCLK_OVERRIDE__OVERRIDE
 *
 * @BRIEF        ISOCLKIN signal is overriden to active value ('1'). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_IO_PMCTRL__ISOCLK_OVERRIDE__OVERRIDE 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_WARMRESET__STABLE_PRESCAL__X32
 *
 * @BRIEF        Ramp-up counter is incremented every 32 system clock cycles 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_WARMRESET__STABLE_PRESCAL__X32 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_WARMRESET__STABLE_PRESCAL__X256
 *
 * @BRIEF        Ramp-up counter is incremented every 256 system clock cycles 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_WARMRESET__STABLE_PRESCAL__X256 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_WARMRESET__STABLE_PRESCAL__X2048
 *
 * @BRIEF        Ramp-up counter is incremented every 2048 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_WARMRESET__STABLE_PRESCAL__X2048 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_WARMRESET__STABLE_PRESCAL__X16384
 *
 * @BRIEF        Ramp-up counter is incremented every 16384 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_WARMRESET__STABLE_PRESCAL__X16384 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_DOWN_PRESCAL__X64
 *
 * @BRIEF        Ramp-down counter is incremented every 64 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_DOWN_PRESCAL__X64 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_DOWN_PRESCAL__X256
 *
 * @BRIEF        Ramp-down counter is incremented every 256 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_DOWN_PRESCAL__X256 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_DOWN_PRESCAL__X512
 *
 * @BRIEF        Ramp-down counter is incremented every 512 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_DOWN_PRESCAL__X512 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_DOWN_PRESCAL__X2048
 *
 * @BRIEF        Ramp-down counter is incremented every 2048 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_DOWN_PRESCAL__X2048 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_UP_PRESCAL__X64
 *
 * @BRIEF        Ramp-up counter is incremented every 64 system clock cycles 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_UP_PRESCAL__X64 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_UP_PRESCAL__X256
 *
 * @BRIEF        Ramp-up counter is incremented every 256 system clock cycles 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_UP_PRESCAL__X256 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_UP_PRESCAL__X512
 *
 * @BRIEF        Ramp-up counter is incremented every 512 system clock cycles 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_UP_PRESCAL__X512 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_UP_PRESCAL__X2048
 *
 * @BRIEF        Ramp-up counter is incremented every 2048 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_OFF__RAMP_UP_PRESCAL__X2048 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_DOWN_PRESCAL__X64
 *
 * @BRIEF        Ramp-down counter is incremented every 64 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_DOWN_PRESCAL__X64 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_DOWN_PRESCAL__X256
 *
 * @BRIEF        Ramp-down counter is incremented every 256 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_DOWN_PRESCAL__X256 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_DOWN_PRESCAL__X512
 *
 * @BRIEF        Ramp-down counter is incremented every 512 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_DOWN_PRESCAL__X512 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_DOWN_PRESCAL__X2048
 *
 * @BRIEF        Ramp-down counter is incremented every 2048 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_DOWN_PRESCAL__X2048 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_UP_PRESCAL__X64
 *
 * @BRIEF        Ramp-up counter is incremented every 64 system clock cycles 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_UP_PRESCAL__X64 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_UP_PRESCAL__X256
 *
 * @BRIEF        Ramp-up counter is incremented every 256 system clock cycles 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_UP_PRESCAL__X256 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_UP_PRESCAL__X512
 *
 * @BRIEF        Ramp-up counter is incremented every 512 system clock cycles 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_UP_PRESCAL__X512 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_UP_PRESCAL__X2048
 *
 * @BRIEF        Ramp-up counter is incremented every 2048 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_OFF__RAMP_UP_PRESCAL__X2048 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_DOWN_PRESCAL__X64
 *
 * @BRIEF        Ramp-down counter is incremented every 64 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_DOWN_PRESCAL__X64 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_DOWN_PRESCAL__X256
 *
 * @BRIEF        Ramp-down counter is incremented every 256 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_DOWN_PRESCAL__X256 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_DOWN_PRESCAL__X512
 *
 * @BRIEF        Ramp-down counter is incremented every 512 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_DOWN_PRESCAL__X512 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_DOWN_PRESCAL__X2048
 *
 * @BRIEF        Ramp-down counter is incremented every 2048 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_DOWN_PRESCAL__X2048 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_UP_PRESCAL__X64
 *
 * @BRIEF        Ramp-up counter is incremented every 64 system clock cycles 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_UP_PRESCAL__X64 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_UP_PRESCAL__X256
 *
 * @BRIEF        Ramp-up counter is incremented every 256 system clock cycles 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_UP_PRESCAL__X256 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_UP_PRESCAL__X512
 *
 * @BRIEF        Ramp-up counter is incremented every 512 system clock cycles 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_UP_PRESCAL__X512 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_UP_PRESCAL__X2048
 *
 * @BRIEF        Ramp-up counter is incremented every 2048 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_OFF__RAMP_UP_PRESCAL__X2048 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_DOWN_PRESCAL__X16
 *
 * @BRIEF        Ramp-down counter is incremented every 16 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_DOWN_PRESCAL__X16 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_DOWN_PRESCAL__X64
 *
 * @BRIEF        Ramp-down counter is incremented every 64 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_DOWN_PRESCAL__X64 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_DOWN_PRESCAL__X128
 *
 * @BRIEF        Ramp-down counter is incremented every 128 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_DOWN_PRESCAL__X128 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_DOWN_PRESCAL__X512
 *
 * @BRIEF        Ramp-down counter is incremented every 512 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_DOWN_PRESCAL__X512 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_UP_PRESCAL__X16
 *
 * @BRIEF        Ramp-up counter is incremented every 16 system clock cycles 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_UP_PRESCAL__X16 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_UP_PRESCAL__X64
 *
 * @BRIEF        Ramp-up counter is incremented every 64 system clock cycles 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_UP_PRESCAL__X64 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_UP_PRESCAL__X128
 *
 * @BRIEF        Ramp-up counter is incremented every 128 system clock cycles 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_UP_PRESCAL__X128 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_UP_PRESCAL__X512
 *
 * @BRIEF        Ramp-up counter is incremented every 512 system clock cycles 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_CORE_RET_SLEEP__RAMP_UP_PRESCAL__X512 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_DOWN_PRESCAL__X16
 *
 * @BRIEF        Ramp-down counter is incremented every 16 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_DOWN_PRESCAL__X16 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_DOWN_PRESCAL__X64
 *
 * @BRIEF        Ramp-down counter is incremented every 64 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_DOWN_PRESCAL__X64 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_DOWN_PRESCAL__X128
 *
 * @BRIEF        Ramp-down counter is incremented every 128 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_DOWN_PRESCAL__X128 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_DOWN_PRESCAL__X512
 *
 * @BRIEF        Ramp-down counter is incremented every 512 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_DOWN_PRESCAL__X512 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_UP_PRESCAL__X16
 *
 * @BRIEF        Ramp-up counter is incremented every 16 system clock cycles 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_UP_PRESCAL__X16 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_UP_PRESCAL__X64
 *
 * @BRIEF        Ramp-up counter is incremented every 64 system clock cycles 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_UP_PRESCAL__X64 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_UP_PRESCAL__X128
 *
 * @BRIEF        Ramp-up counter is incremented every 128 system clock cycles 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_UP_PRESCAL__X128 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_UP_PRESCAL__X512
 *
 * @BRIEF        Ramp-up counter is incremented every 512 system clock cycles 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_MPU_RET_SLEEP__RAMP_UP_PRESCAL__X512 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_DOWN_PRESCAL__X16
 *
 * @BRIEF        Ramp-down counter is incremented every 16 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_DOWN_PRESCAL__X16 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_DOWN_PRESCAL__X64
 *
 * @BRIEF        Ramp-down counter is incremented every 64 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_DOWN_PRESCAL__X64 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_DOWN_PRESCAL__X128
 *
 * @BRIEF        Ramp-down counter is incremented every 128 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_DOWN_PRESCAL__X128 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_DOWN_PRESCAL__X512
 *
 * @BRIEF        Ramp-down counter is incremented every 512 system clock 
 *               cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_DOWN_PRESCAL__X512 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_UP_PRESCAL__X16
 *
 * @BRIEF        Ramp-up counter is incremented every 16 system clock cycles 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_UP_PRESCAL__X16 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_UP_PRESCAL__X64
 *
 * @BRIEF        Ramp-up counter is incremented every 64 system clock cycles 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_UP_PRESCAL__X64 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_UP_PRESCAL__X128
 *
 * @BRIEF        Ramp-up counter is incremented every 128 system clock cycles 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_UP_PRESCAL__X128 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_UP_PRESCAL__X512
 *
 * @BRIEF        Ramp-up counter is incremented every 512 system clock cycles 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VOLTSETUP_IVA_RET_SLEEP__RAMP_UP_PRESCAL__X512 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_CONFIG__TIMEOUTEN__DIS
 *
 * @BRIEF        Timeout is disabled. Loop will wait indefinitely. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_CONFIG__TIMEOUTEN__DIS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_CONFIG__TIMEOUTEN__EN
 *
 * @BRIEF        Timeout will occur when TIMEOUT cycles have elapsed. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_CONFIG__TIMEOUTEN__EN 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_CONFIG__INITVDD__NEGEDGE
 *
 * @BRIEF        Reset the initialization bit. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_CONFIG__INITVDD__NEGEDGE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_CONFIG__INITVDD__POSEDGE
 *
 * @BRIEF        The positive edge of InitVdd triggers a write of the value 
 *               in the InitVoltage into the Voltage Processor. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_CONFIG__INITVDD__POSEDGE 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_CONFIG__FORCEUPDATE__NEGEDGE
 *
 * @BRIEF        Reset the force bit. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_CONFIG__FORCEUPDATE__NEGEDGE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_CONFIG__FORCEUPDATE__POSEDGE
 *
 * @BRIEF        The positive edge of ForceUpdate triggers an update of the 
 *               voltage to the SMPS. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_CONFIG__FORCEUPDATE__POSEDGE 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_CONFIG__VPENABLE__DIS
 *
 * @BRIEF        Disables the Voltage Processor. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_CONFIG__VPENABLE__DIS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_CONFIG__VPENABLE__EN
 *
 * @BRIEF        Enables the Voltage Processor. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_CONFIG__VPENABLE__EN  0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_STATUS__VPINIDLE__NORMAL
 *
 * @BRIEF        The Voltage Processor for CORE is processing. 
 *               Warm reset sensitive - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_STATUS__VPINIDLE__NORMAL 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_CORE_STATUS__VPINIDLE__ISIDLE
 *
 * @BRIEF        The Voltage Processor for CORE is in idle state. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_CORE_STATUS__VPINIDLE__ISIDLE 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_CONFIG__TIMEOUTEN__DIS
 *
 * @BRIEF        Timeout is disabled. Loop will wait indefinitely. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_CONFIG__TIMEOUTEN__DIS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_CONFIG__TIMEOUTEN__EN
 *
 * @BRIEF        Timeout will occur when TIMEOUT cycles have elapsed. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_CONFIG__TIMEOUTEN__EN  0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_CONFIG__INITVDD__NEGEDGE
 *
 * @BRIEF        Reset the initialization bit. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_CONFIG__INITVDD__NEGEDGE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_CONFIG__INITVDD__POSEDGE
 *
 * @BRIEF        The positive edge of InitVdd triggers a write of the value 
 *               in the InitVoltage into the Voltage Processor. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_CONFIG__INITVDD__POSEDGE 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_CONFIG__FORCEUPDATE__NEGEDGE
 *
 * @BRIEF        Reset the force bit. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_CONFIG__FORCEUPDATE__NEGEDGE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_CONFIG__FORCEUPDATE__POSEDGE
 *
 * @BRIEF        The positive edge of ForceUpdate triggers an update of the 
 *               voltage to the SMPS. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_CONFIG__FORCEUPDATE__POSEDGE 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_CONFIG__VPENABLE__DIS
 *
 * @BRIEF        Disables the Voltage Processor. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_CONFIG__VPENABLE__DIS  0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_CONFIG__VPENABLE__EN
 *
 * @BRIEF        Enables the Voltage Processor. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_CONFIG__VPENABLE__EN   0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_STATUS__VPINIDLE__NORMAL
 *
 * @BRIEF        The Voltage Processor 1 is processing. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_STATUS__VPINIDLE__NORMAL 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_MPU_STATUS__VPINIDLE__ISIDLE
 *
 * @BRIEF        The Voltage Processor 1 is in idle state. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_MPU_STATUS__VPINIDLE__ISIDLE 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_CONFIG__TIMEOUTEN__DIS
 *
 * @BRIEF        Timeout is disabled. Loop will wait indefinitely. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_CONFIG__TIMEOUTEN__DIS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_CONFIG__TIMEOUTEN__EN
 *
 * @BRIEF        Timeout will occur when TIMEOUT cycles have elapsed. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_CONFIG__TIMEOUTEN__EN  0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_CONFIG__INITVDD__NEGEDGE
 *
 * @BRIEF        Reset the initialization bit. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_CONFIG__INITVDD__NEGEDGE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_CONFIG__INITVDD__POSEDGE
 *
 * @BRIEF        The positive edge of InitVdd triggers a write of the value 
 *               in the InitVoltage into the Voltage Processor. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_CONFIG__INITVDD__POSEDGE 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_CONFIG__FORCEUPDATE__NEGEDGE
 *
 * @BRIEF        Reset the force bit. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_CONFIG__FORCEUPDATE__NEGEDGE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_CONFIG__FORCEUPDATE__POSEDGE
 *
 * @BRIEF        The positive edge of ForceUpdate triggers an update of the 
 *               voltage to the SMPS. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_CONFIG__FORCEUPDATE__POSEDGE 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_CONFIG__VPENABLE__DIS
 *
 * @BRIEF        Disables the Voltage Processor. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_CONFIG__VPENABLE__DIS  0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_CONFIG__VPENABLE__EN
 *
 * @BRIEF        Enables the Voltage Processor. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_CONFIG__VPENABLE__EN   0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_STATUS__VPINIDLE__NORMAL
 *
 * @BRIEF        The Voltage Processor 1 is processing. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_STATUS__VPINIDLE__NORMAL 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VP_IVA_STATUS__VPINIDLE__ISIDLE
 *
 * @BRIEF        The Voltage Processor 1 is in idle state. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VP_IVA_STATUS__VPINIDLE__ISIDLE 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_BYPASS__VALID__ACK
 *
 * @BRIEF        The last command send has been acknowledged - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_BYPASS__VALID__ACK     0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_VAL_BYPASS__VALID__PENDING
 *
 * @BRIEF        Pending command is being process - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_VAL_BYPASS__VALID__PENDING 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__RACEN_VDD_MPU_L__VOLRA
 *
 * @BRIEF        VDD_MPU_L channel uses VOLRA values for register address of 
 *               VFSM-s commands. 
 *               VFSM-s commands goes also to voltage configuration register. 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RACEN_VDD_MPU_L__VOLRA 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__RACEN_VDD_MPU_L__CMDRA
 *
 * @BRIEF        VDD_MPU_L channel uses CMDRA values for register address of 
 *               VFSM-s commands. 
 *               VFSM-s commands goes to different command configuration 
 *               register. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RACEN_VDD_MPU_L__CMDRA 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAC_VDD_MPU_L__SEL_CORE
 *
 * @BRIEF        Select CMDRA_VDD_CORE_L for VDD_MPU_L channel - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAC_VDD_MPU_L__SEL_CORE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAC_VDD_MPU_L__SEL_MPU
 *
 * @BRIEF        Select CMDRA_VDD_MPU_L for VDD_MPU_L channel - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAC_VDD_MPU_L__SEL_MPU 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAV_VDD_MPU_L__SEL_CORE
 *
 * @BRIEF        Select VOLRA_VDD_CORE_L for VDD_MPU_L channel - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAV_VDD_MPU_L__SEL_CORE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAV_VDD_MPU_L__SEL_MPU
 *
 * @BRIEF        Select VOLRA_VDD_MPU_L for VDD_MPU_L channel - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAV_VDD_MPU_L__SEL_MPU 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__CMD_VDD_MPU_L__CORE
 *
 * @BRIEF        VDD_MPU_L channel use VC_VAL_CMD_VDD_CORE_L set for command 
 *               values - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__CMD_VDD_MPU_L__CORE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__CMD_VDD_MPU_L__MPU
 *
 * @BRIEF        VDD_MPU_L channel use VC_VAL_CMD_VDD_MPU_L set for command 
 *               values - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__CMD_VDD_MPU_L__MPU 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__SA_VDD_MPU_L__SEL_CORE
 *
 * @BRIEF        Select SA_VDD_CORE_L for VDD_MPU_L channel - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__SA_VDD_MPU_L__SEL_CORE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__SA_VDD_MPU_L__SEL_MPU
 *
 * @BRIEF        Select SA_VDD_MPU_L for VDD_MPU_L channel - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__SA_VDD_MPU_L__SEL_MPU 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__CMD_VDD_IVA_L__CORE
 *
 * @BRIEF        VDD_IVA_L channel use VC_VAL_CMD_VDD_CORE_L set for command 
 *               values - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__CMD_VDD_IVA_L__CORE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__CMD_VDD_IVA_L__IVA
 *
 * @BRIEF        VDD_IVA_L channel use VC_VAL_CMD_VDD_IVA_L set for command 
 *               values - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__CMD_VDD_IVA_L__IVA 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__RACEN_VDD_IVA_L__VOLRA
 *
 * @BRIEF        VDD_IVA_L channel uses VOLRA values for register address of 
 *               VFSM-s commands. 
 *               VFSM-s commands goes also to voltage configuration register. 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RACEN_VDD_IVA_L__VOLRA 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__RACEN_VDD_IVA_L__CMDRA
 *
 * @BRIEF        VDD_IVA_L channel uses CMDRA values for register address of 
 *               VFSM-s commands. 
 *               VFSM-s commands goes to different command configuration 
 *               register. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RACEN_VDD_IVA_L__CMDRA 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAC_VDD_IVA_L__SEL_CORE
 *
 * @BRIEF        Select CMDRA_VDD_CORE_L for VDD_IVA_L channel - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAC_VDD_IVA_L__SEL_CORE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAC_VDD_IVA_L__SEL_IVA
 *
 * @BRIEF        Select CMDRA_VDD_IVA_L for VDD_IVA_L channel - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAC_VDD_IVA_L__SEL_IVA 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAV_VDD_IVA_L__SEL_CORE
 *
 * @BRIEF        Select VOLRA_VDD_CORE_L for VDD_IVA_L channel - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAV_VDD_IVA_L__SEL_CORE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAV_VDD_IVA_L__SEL_IVA
 *
 * @BRIEF        Select VOLRA_VDD_IVA_L for VDD_IVA_L channel - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RAV_VDD_IVA_L__SEL_IVA 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__SA_VDD_IVA_L__SEL_CORE
 *
 * @BRIEF        Select SA_VDD_CORE_L for VDD_IVA_L channel - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__SA_VDD_IVA_L__SEL_CORE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__SA_VDD_IVA_L__SEL_IVA
 *
 * @BRIEF        Select SA_VDD_IVA_L for VDD_IVA_L channel - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__SA_VDD_IVA_L__SEL_IVA 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__RACEN_VDD_CORE_L__VOLRA
 *
 * @BRIEF        VDD_CORE_L channel use VOLRA values for register address of 
 *               VFSM-s commands. 
 *               VFSM-s commands goes also to voltage configuration register. 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RACEN_VDD_CORE_L__VOLRA 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_CHANNEL__RACEN_VDD_CORE_L__CMDRA
 *
 * @BRIEF        VDD_CORE_L channel use CMDRA values for register address of 
 *               VFSM-s commands. 
 *               VFSM-s commands goes to different command configuration 
 *               register. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_CHANNEL__RACEN_VDD_CORE_L__CMDRA 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_I2C_MODE__DFILTEREN__DFILTER_EN1
 *
 * @BRIEF        I2C bus digital filter rejects all glitches smaller than 1 
 *               sytem clock cycle - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_I2C_MODE__DFILTEREN__DFILTER_EN1 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_I2C_MODE__DFILTEREN__DFILTER_EN2
 *
 * @BRIEF        I2C bus digital filter rejects all glitches smaller than 2 
 *               sytem clock cycle - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_I2C_MODE__DFILTEREN__DFILTER_EN2 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_I2C_MODE__SRMODEEN__DIS_SR
 *
 * @BRIEF        Disables the repeated start operation mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_I2C_MODE__SRMODEEN__DIS_SR 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_I2C_MODE__SRMODEEN__EN_SR
 *
 * @BRIEF        Enables the repeated start operation mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_I2C_MODE__SRMODEEN__EN_SR 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_I2C_MODE__HSMODEEN__DIS_HS
 *
 * @BRIEF        Disables the I2C high speed mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_I2C_MODE__HSMODEEN__DIS_HS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_VC_CFG_I2C_MODE__HSMODEEN__EN_HS
 *
 * @BRIEF        Enables the I2C high speed mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_VC_CFG_I2C_MODE__HSMODEEN__EN_HS 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_SRAM_WKUP_SETUP__DISABLE_RTA_EXPORT__RTA_ENABLED
 *
 * @BRIEF        HD memory RTA feature  is enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_SRAM_WKUP_SETUP__DISABLE_RTA_EXPORT__RTA_ENABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_SRAM_WKUP_SETUP__DISABLE_RTA_EXPORT__RTA_DISABLED
 *
 * @BRIEF        HD memory RTA feature is disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_SRAM_WKUP_SETUP__DISABLE_RTA_EXPORT__RTA_DISABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__AIPOFF__NO_OVERRIDE
 *
 * @BRIEF        AIPOFF signal is not overriden - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__AIPOFF__NO_OVERRIDE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__AIPOFF__OVERRIDE
 *
 * @BRIEF        AIPOFF signal is overriden to '1'. Corresponding SRAM LDO is 
 *               disabled and in HZ mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__AIPOFF__OVERRIDE 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC5__ONE_STEP
 *
 * @BRIEF        Active to retention is a one step transfer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC5__ONE_STEP 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC5__TWO_STEP
 *
 * @BRIEF        Active to retention is a two steps transfer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC5__TWO_STEP 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC4__EXT_CLOCK
 *
 * @BRIEF        One external clock is supplied - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC4__EXT_CLOCK 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC4__NO_EXT_CLOCK
 *
 * @BRIEF        No external clock is supplied - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC4__NO_EXT_CLOCK 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC3_EXPORT__SUB_REGUL_DISABLED
 *
 * @BRIEF        Sub regulation is disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC3_EXPORT__SUB_REGUL_DISABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC3_EXPORT__SUB_REGUL_ENABLED
 *
 * @BRIEF        Sub regulation is enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC3_EXPORT__SUB_REGUL_ENABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC2_EXPORT__EXT_CAP
 *
 * @BRIEF        External cap is used - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC2_EXPORT__EXT_CAP 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC2_EXPORT__NO_EXT_CAP
 *
 * @BRIEF        External cap is not used - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC2_EXPORT__NO_EXT_CAP 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC1_EXPORT__SHORT_PROT_DISABLED
 *
 * @BRIEF        Short circuit protection is disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC1_EXPORT__SHORT_PROT_DISABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC1_EXPORT__SHORT_PROT_ENABLED
 *
 * @BRIEF        Short circuit protection is enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ENFUNC1_EXPORT__SHORT_PROT_ENABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ABBOFF_SLEEP_EXPORT__SRAMNW_SLP_VDDS
 *
 * @BRIEF        SRAMNWA supplied with VDDS - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ABBOFF_SLEEP_EXPORT__SRAMNW_SLP_VDDS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ABBOFF_SLEEP_EXPORT__SRAMNW_SLP_VDDAR
 *
 * @BRIEF        SRAMNWA supplied with VDDAR - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ABBOFF_SLEEP_EXPORT__SRAMNW_SLP_VDDAR 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ABBOFF_ACT_EXPORT__SRAMNW_ACT_VDDS
 *
 * @BRIEF        SRAMNWA supplied with VDDS - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ABBOFF_ACT_EXPORT__SRAMNW_ACT_VDDS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ABBOFF_ACT_EXPORT__SRAMNW_ACT_VDDAR
 *
 * @BRIEF        SRAMNWA supplied with VDDAR - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__ABBOFF_ACT_EXPORT__SRAMNW_ACT_VDDAR 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__DISABLE_RTA_EXPORT__RTA_ENABLED
 *
 * @BRIEF        HD memory RTA feature  is enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__DISABLE_RTA_EXPORT__RTA_ENABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__DISABLE_RTA_EXPORT__RTA_DISABLED
 *
 * @BRIEF        HD memory RTA feature is disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_SETUP__DISABLE_RTA_EXPORT__RTA_DISABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_CTRL__SRAM_IN_TRANSITION__IDLE
 *
 * @BRIEF        SRAM LDO state machine is stable - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_CTRL__SRAM_IN_TRANSITION__IDLE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_CTRL__SRAM_IN_TRANSITION__IN_TRANSITION
 *
 * @BRIEF        SRAM LDO state machine is in transition state - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_CTRL__SRAM_IN_TRANSITION__IN_TRANSITION 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_CTRL__SRAMLDO_STATUS__ACTIVE
 *
 * @BRIEF        SRAMLDO is in ACTIVE mode. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_CTRL__SRAMLDO_STATUS__ACTIVE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_CTRL__SRAMLDO_STATUS__RETENTION
 *
 * @BRIEF        SRAMLDO is on RETENTION mode. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_CTRL__SRAMLDO_STATUS__RETENTION 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_CTRL__RETMODE_ENABLE__DISABLED
 *
 * @BRIEF        SRAM LDO is not allowed to go to RET mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_CTRL__RETMODE_ENABLE__DISABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_CORE_CTRL__RETMODE_ENABLE__ENABLED
 *
 * @BRIEF        SRAM LDO go to RET mode when all memory of voltage domain 
 *               are OFF or RET - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_CORE_CTRL__RETMODE_ENABLE__ENABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__AIPOFF__NO_OVERRIDE
 *
 * @BRIEF        AIPOFF signal is not overriden - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__AIPOFF__NO_OVERRIDE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__AIPOFF__OVERRIDE
 *
 * @BRIEF        AIPOFF signal is overriden to '1'. Corresponding SRAM LDO is 
 *               disabled and in HZ mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__AIPOFF__OVERRIDE 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC5__ONE_STEP
 *
 * @BRIEF        Active to retention is a one step transfer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC5__ONE_STEP 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC5__TWO_STEP
 *
 * @BRIEF        Active to retention is a two steps transfer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC5__TWO_STEP 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC4__EXT_CLOCK
 *
 * @BRIEF        One external clock is supplied - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC4__EXT_CLOCK 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC4__NO_EXT_CLOCK
 *
 * @BRIEF        No external clock is supplied - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC4__NO_EXT_CLOCK 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC3_EXPORT__SUB_REGUL_DISABLED
 *
 * @BRIEF        Sub regulation is disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC3_EXPORT__SUB_REGUL_DISABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC3_EXPORT__SUB_REGUL_ENABLED
 *
 * @BRIEF        Sub regulation is enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC3_EXPORT__SUB_REGUL_ENABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC2_EXPORT__EXT_CAP
 *
 * @BRIEF        External cap is used - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC2_EXPORT__EXT_CAP 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC2_EXPORT__NO_EXT_CAP
 *
 * @BRIEF        External cap is not used - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC2_EXPORT__NO_EXT_CAP 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC1_EXPORT__SHORT_PROT_DISABLED
 *
 * @BRIEF        Short circuit protection is disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC1_EXPORT__SHORT_PROT_DISABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC1_EXPORT__SHORT_PROT_ENABLED
 *
 * @BRIEF        Short circuit protection is enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ENFUNC1_EXPORT__SHORT_PROT_ENABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ABBOFF_SLEEP_EXPORT__SRAMNW_SLP_VDDS
 *
 * @BRIEF        SRAMNWA supplied with VDDS - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ABBOFF_SLEEP_EXPORT__SRAMNW_SLP_VDDS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ABBOFF_SLEEP_EXPORT__SRAMNW_SLP_VDDAR
 *
 * @BRIEF        SRAMNWA supplied with VDDAR - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ABBOFF_SLEEP_EXPORT__SRAMNW_SLP_VDDAR 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ABBOFF_ACT_EXPORT__SRAMNW_ACT_VDDS
 *
 * @BRIEF        SRAMNWA supplied with VDDS - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ABBOFF_ACT_EXPORT__SRAMNW_ACT_VDDS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ABBOFF_ACT_EXPORT__SRAMNW_ACT_VDDAR
 *
 * @BRIEF        SRAMNWA supplied with VDDAR - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__ABBOFF_ACT_EXPORT__SRAMNW_ACT_VDDAR 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__DISABLE_RTA_EXPORT__RTA_ENABLED
 *
 * @BRIEF        HD memory RTA feature  is enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__DISABLE_RTA_EXPORT__RTA_ENABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__DISABLE_RTA_EXPORT__RTA_DISABLED
 *
 * @BRIEF        HD memory RTA feature is disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_SETUP__DISABLE_RTA_EXPORT__RTA_DISABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_CTRL__SRAM_IN_TRANSITION__IDLE
 *
 * @BRIEF        SRAM LDO state machine is stable - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_CTRL__SRAM_IN_TRANSITION__IDLE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_CTRL__SRAM_IN_TRANSITION__IN_TRANSITION
 *
 * @BRIEF        SRAM LDO state machine is in transition state - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_CTRL__SRAM_IN_TRANSITION__IN_TRANSITION 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_CTRL__SRAMLDO_STATUS__ACTIVE
 *
 * @BRIEF        SRAMLDO is in ACTIVE mode. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_CTRL__SRAMLDO_STATUS__ACTIVE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_CTRL__SRAMLDO_STATUS__RETENTION
 *
 * @BRIEF        SRAMLDO is on RETENTION mode. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_CTRL__SRAMLDO_STATUS__RETENTION 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_CTRL__RETMODE_ENABLE__DISABLED
 *
 * @BRIEF        SRAM LDO is not allowed to go to RET mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_CTRL__RETMODE_ENABLE__DISABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_MPU_CTRL__RETMODE_ENABLE__ENABLED
 *
 * @BRIEF        SRAM LDO go to RET mode when all memory of voltage domain 
 *               are OFF or RET - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_MPU_CTRL__RETMODE_ENABLE__ENABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__AIPOFF__NO_OVERRIDE
 *
 * @BRIEF        AIPOFF signal is not overriden - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__AIPOFF__NO_OVERRIDE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__AIPOFF__OVERRIDE
 *
 * @BRIEF        AIPOFF signal is overriden to '1'. Corresponding SRAM LDO is 
 *               disabled and in HZ mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__AIPOFF__OVERRIDE 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC5__ONE_STEP
 *
 * @BRIEF        Active to retention is a one step transfer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC5__ONE_STEP 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC5__TWO_STEP
 *
 * @BRIEF        Active to retention is a two steps transfer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC5__TWO_STEP 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC4__EXT_CLOCK
 *
 * @BRIEF        One external clock is supplied - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC4__EXT_CLOCK 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC4__NO_EXT_CLOCK
 *
 * @BRIEF        No external clock is supplied - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC4__NO_EXT_CLOCK 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC3_EXPORT__SUB_REGUL_DISABLED
 *
 * @BRIEF        Sub regulation is disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC3_EXPORT__SUB_REGUL_DISABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC3_EXPORT__SUB_REGUL_ENABLED
 *
 * @BRIEF        Sub regulation is enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC3_EXPORT__SUB_REGUL_ENABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC2_EXPORT__EXT_CAP
 *
 * @BRIEF        External cap is used - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC2_EXPORT__EXT_CAP 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC2_EXPORT__NO_EXT_CAP
 *
 * @BRIEF        External cap is not used - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC2_EXPORT__NO_EXT_CAP 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC1_EXPORT__SHORT_PROT_DISABLED
 *
 * @BRIEF        Short circuit protection is disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC1_EXPORT__SHORT_PROT_DISABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC1_EXPORT__SHORT_PROT_ENABLED
 *
 * @BRIEF        Short circuit protection is enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ENFUNC1_EXPORT__SHORT_PROT_ENABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ABBOFF_SLEEP_EXPORT__SRAMNW_SLP_VDDS
 *
 * @BRIEF        SRAMNWA supplied with VDDS - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ABBOFF_SLEEP_EXPORT__SRAMNW_SLP_VDDS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ABBOFF_SLEEP_EXPORT__SRAMNW_SLP_VDDAR
 *
 * @BRIEF        SRAMNWA supplied with VDDAR - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ABBOFF_SLEEP_EXPORT__SRAMNW_SLP_VDDAR 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ABBOFF_ACT_EXPORT__SRAMNW_ACT_VDDS
 *
 * @BRIEF        SRAMNWA supplied with VDDS - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ABBOFF_ACT_EXPORT__SRAMNW_ACT_VDDS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ABBOFF_ACT_EXPORT__SRAMNW_ACT_VDDAR
 *
 * @BRIEF        SRAMNWA supplied with VDDAR - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__ABBOFF_ACT_EXPORT__SRAMNW_ACT_VDDAR 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__DISABLE_RTA_EXPORT__RTA_ENABLED
 *
 * @BRIEF        HD memory RTA feature  is enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__DISABLE_RTA_EXPORT__RTA_ENABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__DISABLE_RTA_EXPORT__RTA_DISABLED
 *
 * @BRIEF        HD memory RTA feature is disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_SETUP__DISABLE_RTA_EXPORT__RTA_DISABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_CTRL__SRAM_IN_TRANSITION__IDLE
 *
 * @BRIEF        SRAM LDO state machine is stable - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_CTRL__SRAM_IN_TRANSITION__IDLE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_CTRL__SRAM_IN_TRANSITION__IN_TRANSITION
 *
 * @BRIEF        SRAM LDO state machine is in transition state - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_CTRL__SRAM_IN_TRANSITION__IN_TRANSITION 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_CTRL__SRAMLDO_STATUS__ACTIVE
 *
 * @BRIEF        SRAMLDO is in ACTIVE mode. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_CTRL__SRAMLDO_STATUS__ACTIVE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_CTRL__SRAMLDO_STATUS__RETENTION
 *
 * @BRIEF        SRAMLDO is on RETENTION mode. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_CTRL__SRAMLDO_STATUS__RETENTION 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_CTRL__RETMODE_ENABLE__DISABLED
 *
 * @BRIEF        SRAM LDO is not allowed to go to RET mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_CTRL__RETMODE_ENABLE__DISABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_SRAM_IVA_CTRL__RETMODE_ENABLE__ENABLED
 *
 * @BRIEF        SRAM LDO go to RET mode when all memory of voltage domain 
 *               are OFF or RET - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_SRAM_IVA_CTRL__RETMODE_ENABLE__ENABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__NOCAP_EXPORT__CAP
 *
 * @BRIEF        ABB LDO uses an external cap - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__NOCAP_EXPORT__CAP 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__NOCAP_EXPORT__NOCAP
 *
 * @BRIEF        ABB LDO does not use an external cap - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__NOCAP_EXPORT__NOCAP 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__SLEEP_RBB_SEL__BYPASS
 *
 * @BRIEF        ABB LDO is in bypass mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__SLEEP_RBB_SEL__BYPASS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__SLEEP_RBB_SEL__RBB
 *
 * @BRIEF        ABB LDO is in RBB mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__SLEEP_RBB_SEL__RBB 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__ACTIVE_FBB_SEL__BYPASS
 *
 * @BRIEF        ABB LDO is in bypass mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__ACTIVE_FBB_SEL__BYPASS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__ACTIVE_FBB_SEL__FBB
 *
 * @BRIEF        ABB LDO is in FBB mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__ACTIVE_FBB_SEL__FBB 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__ACTIVE_RBB_SEL__BYPASS
 *
 * @BRIEF        ABB LDO is in bypass mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__ACTIVE_RBB_SEL__BYPASS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__ACTIVE_RBB_SEL__RBB
 *
 * @BRIEF        ABB LDO is in RBB mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__ACTIVE_RBB_SEL__RBB 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__SR2EN__BYPASS
 *
 * @BRIEF        ABB LDO is put in bypass mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__SR2EN__BYPASS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__SR2EN__FUNCTIONAL
 *
 * @BRIEF        ABB LDO will operate accordingly to settings - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_SETUP__SR2EN__FUNCTIONAL 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__SR2_IN_TRANSITION__IDLE
 *
 * @BRIEF        Enumeration value description is not available - (Read)
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__SR2_IN_TRANSITION__IDLE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__SR2_IN_TRANSITION__INTRANSITION
 *
 * @BRIEF        Indicates that VBBLDO_CON is in transition and SR2_STATUS 
 *               bits are not stable to read. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__SR2_IN_TRANSITION__INTRANSITION 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__SR2_STATUS__BYPASS
 *
 * @BRIEF        ABB LDO is placed in bypass mode. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__SR2_STATUS__BYPASS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__SR2_STATUS__RBB
 *
 * @BRIEF        ABB LDO is placed in RBB active mode. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__SR2_STATUS__RBB 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__SR2_STATUS__FBB
 *
 * @BRIEF        ABB LDO is placed in FBB active mode. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__SR2_STATUS__FBB 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__SR2_STATUS__RESERVED
 *
 * @BRIEF        Reserved - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__SR2_STATUS__RESERVED 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__OPP_SEL__DEFAULT_NOMINAL
 *
 * @BRIEF        default : Nominal - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__OPP_SEL__DEFAULT_NOMINAL 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__OPP_SEL__FASTOPP
 *
 * @BRIEF        Fast OPP - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__OPP_SEL__FASTOPP 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__OPP_SEL__NOMINALOPP
 *
 * @BRIEF        Nominal - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__OPP_SEL__NOMINALOPP 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__OPP_SEL__SLOWOPP
 *
 * @BRIEF        Slow OPP - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_MPU_CTRL__OPP_SEL__SLOWOPP 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__NOCAP_EXPORT__CAP
 *
 * @BRIEF        ABB LDO uses an external cap - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__NOCAP_EXPORT__CAP 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__NOCAP_EXPORT__NOCAP
 *
 * @BRIEF        ABB LDO does not use an external cap - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__NOCAP_EXPORT__NOCAP 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__SLEEP_RBB_SEL__BYPASS
 *
 * @BRIEF        ABB LDO is in bypass mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__SLEEP_RBB_SEL__BYPASS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__SLEEP_RBB_SEL__RBB
 *
 * @BRIEF        ABB LDO is in RBB mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__SLEEP_RBB_SEL__RBB 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__ACTIVE_FBB_SEL__BYPASS
 *
 * @BRIEF        ABB LDO is in bypass mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__ACTIVE_FBB_SEL__BYPASS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__ACTIVE_FBB_SEL__FBB
 *
 * @BRIEF        ABB LDO is in FBB mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__ACTIVE_FBB_SEL__FBB 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__ACTIVE_RBB_SEL__BYPASS
 *
 * @BRIEF        ABB LDO is in bypass mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__ACTIVE_RBB_SEL__BYPASS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__ACTIVE_RBB_SEL__RBB
 *
 * @BRIEF        ABB LDO is in RBB mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__ACTIVE_RBB_SEL__RBB 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__SR2EN__BYPASS
 *
 * @BRIEF        ABB LDO is put in bypass mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__SR2EN__BYPASS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__SR2EN__FUNCTIONAL
 *
 * @BRIEF        ABB LDO will operate accordingly to settings - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_SETUP__SR2EN__FUNCTIONAL 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__SR2_IN_TRANSITION__IDLE
 *
 * @BRIEF        Enumeration value description is not available - (Read)
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__SR2_IN_TRANSITION__IDLE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__SR2_IN_TRANSITION__INTRANSITION
 *
 * @BRIEF        Indicates that VBBLDO_CON is in transition and SR2_STATUS 
 *               bits are not stable to read. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__SR2_IN_TRANSITION__INTRANSITION 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__SR2_STATUS__BYPASS
 *
 * @BRIEF        ABB LDO is placed in bypass mode. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__SR2_STATUS__BYPASS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__SR2_STATUS__RBB
 *
 * @BRIEF        ABB LDO is placed in RBB active mode. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__SR2_STATUS__RBB 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__SR2_STATUS__FBB
 *
 * @BRIEF        ABB LDO is placed in FBB active mode. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__SR2_STATUS__FBB 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__SR2_STATUS__RESERVED
 *
 * @BRIEF        Reserved - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__SR2_STATUS__RESERVED 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__OPP_SEL__DEFAULT_NOMINAL
 *
 * @BRIEF        default : Nominal - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__OPP_SEL__DEFAULT_NOMINAL 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__OPP_SEL__FASTOPP
 *
 * @BRIEF        Fast OPP - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__OPP_SEL__FASTOPP 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__OPP_SEL__NOMINALOPP
 *
 * @BRIEF        Nominal - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__OPP_SEL__NOMINALOPP 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__OPP_SEL__SLOWOPP
 *
 * @BRIEF        Slow OPP - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_LDO_ABB_IVA_CTRL__OPP_SEL__SLOWOPP 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_DEVICE_OFF_CTRL__DEVICE_OFF_ENABLE__DISABLED
 *
 * @BRIEF        Device is not allowed to perform transition to OFF mode - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_DEVICE_OFF_CTRL__DEVICE_OFF_ENABLE__DISABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_DEVICE_OFF_CTRL__DEVICE_OFF_ENABLE__ENABLED
 *
 * @BRIEF        Device is allowed to perform transition to OFF mode as soon 
 *               as all power domains in MPU, IVA and CORE voltage are in OFF 
 *               or OSWRET state (open switch retention) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_DEVICE_OFF_CTRL__DEVICE_OFF_ENABLE__ENABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_SLEEP_ST__WAKE
 *
 * @BRIEF        Modem is awake - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_SLEEP_ST__WAKE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_SLEEP_ST__SLEEP
 *
 * @BRIEF        Modem is asleep - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_SLEEP_ST__SLEEP 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_SHUTDOWN_IRQ__INACTIVE
 *
 * @BRIEF        Interrupt is inactive - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_SHUTDOWN_IRQ__INACTIVE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_SHUTDOWN_IRQ__ACTIVE
 *
 * @BRIEF        Interrupt is active - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_SHUTDOWN_IRQ__ACTIVE 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_WAKE_IRQ__INACTIVE
 *
 * @BRIEF        Interrupt is inactive - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_WAKE_IRQ__INACTIVE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_WAKE_IRQ__ACTIVE
 *
 * @BRIEF        Interrupt is active - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_WAKE_IRQ__ACTIVE 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_READY__NOT_READY
 *
 * @BRIEF        Modem not ready - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_READY__NOT_READY 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_READY__READY
 *
 * @BRIEF        Modem ready - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_MODEM_IF_CTRL__MODEM_READY__READY 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_MODEM_IF_CTRL__WAKE_MODEM__DISABLED
 *
 * @BRIEF        Modem is not requested to be awake - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_MODEM_IF_CTRL__WAKE_MODEM__DISABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   DEVICE_PRM__PRM_MODEM_IF_CTRL__WAKE_MODEM__ENABLED
 *
 * @BRIEF        Request modem to be awake and able to receive OCP 
 *               transaction from APE - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define DEVICE_PRM__PRM_MODEM_IF_CTRL__WAKE_MODEM__ENABLED 0x1ul

#ifdef __cplusplus
}
#endif
#endif                                                     /* __DEVICE_PRM_CRED_H 
                                                            */
