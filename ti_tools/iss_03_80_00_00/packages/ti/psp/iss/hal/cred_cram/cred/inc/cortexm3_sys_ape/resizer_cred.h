/** ==================================================================
 *  @file   resizer_cred.h                                                  
 *                                                                    
 *  @path   /ti/psp/iss/hal/cred_cram/cred/inc/cortexm3_sys_ape/                                                  
 *                                                                    
 *  @desc   This  File contains.                                      
 * ===================================================================
 *  Copyright (c) Texas Instruments Inc 2011, 2012                    
 *                                                                    
 *  Use of this software is controlled by the terms and conditions found
 *  in the license agreement under which this software has been supplied
 * ===================================================================*/

/* ============================================================================ 
 * TEXAS INSTRUMENTS INCORPORATED PROPRIETARY INFORMATION Property of Texas
 * Instruments For Unrestricted Internal Use Only Unauthorized reproduction
 * and/or distribution is strictly prohibited.  This product is protected
 * under copyright law and trade secret law as an unpublished work.  Created
 * 2008, (C) Copyright 2008 Texas Instruments.  All rights reserved. */

/**
 *  @Component:   RESIZER
 *
 *  @Filename:    resizer_cred.h
 *
 * *  @Description: All registers in the RESIZER module are shadowed, except the 
 *                  following ones. Shadowed registers can be updated at any 
 *                  time but the new value will take effect on the next 
 *                  rsz_int_reg event. Shadowed registers can be updated for the 
 *                next frame after the rsz_int_reg event has triggered. 
 *                RSZ_SYSCONFIG 
 *                RSZ_SYSSTATUS 
 *                RSZ_IN_FIFO_CTRL 
 *                RSZ_GCK_PIX 
 *                RSZ_GCK_SDR 
 *                RSZ_SRC_MODE 
 *                RSZ_SRC_FMT0 
 *                RSZ_SRC_VPS 
 *                RSZ_SRC_HPS 
 *                RSZ_SRC_EN 
 *                  Non-shadowed registers, shall only be programmed between 
 *                  frames, i.e., after the rsz_int_dma has come (as well as the 
 *                  entire frame has come on the VPORT IF) and before the VD of 
 *                next frame. 
 *
 *  Generated by: Socrates CRED generator prototype
 *
    *//* ====================================================================== */

#ifndef __RESIZER_CRED_H
#define __RESIZER_CRED_H

#ifdef __cplusplus
extern "C" {
#endif

    /* 
     * Instance I_RESIZER of component RESIZER mapped in MONICA at address 0x55050400
     */

                                                                              /*-------------------------------------------------------------------------*//**
 * @DEFINITION   BITFIELD
 *
 * @BRIEF        The bitfield must be defined according to register width
 *               of the component - 64/32/16/8
 *
    *//*------------------------------------------------------------------------ */
#undef BITFIELD
#define BITFIELD BITFIELD_32

    /* 
     *  List of Register arrays for component RESIZER
     *
     */

    /* 
     *  List of bundle arrays for component RESIZER
     *
     */

    /* 
     *  List of bundles for component RESIZER
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__NEWREGBUNDLE2
 *
 * @BRIEF        Bundle description is not available
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__NEWREGBUNDLE2                             0x20ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_EN__OFFSET
 *
 * @BRIEF        Register RSZ_SRC_EN offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_EN__OFFSET                        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_MODE__OFFSET
 *
 * @BRIEF        Register RSZ_SRC_MODE offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_MODE__OFFSET                      0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_FMT0__OFFSET
 *
 * @BRIEF        Register RSZ_SRC_FMT0 offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_FMT0__OFFSET                      0x8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_FMT1__OFFSET
 *
 * @BRIEF        Register RSZ_SRC_FMT1 offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_FMT1__OFFSET                      0xCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_VPS__OFFSET
 *
 * @BRIEF        Register RSZ_SRC_VPS offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_VPS__OFFSET                       0x10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_VSZ__OFFSET
 *
 * @BRIEF        Register RSZ_SRC_VSZ offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_VSZ__OFFSET                       0x14ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_HPS__OFFSET
 *
 * @BRIEF        Register RSZ_SRC_HPS offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_HPS__OFFSET                       0x18ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_HSZ__OFFSET
 *
 * @BRIEF        Register RSZ_SRC_HSZ offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_HSZ__OFFSET                       0x1Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_DMA_RZA__OFFSET
 *
 * @BRIEF        Register RSZ_DMA_RZA offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_DMA_RZA__OFFSET                       0x20ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_DMA_RZB__OFFSET
 *
 * @BRIEF        Register RSZ_DMA_RZB offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_DMA_RZB__OFFSET                       0x24ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_DMA_STA__OFFSET
 *
 * @BRIEF        Register RSZ_DMA_STA offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_DMA_STA__OFFSET                       0x28ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_GCK_MMR__OFFSET
 *
 * @BRIEF        Register RSZ_GCK_MMR offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_GCK_MMR__OFFSET                       0x2Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RESERVED__OFFSET
 *
 * @BRIEF        Register RESERVED offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RESERVED__OFFSET                          0x30ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_GCK_SDR__OFFSET
 *
 * @BRIEF        Register RSZ_GCK_SDR offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_GCK_SDR__OFFSET                       0x34ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_IRQ_RZA__OFFSET
 *
 * @BRIEF        Register RSZ_IRQ_RZA offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_IRQ_RZA__OFFSET                       0x38ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_IRQ_RZB__OFFSET
 *
 * @BRIEF        Register RSZ_IRQ_RZB offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_IRQ_RZB__OFFSET                       0x3Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_YUV_Y_MIN__OFFSET
 *
 * @BRIEF        Register RSZ_YUV_Y_MIN offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_YUV_Y_MIN__OFFSET                     0x40ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_YUV_Y_MAX__OFFSET
 *
 * @BRIEF        Register RSZ_YUV_Y_MAX offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_YUV_Y_MAX__OFFSET                     0x44ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_YUV_C_MIN__OFFSET
 *
 * @BRIEF        Register RSZ_YUV_C_MIN offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_YUV_C_MIN__OFFSET                     0x48ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_YUV_C_MAX__OFFSET
 *
 * @BRIEF        Register RSZ_YUV_C_MAX offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_YUV_C_MAX__OFFSET                     0x4Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_YUV_PHS__OFFSET
 *
 * @BRIEF        Register RSZ_YUV_PHS offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_YUV_PHS__OFFSET                       0x50ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SEQ__OFFSET
 *
 * @BRIEF        Register RSZ_SEQ offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SEQ__OFFSET                           0x54ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_EN__OFFSET
 *
 * @BRIEF        Register RZA_EN offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_EN__OFFSET                            0x58ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_MODE__OFFSET
 *
 * @BRIEF        Register RZA_MODE offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_MODE__OFFSET                          0x5Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_420__OFFSET
 *
 * @BRIEF        Register RZA_420 offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_420__OFFSET                           0x60ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_I_VPS__OFFSET
 *
 * @BRIEF        Register RZA_I_VPS offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_I_VPS__OFFSET                         0x64ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_I_HPS__OFFSET
 *
 * @BRIEF        Register RZA_I_HPS offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_I_HPS__OFFSET                         0x68ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_O_VSZ__OFFSET
 *
 * @BRIEF        Register RZA_O_VSZ offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_O_VSZ__OFFSET                         0x6Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_O_HSZ__OFFSET
 *
 * @BRIEF        Register RZA_O_HSZ offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_O_HSZ__OFFSET                         0x70ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_V_PHS_Y__OFFSET
 *
 * @BRIEF        Register RZA_V_PHS_Y offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_V_PHS_Y__OFFSET                       0x74ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_V_PHS_C__OFFSET
 *
 * @BRIEF        Register RZA_V_PHS_C offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_V_PHS_C__OFFSET                       0x78ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_V_DIF__OFFSET
 *
 * @BRIEF        Register RZA_V_DIF offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_V_DIF__OFFSET                         0x7Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_V_TYP__OFFSET
 *
 * @BRIEF        Register RZA_V_TYP offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_V_TYP__OFFSET                         0x80ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_V_LPF__OFFSET
 *
 * @BRIEF        Register RZA_V_LPF offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_V_LPF__OFFSET                         0x84ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_H_PHS__OFFSET
 *
 * @BRIEF        Register RZA_H_PHS offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_H_PHS__OFFSET                         0x88ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_H_PHS_ADJ__OFFSET
 *
 * @BRIEF        Register RZA_H_PHS_ADJ offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_H_PHS_ADJ__OFFSET                     0x8Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_H_DIF__OFFSET
 *
 * @BRIEF        Register RZA_H_DIF offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_H_DIF__OFFSET                         0x90ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_H_TYP__OFFSET
 *
 * @BRIEF        Register RZA_H_TYP offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_H_TYP__OFFSET                         0x94ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_H_LPF__OFFSET
 *
 * @BRIEF        Register RZA_H_LPF offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_H_LPF__OFFSET                         0x98ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_DWN_EN__OFFSET
 *
 * @BRIEF        Register RZA_DWN_EN offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_DWN_EN__OFFSET                        0x9Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_DWN_AV__OFFSET
 *
 * @BRIEF        Register RZA_DWN_AV offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_DWN_AV__OFFSET                        0xA0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_RGB_EN__OFFSET
 *
 * @BRIEF        Register RZA_RGB_EN offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_RGB_EN__OFFSET                        0xA4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_RGB_TYP__OFFSET
 *
 * @BRIEF        Register RZA_RGB_TYP offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_RGB_TYP__OFFSET                       0xA8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_RGB_BLD__OFFSET
 *
 * @BRIEF        Register RZA_RGB_BLD offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_RGB_BLD__OFFSET                       0xACul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_Y_BAD_H__OFFSET
 *
 * @BRIEF        Register RZA_SDR_Y_BAD_H offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_Y_BAD_H__OFFSET                   0xB0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_Y_BAD_L__OFFSET
 *
 * @BRIEF        Register RZA_SDR_Y_BAD_L offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_Y_BAD_L__OFFSET                   0xB4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_Y_SAD_H__OFFSET
 *
 * @BRIEF        Register RZA_SDR_Y_SAD_H offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_Y_SAD_H__OFFSET                   0xB8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_Y_SAD_L__OFFSET
 *
 * @BRIEF        Register RZA_SDR_Y_SAD_L offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_Y_SAD_L__OFFSET                   0xBCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_Y_OFT__OFFSET
 *
 * @BRIEF        Register RZA_SDR_Y_OFT offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_Y_OFT__OFFSET                     0xC0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_Y_PTR_S__OFFSET
 *
 * @BRIEF        Register RZA_SDR_Y_PTR_S offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_Y_PTR_S__OFFSET                   0xC4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_Y_PTR_E__OFFSET
 *
 * @BRIEF        Register RZA_SDR_Y_PTR_E offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_Y_PTR_E__OFFSET                   0xC8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_C_BAD_H__OFFSET
 *
 * @BRIEF        Register RZA_SDR_C_BAD_H offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_C_BAD_H__OFFSET                   0xCCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_C_BAD_L__OFFSET
 *
 * @BRIEF        Register RZA_SDR_C_BAD_L offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_C_BAD_L__OFFSET                   0xD0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_C_SAD_H__OFFSET
 *
 * @BRIEF        Register RZA_SDR_C_SAD_H offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_C_SAD_H__OFFSET                   0xD4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_C_SAD_L__OFFSET
 *
 * @BRIEF        Register RZA_SDR_C_SAD_L offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_C_SAD_L__OFFSET                   0xD8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_C_OFT__OFFSET
 *
 * @BRIEF        Register RZA_SDR_C_OFT offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_C_OFT__OFFSET                     0xDCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_C_PTR_S__OFFSET
 *
 * @BRIEF        Register RZA_SDR_C_PTR_S offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_C_PTR_S__OFFSET                   0xE0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_C_PTR_E__OFFSET
 *
 * @BRIEF        Register RZA_SDR_C_PTR_E offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_C_PTR_E__OFFSET                   0xE4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_EN__OFFSET
 *
 * @BRIEF        Register RZB_EN offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_EN__OFFSET                            0xE8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_MODE__OFFSET
 *
 * @BRIEF        Register RZB_MODE offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_MODE__OFFSET                          0xECul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_420__OFFSET
 *
 * @BRIEF        Register RZB_420 offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_420__OFFSET                           0xF0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_I_VPS__OFFSET
 *
 * @BRIEF        Register RZB_I_VPS offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_I_VPS__OFFSET                         0xF4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_I_HPS__OFFSET
 *
 * @BRIEF        Register RZB_I_HPS offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_I_HPS__OFFSET                         0xF8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_O_VSZ__OFFSET
 *
 * @BRIEF        Register RZB_O_VSZ offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_O_VSZ__OFFSET                         0xFCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_O_HSZ__OFFSET
 *
 * @BRIEF        Register RZB_O_HSZ offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_O_HSZ__OFFSET                         0x100ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_V_PHS_Y__OFFSET
 *
 * @BRIEF        Register RZB_V_PHS_Y offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_V_PHS_Y__OFFSET                       0x104ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_V_PHS_C__OFFSET
 *
 * @BRIEF        Register RZB_V_PHS_C offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_V_PHS_C__OFFSET                       0x108ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_V_DIF__OFFSET
 *
 * @BRIEF        Register RZB_V_DIF offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_V_DIF__OFFSET                         0x10Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_V_TYP__OFFSET
 *
 * @BRIEF        Register RZB_V_TYP offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_V_TYP__OFFSET                         0x110ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_V_LPF__OFFSET
 *
 * @BRIEF        Register RZB_V_LPF offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_V_LPF__OFFSET                         0x114ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_H_PHS__OFFSET
 *
 * @BRIEF        Register RZB_H_PHS offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_H_PHS__OFFSET                         0x118ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_H_PHS_ADJ__OFFSET
 *
 * @BRIEF        Register RZB_H_PHS_ADJ offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_H_PHS_ADJ__OFFSET                     0x11Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_H_DIF__OFFSET
 *
 * @BRIEF        Register RZB_H_DIF offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_H_DIF__OFFSET                         0x120ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_H_TYP__OFFSET
 *
 * @BRIEF        Register RZB_H_TYP offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_H_TYP__OFFSET                         0x124ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_H_LPF__OFFSET
 *
 * @BRIEF        Register RZB_H_LPF offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_H_LPF__OFFSET                         0x128ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_DWN_EN__OFFSET
 *
 * @BRIEF        Register RZB_DWN_EN offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_DWN_EN__OFFSET                        0x12Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_DWN_AV__OFFSET
 *
 * @BRIEF        Register RZB_DWN_AV offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_DWN_AV__OFFSET                        0x130ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_RGB_EN__OFFSET
 *
 * @BRIEF        Register RZB_RGB_EN offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_RGB_EN__OFFSET                        0x134ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_RGB_TYP__OFFSET
 *
 * @BRIEF        Register RZB_RGB_TYP offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_RGB_TYP__OFFSET                       0x138ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_RGB_BLD__OFFSET
 *
 * @BRIEF        Register RZB_RGB_BLD offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_RGB_BLD__OFFSET                       0x13Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_Y_BAD_H__OFFSET
 *
 * @BRIEF        Register RZB_SDR_Y_BAD_H offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_Y_BAD_H__OFFSET                   0x140ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_Y_BAD_L__OFFSET
 *
 * @BRIEF        Register RZB_SDR_Y_BAD_L offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_Y_BAD_L__OFFSET                   0x144ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_Y_SAD_H__OFFSET
 *
 * @BRIEF        Register RZB_SDR_Y_SAD_H offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_Y_SAD_H__OFFSET                   0x148ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_Y_SAD_L__OFFSET
 *
 * @BRIEF        Register RZB_SDR_Y_SAD_L offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_Y_SAD_L__OFFSET                   0x14Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_Y_OFT__OFFSET
 *
 * @BRIEF        Register RZB_SDR_Y_OFT offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_Y_OFT__OFFSET                     0x150ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_Y_PTR_S__OFFSET
 *
 * @BRIEF        Register RZB_SDR_Y_PTR_S offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_Y_PTR_S__OFFSET                   0x154ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_Y_PTR_E__OFFSET
 *
 * @BRIEF        Register RZB_SDR_Y_PTR_E offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_Y_PTR_E__OFFSET                   0x158ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_C_BAD_H__OFFSET
 *
 * @BRIEF        Register RZB_SDR_C_BAD_H offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_C_BAD_H__OFFSET                   0x15Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_C_BAD_L__OFFSET
 *
 * @BRIEF        Register RZB_SDR_C_BAD_L offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_C_BAD_L__OFFSET                   0x160ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_C_SAD_H__OFFSET
 *
 * @BRIEF        Register RZB_SDR_C_SAD_H offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_C_SAD_H__OFFSET                   0x164ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_C_SAD_L__OFFSET
 *
 * @BRIEF        Register RZB_SDR_C_SAD_L offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_C_SAD_L__OFFSET                   0x168ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_C_OFT__OFFSET
 *
 * @BRIEF        Register RZB_SDR_C_OFT offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_C_OFT__OFFSET                     0x16Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_C_PTR_S__OFFSET
 *
 * @BRIEF        Register RZB_SDR_C_PTR_S offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_C_PTR_S__OFFSET                   0x170ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_C_PTR_E__OFFSET
 *
 * @BRIEF        Register RZB_SDR_C_PTR_E offset in bundle NEWREGBUNDLE2 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_C_PTR_E__OFFSET                   0x174ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__NEWREGBUNDLE3
 *
 * @BRIEF        Bundle description is not available
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__NEWREGBUNDLE3                             0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_REVISION__OFFSET
 *
 * @BRIEF        Register RSZ_REVISION offset in bundle NEWREGBUNDLE3 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_REVISION__OFFSET                      0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SYSCONFIG__OFFSET
 *
 * @BRIEF        Register RSZ_SYSCONFIG offset in bundle NEWREGBUNDLE3 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SYSCONFIG__OFFSET                     0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SYSSTATUS__OFFSET
 *
 * @BRIEF        Register RSZ_SYSSTATUS offset in bundle NEWREGBUNDLE3 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SYSSTATUS__OFFSET                     0x8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_IN_FIFO_CTRL__OFFSET
 *
 * @BRIEF        Register RSZ_IN_FIFO_CTRL offset in bundle NEWREGBUNDLE3 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_IN_FIFO_CTRL__OFFSET                  0xCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_GNC__OFFSET
 *
 * @BRIEF        Register RSZ_GNC offset in bundle NEWREGBUNDLE3 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_GNC__OFFSET                           0x10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_FRACDIV__OFFSET
 *
 * @BRIEF        Register RSZ_FRACDIV offset in bundle NEWREGBUNDLE3 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_FRACDIV__OFFSET                       0x14ul

    /* 
     * List of registers for component RESIZER
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_REVISION
 *
 * @BRIEF        MODULE REVISION REGISTER 
 *               This register contains the IP revision code. For example, we 
 *               have 0x001 = revision 0.1 and 0x21 = revision 2.1 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_REVISION                              0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SYSCONFIG
 *
 * @BRIEF        SYSTEM CONFIGURATION REGISTER 
 *               This register is not shadowed 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SYSCONFIG                             0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SYSSTATUS
 *
 * @BRIEF        SYSTEM STATUS REGISTER 
 *               This register is not shadowed 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SYSSTATUS                             0x8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_IN_FIFO_CTRL
 *
 * @BRIEF        INPUT DATA BUFFER CONTROL REGISTER 
 *               This register is not shadowed 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_IN_FIFO_CTRL                          0xCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_GNC
 *
 * @BRIEF        GENERIC PARAMETER REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_GNC                                   0x10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_FRACDIV
 *
 * @BRIEF        Fractional clock divider settings 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_FRACDIV                               0x14ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_EN
 *
 * @BRIEF        RESIZER ENABLE REGISTER 
 *               This register is not shadowed 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_EN                                0x20ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_MODE
 *
 * @BRIEF        This register is not shadowed 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_MODE                              0x24ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_FMT0
 *
 * @BRIEF        This register is not shadowed 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_FMT0                              0x28ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_FMT1
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_FMT1                              0x2Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_VPS
 *
 * @BRIEF        VERTICAL POSITION REGISTER 
 *               This register is not shadowed 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_VPS                               0x30ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_VSZ
 *
 * @BRIEF        VERTICAL SIZER REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_VSZ                               0x34ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_HPS
 *
 * @BRIEF        HORIZONTAL POSITION REGISTER 
 *               This register is not shadowed 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_HPS                               0x38ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_HSZ
 *
 * @BRIEF        HORIZONTAL SIZE REGISTER 
 *               The HSZ value is given by HSZ concatenated with HSZ_LSB 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_HSZ                               0x3Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_DMA_RZA
 *
 * @BRIEF        RESIZER A - MEMORY REQUEST MINIMUM INTERVAL REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_DMA_RZA                               0x40ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_DMA_RZB
 *
 * @BRIEF        RESIZER B - MEMORY REQUEST MINIMUM INTERVAL REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_DMA_RZB                               0x44ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_DMA_STA
 *
 * @BRIEF        RESIZER STATUS REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_DMA_STA                               0x48ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_GCK_MMR
 *
 * @BRIEF        MMR CLOCK CONTROL REGISTER 
 *               This register is not shadowed 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_GCK_MMR                               0x4Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RESERVED
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RESERVED                                  0x50ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_GCK_SDR
 *
 * @BRIEF        CORE CLOCK CONTROL REGISTER 
 *               This register is not shadowed 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_GCK_SDR                               0x54ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_IRQ_RZA
 *
 * @BRIEF        RESIZER A - CIRCULAR BUFFER INTERRUPT INTERVAL REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_IRQ_RZA                               0x58ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_IRQ_RZB
 *
 * @BRIEF        RESIZER B - CIRCULAR BUFFER INTERRUPT INTERVAL REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_IRQ_RZB                               0x5Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_YUV_Y_MIN
 *
 * @BRIEF        LUMINANCE SATURATION REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_YUV_Y_MIN                             0x60ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_YUV_Y_MAX
 *
 * @BRIEF        LUMINANCE SATURATION REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_YUV_Y_MAX                             0x64ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_YUV_C_MIN
 *
 * @BRIEF        CHROMINANCE SATURATION REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_YUV_C_MIN                             0x68ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_YUV_C_MAX
 *
 * @BRIEF        CHROMINANCE SATURATION REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_YUV_C_MAX                             0x6Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_YUV_PHS
 *
 * @BRIEF        The phase position of the output of the Chrominance 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_YUV_PHS                               0x70ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SEQ
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SEQ                                   0x74ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_EN
 *
 * @BRIEF        RESIZER A - ENABLE REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_EN                                    0x78ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_MODE
 *
 * @BRIEF        RESIZER #A MODE REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_MODE                                  0x7Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_420
 *
 * @BRIEF        YEN/CEN: 
 *               0/0: in = YUV422 input, out = YUV422 output 
 *               0/1: in = YUV422 input, out = Chrominance of YUV420 output 
 *               1/0: in = YUV422 input, out = Luminance of YUV420 output 
 *               1/1: in = YUV422 input, out = YUV420 output 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_420                                   0x80ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_I_VPS
 *
 * @BRIEF        RESIZER A - INPUT VERTICAL START REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_I_VPS                                 0x84ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_I_HPS
 *
 * @BRIEF        RESIZER A - INPUT HORIZONTAL START REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_I_HPS                                 0x88ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_O_VSZ
 *
 * @BRIEF        RESIZER A - OUTPUT VERTICAL SIZER REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_O_VSZ                                 0x8Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_O_HSZ
 *
 * @BRIEF        RESIZER A - OUTPUT HORIZONTAL SIZE REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_O_HSZ                                 0x90ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_V_PHS_Y
 *
 * @BRIEF        RESIZER A - INITIAL LUMINANCE PHASE OF VERTICAL RESIZING 
 *               PROCESS 
 *               When YUV422 data are output, the phase values for luma and 
 *               chroma should typicall be equal, i.e., RZX_V_PHS_Y= 
 *               RZX_V_PHS_C. 
 *               The following constraints apply when setting the initial 
 *               vertical phases ABS(RZX_V_PHS_Y - RZX_V_PHS_C) ? RZX_V_DIF. 
 *               This constraint means that at most the distance between the 
 *               initial phases for luminance and chrominance is not expected 
 *               to exceed the distance between two luma pixels. Note that 
 *               the absolute value is used, hence, the initial luma phase 
 *               can be greater than the initial chroma phase or the other 
 *               way around. As a reminder, the distance between two output 
 *               pixels for luma is given by RZX_V_DIF. 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_V_PHS_Y                               0x94ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_V_PHS_C
 *
 * @BRIEF        RESIZER A - INITIAL CHROMINANCE PHASE OF VERTICAL RESIZING 
 *               PROCESS 
 *               When YUV422 data are output, the phase values for luma and 
 *               chroma should typicall be equal, i.e., RZX_V_PHS_Y= 
 *               RZX_V_PHS_C. 
 *               The following constraints apply when setting the initial 
 *               vertical phases ABS(RZX_V_PHS_Y - RZX_V_PHS_C) ? RZX_V_DIF. 
 *               This constraint means that at most the distance between the 
 *               initial phases for luminance and chrominance is not expected 
 *               to exceed the distance between two luma pixels. Note that 
 *               the absolute value is used, hence, the initial luma phase 
 *               can be greater than the initial chroma phase or the other 
 *               way around. As a reminder, the distance between two output 
 *               pixels for luma is given by RZX_V_DIF. 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_V_PHS_C                               0x98ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_V_DIF
 *
 * @BRIEF        RESIZER A - VERTICAL RESIZER REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_V_DIF                                 0x9Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_V_TYP
 *
 * @BRIEF        RESIZER A - INTERPOLATION METHOD FOR VERTICAL RESIZING 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_V_TYP                                 0xA0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_V_LPF
 *
 * @BRIEF        RESIZER A - VERTICAL LPF INTENSITY REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_V_LPF                                 0xA4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_H_PHS
 *
 * @BRIEF        RESIZER A - INITIAL PHASE OF HORIZONTAL RESIZING PROCESS 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_H_PHS                                 0xA8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_H_PHS_ADJ
 *
 * @BRIEF        RESIZER A - LUMINANCE HORIZONTAL PHASE ADJUSTMENT 
 *               The RZA_H_PHS_ADJ register enables to adjust the horizontal 
 *               phase for the luma component when averaging is enabled (the 
 *               horizontal averaging disrupts the relative sampling point 
 *               between luminance and chrominance when YUV422 cosited data 
 *               is input), i.e., the relative phase between luma and chroma 
 *               is different before and after the horizontal averager. 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_H_PHS_ADJ                             0xACul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_H_DIF
 *
 * @BRIEF        RESIZER A - HORIZONTAL RESIZER REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_H_DIF                                 0xB0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_H_TYP
 *
 * @BRIEF        Resize-A 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_H_TYP                                 0xB4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_H_LPF
 *
 * @BRIEF        RESIZER A - HORIZONTAL LPF INTENSITY REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_H_LPF                                 0xB8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_DWN_EN
 *
 * @BRIEF        RESIZER #A - DOWNSCALE ENABLE REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_DWN_EN                                0xBCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_DWN_AV
 *
 * @BRIEF        Resize-A 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_DWN_AV                                0xC0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_RGB_EN
 *
 * @BRIEF        RESIZER #A - RGB OUTPUT ENABLE 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_RGB_EN                                0xC4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_RGB_TYP
 *
 * @BRIEF        RESIZER A - RGB OUTPUT CONTROL REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_RGB_TYP                               0xC8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_RGB_BLD
 *
 * @BRIEF        RESIZER A - RGB BLEND REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_RGB_BLD                               0xCCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_Y_BAD_H
 *
 * @BRIEF        RESIZER A - OUTPUT MEMORY BASE ADDRESS REGISTER (HIGH) 
 *               This register is used if the output data format is one of 
 *               the following: RAW, YUV422, YUV420, RGB565, RGBA. 
 *               RAW: RAW data is written to this address 
 *               YUV422: YUV data is written to this address 
 *               YUV420: Y data is written to this address 
 *               RGB565: 16-bit RGB data is written to this address 
 *               RGBA: 32-bit RGBA data is written to this address 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_Y_BAD_H                           0xD0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_Y_BAD_L
 *
 * @BRIEF        RESIZER A - OUTPUT MEMORY BASE ADDRESS REGISTER (LOW) 
 *               This register is used if the output data format is one of 
 *               the following: RAW, YUV422, YUV420, RGB565, RGBA. 
 *               RAW: RAW data is written to this address 
 *               YUV422: YUV data is written to this address 
 *               YUV420: Y data is written to this address 
 *               RGB565: 16-bit RGB data is written to this address 
 *               RGBA: 32-bit RGBA data is written to this address 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_Y_BAD_L                           0xD4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_Y_SAD_H
 *
 * @BRIEF        RESIZER A - OUTPUT MEMORY START ADDRESS REGISTER (HIGH) 
 *               This register is used if the output data format is one of 
 *               the following: RAW, YUV422, YUV420, RGB565, RGBA. 
 *               RAW: RAW data is written to this address 
 *               YUV422: YUV data is written to this address 
 *               YUV420: Y data is written to this address 
 *               RGB565: 16-bit RGB data is written to this address 
 *               RGBA: 32-bit RGBA data is written to this address 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_Y_SAD_H                           0xD8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_Y_SAD_L
 *
 * @BRIEF        RESIZER A - OUTPUT MEMORY START ADDRESS REGISTER (LOW) 
 *               This register is used if the output data format is one of 
 *               the following: RAW, YUV422, YUV420, RGB565, RGBA. 
 *               RAW: RAW data is written to this address 
 *               YUV422: YUV data is written to this address 
 *               YUV420: Y data is written to this address 
 *               RGB565: 16-bit RGB data is written to this address 
 *               RGBA: 32-bit RGBA data is written to this address 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_Y_SAD_L                           0xDCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_Y_OFT
 *
 * @BRIEF        RESIZER A - OUTPUT MEMORY OFFSET REGISTER 
 *               This register is used if the output data format is one of 
 *               the following: RAW, YUV422, YUV420 or RGBA. 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_Y_OFT                             0xE0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_Y_PTR_S
 *
 * @BRIEF        RESIZER A - OUTPUT MEMORY START ADDRESS REGISTER 
 *               This register is used if the output data format is one of 
 *               the following: RAW, YUV422, YUV420 or RGBA. 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_Y_PTR_S                           0xE4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_Y_PTR_E
 *
 * @BRIEF        RESIZER A - OUTPUT MEMORY END ADDRESS REGISTER 
 *               This register is used if the output data format is one of 
 *               the following: RAW, YUV422, YUV420 or RGBA. 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_Y_PTR_E                           0xE8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_C_BAD_H
 *
 * @BRIEF        RESIZER A - OUTPUT MEMORY BASE ADDRESS REGISTER FOR CHROMA 
 *               DATA (YUV420) 
 *               This register is used if the output data format is YUV420. U 
 *               and V data are written into this buffer. 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_C_BAD_H                           0xECul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_C_BAD_L
 *
 * @BRIEF        RESIZER A - OUTPUT MEMORY BASE ADDRESS REGISTER FOR CHROMA 
 *               DATA (YUV420) 
 *               This register is used if the output data format is YUV420. U 
 *               and V data are written into this buffer. 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_C_BAD_L                           0xF0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_C_SAD_H
 *
 * @BRIEF        RESIZER A - OUTPUT MEMORY START ADDRESS REGISTER FOR CHROMA 
 *               DATA (YUV420) 
 *               This register is used if the output data format is YUV420. U 
 *               and V data are written into this buffer. 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_C_SAD_H                           0xF4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_C_SAD_L
 *
 * @BRIEF        RESIZER A - OUTPUT MEMORY START ADDRESS REGISTER FOR CHROMA 
 *               DATA (YUV420) 
 *               This register is used if the output data format is YUV420. U 
 *               and V data are written into this buffer. 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_C_SAD_L                           0xF8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_C_OFT
 *
 * @BRIEF        RESIZER A - OUTPUT MEMORY OFFSET REGISTER FOR CHROMA DATA 
 *               (YUV420) 
 *               This register is used if the output data format is YUV420 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_C_OFT                             0xFCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_C_PTR_S
 *
 * @BRIEF        RESIZER A - OUTPUT MEMORY START ADDRESS REGISTER FOR CHROMA 
 *               DATA (YUV420) 
 *               This register is used if the output data format is YUV420 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_C_PTR_S                           0x100ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_C_PTR_E
 *
 * @BRIEF        RESIZER A - OUTPUT MEMORY END ADDRESS REGISTER FOR CHROMA 
 *               DATA (YUV420) 
 *               This register is used if the output data format is YUV420 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_C_PTR_E                           0x104ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_EN
 *
 * @BRIEF        RESIZER B - ENABLE REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_EN                                    0x108ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_MODE
 *
 * @BRIEF        RESIZER B MODE REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_MODE                                  0x10Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_420
 *
 * @BRIEF        YEN/CEN: 
 *               0/0: in = YUV422 input, out = YUV422 output 
 *               0/1: in = YUV422 input, out = Chrominance of YUV420 output 
 *               1/0: in = YUV422 input, out = Luminance of YUV420 output 
 *               1/1: in = YUV422 input, out = YUV420 output 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_420                                   0x110ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_I_VPS
 *
 * @BRIEF        RESIZER B - INPUT VERTICAL START REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_I_VPS                                 0x114ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_I_HPS
 *
 * @BRIEF        RESIZER B - INPUT HORIZONTAL START REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_I_HPS                                 0x118ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_O_VSZ
 *
 * @BRIEF        RESIZER B - OUTPUT VERTICAL SIZER REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_O_VSZ                                 0x11Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_O_HSZ
 *
 * @BRIEF        RESIZER B - OUTPUT HORIZONTAL SIZE REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_O_HSZ                                 0x120ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_V_PHS_Y
 *
 * @BRIEF        RESIZER B - INITIAL LUMINANCE PHASE OF VERTICAL RESIZING 
 *               PROCESS 
 *               When YUV422 data are output, the phase values for luma and 
 *               chroma should typicall be equal, i.e., RZX_V_PHS_Y= 
 *               RZX_V_PHS_C. 
 *               The following constraints apply when setting the initial 
 *               vertical phases ABS(RZX_V_PHS_Y - RZX_V_PHS_C) ? RZX_V_DIF. 
 *               This constraint means that at most the distance between the 
 *               initial phases for luminance and chrominance is not expected 
 *               to exceed the distance between two luma pixels. Note that 
 *               the absolute value is used, hence, the initial luma phase 
 *               can be greater than the initial chroma phase or the other 
 *               way around. As a reminder, the distance between two output 
 *               pixels for luma is given by RZX_V_DIF. 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_V_PHS_Y                               0x124ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_V_PHS_C
 *
 * @BRIEF        RESIZER B - INITIAL CHROMINANCE PHASE OF VERTICAL RESIZING 
 *               PROCESS 
 *               When YUV422 data are output, the phase values for luma and 
 *               chroma should typicall be equal, i.e., RZX_V_PHS_Y= 
 *               RZX_V_PHS_C. 
 *               The following constraints apply when setting the initial 
 *               vertical phases ABS(RZX_V_PHS_Y - RZX_V_PHS_C) ? RZX_V_DIF. 
 *               This constraint means that at most the distance between the 
 *               initial phases for luminance and chrominance is not expected 
 *               to exceed the distance between two luma pixels. Note that 
 *               the absolute value is used, hence, the initial luma phase 
 *               can be greater than the initial chroma phase or the other 
 *               way around. As a reminder, the distance between two output 
 *               pixels for luma is given by RZX_V_DIF. 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_V_PHS_C                               0x128ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_V_DIF
 *
 * @BRIEF        RESIZER B - VERTICAL RESIZER REGISTERR 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_V_DIF                                 0x12Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_V_TYP
 *
 * @BRIEF        RESIZER B - INTERPOLATION METHOD FOR VERTICAL RESIZING 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_V_TYP                                 0x130ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_V_LPF
 *
 * @BRIEF        RESIZER B - VERTICAL LPF INTENSITY REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_V_LPF                                 0x134ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_H_PHS
 *
 * @BRIEF        RESIZER B - INITIAL PHASE OF HORIZONTAL RESIZING PROCESS 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_H_PHS                                 0x138ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_H_PHS_ADJ
 *
 * @BRIEF        RESIZER B - LUMINANCE HORIZONTAL PHASE ADJUSTMENT 
 *               The RZA_H_PHS_ADJ register enables to adjust the horizontal 
 *               phase for the luma component when averaging is enabled (the 
 *               horizontal averaging disrupts the relative sampling point 
 *               between luminance and chrominance when YUV422 cosited data 
 *               is input), i.e., the relative phase between luma and chroma 
 *               is different before and after the horizontal averager. 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_H_PHS_ADJ                             0x13Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_H_DIF
 *
 * @BRIEF        RESIZER B - HORIZONTAL RESIZER REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_H_DIF                                 0x140ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_H_TYP
 *
 * @BRIEF        RESIZER B 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_H_TYP                                 0x144ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_H_LPF
 *
 * @BRIEF        RESIZER B - HORIZONTAL LPF INTENSITY REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_H_LPF                                 0x148ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_DWN_EN
 *
 * @BRIEF        RESIZER B - DOWNSCALE ENABLE REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_DWN_EN                                0x14Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_DWN_AV
 *
 * @BRIEF        RESIZER B 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_DWN_AV                                0x150ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_RGB_EN
 *
 * @BRIEF        RESIZER B - RGB OUTPUT ENABLE 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_RGB_EN                                0x154ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_RGB_TYP
 *
 * @BRIEF        RESIZER B - RGB OUTPUT CONTROL REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_RGB_TYP                               0x158ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_RGB_BLD
 *
 * @BRIEF        RESIZER B - RGB BLEND REGISTER 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_RGB_BLD                               0x15Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_Y_BAD_H
 *
 * @BRIEF        RESIZER B - OUTPUT MEMORY BASE ADDRESS REGISTER 
 *               This register is used if the output data format is one of 
 *               the following: RAW, YUV422, YUV420, RGB565, RGBA. 
 *               RAW: RAW data is written to this address 
 *               YUV422: YUV data is written to this address 
 *               YUV420: Y data is written to this address 
 *               RGB565: 16-bit RGB data is written to this address 
 *               RGBA: 32-bit RGBA data is written to this address 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_Y_BAD_H                           0x160ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_Y_BAD_L
 *
 * @BRIEF        RESIZER B - OUTPUT MEMORY BASE ADDRESS REGISTER 
 *               This register is used if the output data format is one of 
 *               the following: RAW, YUV422, YUV420, RGB565, RGBA. 
 *               RAW: RAW data is written to this address 
 *               YUV422: YUV data is written to this address 
 *               YUV420: Y data is written to this address 
 *               RGB565: 16-bit RGB data is written to this address 
 *               RGBA: 32-bit RGBA data is written to this address 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_Y_BAD_L                           0x164ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_Y_SAD_H
 *
 * @BRIEF        RESIZER B - OUTPUT MEMORY START ADDRESS REGISTER 
 *               This register is used if the output data format is one of 
 *               the following: RAW, YUV422, YUV420, RGB565, RGBA. 
 *               RAW: RAW data is written to this address 
 *               YUV422: YUV data is written to this address 
 *               YUV420: Y data is written to this address 
 *               RGB565: 16-bit RGB data is written to this address 
 *               RGBA: 32-bit RGBA data is written to this address 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_Y_SAD_H                           0x168ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_Y_SAD_L
 *
 * @BRIEF        RESIZER B - OUTPUT MEMORY START ADDRESS REGISTER 
 *               This register is used if the output data format is one of 
 *               the following: RAW, YUV422, YUV420, RGB565, RGBA. 
 *               RAW: RAW data is written to this address 
 *               YUV422: YUV data is written to this address 
 *               YUV420: Y data is written to this address 
 *               RGB565: 16-bit RGB data is written to this address 
 *               RGBA: 32-bit RGBA data is written to this address 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_Y_SAD_L                           0x16Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_Y_OFT
 *
 * @BRIEF        RESIZER B - OUTPUT MEMORY OFFSET REGISTER 
 *               This register is used if the output data format is one of 
 *               the following: RAW, YUV422, YUV420 or RGBA. 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_Y_OFT                             0x170ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_Y_PTR_S
 *
 * @BRIEF        RESIZER B - OUTPUT MEMORY START ADDRESS REGISTER 
 *               This register is used if the output data format is one of 
 *               the following: RAW, YUV422, YUV420 or RGBA. 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_Y_PTR_S                           0x174ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_Y_PTR_E
 *
 * @BRIEF        RESIZER B - OUTPUT MEMORY END ADDRESS REGISTER 
 *               This register is used if the output data format is one of 
 *               the following: RAW, YUV422, YUV420 or RGBA. 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_Y_PTR_E                           0x178ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_C_BAD_H
 *
 * @BRIEF        RESIZER B - OUTPUT MEMORY BASE ADDRESS REGISTER FOR CHROMA 
 *               DATA (YUV420) 
 *               This register is used if the output data format is YUV420. U 
 *               and V data are written into this buffer. 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_C_BAD_H                           0x17Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_C_BAD_L
 *
 * @BRIEF        RESIZER B - OUTPUT MEMORY BASE ADDRESS REGISTER FOR CHROMA 
 *               DATA (YUV420) 
 *               This register is used if the output data format is YUV420. U 
 *               and V data are written into this buffer. 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_C_BAD_L                           0x180ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_C_SAD_H
 *
 * @BRIEF        RESIZER B - OUTPUT MEMORY START ADDRESS REGISTER FOR CHROMA 
 *               DATA (YUV420) 
 *               This register is used if the output data format is YUV420. U 
 *               and V data are written into this buffer. 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_C_SAD_H                           0x184ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_C_SAD_L
 *
 * @BRIEF        RESIZER B - OUTPUT MEMORY START ADDRESS REGISTER FOR CHROMA 
 *               DATA (YUV420) 
 *               This register is used if the output data format is YUV420. U 
 *               and V data are written into this buffer. 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_C_SAD_L                           0x188ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_C_OFT
 *
 * @BRIEF        RESIZER B - OUTPUT MEMORY OFFSET REGISTER FOR CHROMA DATA 
 *               (YUV420) 
 *               This register is used if the output data format is YUV420 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_C_OFT                             0x18Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_C_PTR_S
 *
 * @BRIEF        RESIZER B - OUTPUT MEMORY START ADDRESS REGISTER FOR CHROMA 
 *               DATA (YUV420) 
 *               This register is used if the output data format is YUV420 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_C_PTR_S                           0x190ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_C_PTR_E
 *
 * @BRIEF        RESIZER B - OUTPUT MEMORY END ADDRESS REGISTER FOR CHROMA 
 *               DATA (YUV420) 
 *               This register is used if the output data format is YUV420 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_C_PTR_E                           0x194ul

    /* 
     * List of register bitfields for component RESIZER
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_REVISION__REV   
 *
 * @BRIEF        IP revision. 
 *               [7:4] indicates major revision 
 *               [3:0] indicates minor revision - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_REVISION__REV                    BITFIELD(7, 0)
#define RESIZER__RSZ_REVISION__REV__POS               0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SYSCONFIG__RSZB_CLK_EN   
 *
 * @BRIEF        Resizer B clock enable 
 *               This bit enable to enable / disable the RESIZER B clock.  
 *               Note that it is a second level clock enable. This bit has 
 *               effect only if RSZ_GCK_SDR is set to '1'. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SYSCONFIG__RSZB_CLK_EN           BITFIELD(9, 9)
#define RESIZER__RSZ_SYSCONFIG__RSZB_CLK_EN__POS      9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SYSCONFIG__RSZA_CLK_EN   
 *
 * @BRIEF        Resizer A clock enable 
 *               This bit enable to enable / disable the RESIZER A clock.  
 *               Note that it is a second level clock enable. This bit has 
 *               effect only if RSZ_GCK_SDR is set to '1'. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SYSCONFIG__RSZA_CLK_EN           BITFIELD(8, 8)
#define RESIZER__RSZ_SYSCONFIG__RSZA_CLK_EN__POS      8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SYSCONFIG__SOFTRESET   
 *
 * @BRIEF        Software Reset 
 *               Set this bit to 1 to trigger a module reset. The bit is 
 *               automatically reset by the hardware. During reads, it always 
 *               returns 0. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SYSCONFIG__SOFTRESET             BITFIELD(1, 1)
#define RESIZER__RSZ_SYSCONFIG__SOFTRESET__POS        1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SYSCONFIG__AUTOGATING   
 *
 * @BRIEF        Internal Clock Gating Strategy 
 *               Enables or disables auto clock gating. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SYSCONFIG__AUTOGATING            BITFIELD(0, 0)
#define RESIZER__RSZ_SYSCONFIG__AUTOGATING__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SYSSTATUS__RESETDONE   
 *
 * @BRIEF        Internal reset monitoring - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SYSSTATUS__RESETDONE             BITFIELD(0, 0)
#define RESIZER__RSZ_SYSSTATUS__RESETDONE__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_IN_FIFO_CTRL__THRLD_LOW   
 *
 * @BRIEF        When RSZ_IN_FIFO_CTRL.THRLD_HIGH = 
 *               RSZ_IN_FIFO_CTRL.THRLD_LOW, the rsz_stall_input is not 
 *               asserted. The only purpose of the RSZ_IN_FIFO_CTRL.THRLD_LOW 
 *               register is to prevent rsz_stall_input signal assertion. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_IN_FIFO_CTRL__THRLD_LOW          BITFIELD(28, 16)
#define RESIZER__RSZ_IN_FIFO_CTRL__THRLD_LOW__POS     16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_IN_FIFO_CTRL__THRLD_HIGH   
 *
 * @BRIEF        High threshold value.  
 *               The rsz_stall_input signal is asserted if 2 lines of 
 *               circular buffer are full and the third line has more pixels 
 *               than RSZ_IN_FIFO_CTRL.THRLD_HIGH. The rsz_stall_input signal 
 *               stays high as long as one full line is not free for 
 *               receiving further data. THRLD_HIGH is in terms of line size 
 *               and can at max be programmed equal to the input line size 
 *               (RSZ_SRC_HSZ). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_IN_FIFO_CTRL__THRLD_HIGH         BITFIELD(12, 0)
#define RESIZER__RSZ_IN_FIFO_CTRL__THRLD_HIGH__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_GNC__RSZB_MEM_LINE_SIZE   
 *
 * @BRIEF        Resizer #B memory line size (pixels). The output image 
 *               cannot exceed this size. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_GNC__RSZB_MEM_LINE_SIZE          BITFIELD(28, 16)
#define RESIZER__RSZ_GNC__RSZB_MEM_LINE_SIZE__POS     16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_GNC__RSZA_MEM_LINE_SIZE   
 *
 * @BRIEF        Resizer #A memory line size (pixels). The output image 
 *               cannot excced this size. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_GNC__RSZA_MEM_LINE_SIZE          BITFIELD(12, 0)
#define RESIZER__RSZ_GNC__RSZA_MEM_LINE_SIZE__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_FRACDIV__RSZ_FRACDIV   
 *
 * @BRIEF        Fractional clock divider value. 
 *               The fractional clock divider gates the read requests made to 
 *               the input data buffer such that the input data buffer is 
 *               read at an average frequency equal to FFCLK instead of FCLK. 
 *               The value of FFCLK depends upon the upscaling ratios as well 
 *               as the input pixel clock: refer to the functional spec.  We 
 *               have FFCLK = FCLK / FRACDIV MHz and RSZ_FRACDIV = 65536 / 
 *               FRACDIV. 
 *               When RSZ_ FRACDIV = 65536, we have: FFCLK = FCLK. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_FRACDIV__RSZ_FRACDIV             BITFIELD(15, 0)
#define RESIZER__RSZ_FRACDIV__RSZ_FRACDIV__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_EN__EN   
 *
 * @BRIEF        Resizer module enable 
 *               The start flag of the RESIZER module. When EN is set to '1', 
 *               the RESIZER module starts the processing from the next 
 *               rising edge of the VD pulse. If the processing mode of the 
 *               RESIZER module is set to "one shot", the EN bit is cleared 
 *               to '0' after the end of the processing. 
 *               One has to pay attention that when this bit is enabled and - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_EN__EN                       BITFIELD(0, 0)
#define RESIZER__RSZ_SRC_EN__EN__POS                  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_MODE__WRT   
 *
 * @BRIEF        Video port WEN signal selection  
 *               This bit selects whether the WEN signal which is present on 
 *               the IPIPE and IPIPEIF video port is used or not to select 
 *               the input data.  
 *               If WRT is 0, the RESIZER module ignores the WEN signal and 
 *               processes all image frame while RESIZER is enabled.  
 *               If WRT is 1, the RESIZER module only processes the lines 
 *               that arrived while the WEN is high. HD is used to sample the 
 *               WEN signal. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_MODE__WRT                    BITFIELD(1, 1)
#define RESIZER__RSZ_SRC_MODE__WRT__POS               1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_MODE__OST   
 *
 * @BRIEF        The processing mode selection of the RESIZER module.  
 *               Value 0 indicates the mode of ?free run?, value 1 indicates 
 *               the mode of ?one shot". - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_MODE__OST                    BITFIELD(0, 0)
#define RESIZER__RSZ_SRC_MODE__OST__POS               0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_FMT0__BYPASS   
 *
 * @BRIEF        Pass Through 
 *               This bit enables or disables the RESIZER module pass through 
 *               mode. The pass trhough mode can transfer images which are 8K 
 *               pixel wide. When it is enabled, the input data buffer and 
 *               the resizer engines are bypassed. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_FMT0__BYPASS                 BITFIELD(1, 1)
#define RESIZER__RSZ_SRC_FMT0__BYPASS__POS            1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_FMT0__SEL   
 *
 * @BRIEF        Input selection 
 *               This bit selects which of the two video port is selected to 
 *               push data through the RESIZER module. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_FMT0__SEL                    BITFIELD(0, 0)
#define RESIZER__RSZ_SRC_FMT0__SEL__POS               0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_FMT1__COL   
 *
 * @BRIEF        Y/C selection 
 *               This bit is valid only if the input data is YUV420 (IN420 = 
 *               '1'). It enables to specify where the data which is input to 
 *               the RESIZER module is luma or chroma data. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_FMT1__COL                    BITFIELD(2, 2)
#define RESIZER__RSZ_SRC_FMT1__COL__POS               2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_FMT1__IN420   
 *
 * @BRIEF        Chroma Format Selection 
 *               This bit sets the chroma undersampling when YUV data is 
 *               input to the RESIZER module. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_FMT1__IN420                  BITFIELD(1, 1)
#define RESIZER__RSZ_SRC_FMT1__IN420__POS             1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_FMT1__RAW   
 *
 * @BRIEF        Pass-through mode input data format selection 
 *               This bit affects the horizontal reversal (flipping) process. 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_FMT1__RAW                    BITFIELD(0, 0)
#define RESIZER__RSZ_SRC_FMT1__RAW__POS               0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_VPS__VPS   
 *
 * @BRIEF        Vertical Start Position 
 *               Sets the vertical position of the global frame from the 
 *               rising edge of the VD. The RSZ module will start the image 
 *               processing from the VPS'th line. 
 *               This value can be odd or even whatever the input data 
 *               format. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_VPS__VPS                     BITFIELD(15, 0)
#define RESIZER__RSZ_SRC_VPS__VPS__POS                0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_VSZ__VSZ   
 *
 * @BRIEF        Vertical Processing Size 
 *               Sets the vertical size of the processing area. The RSZ 
 *               module will process (VSZ+1) lines. 
 *               This value can be odd or even whatever the input data 
 *               format. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_VSZ__VSZ                     BITFIELD(12, 0)
#define RESIZER__RSZ_SRC_VSZ__VSZ__POS                0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_HPS__HPS   
 *
 * @BRIEF        Horizontal Start Position 
 *               Sets the horizontal position of the global frame from the 
 *               rising edge of the HD. The RSZ module will start the 
 *               processing from the HPS pixel. 
 *               This value shall be even for YUV422 data but can be odd for 
 *               RAW data. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_HPS__HPS                     BITFIELD(15, 0)
#define RESIZER__RSZ_SRC_HPS__HPS__POS                0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_HSZ__HSZ   
 *
 * @BRIEF        Horizontal size 
 *               Sets the horizontal size of the processing area.  The RSZ 
 *               module processes (HSZ+1) pixels. 
 *               (HSZ+1) shall be even for YUV422 and RAW data. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_HSZ__HSZ                     BITFIELD(12, 0)
#define RESIZER__RSZ_SRC_HSZ__HSZ__POS                0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_DMA_RZA__RZA   
 *
 * @BRIEF        Sets the minimum inteval btw two consecutive memory request 
 *               for resizer #A. Specified in number of interface clock 
 *               cycles.  
 *               Values of 0, 1, and 2 are used as a condition to keep the 
 *               bandwidth limiter off. When this function is enabled, this 
 *               value shall be greater than 10 cycles. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_DMA_RZA__RZA                     BITFIELD(15, 0)
#define RESIZER__RSZ_DMA_RZA__RZA__POS                0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_DMA_RZB__RZB   
 *
 * @BRIEF        Sets the minimum inteval btw two consecutive memory request 
 *               for resizer #B. Specified in number of interface clock 
 *               cycles.  
 *               Values of 0, 1, and 2 are used as a condition to keep the 
 *               bandwidth limiter off. When this function is enabled, this 
 *               value shall be greater than 10 cycles. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_DMA_RZB__RZB                     BITFIELD(15, 0)
#define RESIZER__RSZ_DMA_RZB__RZB__POS                0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_DMA_STA__STATUS   
 *
 * @BRIEF        Resizer process status 
 *               This bit is set in the time window from rsz_int_reg to 
 *               rsz_int_dma. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_DMA_STA__STATUS                  BITFIELD(0, 0)
#define RESIZER__RSZ_DMA_STA__STATUS__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_GCK_MMR__MMR   
 *
 * @BRIEF        The on/off selection of the MMR interface clock which is 
 *               used for MMR register access. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_GCK_MMR__MMR                     BITFIELD(0, 0)
#define RESIZER__RSZ_GCK_MMR__MMR__POS                0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_GCK_SDR__CORE   
 *
 * @BRIEF        RSZ Core Clock Enable. 
 *               This bit enables or disables the resizer core functional 
 *               clock. When this bit is off, the resizer core (interpolator) 
 *               is automatically bypassed (resizer-bypass mode of 
 *               pass-through mode is selected depending on RSZ_SRC_FMT0 
 *               value). In resizer-bypass mode or pass-through mode, no 
 *               up-scaling or downscaling process is operated. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_GCK_SDR__CORE                    BITFIELD(0, 0)
#define RESIZER__RSZ_GCK_SDR__CORE__POS               0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_IRQ_RZA__RZA   
 *
 * @BRIEF        Resizer A circular buffer interval 
 *               Sets the circular buffer interval for Resizer A. The 
 *               interrupt is triggered everytime (RZA+1) lines are written 
 *               to the circular buffer (Y buffer). The range goes from 1 to 
 *               8192 lines.  
 *               Usually, the circular buffer vertical size should be a 
 *               multiple of RZA. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_IRQ_RZA__RZA                     BITFIELD(12, 0)
#define RESIZER__RSZ_IRQ_RZA__RZA__POS                0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_IRQ_RZB__RZB   
 *
 * @BRIEF        Resizer B circular buffer interval 
 *               Sets the circular buffer interval for Resizer B. The 
 *               interrupt is triggered everytime (RZB+1) lines are written 
 *               to the circular buffer  (Y buffer). The range goes from 1 to 
 *               8192 lines. 
 *               Usually, the circular buffer vertical size should be a 
 *               multiple of RZB. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_IRQ_RZB__RZB                     BITFIELD(12, 0)
#define RESIZER__RSZ_IRQ_RZB__RZB__POS                0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_YUV_Y_MIN__MIN   
 *
 * @BRIEF        The minimum value of Luminance (8bits unsigned). 
 *               If the value of the Luminance is smaller than VAL, it will 
 *               be clipped to VAL. 
 *               This bit field shall be set to its default values when the 
 *               resizer is set in pass-though mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_YUV_Y_MIN__MIN                   BITFIELD(7, 0)
#define RESIZER__RSZ_YUV_Y_MIN__MIN__POS              0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_YUV_Y_MAX__MAX   
 *
 * @BRIEF        The maximum value of Luminance (8bits unsigned). 
 *               If the value of the Luminance is larger than VAL, it will be 
 *               clipped to VAL. 
 *               This bit field shall be set to its default values when the 
 *               resizer is set in pass-through mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_YUV_Y_MAX__MAX                   BITFIELD(7, 0)
#define RESIZER__RSZ_YUV_Y_MAX__MAX__POS              0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_YUV_C_MIN__MIN   
 *
 * @BRIEF        The minimum value of Chrominance (8bits unsigned). 
 *               If the value of the Chrominance is smaller than VAL, it will 
 *               be clipped to VAL. 
 *               This bit field shall be set to its default values when the 
 *               resizer is set in pass-though mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_YUV_C_MIN__MIN                   BITFIELD(7, 0)
#define RESIZER__RSZ_YUV_C_MIN__MIN__POS              0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_YUV_C_MAX__MAX   
 *
 * @BRIEF        The maximum value of Chrominance (8bits unsigned). 
 *               If the value of the Chrominance is larger than VAL, it will 
 *               be clipped to VAL. 
 *               This bit field shall be set to its default values when the 
 *               resizer is set in pass-through mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_YUV_C_MAX__MAX                   BITFIELD(7, 0)
#define RESIZER__RSZ_YUV_C_MAX__MAX__POS              0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_YUV_PHS__POS   
 *
 * @BRIEF        The phase position of the output of the chrominance. 
 *               The RESIZER module does not change the relative position of 
 *               the chroma samples vs. the luma samples between the input 
 *               and output and the chroma position at the output of the 
 *               IPIPE module and at the output of the RESIZER module shall 
 *               be identical. In other words, we shall have RSZ_YUV_PHS.POS 
 *               = IPIPE_YUV_PHS.POS. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_YUV_PHS__POS                     BITFIELD(0, 0)
#define RESIZER__RSZ_YUV_PHS__POS__POS                0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SEQ__CRV   
 *
 * @BRIEF        Chroma sampling point change - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SEQ__CRV                         BITFIELD(4, 4)
#define RESIZER__RSZ_SEQ__CRV__POS                    4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SEQ__VRVB   
 *
 * @BRIEF        Resizer B - Vertical reversal of output image - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SEQ__VRVB                        BITFIELD(3, 3)
#define RESIZER__RSZ_SEQ__VRVB__POS                   3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SEQ__HRVB   
 *
 * @BRIEF        Resizer B -Horizontal reversal of output image - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SEQ__HRVB                        BITFIELD(2, 2)
#define RESIZER__RSZ_SEQ__HRVB__POS                   2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SEQ__VRVA   
 *
 * @BRIEF        Resizer A - Vertical reversal of output image - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SEQ__VRVA                        BITFIELD(1, 1)
#define RESIZER__RSZ_SEQ__VRVA__POS                   1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SEQ__HRVA   
 *
 * @BRIEF        Resizer A - Horizontal reversal of output image - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SEQ__HRVA                        BITFIELD(0, 0)
#define RESIZER__RSZ_SEQ__HRVA__POS                   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_EN__EN   
 *
 * @BRIEF        Enable resizer #A 
 *               This bit is latched on video port VD input. The reason is 
 *               that the resizer shall only starts the processing on a clean 
 *               frame boundary. 
 *               In one-shot mode, this bit is negated on VD. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_EN__EN                           BITFIELD(0, 0)
#define RESIZER__RZA_EN__EN__POS                      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_MODE__MODE   
 *
 * @BRIEF        Select "Free Run mode" or "One Shot Mode" - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_MODE__MODE                       BITFIELD(0, 0)
#define RESIZER__RZA_MODE__MODE__POS                  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_420__CEN   
 *
 * @BRIEF        Output Enable for Luminance 
 *               This bit is valid in 422 input mode.When CEN=0 and YEN=0, 
 *               output is 422 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_420__CEN                         BITFIELD(1, 1)
#define RESIZER__RZA_420__CEN__POS                    1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_420__YEN   
 *
 * @BRIEF        Output Enable for Chrominance.  
 *               This bit is valid in 422 input mode.When CEN=0 and YEN=0, 
 *               output is 422 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_420__YEN                         BITFIELD(0, 0)
#define RESIZER__RZA_420__YEN__POS                    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_I_VPS__VPS   
 *
 * @BRIEF        Input Vertical Position 
 *               Sets the vertical start position of the input image within 
 *               the global frame. It enables to crop data into the global 
 *               frame. 
 *               After SRC_VPS, the Vps'th line is processed as the first 
 *               line in each image. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_I_VPS__VPS                       BITFIELD(12, 0)
#define RESIZER__RZA_I_VPS__VPS__POS                  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_I_HPS__HPS   
 *
 * @BRIEF        Input Horizontal Position 
 *               Sets the horizontal position of the first pixel for each 
 *               line within the global frame. 
 *               After SRC_HPS, the pixel at the VAL'th position is processed 
 *               as the first pixel. This value shall be even. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_I_HPS__HPS                       BITFIELD(12, 0)
#define RESIZER__RZA_I_HPS__HPS__POS                  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_O_VSZ__VSZ   
 *
 * @BRIEF        The target output size of the resized image.  
 *               The number of output lines is (VSZ+1). 
 *               Set 479, when 480 lines of output is required. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_O_VSZ__VSZ                       BITFIELD(12, 0)
#define RESIZER__RZA_O_VSZ__VSZ__POS                  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_O_HSZ__HSZ   
 *
 * @BRIEF        The horizontal size of output image.  
 *               The number of pixel in each line is (HSZ+1). Set 479, when 
 *               480 pixels are required. 
 *               This value must be lower than the max memory line size 
 *               supported by the resizer engine, except in RAW pass through 
 *               mode. 
 *               Note that the LSB of the 13-bit HSZ value is fixed to 1 such 
 *               that the horizontal size is always even. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_O_HSZ__HSZ                       BITFIELD(12, 1)
#define RESIZER__RZA_O_HSZ__HSZ__POS                  1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_O_HSZ__HSZ_LSB   
 *
 * @BRIEF        The least significant bit of HSZ is forced to 1. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_O_HSZ__HSZ_LSB                   BITFIELD(0, 0)
#define RESIZER__RZA_O_HSZ__HSZ_LSB__POS              0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_V_PHS_Y__Y   
 *
 * @BRIEF        The initial value for the luma phase in vertical resizing 
 *               process. 
 *               This value is in U14Q8 fractional format. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_V_PHS_Y__Y                       BITFIELD(13, 0)
#define RESIZER__RZA_V_PHS_Y__Y__POS                  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_V_PHS_C__C   
 *
 * @BRIEF        The initial value for the chroma phase in vertical resizing 
 *               process. 
 *               This value is in U14Q8 fractional format. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_V_PHS_C__C                       BITFIELD(13, 0)
#define RESIZER__RZA_V_PHS_C__C__POS                  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_V_DIF__V   
 *
 * @BRIEF        The parameter for vertical resize. The actual resizing ratio 
 *               is 256/RZA_V_DIF. 
 *               In normal mode: 16 <= RZA_V_DIF <= 4096.  
 *               In down-scale mode: 256 <= RZA_V_DIF <= 4096. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_V_DIF__V                         BITFIELD(13, 0)
#define RESIZER__RZA_V_DIF__V__POS                    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_V_TYP__C   
 *
 * @BRIEF        Selection of resizing method for chrominance: vertical - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_V_TYP__C                         BITFIELD(1, 1)
#define RESIZER__RZA_V_TYP__C__POS                    1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_V_TYP__Y   
 *
 * @BRIEF        Selection of resizing method for luminance: vertical - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_V_TYP__Y                         BITFIELD(0, 0)
#define RESIZER__RZA_V_TYP__Y__POS                    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_V_LPF__C   
 *
 * @BRIEF        The intensity parameter for chroma vertical low pass 
 *               filtering. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_V_LPF__C                         BITFIELD(11, 6)
#define RESIZER__RZA_V_LPF__C__POS                    6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_V_LPF__Y   
 *
 * @BRIEF        The intensity parameter for luma vertical low pass 
 *               filtering. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_V_LPF__Y                         BITFIELD(5, 0)
#define RESIZER__RZA_V_LPF__Y__POS                    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_H_PHS__PHS   
 *
 * @BRIEF        Initial value for the phase in horizontal resizing process, 
 *               i.e., the sampling position is shifted. 
 *               This value is in U14Q8 fractional format. 
 *               Example: If RZX_H_PHS = 128, the first output pixel is 
 *               sampled at the center of the first two valid input pixels. 
 *               If RZX_I_HPS=100 and RZX_H_PHS=128, the first output pixel 
 *               is re-sampled at the center of the 100-th and the 101-st 
 *               input pixels. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_H_PHS__PHS                       BITFIELD(13, 0)
#define RESIZER__RZA_H_PHS__PHS__POS                  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_H_PHS_ADJ__ADJ   
 *
 * @BRIEF        Horizontal phase adjustment value. 
 *               This value is in U9Q8 fractional format. 
 *               This value is expected to be equal to zero if the averager 
 *               is disabled or if input chroma is centered. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_H_PHS_ADJ__ADJ                   BITFIELD(8, 0)
#define RESIZER__RZA_H_PHS_ADJ__ADJ__POS              0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_H_DIF__H   
 *
 * @BRIEF        The parameter for horizontal resizing process. The actual 
 *               resizing ratio is 256/VAL. 
 *               In normal mode 16<= RSZ_RZA_H_DIF<=4096 
 *               In down-scale mode 256<=RSZ_RZA_H_DIF<=4096 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_H_DIF__H                         BITFIELD(13, 0)
#define RESIZER__RZA_H_DIF__H__POS                    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_H_TYP__C   
 *
 * @BRIEF        Selection of resizing method for chrominance: horizontal - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_H_TYP__C                         BITFIELD(1, 1)
#define RESIZER__RZA_H_TYP__C__POS                    1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_H_TYP__Y   
 *
 * @BRIEF        Selection of resizing method for luminance: horizontal - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_H_TYP__Y                         BITFIELD(0, 0)
#define RESIZER__RZA_H_TYP__Y__POS                    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_H_LPF__C   
 *
 * @BRIEF        Horizontal LPF Intensity for Chrominance - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_H_LPF__C                         BITFIELD(11, 6)
#define RESIZER__RZA_H_LPF__C__POS                    6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_H_LPF__Y   
 *
 * @BRIEF        Selection of resizing method for Luminance in horizontal 
 *               direction - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_H_LPF__Y                         BITFIELD(5, 0)
#define RESIZER__RZA_H_LPF__Y__POS                    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_DWN_EN__DWN_EN   
 *
 * @BRIEF        Resizer downscale enable - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_DWN_EN__DWN_EN                   BITFIELD(0, 0)
#define RESIZER__RZA_DWN_EN__DWN_EN__POS              0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_DWN_AV__V   
 *
 * @BRIEF        Vertical averaging size : 1/2^(VWT+1) 
 *               The range goes from 1/2 to 1/256 in power of two. 
 *               0:_DIV2 1/2 down scale 
 *               1:_DIV4 1/4 down scale 
 *               2:_DIV8 1/8 down scale 
 *               3:_DIV16 1/16 down scale 
 *               4:_DIV32 1/32 down scale 
 *               5:_DIV64 1/64 down scale 
 *               6:_DIV128 1/128 down scale 
 *               7:_DIV256 1/256 down scale - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_DWN_AV__V                        BITFIELD(5, 3)
#define RESIZER__RZA_DWN_AV__V__POS                   3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_DWN_AV__H   
 *
 * @BRIEF        Horizontal averaging size : 1/2^(HWT+1) 
 *               The range goes from 1/2 to 1/256 in power of two. 
 *               0:_DIV2 1/2 down scale 
 *               1:_DIV4 1/4 down scale 
 *               2:_DIV8 1/8 down scale 
 *               3:_DIV16 1/16 down scale 
 *               4:_DIV32 1/32 down scale 
 *               5:_DIV64 1/64 down scale 
 *               6:_DIV128 1/128 down scale 
 *               7:_DIV256 1/256 down scale - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_DWN_AV__H                        BITFIELD(2, 0)
#define RESIZER__RZA_DWN_AV__H__POS                   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_RGB_EN__RGB_EN   
 *
 * @BRIEF        Enable of RGB output 
 *               In pass through mode, this register must be 0. 
 *               This bit can only be set to 1 when YUV422 data are output. 
 *               YUV422 data output is selected when SRC_FMT1.IN420 = 0 and 
 *               RZA_420.YEN = RZA_420.CEN = 0 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_RGB_EN__RGB_EN                   BITFIELD(0, 0)
#define RESIZER__RZA_RGB_EN__RGB_EN__POS              0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_RGB_TYP__MSK1   
 *
 * @BRIEF        Enables masking of the last 2 pixels 
 *               This bit is used to mask the 2 last pixels at the image 
 *               boundary which are affected by the YUV422 to YUV444 
 *               conversion. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_RGB_TYP__MSK1                    BITFIELD(2, 2)
#define RESIZER__RZA_RGB_TYP__MSK1__POS               2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_RGB_TYP__MSK0   
 *
 * @BRIEF        Enables masking of the first 2 pixels 
 *               This bit is used to mask the 2 first pixels at the image 
 *               boundary which are affected by the YUV422 to YUV444 
 *               conversion. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_RGB_TYP__MSK0                    BITFIELD(1, 1)
#define RESIZER__RZA_RGB_TYP__MSK0__POS               1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_RGB_TYP__TYP   
 *
 * @BRIEF        16bit/32bit output selection - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_RGB_TYP__TYP                     BITFIELD(0, 0)
#define RESIZER__RZA_RGB_TYP__TYP__POS                0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_RGB_BLD__BLD   
 *
 * @BRIEF        The alpha value used in 32-bit RGBA output mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_RGB_BLD__BLD                     BITFIELD(7, 0)
#define RESIZER__RZA_RGB_BLD__BLD__POS                0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_Y_BAD_H__Y_BAD_H   
 *
 * @BRIEF        Memory Base Address 
 *               Sets the 16 upper bits of the 32-bit base address of the 
 *               circular buffer in memory. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_Y_BAD_H__Y_BAD_H             BITFIELD(15, 0)
#define RESIZER__RZA_SDR_Y_BAD_H__Y_BAD_H__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_Y_BAD_L__Y_BAD_L   
 *
 * @BRIEF        Memory Base Address 
 *               Sets the 16 lower bits of the 32-bit base address of the 
 *               circular buffer in memory. It is a byte address. 
 *               YUV420 format (output data on 8 bits): 
 *               The two least significant bits shall be set to "00" when 
 *               horizontal reversal mode is off. 
 *               The two least significant bits shall be set to "11" when 
 *               horizontal reversal mode is on. 
 *               RAW, RGB565 and YUV422 formats (output data on 16 bits): 
 *               The two least significant bits shall be set to "00" when 
 *               horizontal reversal mode is off. 
 *               The two least significant bits shall be set to "11" when 
 *               horizontal reversal mode is on. 
 *               RGBA format (output data on 32 bits): 
 *               The three least significant bits shall be set to "000" when 
 *               horizontal reversal mode is off. 
 *               The three least significant bits shall be set to "111" when 
 *               horizontal reversal mode is on. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_Y_BAD_L__Y_BAD_L             BITFIELD(15, 0)
#define RESIZER__RZA_SDR_Y_BAD_L__Y_BAD_L__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_Y_SAD_H__Y_SAD_H   
 *
 * @BRIEF        Memory Start Address 
 *               Sets the 16 upper bits of the 32-bit start address in 
 *               memory. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_Y_SAD_H__Y_SAD_H             BITFIELD(15, 0)
#define RESIZER__RZA_SDR_Y_SAD_H__Y_SAD_H__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_Y_SAD_L__Y_SAD_L   
 *
 * @BRIEF        Memory Start Address 
 *               Sets 16 lower bits of the 32-bit start address in memory. It 
 *               is a byte address. For every frame, the first line of data 
 *               will be written to this address.  
 *               We have: SAD = BAD + (PTR_S x OFT) and PTR_S < PTR_E 
 *               If the first line shall be written at the beginning of the 
 *               circular buffer memory then SAD = BAD and PTR_S = 0. 
 *               YUV420 format (output data on 8 bits): 
 *               The two least significant bits shall be set to "00" when 
 *               horizontal reversal mode is off. 
 *               The two least significant bits shall be set to "11" when 
 *               horizontal reversal mode is on. 
 *               RAW, RGB565 and YUV422 formats (output data on 16 bits): 
 *               The two least significant bits shall be set to "00" when 
 *               horizontal reversal mode is off. 
 *               The two least significant bits shall be set to "11" when 
 *               horizontal reversal mode is on. 
 *               RGBA format (output data on 32 bits): 
 *               The three least significant bits shall be set to "000" when 
 *               horizontal reversal mode is off. 
 *               The three least significant bits shall be set to "111" when 
 *               horizontal reversal mode is on. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_Y_SAD_L__Y_SAD_L             BITFIELD(15, 0)
#define RESIZER__RZA_SDR_Y_SAD_L__Y_SAD_L__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_Y_OFT__Y_OFT   
 *
 * @BRIEF        Memory Line Offset 
 *               Sets the size of  each line in the circular buffer. It is 
 *               expressed in bytes and unsigned. Note that OFT does not 
 *               necessary corresponds to the size of a line in a frame, it 
 *               can be much bigger. The line offset shall be a multiple of 
 *               128 bytes (bits [6:0] of RZX_SDR_Y_OFT and RZX_SDR_C_OFT 
 *               shall be set to 0). 
 *               Example: 
 *               line 0 address = SAD 
 *               line 1 address = SAD + 1 x OFT 
 *               line 2 address = SAD + 2 x OFT - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_Y_OFT__Y_OFT                 BITFIELD(16, 0)
#define RESIZER__RZA_SDR_Y_OFT__Y_OFT__POS            0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_Y_PTR_S__Y_PTR_S   
 *
 * @BRIEF        Start Line of Memory Pointer 
 *               Sets the vertical position of the first output line in the 
 *               output memory space. This value is expressed in number of 
 *               lines. 
 *               The hw uses it to setup the initial value of the circular 
 *               buffer. It shall be setup such as PTR_S = (SAD ? BAD) / OFT. 
 *               This value shall be set to 0 when RSZ_RZA_SDR_Y_BAD = 
 *               RSZ_RZA_SDR_Y_SAD. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_Y_PTR_S__Y_PTR_S             BITFIELD(12, 0)
#define RESIZER__RZA_SDR_Y_PTR_S__Y_PTR_S__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_Y_PTR_E__Y_PTR_E   
 *
 * @BRIEF        End Line of Memory Pointer 
 *               Sets the maximum number of lines to be stored in the output 
 *               memory space. This value is expressed in number of lines. 
 *               When the number of output lines exceeds this value, the 
 *               address restarts from the first address in the output memory 
 *               space (BAD). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_Y_PTR_E__Y_PTR_E             BITFIELD(12, 0)
#define RESIZER__RZA_SDR_Y_PTR_E__Y_PTR_E__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_C_BAD_H__C_BAD_H   
 *
 * @BRIEF        Memory Base Address 
 *               Sets the 16 higher bits of the 32-bit base address of the 
 *               circular buffer in memory. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_C_BAD_H__C_BAD_H             BITFIELD(15, 0)
#define RESIZER__RZA_SDR_C_BAD_H__C_BAD_H__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_C_BAD_L__C_BAD_L   
 *
 * @BRIEF        Memory Base Address 
 *               Sets the 16 lower bits of the 32-bit base address of the 
 *               circular buffer in memory. It is a byte address. 
 *               YUV420 format (output data on 8 bits): 
 *               The two least significant bits shall be set to "00" when 
 *               horizontal reversal mode is off. 
 *               The two least significant bits shall be set to "11" when 
 *               horizontal reversal mode is on. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_C_BAD_L__C_BAD_L             BITFIELD(15, 0)
#define RESIZER__RZA_SDR_C_BAD_L__C_BAD_L__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_C_SAD_H__C_SAD_H   
 *
 * @BRIEF        Memory Base Address 
 *               Sets the 16 higher bits of the 32-bit start address in 
 *               memory. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_C_SAD_H__C_SAD_H             BITFIELD(15, 0)
#define RESIZER__RZA_SDR_C_SAD_H__C_SAD_H__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_C_SAD_L__C_SAD_L   
 *
 * @BRIEF        Memory Base Address 
 *               Sets the 16 lower bits of the 32-bit start address in 
 *               memory. It is a byte address. For every frame, the first 
 *               line of data will be written to this address.  
 *               We have: SAD = BAD + (PTR_S x OFT) and PTR_S < PTR_E 
 *               If the first line shall be written at the beginning of the 
 *               circular buffer memory then SAD = BAD and PTR_S = 0. 
 *               YUV420 format (output data on 8 bits): 
 *               The two least significant bits shall be set to "00" when 
 *               horizontal reversal mode is off. 
 *               The two least significant bits shall be set to "11" when 
 *               horizontal reversal mode is on. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_C_SAD_L__C_SAD_L             BITFIELD(15, 0)
#define RESIZER__RZA_SDR_C_SAD_L__C_SAD_L__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_C_OFT__C_OFT   
 *
 * @BRIEF        Memory Line Offset 
 *               Sets the size of  each line in the circular buffer. It is 
 *               expressed in bytes and unsigned. Note that OFT does not 
 *               necessary corresponds to the size of a line in a frame, it 
 *               can be much bigger. The line offset shall be a multiple of 
 *               128 bytes (bits [6:0] of RZX_SDR_Y_OFT and RZX_SDR_C_OFT 
 *               shall be set to 0).  
 *               Example: 
 *               line 0 address = SAD 
 *               line 1 address = SAD + 1 x OFT 
 *               line 2 address = SAD + 2 x OFT - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_C_OFT__C_OFT                 BITFIELD(16, 0)
#define RESIZER__RZA_SDR_C_OFT__C_OFT__POS            0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_C_PTR_S__C_PTR_S   
 *
 * @BRIEF        Start Line of Memory Pointer 
 *               Sets the vertical position of the first output line in the 
 *               output memory space. This value is expressed in number of 
 *               lines. 
 *               The hw uses it to setup the initial value of the circular 
 *               buffer. It shall be setup such as PTR_S = (SAD ? BAD) / OFT. 
 *               This value shall be set to 0 when RSZ_RZA_SDR_C_BAD = 
 *               RSZ_RZA_SDR_C_SAD. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_C_PTR_S__C_PTR_S             BITFIELD(12, 0)
#define RESIZER__RZA_SDR_C_PTR_S__C_PTR_S__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_SDR_C_PTR_E__C_PTR_E   
 *
 * @BRIEF        End Line of Memory Pointer 
 *               Sets the maximum number of lines to be stored in the output 
 *               memory space. This value is expressed in number of lines. 
 *               When the number of output lines exceeds this value, the 
 *               address restarts from the first address in the output memory 
 *               space (BAD). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_SDR_C_PTR_E__C_PTR_E             BITFIELD(12, 0)
#define RESIZER__RZA_SDR_C_PTR_E__C_PTR_E__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_EN__EN   
 *
 * @BRIEF        Enable resizer #A 
 *               This bit is latched on the video port VD input signal.  The 
 *               reason is that the resizer shall only starts the processing 
 *               on a clean frame boundary. 
 *               In one-shot mode, this bit is negated on VD. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_EN__EN                           BITFIELD(0, 0)
#define RESIZER__RZB_EN__EN__POS                      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_MODE__MODE   
 *
 * @BRIEF        Select "Free Run mode" or "One Shot Mode" - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_MODE__MODE                       BITFIELD(0, 0)
#define RESIZER__RZB_MODE__MODE__POS                  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_420__CEN   
 *
 * @BRIEF        Output Enable for Luminance 
 *               This bit is valid in 422 input mode.When CEN=0 and YEN=0, 
 *               output is 422 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_420__CEN                         BITFIELD(1, 1)
#define RESIZER__RZB_420__CEN__POS                    1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_420__YEN   
 *
 * @BRIEF        Output Enable for Chrominance.  
 *               This bit is valid in 422 input mode.When CEN=0 and YEN=0, 
 *               output is 422 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_420__YEN                         BITFIELD(0, 0)
#define RESIZER__RZB_420__YEN__POS                    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_I_VPS__VPS   
 *
 * @BRIEF        Input Vertical Position 
 *               Sets the vertical start position of the input image within 
 *               the global frame. It enables to crop data into the global 
 *               frame. 
 *               After SRC_VPS, the Vps'th line is processed as the first 
 *               line in each image. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_I_VPS__VPS                       BITFIELD(12, 0)
#define RESIZER__RZB_I_VPS__VPS__POS                  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_I_HPS__HPS   
 *
 * @BRIEF        Input Horizontal Position 
 *               Sets the horizontal position of the first pixel for each 
 *               line within the global frame. 
 *               After SRC_HPS, the pixel at the VAL'th position is processed 
 *               as the first pixel. This value shall be even. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_I_HPS__HPS                       BITFIELD(12, 0)
#define RESIZER__RZB_I_HPS__HPS__POS                  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_O_VSZ__VSZ   
 *
 * @BRIEF        The target output size of the resized image.  
 *               The number of output lines is (VSZ+1). 
 *               Set 479, when 480 lines of output is required. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_O_VSZ__VSZ                       BITFIELD(12, 0)
#define RESIZER__RZB_O_VSZ__VSZ__POS                  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_O_HSZ__HSZ   
 *
 * @BRIEF        The horizontal size of output image.  
 *               The number of pixel in each line is (HSZ+1). Set 479, when 
 *               480 pixels are required. 
 *               This value must be lower than the max memory line size 
 *               supported by the resizer engine, except in RAW pass through 
 *               mode. 
 *               Note that the LSB of the 13-bit HSZ value is fixed to 1 such 
 *               that the horizontal size is always even. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_O_HSZ__HSZ                       BITFIELD(12, 1)
#define RESIZER__RZB_O_HSZ__HSZ__POS                  1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_O_HSZ__HSZ_LSB   
 *
 * @BRIEF        The least significant bit of HSZ is forced to 1. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_O_HSZ__HSZ_LSB                   BITFIELD(0, 0)
#define RESIZER__RZB_O_HSZ__HSZ_LSB__POS              0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_V_PHS_Y__Y   
 *
 * @BRIEF        The initial value for the luma phase in vertical resizing 
 *               process. 
 *               This value is in U14Q8 fractional format. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_V_PHS_Y__Y                       BITFIELD(13, 0)
#define RESIZER__RZB_V_PHS_Y__Y__POS                  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_V_PHS_C__C   
 *
 * @BRIEF        The initial value for the chroma phase in vertical resizing 
 *               process. 
 *               This value is in U14Q8 fractional format. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_V_PHS_C__C                       BITFIELD(13, 0)
#define RESIZER__RZB_V_PHS_C__C__POS                  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_V_DIF__V   
 *
 * @BRIEF        The parameter for vertical resize. The actual resizing ratio 
 *               is 256/RZB_V_DIF. 
 *               In normal mode: 16  <= RZB_V_DIF <= 4096. 
 *               In down-scale mode: 256 <= RZB_V_DIF <= 4096. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_V_DIF__V                         BITFIELD(13, 0)
#define RESIZER__RZB_V_DIF__V__POS                    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_V_TYP__C   
 *
 * @BRIEF        Selection of resizing method for chrominance: vertical - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_V_TYP__C                         BITFIELD(1, 1)
#define RESIZER__RZB_V_TYP__C__POS                    1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_V_TYP__Y   
 *
 * @BRIEF        Selection of resizing method for luminance: vertical - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_V_TYP__Y                         BITFIELD(0, 0)
#define RESIZER__RZB_V_TYP__Y__POS                    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_V_LPF__C   
 *
 * @BRIEF        The intensity parameter for chroma vertical low pass 
 *               filtering. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_V_LPF__C                         BITFIELD(11, 6)
#define RESIZER__RZB_V_LPF__C__POS                    6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_V_LPF__Y   
 *
 * @BRIEF        The intensity parameter for luma vertical low pass 
 *               filtering. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_V_LPF__Y                         BITFIELD(5, 0)
#define RESIZER__RZB_V_LPF__Y__POS                    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_H_PHS__PHS   
 *
 * @BRIEF        Initial value for the phase in horizontal resizing process, 
 *               i.e., the sampling position is shifted. 
 *               This value is in U14Q8 fractional format. 
 *               Example: If RZX_H_PHS = 128, the first output pixel is 
 *               sampled at the center of the first two valid input pixels. 
 *               If RZX_I_HPS=100 and RZX_H_PHS=128, the first output pixel 
 *               is re-sampled at the center of the 100-th and the 101-st 
 *               input pixels. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_H_PHS__PHS                       BITFIELD(13, 0)
#define RESIZER__RZB_H_PHS__PHS__POS                  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_H_PHS_ADJ__ADJ   
 *
 * @BRIEF        Horizontal phase adjustment value. 
 *               This value is in U9Q8 fractional format. 
 *               This value is expected to be equal to zero if the averager 
 *               is disabled or if input chroma is centered. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_H_PHS_ADJ__ADJ                   BITFIELD(8, 0)
#define RESIZER__RZB_H_PHS_ADJ__ADJ__POS              0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_H_DIF__H   
 *
 * @BRIEF        The parameter for horizontal resizing process. The actual 
 *               resizing ratio is 256/VAL. 
 *               In normal mode 16<= RSZ_RZA_H_DIF<=4096 
 *               In down-scale mode 256<=RSZ_RZA_H_DIF<=4096 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_H_DIF__H                         BITFIELD(13, 0)
#define RESIZER__RZB_H_DIF__H__POS                    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_H_TYP__C   
 *
 * @BRIEF        Selection of resizing method for chrominance: horizontal - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_H_TYP__C                         BITFIELD(1, 1)
#define RESIZER__RZB_H_TYP__C__POS                    1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_H_TYP__Y   
 *
 * @BRIEF        Selection of resizing method for luminance: horizontal - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_H_TYP__Y                         BITFIELD(0, 0)
#define RESIZER__RZB_H_TYP__Y__POS                    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_H_LPF__C   
 *
 * @BRIEF        Horizontal LPF Intensity for Chrominance - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_H_LPF__C                         BITFIELD(11, 6)
#define RESIZER__RZB_H_LPF__C__POS                    6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_H_LPF__Y   
 *
 * @BRIEF        Selection of resizing method for Luminance in horizontal 
 *               direction - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_H_LPF__Y                         BITFIELD(5, 0)
#define RESIZER__RZB_H_LPF__Y__POS                    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_DWN_EN__DWN_EN   
 *
 * @BRIEF        Resizer downscale enable - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_DWN_EN__DWN_EN                   BITFIELD(0, 0)
#define RESIZER__RZB_DWN_EN__DWN_EN__POS              0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_DWN_AV__V   
 *
 * @BRIEF        Vertical averaging size : 1/2^(VWT+1) 
 *               The range goes from 1/2 to 1/256 in power of two. 
 *               0:_DIV2 1/2 down scale 
 *               1:_DIV4 1/4 down scale 
 *               2:_DIV8 1/8 down scale 
 *               3:_DIV16 1/16 down scale 
 *               4:_DIV32 1/32 down scale 
 *               5:_DIV64 1/64 down scale 
 *               6:_DIV128 1/128 down scale 
 *               7:_DIV256 1/256 down scale - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_DWN_AV__V                        BITFIELD(5, 3)
#define RESIZER__RZB_DWN_AV__V__POS                   3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_DWN_AV__H   
 *
 * @BRIEF        Horizontal averaging size : 1/2^(HWT+1) 
 *               The range goes from 1/2 to 1/256 in power of two. 
 *               0:_DIV2 1/2 down scale 
 *               1:_DIV4 1/4 down scale 
 *               2:_DIV8 1/8 down scale 
 *               3:_DIV16 1/16 down scale 
 *               4:_DIV32 1/32 down scale 
 *               5:_DIV64 1/64 down scale 
 *               6:_DIV128 1/128 down scale 
 *               7:_DIV256 1/256 down scale - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_DWN_AV__H                        BITFIELD(2, 0)
#define RESIZER__RZB_DWN_AV__H__POS                   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_RGB_EN__RGB_EN   
 *
 * @BRIEF        Enable of RGB output 
 *               In pass through mode, this register must be 0. 
 *               This bit can only be set to 1 when YUV422 data are output. 
 *               YUV422 data output is selected when SRC_FMT1.IN420 = 0 and 
 *               RZB_420.YEN = RZB_420.CEN = 0 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_RGB_EN__RGB_EN                   BITFIELD(0, 0)
#define RESIZER__RZB_RGB_EN__RGB_EN__POS              0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_RGB_TYP__MSK1   
 *
 * @BRIEF        Enables masking of the last 2 pixels 
 *               This bit is used to mask the 2 last pixels at the image 
 *               boundary which are affected by the YUV422 to YUV444 
 *               conversion. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_RGB_TYP__MSK1                    BITFIELD(2, 2)
#define RESIZER__RZB_RGB_TYP__MSK1__POS               2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_RGB_TYP__MSK0   
 *
 * @BRIEF        Enables masking of the first 2 pixels 
 *               This bit is used to mask the 2 first pixels at the image 
 *               boundary which are affected by the YUV422 to YUV444 
 *               conversion. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_RGB_TYP__MSK0                    BITFIELD(1, 1)
#define RESIZER__RZB_RGB_TYP__MSK0__POS               1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_RGB_TYP__TYP   
 *
 * @BRIEF        16bit/32bit output selection - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_RGB_TYP__TYP                     BITFIELD(0, 0)
#define RESIZER__RZB_RGB_TYP__TYP__POS                0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_RGB_BLD__BLD   
 *
 * @BRIEF        The alpha value used in 32-bit RGBA output mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_RGB_BLD__BLD                     BITFIELD(7, 0)
#define RESIZER__RZB_RGB_BLD__BLD__POS                0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_Y_BAD_H__Y_BAD_H   
 *
 * @BRIEF        Memory Base Address 
 *               Sets 16 upper bits of the 32-bit base address of the 
 *               circular buffer in memory. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_Y_BAD_H__Y_BAD_H             BITFIELD(15, 0)
#define RESIZER__RZB_SDR_Y_BAD_H__Y_BAD_H__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_Y_BAD_L__Y_BAD_L   
 *
 * @BRIEF        Memory Base Address 
 *               Sets the 16 lower bits of the 32-bit base address of the 
 *               circular buffer in memory. It is a byte address. 
 *               YUV420 format (output data on 8 bits): 
 *               The two least significant bits shall be set to "00" when 
 *               horizontal reversal mode is off. 
 *               The two least significant bits shall be set to "11" when 
 *               horizontal reversal mode is on. 
 *               RAW, RGB565 and YUV422 formats (output data on 16 bits): 
 *               The two least significant bits shall be set to "00" when 
 *               horizontal reversal mode is off. 
 *               The two least significant bits shall be set to "11" when 
 *               horizontal reversal mode is on. 
 *               RGBA format (output data on 32 bits): 
 *               The three least significant bits shall be set to "000" when 
 *               horizontal reversal mode is off. 
 *               The three least significant bits shall be set to "111" when 
 *               horizontal reversal mode is on. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_Y_BAD_L__Y_BAD_L             BITFIELD(15, 0)
#define RESIZER__RZB_SDR_Y_BAD_L__Y_BAD_L__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_Y_SAD_H__Y_SAD_H   
 *
 * @BRIEF        Memory Start Address 
 *               Sets 16 upper bits of the 32-bit start address in memory. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_Y_SAD_H__Y_SAD_H             BITFIELD(15, 0)
#define RESIZER__RZB_SDR_Y_SAD_H__Y_SAD_H__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_Y_SAD_L__Y_SAD_L   
 *
 * @BRIEF        Memory Start Address 
 *               Sets the 16 lower bits of the 32-bit start address in 
 *               memory. It is a byte address. For every frame, the first 
 *               line of data will be written to this address.  
 *               We have: SAD = BAD + (PTR_S x OFT) and PTR_S < PTR_E 
 *               If the first line shall be written at the beginning of the 
 *               circular buffer memory then SAD = BAD and PTR_S = 0. 
 *               YUV420 format (output data on 8 bits): 
 *               The two least significant bits shall be set to "00" when 
 *               horizontal reversal mode is off. 
 *               The two least significant bits shall be set to "11" when 
 *               horizontal reversal mode is on. 
 *               RAW, RGB565 and YUV422 formats (output data on 16 bits): 
 *               The two least significant bits shall be set to "00" when 
 *               horizontal reversal mode is off. 
 *               The two least significant bits shall be set to "11" when 
 *               horizontal reversal mode is on. 
 *               RGBA format (output data on 32 bits): 
 *               The three least significant bits shall be set to "000" when 
 *               horizontal reversal mode is off. 
 *               The three least significant bits shall be set to "111" when 
 *               horizontal reversal mode is on. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_Y_SAD_L__Y_SAD_L             BITFIELD(15, 0)
#define RESIZER__RZB_SDR_Y_SAD_L__Y_SAD_L__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_Y_OFT__Y_OFT   
 *
 * @BRIEF        Memory Line Offset 
 *               Sets the size of  each line in the circular buffer. It is 
 *               expressed in bytes and unsigned. Note that OFT does not 
 *               necessary corresponds to the size of a line in a frame, it 
 *               can be much bigger. The line offset shall be a multiple of 
 *               128 bytes (bits [6:0] of RZX_SDR_Y_OFT and RZX_SDR_C_OFT 
 *               shall be set to 0). 
 *               Example: 
 *               line 0 address = SAD 
 *               line 1 address = SAD + 1 x OFT 
 *               line 2 address = SAD + 2 x OFT - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_Y_OFT__Y_OFT                 BITFIELD(16, 0)
#define RESIZER__RZB_SDR_Y_OFT__Y_OFT__POS            0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_Y_PTR_S__Y_PTR_S   
 *
 * @BRIEF        Start Line of Memory Pointer 
 *               Sets the vertical position of the first output line in the 
 *               output memory space. This value is expressed in number of 
 *               lines. 
 *               The hw uses it to setup the initial value of the circular 
 *               buffer. It shall be setup such as PTR_S = (SAD ? BAD) / OFT. 
 *               This value shall be set to 0 when RSZ_RZA_SDR_Y_BAD = 
 *               RSZ_RZA_SDR_Y_SAD. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_Y_PTR_S__Y_PTR_S             BITFIELD(12, 0)
#define RESIZER__RZB_SDR_Y_PTR_S__Y_PTR_S__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_Y_PTR_E__Y_PTR_E   
 *
 * @BRIEF        End Line of Memory Pointer 
 *               Sets the maximum number of lines to be stored in the output 
 *               memory space. This value is expressed in number of lines. 
 *               When the number of output lines exceeds this value, the 
 *               address restarts from the first address in the output memory 
 *               space (BAD). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_Y_PTR_E__Y_PTR_E             BITFIELD(12, 0)
#define RESIZER__RZB_SDR_Y_PTR_E__Y_PTR_E__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_C_BAD_H__C_BAD_H   
 *
 * @BRIEF        Memory Base Address 
 *               Sets the 16 upper bits of the 32-bit base address of the 
 *               circular buffer in memory. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_C_BAD_H__C_BAD_H             BITFIELD(15, 0)
#define RESIZER__RZB_SDR_C_BAD_H__C_BAD_H__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_C_BAD_L__C_BAD_L   
 *
 * @BRIEF        Memory Base Address 
 *               Sets the 16 lower bits of the 32-bit base address of the 
 *               circular buffer in memory. It is a byte address. 
 *               YUV420 format (output data on 8 bits): 
 *               The two least significant bits shall be set to "00" when 
 *               horizontal reversal mode is off. 
 *               The two least significant bits shall be set to "11" when 
 *               horizontal reversal mode is on. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_C_BAD_L__C_BAD_L             BITFIELD(15, 0)
#define RESIZER__RZB_SDR_C_BAD_L__C_BAD_L__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_C_SAD_H__C_SAD_H   
 *
 * @BRIEF        Memory Base Address 
 *               Sets the 16 upper bits of the 32-bit start address in 
 *               memory. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_C_SAD_H__C_SAD_H             BITFIELD(15, 0)
#define RESIZER__RZB_SDR_C_SAD_H__C_SAD_H__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_C_SAD_L__C_SAD_L   
 *
 * @BRIEF        Memory Base Address 
 *               Sets the 16 lower bits of the 32-bit start address in 
 *               memory. It is a byte address.  
 *               For every frame, the first line of data will be written to 
 *               this address (C_SAD_H/C_SAD_L).  
 *               We have: SAD = BAD + (PTR_S x OFT) and PTR_S < PTR_E 
 *               If the first line shall be written at the beginning of the 
 *               circular buffer memory then SAD = BAD and PTR_S = 0. 
 *               YUV420 format (output data on 8 bits): 
 *               The two least significant bits shall be set to "00" when 
 *               horizontal reversal mode is off. 
 *               The two least significant bits shall be set to "11" when 
 *               horizontal reversal mode is on. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_C_SAD_L__C_SAD_L             BITFIELD(15, 0)
#define RESIZER__RZB_SDR_C_SAD_L__C_SAD_L__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_C_OFT__C_OFT   
 *
 * @BRIEF        Memory Line Offset 
 *               Sets the size of  each line in the circular buffer. It is 
 *               expressed in bytes and unsigned. Note that OFT does not 
 *               necessary corresponds to the size of a line in a frame, it 
 *               can be much bigger. The line offset shall be a multiple of 
 *               128 bytes (bits [6:0] of RZX_SDR_Y_OFT and RZX_SDR_C_OFT 
 *               shall be set to 0).  
 *               Example: 
 *               line 0 address = SAD 
 *               line 1 address = SAD + 1 x OFT 
 *               line 2 address = SAD + 2 x OFT - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_C_OFT__C_OFT                 BITFIELD(16, 0)
#define RESIZER__RZB_SDR_C_OFT__C_OFT__POS            0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_C_PTR_S__C_PTR_S   
 *
 * @BRIEF        Start Line of Memory Pointer 
 *               Sets the vertical position of the first output line in the 
 *               output memory space. This value is expressed in number of 
 *               lines. 
 *               The hw uses it to setup the initial value of the circular 
 *               buffer. It shall be setup such as PTR_S = (SAD ? BAD) / OFT. 
 *               This value shall be set to 0 when RSZ_RZA_SDR_C_BAD = 
 *               RSZ_RZA_SDR_C_SAD. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_C_PTR_S__C_PTR_S             BITFIELD(12, 0)
#define RESIZER__RZB_SDR_C_PTR_S__C_PTR_S__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_SDR_C_PTR_E__C_PTR_E   
 *
 * @BRIEF        End Line of Memory Pointer 
 *               Sets the maximum number of lines to be stored in the output 
 *               memory space. This value is expressed in number of lines. 
 *               When the number of output lines exceeds this value, the 
 *               address restarts from the first address in the output memory 
 *               space (BAD). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_SDR_C_PTR_E__C_PTR_E             BITFIELD(12, 0)
#define RESIZER__RZB_SDR_C_PTR_E__C_PTR_E__POS        0

    /* 
     * List of register bitfields values for component RESIZER
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SYSCONFIG__RSZB_CLK_EN__NEWENUM1
 *
 * @BRIEF        off - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SYSCONFIG__RSZB_CLK_EN__NEWENUM1 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SYSCONFIG__RSZB_CLK_EN__NEWENUM2
 *
 * @BRIEF        on - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SYSCONFIG__RSZB_CLK_EN__NEWENUM2 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SYSCONFIG__RSZA_CLK_EN__NEWENUM1
 *
 * @BRIEF        off - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SYSCONFIG__RSZA_CLK_EN__NEWENUM1 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SYSCONFIG__RSZA_CLK_EN__NEWENUM2
 *
 * @BRIEF        on - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SYSCONFIG__RSZA_CLK_EN__NEWENUM2 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SYSCONFIG__SOFTRESET__NEWENUM1
 *
 * @BRIEF        Normal mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SYSCONFIG__SOFTRESET__NEWENUM1   0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SYSCONFIG__SOFTRESET__NEWENUM2
 *
 * @BRIEF        The module is reset - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SYSCONFIG__SOFTRESET__NEWENUM2   0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SYSCONFIG__AUTOGATING__NEWENUM1
 *
 * @BRIEF        Clocks are free running - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SYSCONFIG__AUTOGATING__NEWENUM1  0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SYSCONFIG__AUTOGATING__NEWENUM2
 *
 * @BRIEF        Automatic clock gating strategy. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SYSCONFIG__AUTOGATING__NEWENUM2  0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SYSSTATUS__RESETDONE__NEWENUM1
 *
 * @BRIEF        Reset completed - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SYSSTATUS__RESETDONE__NEWENUM1   0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SYSSTATUS__RESETDONE__NEWENUM2
 *
 * @BRIEF        Reset ongoing. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SYSSTATUS__RESETDONE__NEWENUM2   0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_EN__EN__NEWENUM1
 *
 * @BRIEF        Disable - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_EN__EN__NEWENUM1             0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_EN__EN__NEWENUM2
 *
 * @BRIEF        Enable - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_EN__EN__NEWENUM2             0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_MODE__WRT__NEWENUM1
 *
 * @BRIEF        Disable - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_MODE__WRT__NEWENUM1          0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_MODE__WRT__NEWENUM2
 *
 * @BRIEF        Enable - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_MODE__WRT__NEWENUM2          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_MODE__OST__NEWENUM1
 *
 * @BRIEF        Free running - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_MODE__OST__NEWENUM1          0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_MODE__OST__NEWENUM2
 *
 * @BRIEF        One shot - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_MODE__OST__NEWENUM2          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_FMT0__BYPASS__NEWENUM1
 *
 * @BRIEF        Pass through off = normal output mode, the input data buffer 
 *               is used. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_FMT0__BYPASS__NEWENUM1       0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_FMT0__BYPASS__NEWENUM2
 *
 * @BRIEF        Pass through on = normal output mode, the input data buffer 
 *               is bypassed. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_FMT0__BYPASS__NEWENUM2       0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_FMT0__SEL__NEWENUM1
 *
 * @BRIEF        IPIPE - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_FMT0__SEL__NEWENUM1          0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_FMT0__SEL__SRC
 *
 * @BRIEF        IPIPEIF - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_FMT0__SEL__SRC               0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_FMT1__COL__NEWENUM1
 *
 * @BRIEF        Y data is input - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_FMT1__COL__NEWENUM1          0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_FMT1__COL__NEWENUM2
 *
 * @BRIEF        Chroma data is input - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_FMT1__COL__NEWENUM2          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_FMT1__IN420__NEWENUM1
 *
 * @BRIEF        YUV422 is input - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_FMT1__IN420__NEWENUM1        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_FMT1__IN420__NEWENUM2
 *
 * @BRIEF        YUV420 is input - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_FMT1__IN420__NEWENUM2        0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_FMT1__RAW__NEWENUM1
 *
 * @BRIEF        Flipping preserves YCbCr format - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_FMT1__RAW__NEWENUM1          0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SRC_FMT1__RAW__NEWENUM2
 *
 * @BRIEF        Flipping preserves RAW format - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SRC_FMT1__RAW__NEWENUM2          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_DMA_STA__STATUS__NEWENUM1
 *
 * @BRIEF        Not active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_DMA_STA__STATUS__NEWENUM1        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_DMA_STA__STATUS__NEWENUM2
 *
 * @BRIEF        Active - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_DMA_STA__STATUS__NEWENUM2        0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_GCK_MMR__MMR__NEWENUM1
 *
 * @BRIEF        Off - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_GCK_MMR__MMR__NEWENUM1           0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_GCK_MMR__MMR__NEWENUM2
 *
 * @BRIEF        On - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_GCK_MMR__MMR__NEWENUM2           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_GCK_SDR__CORE__NEWENUM1
 *
 * @BRIEF        Resizer core clock disabled. 
 *               Resizer in bypass mode if RSZ_SRC_FMT0.BYPASS = 0 
 *               Resizer in pass-through if RSZ_SRC_FMT0.BYPASS = 1 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_GCK_SDR__CORE__NEWENUM1          0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_GCK_SDR__CORE__NEWENUM2
 *
 * @BRIEF        Resizer core clock enabled. 
 *               Resizer in rescaling mode if RSZ_SRC_FMT0.BYPASS = 0 
 *               Resizer in pass-through if RSZ_SRC_FMT0.BYPASS = 1 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_GCK_SDR__CORE__NEWENUM2          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_YUV_PHS__POS__NEWENUM1
 *
 * @BRIEF        Same position with Luminance: cosited - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_YUV_PHS__POS__NEWENUM1           0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_YUV_PHS__POS__NEWENUM2
 *
 * @BRIEF        The middle of the luminance: centered - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_YUV_PHS__POS__NEWENUM2           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SEQ__CRV__NEWENUM1
 *
 * @BRIEF        Chroma sampling point is not changed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SEQ__CRV__NEWENUM1               0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SEQ__CRV__NEWENUM2
 *
 * @BRIEF        Chroma sampling point is changed from odd-numbered pixels to 
 *               even-number pixels. The pixel at the left end is removed and 
 *               the pixel at the right end is duplicated. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SEQ__CRV__NEWENUM2               0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SEQ__VRVB__NEWENUM1
 *
 * @BRIEF        Processed pixels are output in the order of input (normal 
 *               operation) in vertical direction. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SEQ__VRVB__NEWENUM1              0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SEQ__VRVB__NEWENUM2
 *
 * @BRIEF        The order of output data is flipped top to bottom. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SEQ__VRVB__NEWENUM2              0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SEQ__HRVB__NEWENUM1
 *
 * @BRIEF        Processed pixels are output in the order of input (normal 
 *               operation) in horizontal direction. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SEQ__HRVB__NEWENUM1              0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SEQ__HRVB__NEWENUM2
 *
 * @BRIEF        The order of output data is flipped left to right. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SEQ__HRVB__NEWENUM2              0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SEQ__VRVA__NEWENUM1
 *
 * @BRIEF        Processed pixels are output in the order of input (normal 
 *               operation) in vertical direction. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SEQ__VRVA__NEWENUM1              0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SEQ__VRVA__NEWENUM2
 *
 * @BRIEF        The order of output data is flipped top to bottom. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SEQ__VRVA__NEWENUM2              0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SEQ__HRVA__NEWENUM1
 *
 * @BRIEF        Processed pixels are output in the order of input (normal 
 *               operation) in horizontal direction. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SEQ__HRVA__NEWENUM1              0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RSZ_SEQ__HRVA__NEWENUM2
 *
 * @BRIEF        The order of output data is flipped left to right. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RSZ_SEQ__HRVA__NEWENUM2              0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_EN__EN__NEWENUM1
 *
 * @BRIEF        Disable - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_EN__EN__NEWENUM1                 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_EN__EN__NEWENUM2
 *
 * @BRIEF        Enable - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_EN__EN__NEWENUM2                 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_MODE__MODE__NEWENUM1
 *
 * @BRIEF        Free run - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_MODE__MODE__NEWENUM1             0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_MODE__MODE__NEWENUM2
 *
 * @BRIEF        One shot - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_MODE__MODE__NEWENUM2             0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_420__CEN__NEWENUM1
 *
 * @BRIEF        C output disable - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_420__CEN__NEWENUM1               0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_420__CEN__NEWENUM2
 *
 * @BRIEF        C output enable and 422to420 conversion enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_420__CEN__NEWENUM2               0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_420__YEN__NEWENUM1
 *
 * @BRIEF        Y output disable - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_420__YEN__NEWENUM1               0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_420__YEN__NEWENUM2
 *
 * @BRIEF        Y output enable and 422to420 conversion enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_420__YEN__NEWENUM2               0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_V_TYP__C__NEWENUM1
 *
 * @BRIEF        4-tap cubic convolution (default) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_V_TYP__C__NEWENUM1               0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_V_TYP__C__NEWENUM2
 *
 * @BRIEF        2-tap linear interpolation - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_V_TYP__C__NEWENUM2               0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_V_TYP__Y__NEWENUM1
 *
 * @BRIEF        4-tap cubic convolution (default) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_V_TYP__Y__NEWENUM1               0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_V_TYP__Y__NEWENUM2
 *
 * @BRIEF        2-tap linear interpolation - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_V_TYP__Y__NEWENUM2               0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_H_TYP__C__NEWENUM1
 *
 * @BRIEF        4-tap cubic convolution (default) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_H_TYP__C__NEWENUM1               0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_H_TYP__C__NEWENUM2
 *
 * @BRIEF        2-tap linear interpolation - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_H_TYP__C__NEWENUM2               0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_H_TYP__Y__NEWENUM1
 *
 * @BRIEF        4-tap cubic convolution (default) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_H_TYP__Y__NEWENUM1               0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_H_TYP__Y__NEWENUM2
 *
 * @BRIEF        2-tap linear interpolation - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_H_TYP__Y__NEWENUM2               0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_DWN_EN__DWN_EN__NEWENUM1
 *
 * @BRIEF        Off. Normal operation: upscale and downscale are allowed. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_DWN_EN__DWN_EN__NEWENUM1         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_DWN_EN__DWN_EN__NEWENUM2
 *
 * @BRIEF        On. Downscale mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_DWN_EN__DWN_EN__NEWENUM2         0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_RGB_EN__RGB_EN__NEWENUM1
 *
 * @BRIEF        Off (YCbCr output) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_RGB_EN__RGB_EN__NEWENUM1         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_RGB_EN__RGB_EN__NEWENUM2
 *
 * @BRIEF        On (RGB output) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_RGB_EN__RGB_EN__NEWENUM2         0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_RGB_TYP__MSK1__NEWENUM1
 *
 * @BRIEF        output the last 2 pixels - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_RGB_TYP__MSK1__NEWENUM1          0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_RGB_TYP__MSK1__NEWENUM2
 *
 * @BRIEF        mask the last 2 pixels (Resizer do not output them.) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_RGB_TYP__MSK1__NEWENUM2          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_RGB_TYP__MSK0__NEWENUM1
 *
 * @BRIEF        output the first 2 pixels - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_RGB_TYP__MSK0__NEWENUM1          0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_RGB_TYP__MSK0__NEWENUM2
 *
 * @BRIEF        mask the first 2 pixels (Resizer do not output them.) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_RGB_TYP__MSK0__NEWENUM2          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_RGB_TYP__TYP__NEWENUM1
 *
 * @BRIEF        32-bit output: alpha + R + G + B (8 bit each) 
 *               This mode comes with performance degradation. The maximum 
 *               input frequency in this mode is 160 MHz. This due to the 
 *               fact that the output is 4 bytes / pixel. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_RGB_TYP__TYP__NEWENUM1           0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZA_RGB_TYP__TYP__NEWENUM2
 *
 * @BRIEF        16-bit output: R(5 bit) + G (6 bit) + B (5 bit) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZA_RGB_TYP__TYP__NEWENUM2           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_EN__EN__NEWENUM1
 *
 * @BRIEF        Disable - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_EN__EN__NEWENUM1                 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_EN__EN__NEWENUM2
 *
 * @BRIEF        Enable - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_EN__EN__NEWENUM2                 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_MODE__MODE__NEWENUM1
 *
 * @BRIEF        Free run - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_MODE__MODE__NEWENUM1             0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_MODE__MODE__NEWENUM2
 *
 * @BRIEF        One shot - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_MODE__MODE__NEWENUM2             0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_420__CEN__NEWENUM1
 *
 * @BRIEF        C output disable - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_420__CEN__NEWENUM1               0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_420__CEN__NEWENUM2
 *
 * @BRIEF        C output enable and 422to420 conversion enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_420__CEN__NEWENUM2               0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_420__YEN__NEWENUM1
 *
 * @BRIEF        Y output disable - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_420__YEN__NEWENUM1               0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_420__YEN__NEWENUM2
 *
 * @BRIEF        Y output enable and 422to420 conversion enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_420__YEN__NEWENUM2               0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_V_TYP__C__NEWENUM1
 *
 * @BRIEF        4-tap cubic convolution (default) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_V_TYP__C__NEWENUM1               0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_V_TYP__C__NEWENUM2
 *
 * @BRIEF        2-tap linear interpolation - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_V_TYP__C__NEWENUM2               0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_V_TYP__Y__NEWENUM1
 *
 * @BRIEF        4-tap cubic convolution (default) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_V_TYP__Y__NEWENUM1               0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_V_TYP__Y__NEWENUM2
 *
 * @BRIEF        2-tap linear interpolation - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_V_TYP__Y__NEWENUM2               0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_H_TYP__C__NEWENUM1
 *
 * @BRIEF        4-tap cubic convolution (default) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_H_TYP__C__NEWENUM1               0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_H_TYP__C__NEWENUM2
 *
 * @BRIEF        2-tap linear interpolation - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_H_TYP__C__NEWENUM2               0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_H_TYP__Y__NEWENUM1
 *
 * @BRIEF        4-tap cubic convolution (default) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_H_TYP__Y__NEWENUM1               0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_H_TYP__Y__NEWENUM2
 *
 * @BRIEF        2-tap linear interpolation - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_H_TYP__Y__NEWENUM2               0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_DWN_EN__DWN_EN__NEWENUM1
 *
 * @BRIEF        Off. Normal operation: upscale and downscale are allowed. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_DWN_EN__DWN_EN__NEWENUM1         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_DWN_EN__DWN_EN__NEWENUM2
 *
 * @BRIEF        On. Downscale mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_DWN_EN__DWN_EN__NEWENUM2         0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_RGB_EN__RGB_EN__NEWENUM1
 *
 * @BRIEF        Off (YCbCr output) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_RGB_EN__RGB_EN__NEWENUM1         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_RGB_EN__RGB_EN__NEWENUM2
 *
 * @BRIEF        On (RGB output) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_RGB_EN__RGB_EN__NEWENUM2         0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_RGB_TYP__MSK1__NEWENUM1
 *
 * @BRIEF        output the last 2 pixels - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_RGB_TYP__MSK1__NEWENUM1          0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_RGB_TYP__MSK1__NEWENUM2
 *
 * @BRIEF        mask the last 2 pixels (Resizer do not output them.) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_RGB_TYP__MSK1__NEWENUM2          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_RGB_TYP__MSK0__NEWENUM1
 *
 * @BRIEF        output the first 2 pixels - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_RGB_TYP__MSK0__NEWENUM1          0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_RGB_TYP__MSK0__NEWENUM2
 *
 * @BRIEF        mask the first 2 pixels (Resizer do not output them.) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_RGB_TYP__MSK0__NEWENUM2          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_RGB_TYP__TYP__NEWENUM1
 *
 * @BRIEF        32-bit output: alpha + R + G + B (8 bit each) 
 *               This mode comes with performance degradation. The maximum 
 *               input frequency in this mode is 160 MHz. This due to the 
 *               fact that the output is 4 bytes / pixel. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_RGB_TYP__TYP__NEWENUM1           0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   RESIZER__RZB_RGB_TYP__TYP__NEWENUM2
 *
 * @BRIEF        16-bit output: R(5 bit) + G (6 bit) + B (5 bit) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define RESIZER__RZB_RGB_TYP__TYP__NEWENUM2           0x1ul

#ifdef __cplusplus
}
#endif
#endif                                                     /* __RESIZER_CRED_H 
                                                            */
