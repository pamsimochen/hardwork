/** ==================================================================
 *  @file   icont_cfgreg_cred.h                                                  
 *                                                                    
 *  @path   /ti/psp/iss/hal/cred_cram/cred/inc/cortexm3_sys_ape/                                                  
 *                                                                    
 *  @desc   This  File contains.                                      
 * ===================================================================
 *  Copyright (c) Texas Instruments Inc 2011, 2012                    
 *                                                                    
 *  Use of this software is controlled by the terms and conditions found
 *  in the license agreement under which this software has been supplied
 * ===================================================================*/

/* ============================================================================ 
 * TEXAS INSTRUMENTS INCORPORATED PROPRIETARY INFORMATION Property of Texas
 * Instruments For Unrestricted Internal Use Only Unauthorized reproduction
 * and/or distribution is strictly prohibited.  This product is protected
 * under copyright law and trade secret law as an unpublished work.  Created
 * 2008, (C) Copyright 2008 Texas Instruments.  All rights reserved. */

/**
 *  @Component:   ICONT_CFGREG
 *
 *  @Filename:    icont_cfgreg_cred.h
 *
 *  @Description: ICONT Configuration registers 
 *
 *  Generated by: Socrates CRED generator prototype
 *
    *//* ====================================================================== */

#ifndef __ICONT_CFGREG_CRED_H
#define __ICONT_CFGREG_CRED_H

#ifdef __cplusplus
extern "C" {
#endif

    /* 
     * Instance ICONT1_MMR__CFG of component ICONT_CFGREG mapped in MONICA at address 0x5A070000
     * Instance ICONT2_MMR__CFG of component ICONT_CFGREG mapped in MONICA at address 0x5A071000
     */

                                                                              /*-------------------------------------------------------------------------*//**
 * @DEFINITION   BITFIELD
 *
 * @BRIEF        The bitfield must be defined according to register width
 *               of the component - 64/32/16/8
 *
    *//*------------------------------------------------------------------------ */
#undef BITFIELD
#define BITFIELD BITFIELD_32

    /* 
     *  List of Register arrays for component ICONT_CFGREG
     *
     */

    /* 
     *  List of bundle arrays for component ICONT_CFGREG
     *
     */

    /* 
     *  List of bundles for component ICONT_CFGREG
     *
     */

    /* 
     * List of registers for component ICONT_CFGREG
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_REVISION
 *
 * @BRIEF        ICONT Revision Identifier (X.Y.R) 
 *               Used by software to track features, bugs, and compatibility 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_REVISION                       0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_HWINFO
 *
 * @BRIEF        Information about the IP module's hardware configuration. 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_HWINFO                         0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_SYSCONFIG
 *
 * @BRIEF        Clock management configuration 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_SYSCONFIG                      0x10ul

    /* 
     * List of register bitfields for component ICONT_CFGREG
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_REVISION__SCHEME   
 *
 * @BRIEF        Used to distinguish between old scheme and current. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_REVISION__SCHEME          BITFIELD(31, 30)
#define ICONT_CFGREG__ICONT_REVISION__SCHEME__POS     30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_REVISION__FUNC   
 *
 * @BRIEF        Function indicates a software compatible module family.   
 *               If there is no level of software compatibility a new Func 
 *               number (and hence REVISION) should be assigned. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_REVISION__FUNC            BITFIELD(27, 16)
#define ICONT_CFGREG__ICONT_REVISION__FUNC__POS       16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_REVISION__R_RTL   
 *
 * @BRIEF        RTL Version (R), maintained by IP design owner.  
 *               RTL follows a numbering such as X.Y.R.Z which are explained 
 *               in this table.  
 *               R changes ONLY when:  
 *               (1) PDS uploads occur which may have been due to spec 
 *               changes  
 *               (2) Bug fixes occur  
 *               (3) Resets to '0' when X or Y changes.  
 *               Design team has an internal 'Z' (customer invisible) number 
 *               which increments on every drop that happens due to DV and 
 *               RTL updates. Z resets to 0 when R increments. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_REVISION__R_RTL           BITFIELD(15, 11)
#define ICONT_CFGREG__ICONT_REVISION__R_RTL__POS      11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_REVISION__X_MAJOR   
 *
 * @BRIEF        Major Revision (X), maintained by IP specification owner.  
 *               X changes ONLY when:  
 *               (1) There is a major feature addition. An example would be 
 *               adding Master Mode to Utopia Level2. The Func field (or 
 *               Class/Type in old PID format) will remain the same.  
 *               X does NOT change due to:  
 *               (1) Bug fixes  
 *               (2) Change in feature parameters. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_REVISION__X_MAJOR         BITFIELD(10, 8)
#define ICONT_CFGREG__ICONT_REVISION__X_MAJOR__POS    8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_REVISION__CUSTOM   
 *
 * @BRIEF        Indicates a special version for a particular device. 
 *               Consequence of use may avoid use of standard Chip Support 
 *               Library (CSL) / Drivers. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_REVISION__CUSTOM          BITFIELD(7, 6)
#define ICONT_CFGREG__ICONT_REVISION__CUSTOM__POS     6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_REVISION__Y_MINOR   
 *
 * @BRIEF        Minor Revision (Y), maintained by IP specification owner.  
 *               Y changes ONLY when:  
 *               (1) Features are scaled (up or down). Flexibility exists in 
 *               that this feature scalability may either be represented in 
 *               the Y change or a specific register in the IP that indicates 
 *               which features are exactly available.  
 *               (2) When feature creeps from Is-Not list to Is list. But 
 *               this may not be the case once it sees silicon; in which case 
 *               X will change.  
 *               Y does NOT change due to:  
 *               (1) Bug fixes  
 *               (2) Typos or clarifications  
 *               (3) major functional/feature change/addition/deletion. 
 *               Instead these changes may be reflected via R, S, X as 
 *               applicable.  
 *               Spec owner maintains a customer-invisible number 'S' which 
 *               changes due to:  
 *               (1) Typos/clarifications  
 *               (2) Bug documentation. Note that this bug is not due to a 
 *               spec change but due to implementation. Nevertheless, the 
 *               spec tracks the IP bugs. An RTL release (say for silicon 
 *               PG1.1) that occurs due to bug fix should document the 
 *               corresponding spec number (X.Y.S) in its release notes. - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_REVISION__Y_MINOR         BITFIELD(5, 0)
#define ICONT_CFGREG__ICONT_REVISION__Y_MINOR__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_HWINFO__NB_LCH   
 *
 * @BRIEF        Number of Data Mover Logical channel - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_HWINFO__NB_LCH            BITFIELD(23, 20)
#define ICONT_CFGREG__ICONT_HWINFO__NB_LCH__POS       20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_HWINFO__NB_TASK   
 *
 * @BRIEF        Number of Syncbox tasks - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_HWINFO__NB_TASK           BITFIELD(19, 16)
#define ICONT_CFGREG__ICONT_HWINFO__NB_TASK__POS      16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_HWINFO__DTCM_SIZE   
 *
 * @BRIEF        Size of DTCM memory (in kBytes) - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_HWINFO__DTCM_SIZE         BITFIELD(15, 8)
#define ICONT_CFGREG__ICONT_HWINFO__DTCM_SIZE__POS    8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_HWINFO__ICTM_SIZE   
 *
 * @BRIEF        Size of ITCM memory (in kBytes) - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_HWINFO__ICTM_SIZE         BITFIELD(7, 0)
#define ICONT_CFGREG__ICONT_HWINFO__ICTM_SIZE__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_SYSCONFIG__STANDBYMODE   
 *
 * @BRIEF        Configuration of the local initiator state management mode. 
 *               By definition, initiator may generate read/write transaction 
 *               as long as it is out of STANDBY state. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_SYSCONFIG__STANDBYMODE    BITFIELD(5, 4)
#define ICONT_CFGREG__ICONT_SYSCONFIG__STANDBYMODE__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_SYSCONFIG__IDLEMODE   
 *
 * @BRIEF        Configuration of the local target state management mode. 
 *               By definition, target can handle read/write transaction as 
 *               long as it is out of IDLE state. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_SYSCONFIG__IDLEMODE       BITFIELD(3, 2)
#define ICONT_CFGREG__ICONT_SYSCONFIG__IDLEMODE__POS  2

    /* 
     * List of register bitfields values for component ICONT_CFGREG
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_REVISION__SCHEME__LEGACY
 *
 * @BRIEF        Legacy ASP or WTBU scheme - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_REVISION__SCHEME__LEGACY  0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_REVISION__SCHEME__H08
 *
 * @BRIEF        Highlander 0.8 scheme - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_REVISION__SCHEME__H08     0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_REVISION__CUSTOM__STANDARD
 *
 * @BRIEF        Non custom (standard) revision - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_REVISION__CUSTOM__STANDARD 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_SYSCONFIG__STANDBYMODE__FORCE
 *
 * @BRIEF        Force-standby mode: local initiator is unconditionally 
 *               placed in standby state. 
 *               Backup mode, for debug only. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_SYSCONFIG__STANDBYMODE__FORCE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_SYSCONFIG__STANDBYMODE__NO
 *
 * @BRIEF        No-standby mode: local initiator is unconditionally placed 
 *               out of standby state. 
 *               Backup mode, for debug only. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_SYSCONFIG__STANDBYMODE__NO 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_SYSCONFIG__STANDBYMODE__SMART
 *
 * @BRIEF        Smart-standby mode: local initiator standby status depends 
 *               on local conditions, i.e. the module's functional 
 *               requirement from the initiator. 
 *               IP module shall not generate (initiator-related) wakeup 
 *               events. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_SYSCONFIG__STANDBYMODE__SMART 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_SYSCONFIG__IDLEMODE__FORCE
 *
 * @BRIEF        Force-idle mode: local target's idle state follows 
 *               (acknowledges) the system's idle requests unconditionally, 
 *               i.e. regardless of the IP module's internal requirements. 
 *               Backup mode, for debug only. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_SYSCONFIG__IDLEMODE__FORCE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_SYSCONFIG__IDLEMODE__NO
 *
 * @BRIEF        No-idle mode: local target never enters idle state. 
 *               Backup mode, for debug only. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_SYSCONFIG__IDLEMODE__NO   0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   ICONT_CFGREG__ICONT_SYSCONFIG__IDLEMODE__SMART
 *
 * @BRIEF        Smart-idle mode: local target's idle state eventually 
 *               follows (acknowledges) the system's idle requests, depending 
 *               on the IP module's internal requirements. 
 *               IP module shall not generate (IRQ- or DMA-request-related) 
 *               wakeup events. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define ICONT_CFGREG__ICONT_SYSCONFIG__IDLEMODE__SMART 0x2ul

#ifdef __cplusplus
}
#endif
#endif                                                     /* __ICONT_CFGREG_CRED_H 
                                                            */
