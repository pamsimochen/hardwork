/** ==================================================================
 *  @file   shaeip75t_cred.h                                                  
 *                                                                    
 *  @path   /ti/psp/iss/hal/cred_cram/cred/inc/cortexm3_sys_ape/                                                  
 *                                                                    
 *  @desc   This  File contains.                                      
 * ===================================================================
 *  Copyright (c) Texas Instruments Inc 2011, 2012                    
 *                                                                    
 *  Use of this software is controlled by the terms and conditions found
 *  in the license agreement under which this software has been supplied
 * ===================================================================*/

/* ============================================================================ 
 * TEXAS INSTRUMENTS INCORPORATED PROPRIETARY INFORMATION Property of Texas
 * Instruments For Unrestricted Internal Use Only Unauthorized reproduction
 * and/or distribution is strictly prohibited.  This product is protected
 * under copyright law and trade secret law as an unpublished work.  Created
 * 2008, (C) Copyright 2008 Texas Instruments.  All rights reserved. */

/**
 *  @Component:   SHAEIP75T
 *
 *  @Filename:    shaeip75t_cred.h
 *
 *  @Description: Component description is not available
 *
 *  Generated by: Socrates CRED generator prototype
 *
    *//* ====================================================================== */

#ifndef __SHAEIP75T_CRED_H
#define __SHAEIP75T_CRED_H

#ifdef __cplusplus
extern "C" {
#endif

    /* 
     * Instance SHAEIP75T1 of component SHAEIP75T mapped in MONICA at address 0x4B000000
     */

                                                                              /*-------------------------------------------------------------------------*//**
 * @DEFINITION   BITFIELD
 *
 * @BRIEF        The bitfield must be defined according to register width
 *               of the component - 64/32/16/8
 *
    *//*------------------------------------------------------------------------ */
#undef BITFIELD
#define BITFIELD BITFIELD_32

    /* 
     *  List of Register arrays for component SHAEIP75T
     *
     */

    /* 
     *  List of bundle arrays for component SHAEIP75T
     *
     */

    /* 
     *  List of bundles for component SHAEIP75T
     *
     */

    /* 
     * List of registers for component SHAEIP75T
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_ODIGEST_A
 *
 * @BRIEF        WRITE: Outer Digest [127:96] for MD5, [159:128] for SHA-1, 
 *               [255:224] for SHA-2 / HMAC Key [31:0] for HMAC key proc 
 *               READ: Outer Digest [127:96] for MD5, [159:128] for SHA-1, 
 *               [255:224] for SHA-2 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_ODIGEST_A                         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_ODIGEST_B
 *
 * @BRIEF        WRITE: Outer Digest [95:64] for MD5, [127:96] for SHA-1, 
 *               [223:192] for SHA-2 / HMAC Key [63:32] for HMAC key proc 
 *               READ: Outer Digest [95:64] for MD5 [127:96] for SHA-1,  
 *               [223:192] for SHA-2 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_ODIGEST_B                         0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_ODIGEST_C
 *
 * @BRIEF        WRITE: Outer Digest [63:32] for MD5, [95:64] for SHA-1, 
 *               [191:160] for SHA-2 / HMAC Key [95:64] for HMAC key proc 
 *               READ: Outer Digest [63:32] for MD5 [95:64] for SHA-1,  
 *               [191:160] for SHA-2 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_ODIGEST_C                         0x8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_ODIGEST_D
 *
 * @BRIEF        WRITE: Outer Digest [31:0] for MD5 [63:31] for SHA-1, 
 *               [159:128] for SHA-2 / HMAC Key [127:96] for HMAC key proc 
 *               READ: Outer Digest [31:0] for MD5 [63:32] for SHA-1,  
 *               [159:128] for SHA-2 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_ODIGEST_D                         0xCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_ODIGEST_E
 *
 * @BRIEF        WRITE: Outer Digest [31:0] for SHA-1, [127:96] for SHA-2 / 
 *               HMAC Key [159:128] for HMAC key proc 
 *               READ: Outer Digest [31:0] for SHA-1, [127:96] for SHA-2 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_ODIGEST_E                         0x10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_ODIGEST_F
 *
 * @BRIEF        WRITE: Outer Digest [95:64] for SHA-2 / HMAC Key [191:160] 
 *               for HMAC key proc 
 *               READ: Outer Digest [95:64] for SHA-2 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_ODIGEST_F                         0x14ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_ODIGEST_G
 *
 * @BRIEF        WRITE: Outer Digest [63:32] for SHA-2 / HMAC Key [223:192] 
 *               for HMAC key proc 
 *               READ: Outer Digest [63:32] for SHA-2 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_ODIGEST_G                         0x18ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_ODIGEST_H
 *
 * @BRIEF        WRITE: Outer Digest [31:0] for SHA-2 / HMAC Key [255:224] 
 *               for HMAC key proc 
 *               READ: Outer Digest [31:0] for SHA-2 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_ODIGEST_H                         0x1Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IDIGEST_A
 *
 * @BRIEF        WRITE: Inner / Initial Digest [127:96] for MD5 [159:128] for 
 *               SHA-1, [255:224] for SHA-2 / HMAC Key [287:256] for HMAC key 
 *               proc 
 *               READ: Intermediate / Inner Digest [127:96] for MD5 [159:128] 
 *               for SHA-1, [255:224] for SHA-2 / 
 *               Result Digest/MAC [127:96] for MD5 [159:128] for SHA-1, 
 *               [223:192] for SHA-2 224, [255:224] for SHA-2 256 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IDIGEST_A                         0x20ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IDIGEST_B
 *
 * @BRIEF        WRITE: Inner / Initial Digest [95:64] for MD5 [127:96] for 
 *               SHA-1, [223:192] for SHA-2 / HMAC Key [319:288] for HMAC key 
 *               proc 
 *               READ: Intermediate / Inner Digest [95:64] for MD5 [127:96] 
 *               for SHA-1, [223:192] for SHA-2 / 
 *               Result Digest/MAC [95:64] for MD5 [127:96] for SHA-1, 
 *               [191:160] for SHA-2 224, [223:192] for SHA-2 256 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IDIGEST_B                         0x24ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IDIGEST_C
 *
 * @BRIEF        WRITE: Inner / Initial Digest [63:32] for MD5 [95:64] for 
 *               SHA-1, [191:160] for SHA- 2 / HMAC Key [351:320] for HMAC 
 *               key proc 
 *               READ: Intermediate / Inner Digest [63:32] for MD5 [95:64] 
 *               for SHA-1, [191:160] for SHA-2 / 
 *               Result Digest/MAC [63:32] for MD5 [95:64] for SHA-1, 
 *               [159:128] for SHA-2 224, [191:160] for SHA-2 256 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IDIGEST_C                         0x28ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IDIGEST_D
 *
 * @BRIEF        WRITE: Inner / Initial Digest [31:0] for MD5 [63:32] for 
 *               SHA-1, [159:128] for SHA-2 / HMAC Key [383:352] for HMAC key 
 *               proc 
 *               READ: Intermediate / Inner Digest [31:0] for MD5 [63:32] for 
 *               SHA-1, [159:128] for SHA-2 / 
 *               Result Digest/MAC [31:0] for MD5 [63:32] for SHA-1, [127:96] 
 *               for SHA-2 224, [159:128] for SHA-2 256 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IDIGEST_D                         0x2Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IDIGEST_E
 *
 * @BRIEF        WRITE: Inner / Initial Digest [31:0] for SHA-1, [127:96] for 
 *               SHA-2 / HMAC Key [415:384] for HMAC key proc 
 *               READ: Intermediate / Inner Digest [31:0] for SHA-1, [127:96] 
 *               for SHA-2 / 
 *               Result Digest/MAC [31:0] for SHA-1, [95:64] for SHA-2 224, 
 *               [127:96] for SHA-2 256 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IDIGEST_E                         0x30ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IDIGEST_F
 *
 * @BRIEF        WRITE: Inner / Initial Digest [95:64] for SHA-2 / HMAC Key 
 *               [447:416] for HMAC key proc 
 *               READ: Intermediate / Inner Digest [95:64] for SHA-2 / 
 *               Result Digest/MAC [63:32] for SHA-2 224, [95:64] for SHA-2 
 *               256 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IDIGEST_F                         0x34ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IDIGEST_G
 *
 * @BRIEF        WRITE: Inner / Initial Digest [63:32] for SHA-2 / HMAC Key 
 *               [479:448] for HMAC key proc 
 *               READ: Intermediate / Inner Digest [63:32] for SHA-2 / 
 *               Result Digest/MAC [31:0] for SHA-2 224, [63:32] for SHA-2 
 *               256 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IDIGEST_G                         0x38ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IDIGEST_H
 *
 * @BRIEF        WRITE: Inner / Initial Digest [31:0] for SHA-2 / HMAC Key 
 *               [511:480] for HMAC key proc 
 *               READ: Intermediate / Inner Digest [31:0] for SHA-2 / 
 *               Result Digest/MAC [31:0] for SHA-2 256 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IDIGEST_H                         0x3Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DIGEST_COUNT
 *
 * @BRIEF        WRITE: Initial Digest Count ([31:6] only, [5:0] assumed 0) 
 *               READ: Result / IntermediateDigest Count 
 *               The initial digest byte count for hash/HMAC continue 
 *               operations (HMAC Key Processing = 0 and Use Algorithm 
 *               Constants = 0) on the Secure World must be written to this 
 *               register prior to starting the operation by writing to 
 *               SHA_S_MODE. When either HMAC Key Processing is 1 or Use 
 *               Algorithm Constants is 1, this register does not need to be 
 *               written, it will be overwritten with 64 (1 hash block of key 
 *               XOR ipad) or 0 respectively, automatically. 
 *               When starting a HMAC operation from pre-computes (HMAC Key 
 *               Processing is 0), then the value 64 must be written here to 
 *               compensate for the appended key XOR ipad block. 
 *               Note that the value written should always be a 64 byte 
 *               multiple, the lower 6 bits written are ignored. 
 *               The updated digest byte count (initial digest byte count + 
 *               bytes processed) can be read from this register when the 
 *               status register indicates that the operation is done or 
 *               suspended due to a context switch request, or when a Secure 
 *               World context out DMA is requested. 
 *               In Advanced DMA mode, when not suspended with a partial 
 *               result, reading the SHA_S_DIGEST_COUNT register triggers the 
 *               Hash/HMAC Engine to start the next context input DMA. 
 *               Therefore, reading the SHA_S_DIGEST_COUNT register should 
 *               always be the last context-read action if not suspended with 
 *               a partial result (i.e. PartHashReady interrupt not pending). 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DIGEST_COUNT                      0x40ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_MODE
 *
 * @BRIEF        Register SHA_MODE 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_MODE                              0x44ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_LENGTH
 *
 * @BRIEF        WRITE: Block Length / Remaining Byte Count (bytes) 
 *               READ: Remaining Byte Count. 
 *               The value programmed MUST be a 64-byte multiple if Close 
 *               Hash is set to 0. 
 *               This register is also the trigger to start processing: once 
 *               this register is written, the core will commence requesting 
 *               input data via DMA or IRQ (if programmed length > 0) and 
 *               start processing. 
 *               The remaining byte count for the active operation can be 
 *               read from this register when the interrupt status register 
 *               indicates that the operation is suspended due to a context 
 *               switch request. 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_LENGTH                            0x48ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA0_IN
 *
 * @BRIEF        Data input message 0 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA0_IN                          0x80ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA1_IN
 *
 * @BRIEF        Data input message 1 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA1_IN                          0x84ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA2_IN
 *
 * @BRIEF        Data input message 2 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA2_IN                          0x88ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA3_IN
 *
 * @BRIEF        Data input message 3 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA3_IN                          0x8Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA4_IN
 *
 * @BRIEF        Data input message 4 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA4_IN                          0x90ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA5_IN
 *
 * @BRIEF        Data input message 5 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA5_IN                          0x94ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA6_IN
 *
 * @BRIEF        Data input message 6 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA6_IN                          0x98ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA7_IN
 *
 * @BRIEF        Data input message 7 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA7_IN                          0x9Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA8_IN
 *
 * @BRIEF        Data input message 8 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA8_IN                          0xA0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA9_IN
 *
 * @BRIEF        Data input message 9 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA9_IN                          0xA4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA10_IN
 *
 * @BRIEF        Data input message 10 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA10_IN                         0xA8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA11_IN
 *
 * @BRIEF        Data input message 11 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA11_IN                         0xACul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA12_IN
 *
 * @BRIEF        Data input message 12 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA12_IN                         0xB0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA13_IN
 *
 * @BRIEF        Data input message 13 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA13_IN                         0xB4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA14_IN
 *
 * @BRIEF        Data input message 14 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA14_IN                         0xB8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA15_IN
 *
 * @BRIEF        Data input message 15 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA15_IN                         0xBCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_REVISION
 *
 * @BRIEF        Register SHA_REVISION 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_REVISION                          0x100ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_SYSCONFIG
 *
 * @BRIEF        Register SHA_SYSCONFIG 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_SYSCONFIG                         0x110ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_SYSSTATUS
 *
 * @BRIEF        Register SHA_SYSSTATUS 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_SYSSTATUS                         0x114ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IRQSTATUS
 *
 * @BRIEF        Register SHA_IRQSTATUS 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IRQSTATUS                         0x118ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IRQENABLE
 *
 * @BRIEF        Register SHA_IRQENABLE. 
 *               The SHA_S_IRQENABLE register contains an enable bit for each 
 *               unique interrupt for the secure side. An interrupt is 
 *               enabled when both the global enable in SHA_S_SYSCONFIG 
 *               (SIT_en) and the bit in this register are both set to 1. An 
 *               interrupt that is enabled is propagated to the SINTREQUEST_S 
 *               output. Please note that the dedicated partial hash output 
 *               (SINTREQUEST_PART_S) is not affected by this register, it is 
 *               only affected by the global enable S_HASH_SYSCONFIG 
 *               (SIT_en). 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IRQENABLE                         0x11Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_XSSTATUS
 *
 * @BRIEF        Register SHA_XSSTATUS 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_XSSTATUS                          0x140ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_LOCKDOWN
 *
 * @BRIEF        Register SHA_S_LOCKDOWN. 
 *               The SHA_S_LOCKDOWN register contains 'lock' bits that, when 
 *               set, prevent certain Public World context and control fields 
 *               from being overwritten. Since only the Secure World can 
 *               access the S_HASH_LOCKDOWN register, this prevents the 
 *               Public World from touching these fields. 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_LOCKDOWN                          0x144ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_ODIGEST_A
 *
 * @BRIEF        WRITE: Outer Digest [127:96] for MD5, [159:128] for SHA-1, 
 *               [255:224] for SHA-2 / HMAC Key [31:0] for HMAC key proc 
 *               READ: Outer Digest [127:96] for MD5, [159:128] for SHA-1, 
 *               [255:224] for SHA-2 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_ODIGEST_A                         0x100000ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_ODIGEST_B
 *
 * @BRIEF        WRITE: Outer Digest [95:64] for MD5, [127:96] for SHA-1, 
 *               [223:192] for SHA-2 / HMAC Key [63:32] for HMAC key proc 
 *               READ: Outer Digest [95:64] for MD5 [127:96] for SHA-1,  
 *               [223:192] for SHA-2 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_ODIGEST_B                         0x100004ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_ODIGEST_C
 *
 * @BRIEF        WRITE: Outer Digest [63:32] for MD5, [95:64] for SHA-1, 
 *               [191:160] for SHA-2 / HMAC Key [95:64] for HMAC key proc 
 *               READ: Outer Digest [63:32] for MD5 [95:64] for SHA-1,  
 *               [191:160] for SHA-2 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_ODIGEST_C                         0x100008ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_ODIGEST_D
 *
 * @BRIEF        WRITE: Outer Digest [31:0] for MD5 [63:31] for SHA-1, 
 *               [159:128] for SHA-2 / HMAC Key [127:96] for HMAC key proc 
 *               READ: Outer Digest [31:0] for MD5 [63:32] for SHA-1,  
 *               [159:128] for SHA-2 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_ODIGEST_D                         0x10000Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_ODIGEST_E
 *
 * @BRIEF        WRITE: Outer Digest [31:0] for SHA-1, [127:96] for SHA-2 / 
 *               HMAC Key [159:128] for HMAC key proc 
 *               READ: Outer Digest [31:0] for SHA-1, [127:96] for SHA-2 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_ODIGEST_E                         0x100010ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_ODIGEST_F
 *
 * @BRIEF        WRITE: Outer Digest [95:64] for SHA-2 / HMAC Key [191:160] 
 *               for HMAC key proc 
 *               READ: Outer Digest [95:64] for SHA-2 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_ODIGEST_F                         0x100014ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_ODIGEST_G
 *
 * @BRIEF        WRITE: Outer Digest [63:32] for SHA-2 / HMAC Key [223:192] 
 *               for HMAC key proc 
 *               READ: Outer Digest [63:32] for SHA-2 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_ODIGEST_G                         0x100018ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_ODIGEST_H
 *
 * @BRIEF        WRITE: Outer Digest [31:0] for SHA-2 / HMAC Key [255:224] 
 *               for HMAC key proc 
 *               READ: Outer Digest [31:0] for SHA-2 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_ODIGEST_H                         0x10001Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IDIGEST_A
 *
 * @BRIEF        WRITE: Inner / Initial Digest [127:96] for MD5 [159:128] for 
 *               SHA-1, [255:224] for SHA-2 / HMAC Key [287:256] for HMAC key 
 *               proc 
 *               READ: Intermediate / Inner Digest [127:96] for MD5 [159:128] 
 *               for SHA-1, [255:224] for SHA-2 / 
 *               Result Digest/MAC [127:96] for MD5 [159:128] for SHA-1, 
 *               [223:192] for SHA-2 224, [255:224] for SHA-2 256 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IDIGEST_A                         0x100020ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IDIGEST_B
 *
 * @BRIEF        WRITE: Inner / Initial Digest [95:64] for MD5 [127:96] for 
 *               SHA-1, [223:192] for SHA-2 / HMAC Key [319:288] for HMAC key 
 *               proc 
 *               READ: Intermediate / Inner Digest [95:64] for MD5 [127:96] 
 *               for SHA-1, [223:192] for SHA-2 / 
 *               Result Digest/MAC [95:64] for MD5 [127:96] for SHA-1, 
 *               [191:160] for SHA-2 224, [223:192] for SHA-2 256 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IDIGEST_B                         0x100024ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IDIGEST_C
 *
 * @BRIEF        WRITE: Inner / Initial Digest [63:32] for MD5 [95:64] for 
 *               SHA-1, [191:160] for SHA- 2 / HMAC Key [351:320] for HMAC 
 *               key proc 
 *               READ: Intermediate / Inner Digest [63:32] for MD5 [95:64] 
 *               for SHA-1, [191:160] for SHA-2 / 
 *               Result Digest/MAC [63:32] for MD5 [95:64] for SHA-1, 
 *               [159:128] for SHA-2 224, [191:160] for SHA-2 256 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IDIGEST_C                         0x100028ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IDIGEST_D
 *
 * @BRIEF        WRITE: Inner / Initial Digest [31:0] for MD5 [63:32] for 
 *               SHA-1, [159:128] for SHA-2 / HMAC Key [383:352] for HMAC key 
 *               proc 
 *               READ: Intermediate / Inner Digest [31:0] for MD5 [63:32] for 
 *               SHA-1, [159:128] for SHA-2 / 
 *               Result Digest/MAC [31:0] for MD5 [63:32] for SHA-1, [127:96] 
 *               for SHA-2 224, [159:128] for SHA-2 256 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IDIGEST_D                         0x10002Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IDIGEST_E
 *
 * @BRIEF        WRITE: Inner / Initial Digest [31:0] for SHA-1, [127:96] for 
 *               SHA-2 / HMAC Key [415:384] for HMAC key proc 
 *               READ: Intermediate / Inner Digest [31:0] for SHA-1, [127:96] 
 *               for SHA-2 / 
 *               Result Digest/MAC [31:0] for SHA-1, [95:64] for SHA-2 224, 
 *               [127:96] for SHA-2 256 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IDIGEST_E                         0x100030ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IDIGEST_F
 *
 * @BRIEF        WRITE: Inner / Initial Digest [95:64] for SHA-2 / HMAC Key 
 *               [447:416] for HMAC key proc 
 *               READ: Intermediate / Inner Digest [95:64] for SHA-2 / 
 *               Result Digest/MAC [63:32] for SHA-2 224, [95:64] for SHA-2 
 *               256 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IDIGEST_F                         0x100034ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IDIGEST_G
 *
 * @BRIEF        WRITE: Inner / Initial Digest [63:32] for SHA-2 / HMAC Key 
 *               [479:448] for HMAC key proc 
 *               READ: Intermediate / Inner Digest [63:32] for SHA-2 / 
 *               Result Digest/MAC [31:0] for SHA-2 224, [63:32] for SHA-2 
 *               256 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IDIGEST_G                         0x100038ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IDIGEST_H
 *
 * @BRIEF        WRITE: Inner / Initial Digest [31:0] for SHA-2 / HMAC Key 
 *               [511:480] for HMAC key proc 
 *               READ: Intermediate / Inner Digest [31:0] for SHA-2 / 
 *               Result Digest/MAC [31:0] for SHA-2 256 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IDIGEST_H                         0x10003Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DIGEST_COUNT
 *
 * @BRIEF        WRITE: Initial Digest Count ([31:6] only, [5:0] assumed 0) 
 *               READ: Result / IntermediateDigest Count 
 *               The initial digest byte count for hash/HMAC continue 
 *               operations (HMAC Key Processing = 0 and Use Algorithm 
 *               Constants = 0) on the Secure World must be written to this 
 *               register prior to starting the operation by writing to 
 *               S_HASH_MODE. When either HMAC Key Processing is 1 or Use 
 *               Algorithm Constants is 1, this register does not need to be 
 *               written, it will be overwritten with 64 (1 hash block of key 
 *               XOR ipad) or 0 respectively, automatically. 
 *               When starting a HMAC operation from pre-computes (HMAC Key 
 *               Processing is 0), then the value 64 must be written here to 
 *               compensate for the appended key XOR ipad block. 
 *               Note that the value written should always be a 64 byte 
 *               multiple, the lower 6 bits written are ignored. 
 *               The updated digest byte count (initial digest byte count + 
 *               bytes processed) can be read from this register when the 
 *               status register indicates that the operation is done or 
 *               suspended due to a context switch request, or when a Secure 
 *               World context out DMA is requested. 
 *               In Advanced DMA mode, when not suspended with a partial 
 *               result, reading the SHA_P_DIGEST_COUNT register triggers the 
 *               Hash/HMAC Engine to start the next context input DMA. 
 *               Therefore, reading the SHA_P_DIGEST_COUNT register should 
 *               always be the last context-read action if not suspended with 
 *               a partial result (i.e. PartHashReady interrupt not pending). 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DIGEST_COUNT                      0x100040ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_MODE
 *
 * @BRIEF        Register SHA_MODE 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_MODE                              0x100044ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_LENGTH
 *
 * @BRIEF        WRITE: Block Length / Remaining Byte Count (bytes) 
 *               READ: Remaining Byte Count. 
 *               The value programmed MUST be a 64-byte multiple if Close 
 *               Hash is set to 0. 
 *               This register is also the trigger to start processing: once 
 *               this register is written, the core will commence requesting 
 *               input data via DMA or IRQ (if programmed length > 0) and 
 *               start processing. 
 *               The remaining byte count for the active operation can be 
 *               read from this register when the interrupt status register 
 *               indicates that the operation is suspended due to a context 
 *               switch request. 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_LENGTH                            0x100048ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA0_IN
 *
 * @BRIEF        Data input message 0 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA0_IN                          0x100080ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA1_IN
 *
 * @BRIEF        Data input message 1 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA1_IN                          0x100084ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA2_IN
 *
 * @BRIEF        Data input message 2 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA2_IN                          0x100088ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA3_IN
 *
 * @BRIEF        Data input message 3 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA3_IN                          0x10008Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA4_IN
 *
 * @BRIEF        Data input message 4 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA4_IN                          0x100090ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA5_IN
 *
 * @BRIEF        Data input message 5 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA5_IN                          0x100094ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA6_IN
 *
 * @BRIEF        Data input message 6 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA6_IN                          0x100098ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA7_IN
 *
 * @BRIEF        Data input message 7 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA7_IN                          0x10009Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA8_IN
 *
 * @BRIEF        Data input message 8 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA8_IN                          0x1000A0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA9_IN
 *
 * @BRIEF        Data input message 9 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA9_IN                          0x1000A4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA10_IN
 *
 * @BRIEF        Data input message 10 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA10_IN                         0x1000A8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA11_IN
 *
 * @BRIEF        Data input message 11 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA11_IN                         0x1000ACul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA12_IN
 *
 * @BRIEF        Data input message 12 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA12_IN                         0x1000B0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA13_IN
 *
 * @BRIEF        Data input message 13 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA13_IN                         0x1000B4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA14_IN
 *
 * @BRIEF        Data input message 14 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA14_IN                         0x1000B8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA15_IN
 *
 * @BRIEF        Data input message 15 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA15_IN                         0x1000BCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_REVISION
 *
 * @BRIEF        Register SHA_REV 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_REVISION                          0x100100ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_SYSCONFIG
 *
 * @BRIEF        Register SHA_SYSCONFIG 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_SYSCONFIG                         0x100110ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_SYSSTATUS
 *
 * @BRIEF        Register SHA_SYSSTATUS 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_SYSSTATUS                         0x100114ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IRQSTATUS
 *
 * @BRIEF        Register SHA_IRQSTATUS 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IRQSTATUS                         0x100118ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IRQENABLE
 *
 * @BRIEF        Register SHA_IRQENABLE. 
 *               The SHA_P_IRQENABLE register contains an enable bit for each 
 *               unique interrupt for the public side. An interrupt is 
 *               enabled when both the global enable in SHA_P_SYSCONFIG 
 *               (PIT_en) and the bit in this register are both set to 1. An 
 *               interrupt that is enabled is propagated to the SINTREQUEST_P 
 *               output. Please note that the dedicated partial hash output 
 *               (SINTREQUEST_PART_P) is not affected by this register, it is 
 *               only affected by the global enable SHA_P_SYSCONFIG (PIT_en). 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IRQENABLE                         0x10011Cul

    /* 
     * List of register bitfields for component SHAEIP75T
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_ODIGEST_A__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_ODIGEST_A__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_ODIGEST_A__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_ODIGEST_B__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_ODIGEST_B__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_ODIGEST_B__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_ODIGEST_C__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_ODIGEST_C__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_ODIGEST_C__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_ODIGEST_D__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_ODIGEST_D__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_ODIGEST_D__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_ODIGEST_E__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_ODIGEST_E__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_ODIGEST_E__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_ODIGEST_F__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_ODIGEST_F__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_ODIGEST_F__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_ODIGEST_G__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_ODIGEST_G__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_ODIGEST_G__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_ODIGEST_H__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_ODIGEST_H__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_ODIGEST_H__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IDIGEST_A__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IDIGEST_A__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_IDIGEST_A__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IDIGEST_B__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IDIGEST_B__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_IDIGEST_B__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IDIGEST_C__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IDIGEST_C__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_IDIGEST_C__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IDIGEST_D__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IDIGEST_D__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_IDIGEST_D__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IDIGEST_E__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IDIGEST_E__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_IDIGEST_E__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IDIGEST_F__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IDIGEST_F__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_IDIGEST_F__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IDIGEST_G__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IDIGEST_G__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_IDIGEST_G__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IDIGEST_H__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IDIGEST_H__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_IDIGEST_H__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DIGEST_COUNT__COUNT   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DIGEST_COUNT__COUNT          BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_DIGEST_COUNT__COUNT__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_MODE__HMAC_OUTER_HASH   
 *
 * @BRIEF        The HMAC Outer Hash is performed on the hash digest when the 
 *               inner hash hash finished (block length exhausted and final 
 *               hash performed if close_hash is 1). 
 *               This bit should normally be set together with close_hash to 
 *               finish the inner hash first, or Block Length should be zero 
 *               (HMAC continue with the just outer hash to be done). 
 *               Auto cleared internally when outer hash performed. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_MODE__HMAC_OUTER_HASH        BITFIELD(7, 7)
#define SHAEIP75T__SHA_S_MODE__HMAC_OUTER_HASH__POS   7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_MODE__HMAC_KEY_PROC   
 *
 * @BRIEF        Performs HMAC key processing on the 512 bit HMAC key loaded 
 *               into the SHA_S_IDIGEST_{A to H} and SHA_S_ODIGEST_{A to H} 
 *               register block. Once HMAC key processing is finished, this 
 *               bit is automatically cleared and the resulting Inner and 
 *               Outer digest is available from SHA_S_IDIGEST_{A to H} and 
 *               SHA_S_ODIGEST_{A to H} respectively, after which regular 
 *               hash processing (using SHA_S_IDIGEST_{A to H} as initial 
 *               digest) will commence until the Block Length is exhausted. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_MODE__HMAC_KEY_PROC          BITFIELD(5, 5)
#define SHAEIP75T__SHA_S_MODE__HMAC_KEY_PROC__POS     5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_MODE__CLOSE_HASH   
 *
 * @BRIEF        Performs the padding, the hash/HMAC will be 'closed' at the 
 *               end of the block, as per MD5/SHA-1/SHA-2 specification (i.e. 
 *               appropriate padding is added), or no padding is done, 
 *               allowing the hash to be continued later. However, if the 
 *               hash/HMAC is not closed then the Block Length MUST be a 
 *               multiple of 64 bytes to ensure correct operation. Auto 
 *               cleared internally when hash closed. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_MODE__CLOSE_HASH             BITFIELD(4, 4)
#define SHAEIP75T__SHA_S_MODE__CLOSE_HASH__POS        4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_MODE__ALGO_CONSTANT   
 *
 * @BRIEF        The initial digest register will be overwritten with the 
 *               algorithm constants for the selected algorithm when hashing 
 *               and the initial digest count register will be reset to 0. 
 *               This will start a normal hash operation. When continuing an 
 *               existing hash or when performing an HMAC operation, this 
 *               register must be set to 0 and the intermediate/inner digest 
 *               or HMAC key and digest count need to be written to the 
 *               context input registers prior to writing SHA_S_MODE. 
 *               Auto cleared internally after first block processed. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_MODE__ALGO_CONSTANT          BITFIELD(3, 3)
#define SHAEIP75T__SHA_S_MODE__ALGO_CONSTANT__POS     3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_MODE__ALGO   
 *
 * @BRIEF        These bits select the hash algorithm to be used for 
 *               processing: - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_MODE__ALGO                   BITFIELD(2, 1)
#define SHAEIP75T__SHA_S_MODE__ALGO__POS              1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_LENGTH__LENGTH   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_LENGTH__LENGTH               BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_LENGTH__LENGTH__POS          0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA0_IN__DATA0_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA0_IN__DATA0_IN           BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_DATA0_IN__DATA0_IN__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA1_IN__DATA1_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA1_IN__DATA1_IN           BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_DATA1_IN__DATA1_IN__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA2_IN__DATA2_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA2_IN__DATA2_IN           BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_DATA2_IN__DATA2_IN__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA3_IN__DATA3_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA3_IN__DATA3_IN           BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_DATA3_IN__DATA3_IN__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA4_IN__DATA4_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA4_IN__DATA4_IN           BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_DATA4_IN__DATA4_IN__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA5_IN__DATA5_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA5_IN__DATA5_IN           BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_DATA5_IN__DATA5_IN__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA6_IN__DATA6_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA6_IN__DATA6_IN           BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_DATA6_IN__DATA6_IN__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA7_IN__DATA7_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA7_IN__DATA7_IN           BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_DATA7_IN__DATA7_IN__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA8_IN__DATA8_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA8_IN__DATA8_IN           BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_DATA8_IN__DATA8_IN__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA9_IN__DATA9_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA9_IN__DATA9_IN           BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_DATA9_IN__DATA9_IN__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA10_IN__DATA10_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA10_IN__DATA10_IN         BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_DATA10_IN__DATA10_IN__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA11_IN__DATA11_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA11_IN__DATA11_IN         BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_DATA11_IN__DATA11_IN__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA12_IN__DATA12_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA12_IN__DATA12_IN         BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_DATA12_IN__DATA12_IN__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA13_IN__DATA13_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA13_IN__DATA13_IN         BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_DATA13_IN__DATA13_IN__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA14_IN__DATA14_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA14_IN__DATA14_IN         BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_DATA14_IN__DATA14_IN__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_DATA15_IN__DATA15_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_DATA15_IN__DATA15_IN         BITFIELD(31, 0)
#define SHAEIP75T__SHA_S_DATA15_IN__DATA15_IN__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_REVISION__SCHEME   
 *
 * @BRIEF        Used to distinguish between old scheme and current. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_REVISION__SCHEME             BITFIELD(31, 30)
#define SHAEIP75T__SHA_S_REVISION__SCHEME__POS        30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_REVISION__FUNC   
 *
 * @BRIEF        Function indicates a software compatible module family.   
 *               If there is no level of software compatibility a new Func 
 *               number (and hence REVISION) should be assigned. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_REVISION__FUNC               BITFIELD(27, 16)
#define SHAEIP75T__SHA_S_REVISION__FUNC__POS          16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_REVISION__R_RTL   
 *
 * @BRIEF        RTL Version (R), maintained by IP design owner.  
 *               RTL follows a numbering such as X.Y.R.Z which are explained 
 *               in this table.  
 *               R changes ONLY when:  
 *               (1) PDS uploads occur which may have been due to spec 
 *               changes  
 *               (2) Bug fixes occur  
 *               (3) Resets to '0' when X or Y changes.  
 *               Design team has an internal 'Z' (customer invisible) number 
 *               which increments on every drop that happens due to DV and 
 *               RTL updates. Z resets to 0 when R increments. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_REVISION__R_RTL              BITFIELD(15, 11)
#define SHAEIP75T__SHA_S_REVISION__R_RTL__POS         11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_REVISION__X_MAJOR   
 *
 * @BRIEF        Major Revision (X), maintained by IP specification owner.  
 *               X changes ONLY when:  
 *               (1) There is a major feature addition. An example would be 
 *               adding Master Mode to Utopia Level2. The Func field (or 
 *               Class/Type in old PID format) will remain the same.  
 *               X does NOT change due to:  
 *               (1) Bug fixes  
 *               (2) Change in feature parameters. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_REVISION__X_MAJOR            BITFIELD(10, 8)
#define SHAEIP75T__SHA_S_REVISION__X_MAJOR__POS       8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_REVISION__CUSTOM   
 *
 * @BRIEF        Indicates a special version for a particular device. 
 *               Consequence of use may avoid use of standard Chip Support 
 *               Library (CSL) / Drivers. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_REVISION__CUSTOM             BITFIELD(7, 6)
#define SHAEIP75T__SHA_S_REVISION__CUSTOM__POS        6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_REVISION__Y_MINOR   
 *
 * @BRIEF        Minor Revision (Y), maintained by IP specification owner.  
 *               Y changes ONLY when:  
 *               (1) Features are scaled (up or down). Flexibility exists in 
 *               that this feature scalability may either be represented in 
 *               the Y change or a specific register in the IP that indicates 
 *               which features are exactly available.  
 *               (2) When feature creeps from Is-Not list to Is list. But 
 *               this may not be the case once it sees silicon; in which case 
 *               X will change.  
 *               Y does NOT change due to:  
 *               (1) Bug fixes  
 *               (2) Typos or clarifications  
 *               (3) major functional/feature change/addition/deletion. 
 *               Instead these changes may be reflected via R, S, X as 
 *               applicable.  
 *               Spec owner maintains a customer-invisible number 'S' which 
 *               changes due to:  
 *               (1) Typos/clarifications  
 *               (2) Bug documentation. Note that this bug is not due to a 
 *               spec change but due to implementation. Nevertheless, the 
 *               spec tracks the IP bugs. An RTL release (say for silicon 
 *               PG1.1) that occurs due to bug fix should document the 
 *               corresponding spec number (X.Y.S) in its release notes. - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_REVISION__Y_MINOR            BITFIELD(5, 0)
#define SHAEIP75T__SHA_S_REVISION__Y_MINOR__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_SYSCONFIG__SADVANCED   
 *
 * @BRIEF        If set to 1, Advanced mode is enabled for the Secure World. 
 *               If set to 0, Legacy mode is enabled for the Secure World. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_SYSCONFIG__SADVANCED         BITFIELD(7, 7)
#define SHAEIP75T__SHA_S_SYSCONFIG__SADVANCED__POS    7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_SYSCONFIG__SCONT_SWT   
 *
 * @BRIEF        Finish all pending data and context DMA input requests (but 
 *               will not assert any new requests), finish processing all 
 *               data in the module, and provide a saved context (partial 
 *               hash result, updated digest count, remaining length, updated 
 *               mode information where applicable) for the last operation 
 *               that was interrupted, so that it can be resumed later. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_SYSCONFIG__SCONT_SWT         BITFIELD(6, 6)
#define SHAEIP75T__SHA_S_SYSCONFIG__SCONT_SWT__POS    6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_SYSCONFIG__SIDLE   
 *
 * @BRIEF        sidle mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_SYSCONFIG__SIDLE             BITFIELD(5, 4)
#define SHAEIP75T__SHA_S_SYSCONFIG__SIDLE__POS        4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_SYSCONFIG__SDMA_EN   
 *
 * @BRIEF        enable dma - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_SYSCONFIG__SDMA_EN           BITFIELD(3, 3)
#define SHAEIP75T__SHA_S_SYSCONFIG__SDMA_EN__POS      3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_SYSCONFIG__SIT_EN   
 *
 * @BRIEF        enable interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_SYSCONFIG__SIT_EN            BITFIELD(2, 2)
#define SHAEIP75T__SHA_S_SYSCONFIG__SIT_EN__POS       2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_SYSCONFIG__SOFTRESET   
 *
 * @BRIEF        softreset - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_SYSCONFIG__SOFTRESET         BITFIELD(1, 1)
#define SHAEIP75T__SHA_S_SYSCONFIG__SOFTRESET__POS    1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_SYSCONFIG__AUTOIDLE   
 *
 * @BRIEF        autoidle - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_SYSCONFIG__AUTOIDLE          BITFIELD(0, 0)
#define SHAEIP75T__SHA_S_SYSCONFIG__AUTOIDLE__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_SYSSTATUS__RESETDONE   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_SYSSTATUS__RESETDONE         BITFIELD(0, 0)
#define SHAEIP75T__SHA_S_SYSSTATUS__RESETDONE__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IRQSTATUS__CONTEXT_READY   
 *
 * @BRIEF        indicates that the secure side context input registers are 
 *               available for a new context for the next packet to be 
 *               processed. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IRQSTATUS__CONTEXT_READY     BITFIELD(3, 3)
#define SHAEIP75T__SHA_S_IRQSTATUS__CONTEXT_READY__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IRQSTATUS__PARTHASH_READY   
 *
 * @BRIEF        After a secure side context switch request, this bit will 
 *               read as 1 indicating that the saved context is available 
 *               from the secure side context output registers. Note that if 
 *               the context switch request coincides with a final hash (when 
 *               hashing) or an outer hash (when doing HMAC), that 
 *               PartHashReady will not become active, but a regular Output 
 *               Ready will occur instead (indicating that the result is 
 *               final and therefore no continuation is required). - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IRQSTATUS__PARTHASH_READY    BITFIELD(2, 2)
#define SHAEIP75T__SHA_S_IRQSTATUS__PARTHASH_READY__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IRQSTATUS__INPUT_READY   
 *
 * @BRIEF        indicates that the secure side data FIFO is ready to receive 
 *               the next 64 byte data block. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IRQSTATUS__INPUT_READY       BITFIELD(1, 1)
#define SHAEIP75T__SHA_S_IRQSTATUS__INPUT_READY__POS  1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IRQSTATUS__OUTPUT_READY   
 *
 * @BRIEF        Indicates that a (partial) result or saved context is 
 *               available from the secure side context output registers. - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IRQSTATUS__OUTPUT_READY      BITFIELD(0, 0)
#define SHAEIP75T__SHA_S_IRQSTATUS__OUTPUT_READY__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IRQENABLE__M_CONTEXT_READY   
 *
 * @BRIEF        mask for context ready - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IRQENABLE__M_CONTEXT_READY   BITFIELD(3, 3)
#define SHAEIP75T__SHA_S_IRQENABLE__M_CONTEXT_READY__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IRQENABLE__M_PARTHASH_READY   
 *
 * @BRIEF        mask for partial hash - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IRQENABLE__M_PARTHASH_READY  BITFIELD(2, 2)
#define SHAEIP75T__SHA_S_IRQENABLE__M_PARTHASH_READY__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IRQENABLE__M_INPUT_READY   
 *
 * @BRIEF        mask for input_ready - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IRQENABLE__M_INPUT_READY     BITFIELD(1, 1)
#define SHAEIP75T__SHA_S_IRQENABLE__M_INPUT_READY__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_IRQENABLE__M_OUTPUT_READY   
 *
 * @BRIEF        mask for output_ready - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_IRQENABLE__M_OUTPUT_READY    BITFIELD(0, 0)
#define SHAEIP75T__SHA_S_IRQENABLE__M_OUTPUT_READY__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_XSSTATUS__PDIRTY   
 *
 * @BRIEF        This bit is set to 1 by the module if any of the Public 
 *               World registers is written. It can be cleared by the host by 
 *               writing a 1 in this location. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_XSSTATUS__PDIRTY             BITFIELD(3, 3)
#define SHAEIP75T__SHA_S_XSSTATUS__PDIRTY__POS        3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_XSSTATUS__PACCESSED   
 *
 * @BRIEF        This bit is set to 1 by the module if any of the Public 
 *               World registers is read. It can be cleared by the host by 
 *               writing a 1 in this location. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_XSSTATUS__PACCESSED          BITFIELD(2, 2)
#define SHAEIP75T__SHA_S_XSSTATUS__PACCESSED__POS     2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_XSSTATUS__SDIRTY   
 *
 * @BRIEF        This bit is set to 1 by the module if any of the Secure 
 *               World registers is written. It can be cleared by the host by 
 *               writing a 1 in this location. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_XSSTATUS__SDIRTY             BITFIELD(1, 1)
#define SHAEIP75T__SHA_S_XSSTATUS__SDIRTY__POS        1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_XSSTATUS__SACCESSED   
 *
 * @BRIEF        This bit is set to 1 by the module if any of the Secure 
 *               World registers is read. It can be cleared by the host by 
 *               writing a 1 in this location. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_XSSTATUS__SACCESSED          BITFIELD(0, 0)
#define SHAEIP75T__SHA_S_XSSTATUS__SACCESSED__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE8   
 *
 * @BRIEF        This makes the SHA_P_ODIGEST_A through SHA_P_ODIGEST_H 
 *               write-only, further protecting the HMAC key from being read 
 *               by Public World software. Note: setting this bit also makes 
 *               HMAC continue operations impossible! - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE8        BITFIELD(28, 28)
#define SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE8__POS   28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE7   
 *
 * @BRIEF        When this bit is set, the SHA_P_LENGTH register cannot be 
 *               overwritten. This prevents Public World software from 
 *               truncating or extending the block to be hashed or starting 
 *               hash/HMAC operations by itself. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE7        BITFIELD(27, 27)
#define SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE7__POS   27

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE6   
 *
 * @BRIEF        When this bit is set, the SHA_P_DIGEST_COUNT register cannot 
 *               be overwritten. This, in combination with bits 3 and 24 
 *               prevents the Public World software from adding data at the 
 *               front of the block to be hashed. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE6        BITFIELD(26, 26)
#define SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE6__POS   26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE5   
 *
 * @BRIEF        When this bit is set, the SHA_P_ODIGEST_A through 
 *               SHA_P_ODIGEST_H registers cannot be overwritten. This 
 *               prevents Public World software from loading a weak and/or 
 *               known HMAC key or an outer digest value. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE5        BITFIELD(25, 25)
#define SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE5__POS   25

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE4   
 *
 * @BRIEF        When this bit is set, the SHA_P_IDIGEST_A through 
 *               SHA_P_IDIGEST_H registers cannot be overwritten. This 
 *               prevents Public World software from loading a weak and/or 
 *               known key or an initial digest value. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE4        BITFIELD(24, 24)
#define SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE4__POS   24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE3   
 *
 * @BRIEF        When this bit is set, HMAC Outer Hash bit in SHA_P_MODE 
 *               cannot be modified. 
 *               This prevents Public World software from bypassing the HMAC 
 *               closure by clearing the corresponding mode bit during 
 *               processing. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE3        BITFIELD(7, 7)
#define SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE3__POS   7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE2   
 *
 * @BRIEF        When this bit is set, the Reuse HMAC Key bit in SHA_P_MODE 
 *               cannot be modified. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE2        BITFIELD(6, 6)
#define SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE2__POS   6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE1   
 *
 * @BRIEF        When this bit is set, the HMAC Key Preprocessing bit in 
 *               SHA_P_MODE cannot be modified. This prevents Public World 
 *               software from bypassing the HMAC key preprocessing step and 
 *               using the key data directly. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE1        BITFIELD(5, 5)
#define SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE1__POS   5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE   
 *
 * @BRIEF        When this bit is set, the Close Hash bit in SHA_P_MODE 
 *               cannot be modified. 
 *               This prevents Public World software from bypassing the hash 
 *               closure by clearing the corresponding mode bit during 
 *               processing. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE         BITFIELD(4, 4)
#define SHAEIP75T__SHA_S_LOCKDOWN__LOCK_CLOSE__POS    4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_LOCKDOWN__LOCK_ALGO_CST   
 *
 * @BRIEF        When this bit is set, the Use Alg Constants bit in 
 *               SHA_P_MODE cannot be modified. This e.g. prevents Public 
 *               World software from switching to (known!) algorithm 
 *               constants instead of the (secret key based?) loaded & locked 
 *               initial digest. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_LOCKDOWN__LOCK_ALGO_CST      BITFIELD(3, 3)
#define SHAEIP75T__SHA_S_LOCKDOWN__LOCK_ALGO_CST__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_LOCKDOWN__LOCK_ALGO   
 *
 * @BRIEF        When either lock bit is set, the corresponding Algorithm bit 
 *               in SHA_P_MODE cannot be modified. This locks the algorithm 
 *               preventing further use. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_LOCKDOWN__LOCK_ALGO          BITFIELD(2, 1)
#define SHAEIP75T__SHA_S_LOCKDOWN__LOCK_ALGO__POS     1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_ODIGEST_A__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_ODIGEST_A__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_ODIGEST_A__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_ODIGEST_B__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_ODIGEST_B__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_ODIGEST_B__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_ODIGEST_C__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_ODIGEST_C__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_ODIGEST_C__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_ODIGEST_D__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_ODIGEST_D__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_ODIGEST_D__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_ODIGEST_E__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_ODIGEST_E__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_ODIGEST_E__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_ODIGEST_F__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_ODIGEST_F__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_ODIGEST_F__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_ODIGEST_G__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_ODIGEST_G__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_ODIGEST_G__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_ODIGEST_H__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_ODIGEST_H__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_ODIGEST_H__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IDIGEST_A__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IDIGEST_A__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_IDIGEST_A__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IDIGEST_B__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IDIGEST_B__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_IDIGEST_B__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IDIGEST_C__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IDIGEST_C__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_IDIGEST_C__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IDIGEST_D__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IDIGEST_D__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_IDIGEST_D__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IDIGEST_E__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IDIGEST_E__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_IDIGEST_E__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IDIGEST_F__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IDIGEST_F__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_IDIGEST_F__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IDIGEST_G__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IDIGEST_G__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_IDIGEST_G__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IDIGEST_H__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IDIGEST_H__DATA              BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_IDIGEST_H__DATA__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DIGEST_COUNT__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DIGEST_COUNT__DATA           BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_DIGEST_COUNT__DATA__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_MODE__HMAC_OUTER_HASH   
 *
 * @BRIEF        The HMAC Outer Hash is performed on the hash digest when the 
 *               inner hash hash finished (block length exhausted and final 
 *               hash performed if close_hash is 1). 
 *               This bit should normally be set together with close_hash to 
 *               finish the inner hash first, or Block Length should be zero 
 *               (HMAC continue with the just outer hash to be done). 
 *               Auto cleared internally when outer hash performed. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_MODE__HMAC_OUTER_HASH        BITFIELD(7, 7)
#define SHAEIP75T__SHA_P_MODE__HMAC_OUTER_HASH__POS   7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_MODE__HMAC_KEY_PROC   
 *
 * @BRIEF        Performs HMAC key processing on the 512 bit HMAC key loaded 
 *               into the SHA_P_IDIGEST_{A to H} and SHA_P_ODIGEST_{A to H} 
 *               register block. Once HMAC key processing is finished, this 
 *               bit is automatically cleared and the resulting Inner and 
 *               Outer digest is available from SHA_P_IDIGEST_{A to H} and 
 *               SHA_P_ODIGEST_{A to H} respectively, after which regular 
 *               hash processing (using SHA_P_IDIGEST_{A to H} as initial 
 *               digest) will commence until the Block Length is exhausted. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_MODE__HMAC_KEY_PROC          BITFIELD(5, 5)
#define SHAEIP75T__SHA_P_MODE__HMAC_KEY_PROC__POS     5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_MODE__CLOSE_HASH   
 *
 * @BRIEF        Performs the padding, the hash/HMAC will be 'closed' at the 
 *               end of the block, as per MD5/SHA-1/SHA-2 specification (i.e. 
 *               appropriate padding is added), or no padding is done, 
 *               allowing the hash to be continued later. However, if the 
 *               hash/HMAC is not closed then the Block Length MUST be a 
 *               multiple of 64 bytes to ensure correct operation. Auto 
 *               cleared internally when hash closed. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_MODE__CLOSE_HASH             BITFIELD(4, 4)
#define SHAEIP75T__SHA_P_MODE__CLOSE_HASH__POS        4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_MODE__ALGO_CONSTANT   
 *
 * @BRIEF        The initial digest register will be overwritten with the 
 *               algorithm constants for the selected algorithm when hashing 
 *               and the initial digest count register will be reset to 0. 
 *               This will start a normal hash operation. When continuing an 
 *               existing hash or when performing an HMAC operation, this 
 *               register must be set to 0 and the intermediate/inner digest 
 *               or HMAC key and digest count need to be written to the 
 *               context input registers prior to writing SHA_P_MODE. 
 *               Auto cleared internally after first block processed. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_MODE__ALGO_CONSTANT          BITFIELD(3, 3)
#define SHAEIP75T__SHA_P_MODE__ALGO_CONSTANT__POS     3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_MODE__ALGO   
 *
 * @BRIEF        These bits select the hash algorithm to be used for 
 *               processing: - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_MODE__ALGO                   BITFIELD(2, 1)
#define SHAEIP75T__SHA_P_MODE__ALGO__POS              1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_LENGTH__DATA   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_LENGTH__DATA                 BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_LENGTH__DATA__POS            0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA0_IN__DATA0_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA0_IN__DATA0_IN           BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_DATA0_IN__DATA0_IN__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA1_IN__DATA1_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA1_IN__DATA1_IN           BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_DATA1_IN__DATA1_IN__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA2_IN__DATA2_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA2_IN__DATA2_IN           BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_DATA2_IN__DATA2_IN__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA3_IN__DATA3_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA3_IN__DATA3_IN           BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_DATA3_IN__DATA3_IN__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA4_IN__DATA4_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA4_IN__DATA4_IN           BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_DATA4_IN__DATA4_IN__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA5_IN__DATA5_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA5_IN__DATA5_IN           BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_DATA5_IN__DATA5_IN__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA6_IN__DATA6_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA6_IN__DATA6_IN           BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_DATA6_IN__DATA6_IN__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA7_IN__DATA7_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA7_IN__DATA7_IN           BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_DATA7_IN__DATA7_IN__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA8_IN__DATA8_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA8_IN__DATA8_IN           BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_DATA8_IN__DATA8_IN__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA9_IN__DATA9_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA9_IN__DATA9_IN           BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_DATA9_IN__DATA9_IN__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA10_IN__DATA10_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA10_IN__DATA10_IN         BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_DATA10_IN__DATA10_IN__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA11_IN__DATA11_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA11_IN__DATA11_IN         BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_DATA11_IN__DATA11_IN__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA12_IN__DATA12_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA12_IN__DATA12_IN         BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_DATA12_IN__DATA12_IN__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA13_IN__DATA13_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA13_IN__DATA13_IN         BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_DATA13_IN__DATA13_IN__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA14_IN__DATA14_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA14_IN__DATA14_IN         BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_DATA14_IN__DATA14_IN__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_DATA15_IN__DATA15_IN   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_DATA15_IN__DATA15_IN         BITFIELD(31, 0)
#define SHAEIP75T__SHA_P_DATA15_IN__DATA15_IN__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_REVISION__SCHEME   
 *
 * @BRIEF        Used to distinguish between old scheme and current. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_REVISION__SCHEME             BITFIELD(31, 30)
#define SHAEIP75T__SHA_P_REVISION__SCHEME__POS        30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_REVISION__FUNC   
 *
 * @BRIEF        Function indicates a software compatible module family.   
 *               If there is no level of software compatibility a new Func 
 *               number (and hence REVISION) should be assigned. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_REVISION__FUNC               BITFIELD(27, 16)
#define SHAEIP75T__SHA_P_REVISION__FUNC__POS          16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_REVISION__R_RTL   
 *
 * @BRIEF        RTL Version (R), maintained by IP design owner.  
 *               RTL follows a numbering such as X.Y.R.Z which are explained 
 *               in this table.  
 *               R changes ONLY when:  
 *               (1) PDS uploads occur which may have been due to spec 
 *               changes  
 *               (2) Bug fixes occur  
 *               (3) Resets to '0' when X or Y changes.  
 *               Design team has an internal 'Z' (customer invisible) number 
 *               which increments on every drop that happens due to DV and 
 *               RTL updates. Z resets to 0 when R increments. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_REVISION__R_RTL              BITFIELD(15, 11)
#define SHAEIP75T__SHA_P_REVISION__R_RTL__POS         11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_REVISION__X_MAJOR   
 *
 * @BRIEF        Major Revision (X), maintained by IP specification owner.  
 *               X changes ONLY when:  
 *               (1) There is a major feature addition. An example would be 
 *               adding Master Mode to Utopia Level2. The Func field (or 
 *               Class/Type in old PID format) will remain the same.  
 *               X does NOT change due to:  
 *               (1) Bug fixes  
 *               (2) Change in feature parameters. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_REVISION__X_MAJOR            BITFIELD(10, 8)
#define SHAEIP75T__SHA_P_REVISION__X_MAJOR__POS       8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_REVISION__CUSTOM   
 *
 * @BRIEF        Indicates a special version for a particular device. 
 *               Consequence of use may avoid use of standard Chip Support 
 *               Library (CSL) / Drivers. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_REVISION__CUSTOM             BITFIELD(7, 6)
#define SHAEIP75T__SHA_P_REVISION__CUSTOM__POS        6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_REVISION__Y_MINOR   
 *
 * @BRIEF        Minor Revision (Y), maintained by IP specification owner.  
 *               Y changes ONLY when:  
 *               (1) Features are scaled (up or down). Flexibility exists in 
 *               that this feature scalability may either be represented in 
 *               the Y change or a specific register in the IP that indicates 
 *               which features are exactly available.  
 *               (2) When feature creeps from Is-Not list to Is list. But 
 *               this may not be the case once it sees silicon; in which case 
 *               X will change.  
 *               Y does NOT change due to:  
 *               (1) Bug fixes  
 *               (2) Typos or clarifications  
 *               (3) major functional/feature change/addition/deletion. 
 *               Instead these changes may be reflected via R, S, X as 
 *               applicable.  
 *               Spec owner maintains a customer-invisible number 'S' which 
 *               changes due to:  
 *               (1) Typos/clarifications  
 *               (2) Bug documentation. Note that this bug is not due to a 
 *               spec change but due to implementation. Nevertheless, the 
 *               spec tracks the IP bugs. An RTL release (say for silicon 
 *               PG1.1) that occurs due to bug fix should document the 
 *               corresponding spec number (X.Y.S) in its release notes. - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_REVISION__Y_MINOR            BITFIELD(5, 0)
#define SHAEIP75T__SHA_P_REVISION__Y_MINOR__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_SYSCONFIG__PADVANCED   
 *
 * @BRIEF        If set to 1, Advanced mode is enabled for the Secure World. 
 *               If set to 0, Legacy mode is enabled for the Secure World. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_SYSCONFIG__PADVANCED         BITFIELD(7, 7)
#define SHAEIP75T__SHA_P_SYSCONFIG__PADVANCED__POS    7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_SYSCONFIG__PCONT_SWT   
 *
 * @BRIEF        Finish all pending data and context DMA input requests (but 
 *               will not assert any new requests), finish processing all 
 *               data in the module, and provide a saved context (partial 
 *               hash result, updated digest count, remaining length, updated 
 *               mode information where applicable) for the last operation 
 *               that was interrupted, so that it can be resumed later. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_SYSCONFIG__PCONT_SWT         BITFIELD(6, 6)
#define SHAEIP75T__SHA_P_SYSCONFIG__PCONT_SWT__POS    6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_SYSCONFIG__PDMA_EN   
 *
 * @BRIEF        enable dma - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_SYSCONFIG__PDMA_EN           BITFIELD(3, 3)
#define SHAEIP75T__SHA_P_SYSCONFIG__PDMA_EN__POS      3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_SYSCONFIG__PIT_EN   
 *
 * @BRIEF        enable interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_SYSCONFIG__PIT_EN            BITFIELD(2, 2)
#define SHAEIP75T__SHA_P_SYSCONFIG__PIT_EN__POS       2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_SYSSTATUS__RESETDONE   
 *
 * @BRIEF        data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_SYSSTATUS__RESETDONE         BITFIELD(0, 0)
#define SHAEIP75T__SHA_P_SYSSTATUS__RESETDONE__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IRQSTATUS__CONTEXT_READY   
 *
 * @BRIEF        indicates that the secure side context input registers are 
 *               available for a new context for the next packet to be 
 *               processed. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IRQSTATUS__CONTEXT_READY     BITFIELD(3, 3)
#define SHAEIP75T__SHA_P_IRQSTATUS__CONTEXT_READY__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IRQSTATUS__PARTHASH_READY   
 *
 * @BRIEF        After a secure side context switch request, this bit will 
 *               read as 1 indicating that the saved context is available 
 *               from the secure side context output registers. Note that if 
 *               the context switch request coincides with a final hash (when 
 *               hashing) or an outer hash (when doing HMAC), that 
 *               PartHashReady will not become active, but a regular Output 
 *               Ready will occur instead (indicating that the result is 
 *               final and therefore no continuation is required). - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IRQSTATUS__PARTHASH_READY    BITFIELD(2, 2)
#define SHAEIP75T__SHA_P_IRQSTATUS__PARTHASH_READY__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IRQSTATUS__INPUT_READY   
 *
 * @BRIEF        indicates that the secure side data FIFO is ready to receive 
 *               the next 64 byte data block. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IRQSTATUS__INPUT_READY       BITFIELD(1, 1)
#define SHAEIP75T__SHA_P_IRQSTATUS__INPUT_READY__POS  1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IRQSTATUS__OUTPUT_READY   
 *
 * @BRIEF        Indicates that a (partial) result or saved context is 
 *               available from the secure side context output registers. - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IRQSTATUS__OUTPUT_READY      BITFIELD(0, 0)
#define SHAEIP75T__SHA_P_IRQSTATUS__OUTPUT_READY__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IRQENABLE__M_CONTEXT_READY   
 *
 * @BRIEF        mask for context ready - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IRQENABLE__M_CONTEXT_READY   BITFIELD(3, 3)
#define SHAEIP75T__SHA_P_IRQENABLE__M_CONTEXT_READY__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IRQENABLE__M_PARTHASH_READY   
 *
 * @BRIEF        mask for partial hash - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IRQENABLE__M_PARTHASH_READY  BITFIELD(2, 2)
#define SHAEIP75T__SHA_P_IRQENABLE__M_PARTHASH_READY__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IRQENABLE__M_INPUT_READY   
 *
 * @BRIEF        mask for input_ready - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IRQENABLE__M_INPUT_READY     BITFIELD(1, 1)
#define SHAEIP75T__SHA_P_IRQENABLE__M_INPUT_READY__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_IRQENABLE__M_OUTPUT_READY   
 *
 * @BRIEF        mask for output_ready - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_IRQENABLE__M_OUTPUT_READY    BITFIELD(0, 0)
#define SHAEIP75T__SHA_P_IRQENABLE__M_OUTPUT_READY__POS 0

    /* 
     * List of register bitfields values for component SHAEIP75T
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_MODE__HMAC_OUTER_HASH__NO_HMAC
 *
 * @BRIEF        No operation - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_MODE__HMAC_OUTER_HASH__NO_HMAC 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_MODE__HMAC_OUTER_HASH__HMAC
 *
 * @BRIEF        hmac processing - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_MODE__HMAC_OUTER_HASH__HMAC  0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_MODE__HMAC_KEY_PROC__NO_HMAC
 *
 * @BRIEF        No operation. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_MODE__HMAC_KEY_PROC__NO_HMAC 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_MODE__HMAC_KEY_PROC__HMAC
 *
 * @BRIEF        Hmac processing. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_MODE__HMAC_KEY_PROC__HMAC    0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_MODE__CLOSE_HASH__NO_CLOSE
 *
 * @BRIEF        No padding, hash computation can be contimued. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_MODE__CLOSE_HASH__NO_CLOSE   0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_MODE__CLOSE_HASH__CLOSE
 *
 * @BRIEF        Last packet will be padded. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_MODE__CLOSE_HASH__CLOSE      0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_MODE__ALGO_CONSTANT__CALC_DIGEST
 *
 * @BRIEF        Use pre-calculated digest (from an other operation) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_MODE__ALGO_CONSTANT__CALC_DIGEST 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_MODE__ALGO_CONSTANT__ALGO_DIGEST
 *
 * @BRIEF        Use constants of the selected algo. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_MODE__ALGO_CONSTANT__ALGO_DIGEST 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_MODE__ALGO__MD5_128
 *
 * @BRIEF        md5_128 algorithm - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_MODE__ALGO__MD5_128          0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_MODE__ALGO__SHA1_160
 *
 * @BRIEF        sha1_160 algorithm - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_MODE__ALGO__SHA1_160         0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_MODE__ALGO__SHA2_224
 *
 * @BRIEF        sha2_224 algorithm - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_MODE__ALGO__SHA2_224         0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_MODE__ALGO__SHA2_256
 *
 * @BRIEF        sha2_256 algorithm - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_MODE__ALGO__SHA2_256         0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_REVISION__SCHEME__LEGACY
 *
 * @BRIEF        Legacy ASP or WTBU scheme - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_REVISION__SCHEME__LEGACY     0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_REVISION__SCHEME__H08
 *
 * @BRIEF        Highlander 0.8 scheme - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_REVISION__SCHEME__H08        0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_REVISION__CUSTOM__STANDARD
 *
 * @BRIEF        Non custom (standard) revision - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_REVISION__CUSTOM__STANDARD   0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_SYSCONFIG__SIDLE__FORCEIDLE
 *
 * @BRIEF        force idle mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_SYSCONFIG__SIDLE__FORCEIDLE  0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_SYSCONFIG__SIDLE__NOIDLE
 *
 * @BRIEF        no idle mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_SYSCONFIG__SIDLE__NOIDLE     0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_SYSCONFIG__SIDLE__SMARTIDLE
 *
 * @BRIEF        smart idle mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_SYSCONFIG__SIDLE__SMARTIDLE  0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_SYSCONFIG__SIDLE__RESERVED
 *
 * @BRIEF        reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_SYSCONFIG__SIDLE__RESERVED   0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_SYSCONFIG__SDMA_EN__DMA_DISEN
 *
 * @BRIEF        Interrupt disenabled - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_SYSCONFIG__SDMA_EN__DMA_DISEN 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_SYSCONFIG__SDMA_EN__DMA_EN
 *
 * @BRIEF        Interrupt enabled - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_SYSCONFIG__SDMA_EN__DMA_EN   0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_SYSCONFIG__SIT_EN__IT_DISEN
 *
 * @BRIEF        Interrupt disenabled - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_SYSCONFIG__SIT_EN__IT_DISEN  0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_SYSCONFIG__SIT_EN__IT_EN
 *
 * @BRIEF        Interrupt enabled - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_SYSCONFIG__SIT_EN__IT_EN     0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_SYSCONFIG__SOFTRESET__NOOP
 *
 * @BRIEF        No operation. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_SYSCONFIG__SOFTRESET__NOOP   0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_SYSCONFIG__SOFTRESET__SOFRESET
 *
 * @BRIEF        When '1', starts softreset sequnce. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_SYSCONFIG__SOFTRESET__SOFRESET 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_SYSCONFIG__AUTOIDLE__CLOCKS_ON
 *
 * @BRIEF        When '0', internal clocks are running. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_SYSCONFIG__AUTOIDLE__CLOCKS_ON 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_S_SYSCONFIG__AUTOIDLE__CLOCKS_OFF
 *
 * @BRIEF        When '1', internal clocks are cut. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_S_SYSCONFIG__AUTOIDLE__CLOCKS_OFF 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_MODE__HMAC_OUTER_HASH__NO_HMAC
 *
 * @BRIEF        No operation - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_MODE__HMAC_OUTER_HASH__NO_HMAC 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_MODE__HMAC_OUTER_HASH__HMAC
 *
 * @BRIEF        hmac processing - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_MODE__HMAC_OUTER_HASH__HMAC  0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_MODE__HMAC_KEY_PROC__NO_HMAC
 *
 * @BRIEF        No operation. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_MODE__HMAC_KEY_PROC__NO_HMAC 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_MODE__HMAC_KEY_PROC__HMAC
 *
 * @BRIEF        Hmac processing. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_MODE__HMAC_KEY_PROC__HMAC    0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_MODE__CLOSE_HASH__NO_CLOSE
 *
 * @BRIEF        No padding, hash computation can be contimued. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_MODE__CLOSE_HASH__NO_CLOSE   0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_MODE__CLOSE_HASH__CLOSE
 *
 * @BRIEF        Last packet will be padded. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_MODE__CLOSE_HASH__CLOSE      0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_MODE__ALGO_CONSTANT__CALC_DIGEST
 *
 * @BRIEF        Use pre-calculated digest (from an other operation) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_MODE__ALGO_CONSTANT__CALC_DIGEST 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_MODE__ALGO_CONSTANT__ALGO_DIGEST
 *
 * @BRIEF        Use constants of the selected algo. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_MODE__ALGO_CONSTANT__ALGO_DIGEST 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_MODE__ALGO__MD5_128
 *
 * @BRIEF        md5_128 algorithm - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_MODE__ALGO__MD5_128          0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_MODE__ALGO__SHA1_160
 *
 * @BRIEF        sha1_160 algorithm - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_MODE__ALGO__SHA1_160         0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_MODE__ALGO__SHA2_224
 *
 * @BRIEF        sha2_224 algorithm - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_MODE__ALGO__SHA2_224         0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_MODE__ALGO__SHA2_256
 *
 * @BRIEF        sha2_256 algorithm - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_MODE__ALGO__SHA2_256         0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_REVISION__SCHEME__LEGACY
 *
 * @BRIEF        Legacy ASP or WTBU scheme - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_REVISION__SCHEME__LEGACY     0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_REVISION__SCHEME__H08
 *
 * @BRIEF        Highlander 0.8 scheme - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_REVISION__SCHEME__H08        0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_REVISION__CUSTOM__STANDARD
 *
 * @BRIEF        Non custom (standard) revision - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_REVISION__CUSTOM__STANDARD   0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_SYSCONFIG__PDMA_EN__DMA_DISEN
 *
 * @BRIEF        Interrupt disenabled - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_SYSCONFIG__PDMA_EN__DMA_DISEN 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_SYSCONFIG__PDMA_EN__DMA_EN
 *
 * @BRIEF        Interrupt enabled - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_SYSCONFIG__PDMA_EN__DMA_EN   0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_SYSCONFIG__PIT_EN__IT_DISEN
 *
 * @BRIEF        Interrupt disenabled - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_SYSCONFIG__PIT_EN__IT_DISEN  0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SHAEIP75T__SHA_P_SYSCONFIG__PIT_EN__IT_EN
 *
 * @BRIEF        Interrupt enabled - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SHAEIP75T__SHA_P_SYSCONFIG__PIT_EN__IT_EN     0x1ul

#ifdef __cplusplus
}
#endif
#endif                                                     /* __SHAEIP75T_CRED_H 
                                                            */
