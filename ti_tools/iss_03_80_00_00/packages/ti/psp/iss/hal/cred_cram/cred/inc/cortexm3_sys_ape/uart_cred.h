/** ==================================================================
 *  @file   uart_cred.h                                                  
 *                                                                    
 *  @path   /ti/psp/iss/hal/cred_cram/cred/inc/cortexm3_sys_ape/                                                  
 *                                                                    
 *  @desc   This  File contains.                                      
 * ===================================================================
 *  Copyright (c) Texas Instruments Inc 2011, 2012                    
 *                                                                    
 *  Use of this software is controlled by the terms and conditions found
 *  in the license agreement under which this software has been supplied
 * ===================================================================*/

/* ============================================================================ 
 * TEXAS INSTRUMENTS INCORPORATED PROPRIETARY INFORMATION Property of Texas
 * Instruments For Unrestricted Internal Use Only Unauthorized reproduction
 * and/or distribution is strictly prohibited.  This product is protected
 * under copyright law and trade secret law as an unpublished work.  Created
 * 2008, (C) Copyright 2008 Texas Instruments.  All rights reserved. */

/**
 *  @Component:   UART
 *
 *  @Filename:    uart_cred.h
 *
 *  @Description: UART Cell including Modal behaviour 
 *
 *  Generated by: Socrates CRED generator prototype
 *
    *//* ====================================================================== */

#ifndef __UART_CRED_H
#define __UART_CRED_H

#ifdef __cplusplus
extern "C" {
#endif

    /* 
     * Instance UART3 of component UART mapped in MONICA at address 0x48020000
     */

                                                                              /*-------------------------------------------------------------------------*//**
 * @DEFINITION   BITFIELD
 *
 * @BRIEF        The bitfield must be defined according to register width
 *               of the component - 64/32/16/8
 *
    *//*------------------------------------------------------------------------ */
#undef BITFIELD
#define BITFIELD BITFIELD_32

    /* 
     *  List of Register arrays for component UART
     *
     */

    /* 
     *  List of bundle arrays for component UART
     *
     */

    /* 
     *  List of bundles for component UART
     *
     */

    /* 
     * List of registers for component UART
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__THR
 *
 * @BRIEF        The transmitter section consists of the transmit holding 
 *               register (THR) and the transmit shift register. The transmit 
 *               holding register is actually a 64-byte FIFO. The LH writes 
 *               data to the THR. The data is placed into the transmit shift 
 *               register where it is shifted out serially on the TX output. 
 *               If the FIFO is disabled location zero of the FIFO is used to 
 *               store the data.  
 *
    *//*------------------------------------------------------------------------ */
#define UART__THR                                          0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__RHR
 *
 * @BRIEF        The receiver section consists of the receiver holding 
 *               register (RHR) and the receiver shift register. The RHR is 
 *               actually a 64-byte FIFO. The receiver shift register 
 *               receives serial data from RX input. The data is converted to 
 *               parallel data and moved to the RHR. If the FIFO is disabled 
 *               location zero of the FIFO is used to store the single data 
 *               character.  
 *               Note: If an overflow occurs the data in the RHR is not 
 *               overwritten. 
 *
    *//*------------------------------------------------------------------------ */
#define UART__RHR                                          0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART
 *
 * @BRIEF        The interrupt enable register (IER) can be programmed to 
 *               enable/disable any interrupt. There are seven types of 
 *               interrupt in this mode: receiver error, RHR interrupt, THR 
 *               interrupt, XOFF received and CTS*|RTS* change of state from 
 *               low to high. Each interrupt can be enabled/disabled 
 *               individually. There is also a sleep mode enable bit. 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART                                     0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__FCR
 *
 * @BRIEF        Notes: 
 *                Bits 4 and 5 can only be written to when EFR[4] = 1 
 *                Bits 0 to 3 can be changed only when the baud clock is not 
 *               running (DLL and DLH set to 0) 
 *                See Table 31 for FCR[5:4] setting restriction when SCR[6]=1 
 *                See Table 32 for FCR[7:6] setting restriction when SCR[7]=1 
 *
    *//*------------------------------------------------------------------------ */
#define UART__FCR                                          0x8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IIR_UART
 *
 * @BRIEF        The IIR is a read-only register, which provides the source 
 *               of the interrupt in a prioritized manner. 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IIR_UART                                     0x8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LCR
 *
 * @BRIEF        LCR[6:0] define parameters of the transmission and 
 *               reception. 
 *               Note: As soon as LCR[6] is set to 1, the TX line is forced 
 *               to 0 and remains in this state as long as LCR[6] = 1. 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LCR                                          0xCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MCR
 *
 * @BRIEF        MCR[3:0] controls the interface with the modem, data set or 
 *               peripheral device that is emulating the modem.  
 *
    *//*------------------------------------------------------------------------ */
#define UART__MCR                                          0x10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART                                     0x14ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MSR
 *
 * @BRIEF        This register provides information about the current state 
 *               of the control lines from the modem, data set or peripheral 
 *               device to the LH. It also indicates when a control input 
 *               from the modem changes state. 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MSR                                          0x18ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SPR
 *
 * @BRIEF        This read/write register does not control the module in 
 *               anyway. It is intended as a scratchpad register to be used 
 *               by the programmer to hold temporary data. 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SPR                                          0x1Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1
 *
 * @BRIEF        The mode of operation can be programmed by writing to 
 *               MDR1[2:0] and therefore the MDR1 must be programmed on 
 *               start-up after configuration of the configuration registers 
 *               (DLL, DLH, LCR). The value of MDR1[2:0] must not be changed 
 *               again during normal operation.  
 *               Note: If the module is disabled by setting the MODE_SELECT 
 *               field to 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1                                         0x20ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR2
 *
 * @BRIEF        IR-IrDA and IR-CIR modes only. 
 *               MDR2[0] describes the status of the interrupt in IIR[5]. The 
 *               IRTX_UNDERRUN bit should be read after an IIR[5] 
 *               TX_STATUS_IT interrupt has occurred. The bits [2:1] of this 
 *               register sets the trigger level for the frame status FIFO (8 
 *               entries) and must be programmed before the mode is 
 *               programmed in MDR1[2:0]. 
 *               Note: The MDR2[6] gives the flexibility to invert the RX pin 
 *               inside the UART module to ensure that the protocol at the 
 *               input of the transceiver module has the same polarity at 
 *               module level. By default, the RX pin is inverted because 
 *               most of transceiver invert the IR receive pin. 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR2                                         0x24ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SFLSR
 *
 * @BRIEF        IrDA modes only. 
 *               Reading this register effectively reads frame status 
 *               information from the status FIFO (this register doesn't 
 *               physically exist). Reading this register will increment the 
 *               status FIFO read pointer (SFREGL and SFREGH must be read 
 *               first). 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SFLSR                                        0x28ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__TXFLL
 *
 * @BRIEF        IrDA modes only. 
 *               The registers TXFLL and TXFLH hold the 13-bit transmit frame 
 *               length (expressed in bytes). TXFLL holds the least 
 *               significant bits and TXFLH holds the most significant bits. 
 *               The frame length value is used if the frame length method of 
 *               frame closing is used. 
 *
    *//*------------------------------------------------------------------------ */
#define UART__TXFLL                                        0x28ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__RESUME
 *
 * @BRIEF        IR-IrDA and IR-CIR modes only. 
 *               This register is used to clear internal flags, which halt 
 *               transmission/reception when an underrun/overrun error 
 *               occurs. Reading this register resumes the halted operation. 
 *               This register does not physically exist and reads always as 
 *               0x00. 
 *
    *//*------------------------------------------------------------------------ */
#define UART__RESUME                                       0x2Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__TXFLH
 *
 * @BRIEF        IrDA modes only. 
 *               The registers TXFLL and TXFLH hold the 13-bit transmit frame 
 *               length (expressed in bytes). TXFLL holds the least 
 *               significant bits and TXFLH holds the most significant bits. 
 *               The frame length value is used if the frame length method of 
 *               frame closing is used. 
 *
    *//*------------------------------------------------------------------------ */
#define UART__TXFLH                                        0x2Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SFREGL
 *
 * @BRIEF        IrDA modes only. 
 *               The frame lengths of received frames are written into the 
 *               status FIFO. This information can be read by reading the 
 *               SFREGL and SFREGH registers (i.e. these registers do not 
 *               physically exist). The least significant bits are read from 
 *               SFREGL and the most significant bits are read from SFREGH. 
 *               Reading these registers does not alter the status FIFO read 
 *               pointer. These registers should be read before the pointer 
 *               is incremented by reading the SFLSR. 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SFREGL                                       0x30ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__RXFLL
 *
 * @BRIEF        IrDA modes only. 
 *               The registers RXFLL and RXFLH hold the 12-bit receive 
 *               maximum frame length. RXFLL holds the least significant bits 
 *               and RXFLH holds the most significant bits. If the intended 
 *               maximum receive frame length is n bytes, then program RXFLL 
 *               and RXFLH to be n + 3 in SIR or MIR modes and n + 6 in FIR 
 *               mode (+3 and +6 are due to frame format with CRC and stop 
 *               flag; there are two bytes associated with the FIR stop 
 *               flag). 
 *
    *//*------------------------------------------------------------------------ */
#define UART__RXFLL                                        0x30ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SFREGH
 *
 * @BRIEF        IrDA modes only. 
 *               The frame lengths of received frames are written into the 
 *               status FIFO. This information can be read by reading the 
 *               SFREGL and SFREGH registers (i.e. these registers do not 
 *               physically exist). The least significant bits are read from 
 *               SFREGL and the most significant bits are read from SFREGH. 
 *               Reading these registers does not alter the status FIFO read 
 *               pointer. These registers should be read before the pointer 
 *               is incremented by reading the SFLSR. 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SFREGH                                       0x34ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__RXFLH
 *
 * @BRIEF        IrDA modes only. 
 *               The registers RXFLL and RXFLH hold the 12-bit receive 
 *               maximum frame length. RXFLL holds the least significant bits 
 *               and RXFLH holds the most significant bits. If the intended 
 *               maximum receive frame length is n bytes, then program RXFLL 
 *               and RXFLH to be n + 3 in SIR or MIR modes and n + 6 in FIR 
 *               mode (+3 and +6 are due to frame format with CRC and stop 
 *               flag; there are two bytes associated with the FIR stop 
 *               flag). 
 *
    *//*------------------------------------------------------------------------ */
#define UART__RXFLH                                        0x34ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__BLR
 *
 * @BRIEF        IrDA modes only. 
 *               Note that BLR[6] is used to select whether 0xC0 or 0xFF 
 *               start patterns are to be used, when multiple start flags are 
 *               required in SIR Mode. If only one start flag is required, 
 *               this will always be 0xC0. If n start flags are required, 
 *               then either (n-1) 0xC0 or (n-1) 0xFF flags are sent, 
 *               followed by a single 0xC0 flag (immediately preceding the 
 *               first data byte). 
 *
    *//*------------------------------------------------------------------------ */
#define UART__BLR                                          0x38ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ACREG
 *
 * @BRIEF        IR-IrDA and IR-CIR modes only. 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ACREG                                        0x3Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR
 *
 * @BRIEF        Note: Bit 4 enables the wake-up interrupt, but this 
 *               interrupt is not mapped into the IIR register. Therefore, 
 *               when an interrupt occurs and there is no interrupt pending 
 *               in the IIR register, the SSR[1] bit must be checked. To 
 *               clear the wake-up interrupt, bit SCR[4] must be reset to 0. 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR                                          0x40ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SSR
 *
 * @BRIEF        Note: Bit 1 is reset only when SCR[4] is reset to 0. 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SSR                                          0x44ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__EBLR
 *
 * @BRIEF        IR-IrDA and IR-CIR modes only. 
 *               In IR-IrDA SIR operation, this register specifies the number 
 *               of BOF + xBOFs to transmit. Value set into this register 
 *               must take into account the BOF character, therefore to only 
 *               sent one BOF with no XBOF this register must be set to 1. To 
 *               send one BOF with N XBOF this register must be set to N+1. 
 *               Furthermore, the value 0 will send 1 BOF plus 255 XBOF. 
 *               In IR-IrDA MIR mode, this register specifies the number of 
 *               additional start flags (MIR protocol mandates a minimum of 2 
 *               start flags). 
 *               In IR-CIR mode, this register specifies the number of 
 *               consecutive zeros to be received before generating the 
 *               RX_STOP interrupt (IIR[2]). All the received zeros are 
 *               stored in the RX FIFO. When the register is set to 0, this 
 *               feature is de-activated and always in reception state which 
 *               can be disabled by setting the ACREG[5] to 
 *
    *//*------------------------------------------------------------------------ */
#define UART__EBLR                                         0x48ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MVR
 *
 * @BRIEF        The reset value is fixed by hardware and corresponds to the 
 *               RTL revision of this module. A reset has no effect on the 
 *               value returned 
 *               Notes: 
 *                UART / IRDA SIR only module is revision 1.x (WMU_012_1 
 *               specification). 
 *                UART / IRDA with SIR, MIR and FIR support is revision 2.x 
 *               (WMU_012_2 specification). 
 *                UART / IRDA with SIR, MIR and FIR / CIR support is revision 
 *               3.x (this specification). 
 *               For example: MVR = 0x30 => Version 3.0 MVR = 0x38 => Version 
 *               3.8 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MVR                                          0x50ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SYSC
 *
 * @BRIEF        The auto idle bit controls a power saving technique to 
 *               reduce the logic power consumption of the OCP interface. 
 *               That is to say when the feature is enabled, the clock will 
 *               be gated off until an OCP command for this device has been 
 *               detected. When the software reset bit is set high it causes 
 *               a full device reset. 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SYSC                                         0x54ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SYSS
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define UART__SYSS                                         0x58ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER
 *
 * @BRIEF        The UART wakeup enable register is used to mask and unmask a 
 *               UART event that would subsequently notify the system. The 
 *               events are any activity in the logic that could cause an 
 *               interrupt and/ or an activity that would require the system 
 *               to wakeup. It should be noted that even if the wakeup is 
 *               disabled for certain events, if these events are also an 
 *               interrupt to the UART, then the UART will still register the 
 *               interrupt as such. 
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER                                          0x5Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__CFPS
 *
 * @BRIEF        Since the Consumer IR works at modulation rates of 30  56.8 
 *               KHz, the 48 MHz clock must be pre scaled before the clock 
 *               can drive the IR logic. This register sets the divisor rate 
 *               to give a range to accommodate the remote control 
 *               requirements in BAUD multiples of 12x. The value of the CFPS 
 *               at reset is 0105 decimal which equates to a 38.1 KHz output 
 *               from starting conditions. The 48 MHz carrier is prescaled by 
 *               the CFPS which is then divided by the 12x BAUD multiple. 
 *
    *//*------------------------------------------------------------------------ */
#define UART__CFPS                                         0x60ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__RXFIFO_LVL
 *
 * @BRIEF        Level of the RX FIFO 
 *
    *//*------------------------------------------------------------------------ */
#define UART__RXFIFO_LVL                                   0x64ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__TXFIFO_LVL
 *
 * @BRIEF        Level of the TX FIFO 
 *
    *//*------------------------------------------------------------------------ */
#define UART__TXFIFO_LVL                                   0x68ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER2
 *
 * @BRIEF        Enables RX/TX FIFOs empty corresponding interrupts. 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER2                                         0x6Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ISR2
 *
 * @BRIEF        Status of  RX/TX FIFOs empty corresponding interrupts. 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ISR2                                         0x70ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR3
 *
 * @BRIEF        Mode definition register 3. 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR3                                         0x80ul

    /* 
     * List of register bitfields for component UART
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__THR__THR   
 *
 * @BRIEF        TRANSMIT HOLDING REGISTER - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__THR__THR                                BITFIELD(7, 0)
#define UART__THR__THR__POS                           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__RHR__RHR   
 *
 * @BRIEF        Receive holding register - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__RHR__RHR                                BITFIELD(7, 0)
#define UART__RHR__RHR__POS                           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__CTS_IT   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__CTS_IT                        BITFIELD(7, 7)
#define UART__IER_UART__CTS_IT__POS                   7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__RTS_IT   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__RTS_IT                        BITFIELD(6, 6)
#define UART__IER_UART__RTS_IT__POS                   6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__XOFF_IT   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__XOFF_IT                       BITFIELD(5, 5)
#define UART__IER_UART__XOFF_IT__POS                  5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__SLEEP_MODE   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__SLEEP_MODE                    BITFIELD(4, 4)
#define UART__IER_UART__SLEEP_MODE__POS               4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__MODEM_STS_IT   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__MODEM_STS_IT                  BITFIELD(3, 3)
#define UART__IER_UART__MODEM_STS_IT__POS             3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__LINE_STS_IT   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__LINE_STS_IT                   BITFIELD(2, 2)
#define UART__IER_UART__LINE_STS_IT__POS              2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__THR_IT   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__THR_IT                        BITFIELD(1, 1)
#define UART__IER_UART__THR_IT__POS                   1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__RHR_IT   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__RHR_IT                        BITFIELD(0, 0)
#define UART__IER_UART__RHR_IT__POS                   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__FCR__RX_FIFO_TRIG   
 *
 * @BRIEF        Sets the trigger level for the RX FIFO: 
 *               If SCR[7] = 0 and TLR[7:4] = 0000: 
 *               00:   8 characters 
 *               01: 16 characters 
 *               10: 56 characters 
 *               11: 60 characters 
 *               If SCR[7] = 0 and TLR[7:4] != 0000, RX_FIFO_TRIG is not 
 *               considered. 
 *               If SCR[7]=1, RX_FIFO_TRIG is 2 LSB of the trigger level 
 *               (1-63 on 6 bits) with the granularity 1. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__FCR__RX_FIFO_TRIG                       BITFIELD(7, 6)
#define UART__FCR__RX_FIFO_TRIG__POS                  6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__FCR__TX_FIFO_TRIG   
 *
 * @BRIEF        Sets the trigger level for the TX FIFO: 
 *               If SCR[6] = 0 and TLR[3:0] = 0000: 
 *               00:   8 spaces 
 *               01: 16 spaces 
 *               10: 32 spaces 
 *               11: 56 spaces 
 *               If SCR[6] = 0 and TLR[3:0] != 0000, TX_FIFO_TRIG is not 
 *               considered. 
 *               If SCR[6]=1, TX_FIFO_TRIG is 2 LSB of the trigger level 
 *               (1-63 on 6 bits) with the granularity 1 - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__FCR__TX_FIFO_TRIG                       BITFIELD(5, 4)
#define UART__FCR__TX_FIFO_TRIG__POS                  4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__FCR__DMA_MODE   
 *
 * @BRIEF        This register is considered if SCR[0] = 0. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__FCR__DMA_MODE                           BITFIELD(3, 3)
#define UART__FCR__DMA_MODE__POS                      3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__FCR__TX_FIFO_CLEAR   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__FCR__TX_FIFO_CLEAR                      BITFIELD(2, 2)
#define UART__FCR__TX_FIFO_CLEAR__POS                 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__FCR__RX_FIFO_CLEAR   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__FCR__RX_FIFO_CLEAR                      BITFIELD(1, 1)
#define UART__FCR__RX_FIFO_CLEAR__POS                 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__FCR__FIFO_EN   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__FCR__FIFO_EN                            BITFIELD(0, 0)
#define UART__FCR__FIFO_EN__POS                       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IIR_UART__FCR_MIRROR   
 *
 * @BRIEF        Mirror the contents of FCR[0] on both bits. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IIR_UART__FCR_MIRROR                    BITFIELD(7, 6)
#define UART__IIR_UART__FCR_MIRROR__POS               6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IIR_UART__IT_TYPE   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__IIR_UART__IT_TYPE                       BITFIELD(5, 1)
#define UART__IIR_UART__IT_TYPE__POS                  1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IIR_UART__IT_PENDING   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__IIR_UART__IT_PENDING                    BITFIELD(0, 0)
#define UART__IIR_UART__IT_PENDING__POS               0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LCR__DIV_EN   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__LCR__DIV_EN                             BITFIELD(7, 7)
#define UART__LCR__DIV_EN__POS                        7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LCR__BREAK_EN   
 *
 * @BRIEF        Break control bit. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LCR__BREAK_EN                           BITFIELD(6, 6)
#define UART__LCR__BREAK_EN__POS                      6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LCR__PARITY_TYPE2   
 *
 * @BRIEF        Selects the forced parity format (if LCR[3] = 1). If LCR[5] 
 *               = 1and LCR[4] = 0, the parity bit is forced to 1 in the 
 *               transmitted and received data. If LCR[5] = 1 and LCR[4] = 1, 
 *               the parity bit is forced to 0 in the transmitted and 
 *               received data. 
 *               LCR[3] LCR[4] LCR[5] Parity 
 *               0 N/a N/a No parity 
 *               1 0 0 Odd Parity 
 *               1 1 0 Even Parity 
 *               1 0 1 Forced `1` 
 *               1 1 1 Forced `0` - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LCR__PARITY_TYPE2                       BITFIELD(5, 5)
#define UART__LCR__PARITY_TYPE2__POS                  5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LCR__PARITY_TYPE1   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__LCR__PARITY_TYPE1                       BITFIELD(4, 4)
#define UART__LCR__PARITY_TYPE1__POS                  4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LCR__PARITY_EN   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__LCR__PARITY_EN                          BITFIELD(3, 3)
#define UART__LCR__PARITY_EN__POS                     3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LCR__NB_STOP   
 *
 * @BRIEF        Specifies the number of stop bits: - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LCR__NB_STOP                            BITFIELD(2, 2)
#define UART__LCR__NB_STOP__POS                       2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LCR__CHAR_LENGTH   
 *
 * @BRIEF        Specifies the word length to be transmitted or received. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LCR__CHAR_LENGTH                        BITFIELD(1, 0)
#define UART__LCR__CHAR_LENGTH__POS                   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MCR__TCR_TLR   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__MCR__TCR_TLR                            BITFIELD(6, 6)
#define UART__MCR__TCR_TLR__POS                       6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MCR__XON_EN   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__MCR__XON_EN                             BITFIELD(5, 5)
#define UART__MCR__XON_EN__POS                        5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MCR__LOOPBACK_EN   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__MCR__LOOPBACK_EN                        BITFIELD(4, 4)
#define UART__MCR__LOOPBACK_EN__POS                   4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MCR__CD_STS_CH   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__MCR__CD_STS_CH                          BITFIELD(3, 3)
#define UART__MCR__CD_STS_CH__POS                     3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MCR__RI_STS_CH   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__MCR__RI_STS_CH                          BITFIELD(2, 2)
#define UART__MCR__RI_STS_CH__POS                     2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MCR__RTS   
 *
 * @BRIEF        In loop back controls MSR[4]. 
 *               If auto-RTS is enabled the RTS* output is controlled by 
 *               hardware flow control. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MCR__RTS                                BITFIELD(1, 1)
#define UART__MCR__RTS__POS                           1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MCR__DTR   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__MCR__DTR                                BITFIELD(0, 0)
#define UART__MCR__DTR__POS                           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__RX_FIFO_STS   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__RX_FIFO_STS                   BITFIELD(7, 7)
#define UART__LSR_UART__RX_FIFO_STS__POS              7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__TX_SR_E   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__TX_SR_E                       BITFIELD(6, 6)
#define UART__LSR_UART__TX_SR_E__POS                  6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__TX_FIFO_E   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__TX_FIFO_E                     BITFIELD(5, 5)
#define UART__LSR_UART__TX_FIFO_E__POS                5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__RX_BI   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__RX_BI                         BITFIELD(4, 4)
#define UART__LSR_UART__RX_BI__POS                    4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__RX_FE   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__RX_FE                         BITFIELD(3, 3)
#define UART__LSR_UART__RX_FE__POS                    3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__RX_PE   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__RX_PE                         BITFIELD(2, 2)
#define UART__LSR_UART__RX_PE__POS                    2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__RX_OE   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__RX_OE                         BITFIELD(1, 1)
#define UART__LSR_UART__RX_OE__POS                    1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__RX_FIFO_E   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__RX_FIFO_E                     BITFIELD(0, 0)
#define UART__LSR_UART__RX_FIFO_E__POS                0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MSR__NCD_STS   
 *
 * @BRIEF        This bit is the complement of the DCD* input. In loop-back 
 *               mode it is equivalent to MCR[3]  - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MSR__NCD_STS                            BITFIELD(7, 7)
#define UART__MSR__NCD_STS__POS                       7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MSR__NRI_STS   
 *
 * @BRIEF        This bit is the complement of the RI* input. In loop-back 
 *               mode it is equivalent to MCR[2] - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MSR__NRI_STS                            BITFIELD(6, 6)
#define UART__MSR__NRI_STS__POS                       6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MSR__NDSR_STS   
 *
 * @BRIEF        This bit is the complement of the DSR* input. In loop-back 
 *               mode, it is equivalent to MCR[0] - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MSR__NDSR_STS                           BITFIELD(5, 5)
#define UART__MSR__NDSR_STS__POS                      5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MSR__NCTS_STS   
 *
 * @BRIEF        This bit is the complement of the CTS* input. In loop-back 
 *               mode it is equivalent to MCR[1] - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MSR__NCTS_STS                           BITFIELD(4, 4)
#define UART__MSR__NCTS_STS__POS                      4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MSR__DCD_STS   
 *
 * @BRIEF        Indicates that DCD* input (or MCR[3] in loop back) has 
 *               changed. Cleared on a read. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MSR__DCD_STS                            BITFIELD(3, 3)
#define UART__MSR__DCD_STS__POS                       3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MSR__RI_STS   
 *
 * @BRIEF        Indicates that RI* input (or MCR[2] in loop back) has 
 *               changed state from low to high. Cleared on a read. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MSR__RI_STS                             BITFIELD(2, 2)
#define UART__MSR__RI_STS__POS                        2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MSR__DSR_STS   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__MSR__DSR_STS                            BITFIELD(1, 1)
#define UART__MSR__DSR_STS__POS                       1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MSR__CTS_STS   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__MSR__CTS_STS                            BITFIELD(0, 0)
#define UART__MSR__CTS_STS__POS                       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SPR__SPR_WORD   
 *
 * @BRIEF        Scratchpad register - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SPR__SPR_WORD                           BITFIELD(7, 0)
#define UART__SPR__SPR_WORD__POS                      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__FRAME_END_MODE   
 *
 * @BRIEF        IrDA mode only. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__FRAME_END_MODE                    BITFIELD(7, 7)
#define UART__MDR1__FRAME_END_MODE__POS               7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__SIP_MODE   
 *
 * @BRIEF        MIR/FIR modes only. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__SIP_MODE                          BITFIELD(6, 6)
#define UART__MDR1__SIP_MODE__POS                     6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__SCT   
 *
 * @BRIEF        Store and control the transmission - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__SCT                               BITFIELD(5, 5)
#define UART__MDR1__SCT__POS                          5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__SET_TXIR   
 *
 * @BRIEF        Used to configure the infrared transceiver. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__SET_TXIR                          BITFIELD(4, 4)
#define UART__MDR1__SET_TXIR__POS                     4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__IR_SLEEP   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__IR_SLEEP                          BITFIELD(3, 3)
#define UART__MDR1__IR_SLEEP__POS                     3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__MODE_SELECT   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__MODE_SELECT                       BITFIELD(2, 0)
#define UART__MDR1__MODE_SELECT__POS                  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR2__IRRXINVERT   
 *
 * @BRIEF        Only for IR mode (IRDA & CIR)Invert RX pin inside the module 
 *               before the voting or sampling system logic of the infra red 
 *               block. This will not affect the RX path in UART Modem modes. 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR2__IRRXINVERT                        BITFIELD(6, 6)
#define UART__MDR2__IRRXINVERT__POS                   6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR2__CIR_PULSE_MODE   
 *
 * @BRIEF        CIR Pulse modulation definition. It defines high level of 
 *               the pulse width associated with a digit: - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR2__CIR_PULSE_MODE                    BITFIELD(5, 4)
#define UART__MDR2__CIR_PULSE_MODE__POS               4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR2__UART_PULSE   
 *
 * @BRIEF        UART mode only. Used to allow pulse shaping in UART mode. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR2__UART_PULSE                        BITFIELD(3, 3)
#define UART__MDR2__UART_PULSE__POS                   3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR2__STS_FIFO_TRIG   
 *
 * @BRIEF        Only for IR-IRDA mode. 
 *               Frame Status FIFO Threshold select: - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR2__STS_FIFO_TRIG                     BITFIELD(2, 1)
#define UART__MDR2__STS_FIFO_TRIG__POS                1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR2__IRTX_UNDERRUN   
 *
 * @BRIEF        IRDA Transmission status interrupt.When the IIR[5] interrupt 
 *               occurs, the meaning of the interrupt is : - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR2__IRTX_UNDERRUN                     BITFIELD(0, 0)
#define UART__MDR2__IRTX_UNDERRUN__POS                0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SFLSR__OE_ERROR   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__SFLSR__OE_ERROR                         BITFIELD(4, 4)
#define UART__SFLSR__OE_ERROR__POS                    4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SFLSR__FRAME_TOO_LONG_ERROR   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__SFLSR__FRAME_TOO_LONG_ERROR             BITFIELD(3, 3)
#define UART__SFLSR__FRAME_TOO_LONG_ERROR__POS        3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SFLSR__ABORT_DETECT   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__SFLSR__ABORT_DETECT                     BITFIELD(2, 2)
#define UART__SFLSR__ABORT_DETECT__POS                2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SFLSR__CRC_ERROR   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__SFLSR__CRC_ERROR                        BITFIELD(1, 1)
#define UART__SFLSR__CRC_ERROR__POS                   1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__TXFLL__TXFLL   
 *
 * @BRIEF        LSB register used to specify the frame length - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__TXFLL__TXFLL                            BITFIELD(7, 0)
#define UART__TXFLL__TXFLL__POS                       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__RESUME__RESUME   
 *
 * @BRIEF        Dummy read to restart the TX or RX - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__RESUME__RESUME                          BITFIELD(7, 0)
#define UART__RESUME__RESUME__POS                     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__TXFLH__TXFLH   
 *
 * @BRIEF        MSB register used to specify the frame length - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__TXFLH__TXFLH                            BITFIELD(4, 0)
#define UART__TXFLH__TXFLH__POS                       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SFREGL__SFREGL   
 *
 * @BRIEF        LSB part of the frame length - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SFREGL__SFREGL                          BITFIELD(7, 0)
#define UART__SFREGL__SFREGL__POS                     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__RXFLL__RXFLL   
 *
 * @BRIEF        LSB register used to specify the frame length in reception - 
 *               (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__RXFLL__RXFLL                            BITFIELD(7, 0)
#define UART__RXFLL__RXFLL__POS                       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SFREGH__SFREGH   
 *
 * @BRIEF        MSB part of the frame length - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SFREGH__SFREGH                          BITFIELD(3, 0)
#define UART__SFREGH__SFREGH__POS                     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__RXFLH__RXFLH   
 *
 * @BRIEF        MSB register used to specify the frame length in reception - 
 *               (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__RXFLH__RXFLH                            BITFIELD(3, 0)
#define UART__RXFLH__RXFLH__POS                       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__BLR__STS_FIFO_RESET   
 *
 * @BRIEF        Status FIFO reset. This bit is self-clearing - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__BLR__STS_FIFO_RESET                     BITFIELD(7, 7)
#define UART__BLR__STS_FIFO_RESET__POS                7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__BLR__XBOF_TYPE   
 *
 * @BRIEF        SIR xBOF select. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__BLR__XBOF_TYPE                          BITFIELD(6, 6)
#define UART__BLR__XBOF_TYPE__POS                     6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ACREG__PULSE_TYPE   
 *
 * @BRIEF        SIR pulse width select: - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ACREG__PULSE_TYPE                       BITFIELD(7, 7)
#define UART__ACREG__PULSE_TYPE__POS                  7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ACREG__SD_MOD   
 *
 * @BRIEF        Primary output used to configure transceivers. Connected to 
 *               the SD/MODE input pin of IrDA transceivers. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ACREG__SD_MOD                           BITFIELD(6, 6)
#define UART__ACREG__SD_MOD__POS                      6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ACREG__DIS_IR_RX   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__ACREG__DIS_IR_RX                        BITFIELD(5, 5)
#define UART__ACREG__DIS_IR_RX__POS                   5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ACREG__DIS_TX_UNDERRUN   
 *
 * @BRIEF        It is recommended to disable TX FIFO underrun capability by 
 *               masking corresponding underrun interrupt. When disabling 
 *               underrun by setting ACREG[4]=1, garbage data is sent over TX 
 *               line. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ACREG__DIS_TX_UNDERRUN                  BITFIELD(4, 4)
#define UART__ACREG__DIS_TX_UNDERRUN__POS             4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ACREG__SEND_SIP   
 *
 * @BRIEF        MIR/FIR Modes only.Send Serial Infrared Interaction Pulse 
 *               (SIP) 
 *               If this bit is set during a MIR/FIR transmission, the SIP 
 *               will be send at the end of it.This bit automatically gets 
 *               cleared at the end of the SIP transmission. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ACREG__SEND_SIP                         BITFIELD(3, 3)
#define UART__ACREG__SEND_SIP__POS                    3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ACREG__SCTX_EN   
 *
 * @BRIEF        Store and controlled TX start. When MDR1[5] = 1 and the LH 
 *               writes 1 to this bit the TX state machine starts frame 
 *               transmission. This bit is self-clearing. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ACREG__SCTX_EN                          BITFIELD(2, 2)
#define UART__ACREG__SCTX_EN__POS                     2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ACREG__ABORT_EN   
 *
 * @BRIEF        Frame Abort. The LH can intentionally abort transmission of 
 *               a frame by writing 1 to this bit. Neither the end flag nor 
 *               the CRC bits are appended to the frame.  
 *                 If transmit FIFO is not empty and MDR1[5]=1, UART IrDA 
 *               will start a new transfer with data of previous frame as 
 *               soon as abort frame has been sent. Therefore, TX FIFO must 
 *               be reset before sending an abort frame. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ACREG__ABORT_EN                         BITFIELD(1, 1)
#define UART__ACREG__ABORT_EN__POS                    1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ACREG__EOT_EN   
 *
 * @BRIEF        EOT (end of transmission) bit. The LH writes 1 to this bit 
 *               just before it writes the last byte to the TX FIFO in 
 *               set-EOT bit frame closing method. This bit automatically 
 *               gets cleared when the LH writes to the THR (TX FIFO). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ACREG__EOT_EN                           BITFIELD(0, 0)
#define UART__ACREG__EOT_EN__POS                      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR__RX_TRIG_GRANU1   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR__RX_TRIG_GRANU1                     BITFIELD(7, 7)
#define UART__SCR__RX_TRIG_GRANU1__POS                7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR__TX_TRIG_GRANU1   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR__TX_TRIG_GRANU1                     BITFIELD(6, 6)
#define UART__SCR__TX_TRIG_GRANU1__POS                6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR__DSR_IT   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR__DSR_IT                             BITFIELD(5, 5)
#define UART__SCR__DSR_IT__POS                        5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR__RX_CTS_DSR_WAKE_UP_ENABLE   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR__RX_CTS_DSR_WAKE_UP_ENABLE          BITFIELD(4, 4)
#define UART__SCR__RX_CTS_DSR_WAKE_UP_ENABLE__POS     4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR__TX_EMPTY_CTL_IT   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR__TX_EMPTY_CTL_IT                    BITFIELD(3, 3)
#define UART__SCR__TX_EMPTY_CTL_IT__POS               3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR__DMA_MODE_2   
 *
 * @BRIEF        Used to specify the DMA mode valid if SCR[0] = 1 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR__DMA_MODE_2                         BITFIELD(2, 1)
#define UART__SCR__DMA_MODE_2__POS                    1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR__DMA_MODE_CTL   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR__DMA_MODE_CTL                       BITFIELD(0, 0)
#define UART__SCR__DMA_MODE_CTL__POS                  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SSR__DMA_COUNTER_RST   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__SSR__DMA_COUNTER_RST                    BITFIELD(2, 2)
#define UART__SSR__DMA_COUNTER_RST__POS               2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SSR__RX_CTS_DSR_WAKE_UP_STS   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__SSR__RX_CTS_DSR_WAKE_UP_STS             BITFIELD(1, 1)
#define UART__SSR__RX_CTS_DSR_WAKE_UP_STS__POS        1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SSR__TX_FIFO_FULL   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__SSR__TX_FIFO_FULL                       BITFIELD(0, 0)
#define UART__SSR__TX_FIFO_FULL__POS                  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__EBLR__EBLR   
 *
 * @BRIEF        IR-IRDA mode: This register allows to define up to 176 
 *               xBOFs, the maximum required by IrDA specification. 
 *               IR-CIR mode: This register specifies the number of 
 *               consecutive zeros to be received before generating the 
 *               RX_STOP interrupt (IIR[2]). 
 *               0x00: feature disabled. 
 *               0x01: generate RX_STOP interrupt after receiving one zero 
 *               bit. 
 *               ... 
 *               0xFF: generate RX_STOP interrupt after receiving 255 zero 
 *               bits. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__EBLR__EBLR                              BITFIELD(7, 0)
#define UART__EBLR__EBLR__POS                         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MVR__SCHEME   
 *
 * @BRIEF        Scheme revision number of module - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MVR__SCHEME                             BITFIELD(31, 30)
#define UART__MVR__SCHEME__POS                        30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MVR__RESERVED   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__MVR__RESERVED                           BITFIELD(29, 28)
#define UART__MVR__RESERVED__POS                      28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MVR__FUNC   
 *
 * @BRIEF        Function revision number of module - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MVR__FUNC                               BITFIELD(27, 16)
#define UART__MVR__FUNC__POS                          16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MVR__RTL   
 *
 * @BRIEF        Rtl revision number of module - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MVR__RTL                                BITFIELD(15, 11)
#define UART__MVR__RTL__POS                           11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MVR__MAJOR   
 *
 * @BRIEF        Major revision number of the module. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MVR__MAJOR                              BITFIELD(10, 8)
#define UART__MVR__MAJOR__POS                         8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MVR__CUSTOM   
 *
 * @BRIEF        Custom revision number of the module. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MVR__CUSTOM                             BITFIELD(7, 6)
#define UART__MVR__CUSTOM__POS                        6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MVR__MINOR   
 *
 * @BRIEF        Minor revision number of the module. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MVR__MINOR                              BITFIELD(5, 0)
#define UART__MVR__MINOR__POS                         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SYSC__IDLEMODE   
 *
 * @BRIEF        POWER MANAGEMENT REQ/ACK CONTROL 
 *               REF: OCP DESIGN GUIDELINES VERSION 1.1 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SYSC__IDLEMODE                          BITFIELD(4, 3)
#define UART__SYSC__IDLEMODE__POS                     3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SYSC__ENAWAKEUP   
 *
 * @BRIEF        WAKE UP FEATURE CONTROL - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SYSC__ENAWAKEUP                         BITFIELD(2, 2)
#define UART__SYSC__ENAWAKEUP__POS                    2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SYSC__SOFTRESET   
 *
 * @BRIEF        Software reset. Set this bit to 1 to trigger a module reset. 
 *               This bit is automatically reset by the hardware. During 
 *               reads it always returns a 0. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SYSC__SOFTRESET                         BITFIELD(1, 1)
#define UART__SYSC__SOFTRESET__POS                    1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SYSC__AUTOIDLE   
 *
 * @BRIEF        Internal OCP clock gating strategy - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SYSC__AUTOIDLE                          BITFIELD(0, 0)
#define UART__SYSC__AUTOIDLE__POS                     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SYSS__RESETDONE   
 *
 * @BRIEF        Internal Reset Monitoring - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SYSS__RESETDONE                         BITFIELD(0, 0)
#define UART__SYSS__RESETDONE__POS                    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_7_TX_WAKEUP_EN   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_7_TX_WAKEUP_EN               BITFIELD(7, 7)
#define UART__WER__EVENT_7_TX_WAKEUP_EN__POS          7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_6_RECEIVER_LINE_STATUS_INTERRUPT   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_6_RECEIVER_LINE_STATUS_INTERRUPT BITFIELD(6, 6)
#define UART__WER__EVENT_6_RECEIVER_LINE_STATUS_INTERRUPT__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_5_RHR_INTERRUPT   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_5_RHR_INTERRUPT              BITFIELD(5, 5)
#define UART__WER__EVENT_5_RHR_INTERRUPT__POS         5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_4_RX_ACTIVITY   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_4_RX_ACTIVITY                BITFIELD(4, 4)
#define UART__WER__EVENT_4_RX_ACTIVITY__POS           4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_3_DCD_CD_ACTIVITY   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_3_DCD_CD_ACTIVITY            BITFIELD(3, 3)
#define UART__WER__EVENT_3_DCD_CD_ACTIVITY__POS       3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_2_RI_ACTIVITY   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_2_RI_ACTIVITY                BITFIELD(2, 2)
#define UART__WER__EVENT_2_RI_ACTIVITY__POS           2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_1_DSR_ACTIVITY   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_1_DSR_ACTIVITY               BITFIELD(1, 1)
#define UART__WER__EVENT_1_DSR_ACTIVITY__POS          1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_0_CTS_ACTIVITY   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_0_CTS_ACTIVITY               BITFIELD(0, 0)
#define UART__WER__EVENT_0_CTS_ACTIVITY__POS          0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__CFPS__CFPS   
 *
 * @BRIEF        System clock frequency prescaler at (12x multiple). Examples 
 *               for CFPS values are given in the table below. 
 *               Target Freq (KHz) CFPS (decimal) Actual Freq(KHz) 
 *                30   133  30.08 
 *                32.75   122  32.79 
 *                36   111  36.04 
 *                36.7   109  36.69 
 *                38*   105  38.1 
 *                40   100  40 
 *                56.8   70  57.14 
 *               * configured at reset to this value 
 *               Note: CFPS = 0 is not supported. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__CFPS__CFPS                              BITFIELD(7, 0)
#define UART__CFPS__CFPS__POS                         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__RXFIFO_LVL__RXFIFO_LVL   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__RXFIFO_LVL__RXFIFO_LVL                  BITFIELD(7, 0)
#define UART__RXFIFO_LVL__RXFIFO_LVL__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__TXFIFO_LVL__TXFIFO_LVL   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define UART__TXFIFO_LVL__TXFIFO_LVL                  BITFIELD(7, 0)
#define UART__TXFIFO_LVL__TXFIFO_LVL__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER2__EN_TXFIFO_EMPTY   
 *
 * @BRIEF        Enables(1)/DISABLES(00 EN_TXFIFO_EMPTY interrupt. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER2__EN_TXFIFO_EMPTY                   BITFIELD(1, 1)
#define UART__IER2__EN_TXFIFO_EMPTY__POS              1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER2__EN_RXFIFO_EMPTY   
 *
 * @BRIEF        Enables(1)/disables(0) EN_RXFIFO_EMPTY interrupt. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER2__EN_RXFIFO_EMPTY                   BITFIELD(0, 0)
#define UART__IER2__EN_RXFIFO_EMPTY__POS              0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ISR2__TXFIFO_EMPTY_STS   
 *
 * @BRIEF        TXFIFO interrupt pending - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ISR2__TXFIFO_EMPTY_STS                  BITFIELD(1, 1)
#define UART__ISR2__TXFIFO_EMPTY_STS__POS             1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ISR2__RXFIFO_EMPTY_STS   
 *
 * @BRIEF        RXFIFO interrupt pending - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ISR2__RXFIFO_EMPTY_STS                  BITFIELD(0, 0)
#define UART__ISR2__RXFIFO_EMPTY_STS__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR3__NONDEFAULT_FREQ   
 *
 * @BRIEF        Enables(1)/Disables(0) using NONDEFAULT  fclk frequencies - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR3__NONDEFAULT_FREQ                   BITFIELD(1, 1)
#define UART__MDR3__NONDEFAULT_FREQ__POS              1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR3__DISABLE_CIR_RX_DEMOD   
 *
 * @BRIEF        Disables(1)/Enables(0) CIR RX demodulation - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR3__DISABLE_CIR_RX_DEMOD              BITFIELD(0, 0)
#define UART__MDR3__DISABLE_CIR_RX_DEMOD__POS         0

    /* 
     * List of register bitfields values for component UART
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__CTS_IT__CTS_IT_VALUE_0
 *
 * @BRIEF        Disables the CTS* interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__CTS_IT__CTS_IT_VALUE_0        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__CTS_IT__CTS_IT_VALUE_1
 *
 * @BRIEF        Enables the CTS* interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__CTS_IT__CTS_IT_VALUE_1        0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__RTS_IT__RTS_IT_VALUE_0
 *
 * @BRIEF        Disables the RTS* interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__RTS_IT__RTS_IT_VALUE_0        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__RTS_IT__RTS_IT_VALUE_1
 *
 * @BRIEF        Enables the RTS* interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__RTS_IT__RTS_IT_VALUE_1        0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__XOFF_IT__XOFF_IT_VALUE_0
 *
 * @BRIEF        Disables the XOFF interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__XOFF_IT__XOFF_IT_VALUE_0      0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__XOFF_IT__XOFF_IT_VALUE_1
 *
 * @BRIEF        Enables the XOFF interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__XOFF_IT__XOFF_IT_VALUE_1      0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__SLEEP_MODE__SLEEP_MODE_VALUE_0
 *
 * @BRIEF        Disables sleep mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__SLEEP_MODE__SLEEP_MODE_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__SLEEP_MODE__SLEEP_MODE_VALUE_1
 *
 * @BRIEF        Enables sleep mode (stop baud rate clock when the module is 
 *               inactive) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__SLEEP_MODE__SLEEP_MODE_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__MODEM_STS_IT__MODEM_STS_IT_VALUE_0
 *
 * @BRIEF        Disables the modem status register interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__MODEM_STS_IT__MODEM_STS_IT_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__MODEM_STS_IT__MODEM_STS_IT_VALUE_1
 *
 * @BRIEF        Enables the modem status register interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__MODEM_STS_IT__MODEM_STS_IT_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__LINE_STS_IT__LINE_STS_IT_U_VALUE_0
 *
 * @BRIEF        Disables the receiver line status interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__LINE_STS_IT__LINE_STS_IT_U_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__LINE_STS_IT__LINE_STS_IT_U_VALUE_1
 *
 * @BRIEF        Enables the receiver line status interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__LINE_STS_IT__LINE_STS_IT_U_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__THR_IT__THR_IT_VALUE_0
 *
 * @BRIEF        Disables the THR interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__THR_IT__THR_IT_VALUE_0        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__THR_IT__THR_IT_VALUE_1
 *
 * @BRIEF        Enables the THR interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__THR_IT__THR_IT_VALUE_1        0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__RHR_IT__RHR_IT_VALUE_0
 *
 * @BRIEF        Disables the RHR interrupt and time out interrupt. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__RHR_IT__RHR_IT_VALUE_0        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IER_UART__RHR_IT__RHR_IT_VALUE_1
 *
 * @BRIEF        Enables the RHR interrupt and time out interrupt. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IER_UART__RHR_IT__RHR_IT_VALUE_1        0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__FCR__DMA_MODE__DMA_MODE_VALUE_0
 *
 * @BRIEF        DMA_MODE 0 (No DMA) - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__FCR__DMA_MODE__DMA_MODE_VALUE_0         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__FCR__DMA_MODE__DMA_MODE_VALUE_1
 *
 * @BRIEF        DMA_MODE 1 (UART_nDMA_REQ[0] in TX, UART_nDMA_REQ[1] in RX) 
 *               - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__FCR__DMA_MODE__DMA_MODE_VALUE_1         0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__FCR__TX_FIFO_CLEAR__TX_FIFO_CLEAR_VALUE_0
 *
 * @BRIEF        No change - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__FCR__TX_FIFO_CLEAR__TX_FIFO_CLEAR_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__FCR__TX_FIFO_CLEAR__TX_FIFO_CLEAR_VALUE_1
 *
 * @BRIEF        Clears the transmit FIFO and resets its counter logic to 
 *               zero. Returns to zero after clearing FIFO. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__FCR__TX_FIFO_CLEAR__TX_FIFO_CLEAR_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__FCR__RX_FIFO_CLEAR__RX_FIFO_CLEAR_VALUE_0
 *
 * @BRIEF        No change - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__FCR__RX_FIFO_CLEAR__RX_FIFO_CLEAR_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__FCR__RX_FIFO_CLEAR__RX_FIFO_CLEAR_VALUE_1
 *
 * @BRIEF        Clears the receive FIFO and resets its counter logic to 
 *               zero. Returns to zero after clearing FIFO. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__FCR__RX_FIFO_CLEAR__RX_FIFO_CLEAR_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__FCR__FIFO_EN__FIFO_EN_VALUE_0
 *
 * @BRIEF        Disables the transmit and receive FIFOs. The transmit and 
 *               receive holding registers are one byte FIFOs. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__FCR__FIFO_EN__FIFO_EN_VALUE_0           0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__FCR__FIFO_EN__FIFO_EN_VALUE_1
 *
 * @BRIEF        : Enables the transmit and receive FIFOs.The transmit and 
 *               receive holding registers are 64-bytes FIFOs. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__FCR__FIFO_EN__FIFO_EN_VALUE_1           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IIR_UART__IT_TYPE__IT_TYPE_VALUE_0
 *
 * @BRIEF        Modem Interrupt. Priority=4 - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IIR_UART__IT_TYPE__IT_TYPE_VALUE_0      0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IIR_UART__IT_TYPE__IT_TYPE_VALUE_1
 *
 * @BRIEF        THR interrupt.  Priority=3 - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IIR_UART__IT_TYPE__IT_TYPE_VALUE_1      0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IIR_UART__IT_TYPE__IT_TYPE_VALUE_2
 *
 * @BRIEF        RHR interrupt.  Priority=2 - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IIR_UART__IT_TYPE__IT_TYPE_VALUE_2      0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IIR_UART__IT_TYPE__IT_TYPE_VALUE_3
 *
 * @BRIEF        Receiver line status error.  Priority=3 - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IIR_UART__IT_TYPE__IT_TYPE_VALUE_3      0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IIR_UART__IT_TYPE__IT_TYPE_VALUE_6
 *
 * @BRIEF        Rx timeout.  Priority=2 - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IIR_UART__IT_TYPE__IT_TYPE_VALUE_6      0x6ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IIR_UART__IT_TYPE__IT_TYPE_VALUE_8
 *
 * @BRIEF        Xoff/Special character.  Priority=5 - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IIR_UART__IT_TYPE__IT_TYPE_VALUE_8      0x8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IIR_UART__IT_TYPE__IT_TYPE_VALUE_10
 *
 * @BRIEF        CTS, RTS, DSR change state from active (low) to inactive 
 *               (high). Priority=6 - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IIR_UART__IT_TYPE__IT_TYPE_VALUE_10     0x10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IIR_UART__IT_PENDING__IT_PENDING_VALUE_0
 *
 * @BRIEF        An interrupt is pending - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IIR_UART__IT_PENDING__IT_PENDING_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__IIR_UART__IT_PENDING__IT_PENDING_VALUE_1
 *
 * @BRIEF        No interrupt is pending - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__IIR_UART__IT_PENDING__IT_PENDING_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LCR__DIV_EN__DIV_EN_VALUE_0
 *
 * @BRIEF        Normal operating condition - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LCR__DIV_EN__DIV_EN_VALUE_0             0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LCR__DIV_EN__DIV_EN_VALUE_1
 *
 * @BRIEF        Divisor latch enable. Allows to access to DLL, DLH and other 
 *               registers (refer to the registers mapping) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LCR__DIV_EN__DIV_EN_VALUE_1             0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LCR__BREAK_EN__BREAK_EN_VALUE_0
 *
 * @BRIEF        Normal operating condition. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LCR__BREAK_EN__BREAK_EN_VALUE_0         0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LCR__BREAK_EN__BREAK_EN_VALUE_1
 *
 * @BRIEF        Forces the transmitter output to go low to alert the 
 *               communication terminal - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LCR__BREAK_EN__BREAK_EN_VALUE_1         0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LCR__PARITY_TYPE1__PARITY_TYPE1_VALUE_0
 *
 * @BRIEF        Odd parity is generated (if LCR[3] = 1) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LCR__PARITY_TYPE1__PARITY_TYPE1_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LCR__PARITY_TYPE1__PARITY_TYPE1_VALUE_1
 *
 * @BRIEF        Even parity is generated (if LCR[3] = 1) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LCR__PARITY_TYPE1__PARITY_TYPE1_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LCR__PARITY_EN__PARITY_EN_VALUE_0
 *
 * @BRIEF        No parity - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LCR__PARITY_EN__PARITY_EN_VALUE_0       0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LCR__PARITY_EN__PARITY_EN_VALUE_1
 *
 * @BRIEF        A parity bit is generated during transmission and the 
 *               receiver checks for received parity. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LCR__PARITY_EN__PARITY_EN_VALUE_1       0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LCR__NB_STOP__NB_STOP_VALUE_0
 *
 * @BRIEF        1 stop bits (word length = 5, 6, 7, 8) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LCR__NB_STOP__NB_STOP_VALUE_0           0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LCR__NB_STOP__NB_STOP_VALUE_1
 *
 * @BRIEF        1.5 stop bits (word length = 5) 
 *               2   stop bits (word length = 6, 7, 8) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LCR__NB_STOP__NB_STOP_VALUE_1           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LCR__CHAR_LENGTH__CHAR_LENGTH_VALUE_0
 *
 * @BRIEF        5 bits - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LCR__CHAR_LENGTH__CHAR_LENGTH_VALUE_0   0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LCR__CHAR_LENGTH__CHAR_LENGTH_VALUE_1
 *
 * @BRIEF        6 bits - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LCR__CHAR_LENGTH__CHAR_LENGTH_VALUE_1   0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LCR__CHAR_LENGTH__CHAR_LENGTH_VALUE_2
 *
 * @BRIEF        7 bits - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LCR__CHAR_LENGTH__CHAR_LENGTH_VALUE_2   0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LCR__CHAR_LENGTH__CHAR_LENGTH_VALUE_3
 *
 * @BRIEF        8 bits - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LCR__CHAR_LENGTH__CHAR_LENGTH_VALUE_3   0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MCR__TCR_TLR__TCR_TLR_VALUE_0
 *
 * @BRIEF        No action - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MCR__TCR_TLR__TCR_TLR_VALUE_0           0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MCR__TCR_TLR__TCR_TLR_VALUE_1
 *
 * @BRIEF        Enables access to the TCR and TLR registers. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MCR__TCR_TLR__TCR_TLR_VALUE_1           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MCR__XON_EN__XON_EN_VALUE_0
 *
 * @BRIEF        Disable 'XON any' function - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MCR__XON_EN__XON_EN_VALUE_0             0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MCR__XON_EN__XON_EN_VALUE_1
 *
 * @BRIEF        Enable 'XON any' function - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MCR__XON_EN__XON_EN_VALUE_1             0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MCR__LOOPBACK_EN__LOOPBACK_EN_VALUE_0
 *
 * @BRIEF        Normal operating mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MCR__LOOPBACK_EN__LOOPBACK_EN_VALUE_0   0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MCR__LOOPBACK_EN__LOOPBACK_EN_VALUE_1
 *
 * @BRIEF        Enable local loopback mode (internal). 
 *               In this mode the MCR[3:0] signals are looped back into 
 *               MSR[7:4]. The transmit output is looped back to the receive 
 *               input internally - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MCR__LOOPBACK_EN__LOOPBACK_EN_VALUE_1   0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MCR__CD_STS_CH__CD_STS_CH_VALUE_0
 *
 * @BRIEF        In loopback forces DCD* input high and IRQ outputs to 
 *               inactive state. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MCR__CD_STS_CH__CD_STS_CH_VALUE_0       0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MCR__CD_STS_CH__CD_STS_CH_VALUE_1
 *
 * @BRIEF        In loopback forces DCD* input low and IRQ outputs to 
 *               inactive state. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MCR__CD_STS_CH__CD_STS_CH_VALUE_1       0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MCR__RI_STS_CH__RI_STS_CH_VALUE_0
 *
 * @BRIEF        In loopback forces RI* input high. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MCR__RI_STS_CH__RI_STS_CH_VALUE_0       0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MCR__RI_STS_CH__RI_STS_CH_VALUE_1
 *
 * @BRIEF        In loopback forces RI* input low. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MCR__RI_STS_CH__RI_STS_CH_VALUE_1       0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MCR__RTS__RTS_VALUE_0
 *
 * @BRIEF        Force RTS* output to inactive (high). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MCR__RTS__RTS_VALUE_0                   0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MCR__RTS__RTS_VALUE_1
 *
 * @BRIEF        Force RTS* output to active (low).  - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MCR__RTS__RTS_VALUE_1                   0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MCR__DTR__DTR_VALUE_0
 *
 * @BRIEF        Force DTR* output to inactive (high). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MCR__DTR__DTR_VALUE_0                   0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MCR__DTR__DTR_VALUE_1
 *
 * @BRIEF        Force DTR* output to active (low). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MCR__DTR__DTR_VALUE_1                   0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__RX_FIFO_STS__RX_FIFO_STS_VALUE_0
 *
 * @BRIEF        Normal operation - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__RX_FIFO_STS__RX_FIFO_STS_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__RX_FIFO_STS__RX_FIFO_STS_VALUE_1
 *
 * @BRIEF        At least one parity error, framing error or break indication 
 *               in the RX FIFO. Bit 7 is cleared when no more errors are 
 *               present in the RX FIFO. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__RX_FIFO_STS__RX_FIFO_STS_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__TX_SR_E__TX_SR_E_VALUE_0
 *
 * @BRIEF        Transmitter hold (TX FIFO) and shift registers are not 
 *               empty. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__TX_SR_E__TX_SR_E_VALUE_0      0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__TX_SR_E__TX_SR_E_VALUE_1
 *
 * @BRIEF        Transmitter hold (TX FIFO) and shift registers are empty - 
 *               (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__TX_SR_E__TX_SR_E_VALUE_1      0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__TX_FIFO_E__TX_FIFO_E_VALUE_0
 *
 * @BRIEF        Transmit hold register (TX FIFO) is not empty - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__TX_FIFO_E__TX_FIFO_E_VALUE_0  0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__TX_FIFO_E__TX_FIFO_E_VALUE_1
 *
 * @BRIEF        Transmit hold register (TX FIFO) is empty. The transmission 
 *               is not necessarily completed.  - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__TX_FIFO_E__TX_FIFO_E_VALUE_1  0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__RX_BI__RX_BI_VALUE_0
 *
 * @BRIEF        No break condition - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__RX_BI__RX_BI_VALUE_0          0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__RX_BI__RX_BI_VALUE_1
 *
 * @BRIEF        A break was detected while the data being read from the RX 
 *               FIFO was being received. (i.e. RX input was low for one 
 *               character + 1 bit time frame). - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__RX_BI__RX_BI_VALUE_1          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__RX_FE__RX_FE_VALUE_0
 *
 * @BRIEF        No framing error in data being read from RX FIFO. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__RX_FE__RX_FE_VALUE_0          0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__RX_FE__RX_FE_VALUE_1
 *
 * @BRIEF        Framing error occurred in data being read from RX 
 *               FIFO.(received data did not have a valid stop bit) - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__RX_FE__RX_FE_VALUE_1          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__RX_PE__RX_PE_VALUE_0
 *
 * @BRIEF        No parity error in data being read from RX FIFO. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__RX_PE__RX_PE_VALUE_0          0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__RX_PE__RX_PE_VALUE_1
 *
 * @BRIEF        Parity error in data being read from RX FIFO - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__RX_PE__RX_PE_VALUE_1          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__RX_OE__RX_OE_VALUE_0
 *
 * @BRIEF        No overrun error - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__RX_OE__RX_OE_VALUE_0          0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__RX_OE__RX_OE_VALUE_1
 *
 * @BRIEF        Overrun error has occurred. Set when the character held in 
 *               the receive shift register is not transferred to the RX 
 *               FIFO. This case can occurs only when receive FIFO is full. - 
 *               (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__RX_OE__RX_OE_VALUE_1          0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__RX_FIFO_E__RX_FIFO_E_VALUE_0
 *
 * @BRIEF        No data in the receive FIFO - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__RX_FIFO_E__RX_FIFO_E_VALUE_0  0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__LSR_UART__RX_FIFO_E__RX_FIFO_E_VALUE_1
 *
 * @BRIEF        At least one data character in the RX FIFO - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__LSR_UART__RX_FIFO_E__RX_FIFO_E_VALUE_1  0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MSR__DSR_STS__DSR_STS_VALUE_1
 *
 * @BRIEF        Indicates that DSR* input (or MCR[0] in loop back) has 
 *               changed state. Cleared on a read - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MSR__DSR_STS__DSR_STS_VALUE_1           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MSR__CTS_STS__CTS_STS_VALUE_1
 *
 * @BRIEF        Indicates that CTS* input (or MCR[1] in loop back) has 
 *               changed state. Cleared on a read. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MSR__CTS_STS__CTS_STS_VALUE_1           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__FRAME_END_MODE__FRAME_END_MODE_VALUE_0
 *
 * @BRIEF        Frame-length method - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__FRAME_END_MODE__FRAME_END_MODE_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__FRAME_END_MODE__FRAME_END_MODE_VALUE_1
 *
 * @BRIEF        Set EOT bit method - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__FRAME_END_MODE__FRAME_END_MODE_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__SIP_MODE__SIP_MODE_VALUE_0
 *
 * @BRIEF        Manual SIP mode: SIP is generated with the control of 
 *               ACREG[3] - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__SIP_MODE__SIP_MODE_VALUE_0        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__SIP_MODE__SIP_MODE_VALUE_1
 *
 * @BRIEF        Automatic SIP mode: SIP is generated after each 
 *               transmission. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__SIP_MODE__SIP_MODE_VALUE_1        0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__SCT__SCT_VALUE_0
 *
 * @BRIEF        Starts the Infrared transmission as soon as a value is 
 *               written to THR - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__SCT__SCT_VALUE_0                  0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__SCT__SCT_VALUE_1
 *
 * @BRIEF        Starts the Infrared transmission with the control of 
 *               ACREG[2] 
 *               Note: before starting any transmission, there must be no 
 *               reception on going. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__SCT__SCT_VALUE_1                  0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__SET_TXIR__SET_TXIR_VALUE_0
 *
 * @BRIEF        a) No action if MDR2[7]=0 
 *                    b) TXIR pin output is forced low if MDR2[7]=1 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__SET_TXIR__SET_TXIR_VALUE_0        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__SET_TXIR__SET_TXIR_VALUE_1
 *
 * @BRIEF        TXIR pin output is forced high (not dependant of MDR2[7] 
 *               value). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__SET_TXIR__SET_TXIR_VALUE_1        0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__IR_SLEEP__IR_SLEEP_VALUE_0
 *
 * @BRIEF        IrDA/CIR sleep mode disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__IR_SLEEP__IR_SLEEP_VALUE_0        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__IR_SLEEP__IR_SLEEP_VALUE_1
 *
 * @BRIEF        IrDA/CIR sleep mode enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__IR_SLEEP__IR_SLEEP_VALUE_1        0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__MODE_SELECT__MODE_SELECT_VALUE_0
 *
 * @BRIEF        UART 16x mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__MODE_SELECT__MODE_SELECT_VALUE_0  0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__MODE_SELECT__MODE_SELECT_VALUE_1
 *
 * @BRIEF        SIR mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__MODE_SELECT__MODE_SELECT_VALUE_1  0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__MODE_SELECT__MODE_SELECT_VALUE_2
 *
 * @BRIEF        UART 16x auto-baud - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__MODE_SELECT__MODE_SELECT_VALUE_2  0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__MODE_SELECT__MODE_SELECT_VALUE_3
 *
 * @BRIEF        UART 13x mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__MODE_SELECT__MODE_SELECT_VALUE_3  0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__MODE_SELECT__MODE_SELECT_VALUE_4
 *
 * @BRIEF        MIR mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__MODE_SELECT__MODE_SELECT_VALUE_4  0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__MODE_SELECT__MODE_SELECT_VALUE_5
 *
 * @BRIEF        FIR mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__MODE_SELECT__MODE_SELECT_VALUE_5  0x5ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__MODE_SELECT__MODE_SELECT_VALUE_6
 *
 * @BRIEF        CIR mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__MODE_SELECT__MODE_SELECT_VALUE_6  0x6ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR1__MODE_SELECT__MODE_SELECT_VALUE_7
 *
 * @BRIEF        Disable (default state) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR1__MODE_SELECT__MODE_SELECT_VALUE_7  0x7ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR2__IRRXINVERT__IRRXINVERT_VALUE_0
 *
 * @BRIEF        inversion is performed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR2__IRRXINVERT__IRRXINVERT_VALUE_0    0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR2__IRRXINVERT__IRRXINVERT_VALUE_1
 *
 * @BRIEF        No inversion is performed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR2__IRRXINVERT__IRRXINVERT_VALUE_1    0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR2__CIR_PULSE_MODE__CIR_PULSE_MODE_VALUE_0
 *
 * @BRIEF        Pulse width of 3 from 12 cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR2__CIR_PULSE_MODE__CIR_PULSE_MODE_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR2__CIR_PULSE_MODE__CIR_PULSE_MODE_VALUE_1
 *
 * @BRIEF        Pulse width of 4 from 12 cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR2__CIR_PULSE_MODE__CIR_PULSE_MODE_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR2__CIR_PULSE_MODE__CIR_PULSE_MODE_VALUE_2
 *
 * @BRIEF        Pulse width of 5 from 12 cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR2__CIR_PULSE_MODE__CIR_PULSE_MODE_VALUE_2 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR2__CIR_PULSE_MODE__CIR_PULSE_MODE_VALUE_3
 *
 * @BRIEF        Pulse width of 6 from 12 cycles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR2__CIR_PULSE_MODE__CIR_PULSE_MODE_VALUE_3 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR2__UART_PULSE__UART_PULSE_VALUE_0
 *
 * @BRIEF        normal UART mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR2__UART_PULSE__UART_PULSE_VALUE_0    0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR2__UART_PULSE__UART_PULSE_VALUE_1
 *
 * @BRIEF        UART mode with a pulse shaping - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR2__UART_PULSE__UART_PULSE_VALUE_1    0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR2__STS_FIFO_TRIG__STS_FIFO_TRIG_VALUE_0
 *
 * @BRIEF        1 entry  - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR2__STS_FIFO_TRIG__STS_FIFO_TRIG_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR2__STS_FIFO_TRIG__STS_FIFO_TRIG_VALUE_1
 *
 * @BRIEF        4 entries - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR2__STS_FIFO_TRIG__STS_FIFO_TRIG_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR2__STS_FIFO_TRIG__STS_FIFO_TRIG_VALUE_2
 *
 * @BRIEF        7 entries - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR2__STS_FIFO_TRIG__STS_FIFO_TRIG_VALUE_2 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR2__STS_FIFO_TRIG__STS_FIFO_TRIG_VALUE_3
 *
 * @BRIEF        8 entries - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR2__STS_FIFO_TRIG__STS_FIFO_TRIG_VALUE_3 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR2__IRTX_UNDERRUN__IRTX_UNDERRUN_VALUE_0
 *
 * @BRIEF        the last bit of the frame has been transmitted successfully 
 *               without error. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR2__IRTX_UNDERRUN__IRTX_UNDERRUN_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR2__IRTX_UNDERRUN__IRTX_UNDERRUN_VALUE_1
 *
 * @BRIEF        an underrun has occurred. The last bit of the frame has been 
 *               transmitted but with an underrun error present. The bit is 
 *               reset to '0' when the RESUME register is read. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR2__IRTX_UNDERRUN__IRTX_UNDERRUN_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SFLSR__OE_ERROR__OE_ERROR_VALUE_1
 *
 * @BRIEF        Overrun error in RX FIFO when frame at top of RX FIFO was 
 *               received. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SFLSR__OE_ERROR__OE_ERROR_VALUE_1       0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SFLSR__FRAME_TOO_LONG_ERROR__FRAME_TOO_LONG_ERROR_VALUE_1
 *
 * @BRIEF        Frame-length too long error in frame at top of RX FIFO. - 
 *               (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SFLSR__FRAME_TOO_LONG_ERROR__FRAME_TOO_LONG_ERROR_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SFLSR__ABORT_DETECT__ABORT_DETECT_VALUE_1
 *
 * @BRIEF        Abort pattern detected in frame at top of RX FIFO - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SFLSR__ABORT_DETECT__ABORT_DETECT_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SFLSR__CRC_ERROR__CRC_ERROR_VALUE_1
 *
 * @BRIEF        CRC error in frame at top of RX FIFO 
 *               `top of RX FIFO` = Next frame to be read from RX FIFO - 
 *               (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SFLSR__CRC_ERROR__CRC_ERROR_VALUE_1     0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__BLR__XBOF_TYPE__XBOF_TYPE_VALUE_0
 *
 * @BRIEF        0xFF - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__BLR__XBOF_TYPE__XBOF_TYPE_VALUE_0       0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__BLR__XBOF_TYPE__XBOF_TYPE_VALUE_1
 *
 * @BRIEF        0xC0 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__BLR__XBOF_TYPE__XBOF_TYPE_VALUE_1       0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ACREG__PULSE_TYPE__PULSE_TYPE_VALUE_0
 *
 * @BRIEF        3/16 of baud-rate pulse width - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ACREG__PULSE_TYPE__PULSE_TYPE_VALUE_0   0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ACREG__PULSE_TYPE__PULSE_TYPE_VALUE_1
 *
 * @BRIEF        1.6us - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ACREG__PULSE_TYPE__PULSE_TYPE_VALUE_1   0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ACREG__SD_MOD__SD_MOD_VALUE_0
 *
 * @BRIEF        SD pin is set to high - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ACREG__SD_MOD__SD_MOD_VALUE_0           0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ACREG__SD_MOD__SD_MOD_VALUE_1
 *
 * @BRIEF        SD pin is set to low - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ACREG__SD_MOD__SD_MOD_VALUE_1           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ACREG__DIS_IR_RX__DIS_IR_RX_VALUE_0
 *
 * @BRIEF        Normal operation (RX input automatically disabled during 
 *               transmit but enabled outside of transmit operation).  - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ACREG__DIS_IR_RX__DIS_IR_RX_VALUE_0     0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ACREG__DIS_IR_RX__DIS_IR_RX_VALUE_1
 *
 * @BRIEF        Disables RX input (permanent state - independent of 
 *               transmit).  - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ACREG__DIS_IR_RX__DIS_IR_RX_VALUE_1     0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ACREG__DIS_TX_UNDERRUN__DIS_TX_UNDERRUN_VALUE_0
 *
 * @BRIEF        Long stop bits cannot be transmitted, TX underrun is enabled 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ACREG__DIS_TX_UNDERRUN__DIS_TX_UNDERRUN_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ACREG__DIS_TX_UNDERRUN__DIS_TX_UNDERRUN_VALUE_1
 *
 * @BRIEF        Long stop bits can be transmitted, TX underrun is disabled - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ACREG__DIS_TX_UNDERRUN__DIS_TX_UNDERRUN_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ACREG__SEND_SIP__SEND_SIP_VALUE_0
 *
 * @BRIEF        No action - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ACREG__SEND_SIP__SEND_SIP_VALUE_0       0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ACREG__SEND_SIP__SEND_SIP_VALUE_1
 *
 * @BRIEF        Send SIP pulse. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ACREG__SEND_SIP__SEND_SIP_VALUE_1       0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR__RX_TRIG_GRANU1__RX_TRIG_GRANU1_VALUE_0
 *
 * @BRIEF        DISABLES THE GRANULARITY OF 1 FOR TRIGGER RX LEVEL. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR__RX_TRIG_GRANU1__RX_TRIG_GRANU1_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR__RX_TRIG_GRANU1__RX_TRIG_GRANU1_VALUE_1
 *
 * @BRIEF        ENABLES THE GRANULARITY OF 1 FOR TRIGGER RX LEVEL. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR__RX_TRIG_GRANU1__RX_TRIG_GRANU1_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR__TX_TRIG_GRANU1__TX_TRIG_GRANU1_VALUE_0
 *
 * @BRIEF        DISABLES THE GRANULARITY OF 1 FOR TRIGGER TX LEVEL. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR__TX_TRIG_GRANU1__TX_TRIG_GRANU1_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR__TX_TRIG_GRANU1__TX_TRIG_GRANU1_VALUE_1
 *
 * @BRIEF        Enables the granularity of 1 for trigger TX level. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR__TX_TRIG_GRANU1__TX_TRIG_GRANU1_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR__DSR_IT__DSR_IT_VALUE_0
 *
 * @BRIEF        DISABLES DSR* INTERRUPT. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR__DSR_IT__DSR_IT_VALUE_0             0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR__DSR_IT__DSR_IT_VALUE_1
 *
 * @BRIEF        ENABLES DSR* INTERRUPT. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR__DSR_IT__DSR_IT_VALUE_1             0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR__RX_CTS_DSR_WAKE_UP_ENABLE__RX_CTS_DSR_WAKE_UP_ENABLE_VALUE_0
 *
 * @BRIEF        DISABLES THE WAKE UP INTERRUPT AND CLEARS SSR[1]. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR__RX_CTS_DSR_WAKE_UP_ENABLE__RX_CTS_DSR_WAKE_UP_ENABLE_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR__RX_CTS_DSR_WAKE_UP_ENABLE__RX_CTS_DSR_WAKE_UP_ENABLE_VALUE_1
 *
 * @BRIEF        Waits for a falling edge of pins RX, CTS* or DSR* to 
 *               generate an interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR__RX_CTS_DSR_WAKE_UP_ENABLE__RX_CTS_DSR_WAKE_UP_ENABLE_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR__TX_EMPTY_CTL_IT__TX_EMPTY_CTL_IT_VALUE_0
 *
 * @BRIEF        Normal mode for THR interrupt (See UART mode interrupts 
 *               table). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR__TX_EMPTY_CTL_IT__TX_EMPTY_CTL_IT_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR__TX_EMPTY_CTL_IT__TX_EMPTY_CTL_IT_VALUE_1
 *
 * @BRIEF        THE THR INTERRUPT IS GENERATED WHEN TX FIFO AND TX SHIFT 
 *               REGISTER ARE EMPTY. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR__TX_EMPTY_CTL_IT__TX_EMPTY_CTL_IT_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR__DMA_MODE_2__DMA_MODE_2_VALUE_0
 *
 * @BRIEF        DMA mode 0 (no DMA) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR__DMA_MODE_2__DMA_MODE_2_VALUE_0     0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR__DMA_MODE_2__DMA_MODE_2_VALUE_1
 *
 * @BRIEF        DMA mode 1 (UART_nDMA_REQ[0] in TX, UART_nDMA_REQ[1] in RX) 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR__DMA_MODE_2__DMA_MODE_2_VALUE_1     0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR__DMA_MODE_2__DMA_MODE_2_VALUE_2
 *
 * @BRIEF        DMA mode 2 (UART_nDMA_REQ[0] in RX) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR__DMA_MODE_2__DMA_MODE_2_VALUE_2     0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR__DMA_MODE_2__DMA_MODE_2_VALUE_3
 *
 * @BRIEF        DMA mode 3 (UART_nDMA_REQ[0] in TX) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR__DMA_MODE_2__DMA_MODE_2_VALUE_3     0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR__DMA_MODE_CTL__DMA_MODE_CTL_VALUE_0
 *
 * @BRIEF        The DMA_MODE is set with FCR[3] - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR__DMA_MODE_CTL__DMA_MODE_CTL_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SCR__DMA_MODE_CTL__DMA_MODE_CTL_VALUE_1
 *
 * @BRIEF        The DMA_MODE is set with SCR[2:1] - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SCR__DMA_MODE_CTL__DMA_MODE_CTL_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SSR__DMA_COUNTER_RST__DMA_COUNTER_RST_VALUE_0
 *
 * @BRIEF        The DMA counter will not be reset if the corresponding FIFO 
 *               is reset (via FCR[1] or FCR[2]) - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SSR__DMA_COUNTER_RST__DMA_COUNTER_RST_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SSR__DMA_COUNTER_RST__DMA_COUNTER_RST_VALUE_1
 *
 * @BRIEF        The DMA counter will be reset if corresponding FIFO is reset 
 *               (via FCR[1] or FCR[2]) - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SSR__DMA_COUNTER_RST__DMA_COUNTER_RST_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SSR__RX_CTS_DSR_WAKE_UP_STS__RX_CTS_DSR_WAKE_UP_STS_VALUE_0
 *
 * @BRIEF        No falling edge event on RX, CTS* and DSR* - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SSR__RX_CTS_DSR_WAKE_UP_STS__RX_CTS_DSR_WAKE_UP_STS_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SSR__RX_CTS_DSR_WAKE_UP_STS__RX_CTS_DSR_WAKE_UP_STS_VALUE_1
 *
 * @BRIEF        A falling edge occurred on RX, CTS* or DSR* - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SSR__RX_CTS_DSR_WAKE_UP_STS__RX_CTS_DSR_WAKE_UP_STS_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SSR__TX_FIFO_FULL__TX_FIFO_FULL_VALUE_0
 *
 * @BRIEF        TX FIFO is not full - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SSR__TX_FIFO_FULL__TX_FIFO_FULL_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SSR__TX_FIFO_FULL__TX_FIFO_FULL_VALUE_1
 *
 * @BRIEF        TX FIFO is full. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SSR__TX_FIFO_FULL__TX_FIFO_FULL_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SYSC__IDLEMODE__IDLEMODE_VALUE_0
 *
 * @BRIEF        Force idle. An idle request is acknowledged unconditionally 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SYSC__IDLEMODE__IDLEMODE_VALUE_0        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SYSC__IDLEMODE__IDLEMODE_VALUE_1
 *
 * @BRIEF        No-idle. An idle request is never acknowledged. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SYSC__IDLEMODE__IDLEMODE_VALUE_1        0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SYSC__IDLEMODE__IDLEMODE_VALUE_2
 *
 * @BRIEF        Smart idle. Acknowledgement to an idle request is given 
 *               based in the internal activity of the module. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SYSC__IDLEMODE__IDLEMODE_VALUE_2        0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SYSC__IDLEMODE__IDLEMODE_VALUE_3
 *
 * @BRIEF        reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SYSC__IDLEMODE__IDLEMODE_VALUE_3        0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SYSC__ENAWAKEUP__ENAWAKEUP_VALUE_0
 *
 * @BRIEF        Wake up is disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SYSC__ENAWAKEUP__ENAWAKEUP_VALUE_0      0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SYSC__ENAWAKEUP__ENAWAKEUP_VALUE_1
 *
 * @BRIEF        Wake up capability is enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SYSC__ENAWAKEUP__ENAWAKEUP_VALUE_1      0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SYSC__SOFTRESET__SOFTRESET_VALUE_0
 *
 * @BRIEF        Normal mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SYSC__SOFTRESET__SOFTRESET_VALUE_0      0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SYSC__SOFTRESET__SOFTRESET_VALUE_1
 *
 * @BRIEF        The module is reset - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SYSC__SOFTRESET__SOFTRESET_VALUE_1      0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SYSC__AUTOIDLE__AUTOIDLE_VALUE_0
 *
 * @BRIEF        Clock is running - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SYSC__AUTOIDLE__AUTOIDLE_VALUE_0        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SYSC__AUTOIDLE__AUTOIDLE_VALUE_1
 *
 * @BRIEF        Automatic OCP clock gating strategy is applied, based on the 
 *               OCP interface activity - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SYSC__AUTOIDLE__AUTOIDLE_VALUE_1        0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SYSS__RESETDONE__RESETDONE_VALUE_0
 *
 * @BRIEF        Internal Module Reset is ongoing - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SYSS__RESETDONE__RESETDONE_VALUE_0      0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__SYSS__RESETDONE__RESETDONE_VALUE_1
 *
 * @BRIEF        Reset completed - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__SYSS__RESETDONE__RESETDONE_VALUE_1      0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_7_TX_WAKEUP_EN__EVENT_7_TX_WAKEUP_EN_VALUE_0
 *
 * @BRIEF        Event is not allowed to wake up the system - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_7_TX_WAKEUP_EN__EVENT_7_TX_WAKEUP_EN_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_7_TX_WAKEUP_EN__EVENT_7_TX_WAKEUP_EN_VALUE_1
 *
 * @BRIEF        EVENT CAN WAKE UP THE SYSTEM: Event can be: THR_IT or TX_DMA 
 *               request and/or TX_SATUS_IT - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_7_TX_WAKEUP_EN__EVENT_7_TX_WAKEUP_EN_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_6_RECEIVER_LINE_STATUS_INTERRUPT__EVENT_6_RECEIVER_LINE_STATUS_INTERRUPT_VALUE_0
 *
 * @BRIEF        Event is not allowed to wake up the system - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_6_RECEIVER_LINE_STATUS_INTERRUPT__EVENT_6_RECEIVER_LINE_STATUS_INTERRUPT_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_6_RECEIVER_LINE_STATUS_INTERRUPT__EVENT_6_RECEIVER_LINE_STATUS_INTERRUPT_VALUE_1
 *
 * @BRIEF        Event can wake up the system - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_6_RECEIVER_LINE_STATUS_INTERRUPT__EVENT_6_RECEIVER_LINE_STATUS_INTERRUPT_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_5_RHR_INTERRUPT__EVENT_5_RHR_INTERRUPT_VALUE_0
 *
 * @BRIEF        Event is not allowed to wake up the system - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_5_RHR_INTERRUPT__EVENT_5_RHR_INTERRUPT_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_5_RHR_INTERRUPT__EVENT_5_RHR_INTERRUPT_VALUE_1
 *
 * @BRIEF        Event can wake up the system - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_5_RHR_INTERRUPT__EVENT_5_RHR_INTERRUPT_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_4_RX_ACTIVITY__EVENT_4_RX_ACTIVITY_VALUE_0
 *
 * @BRIEF        Event is not allowed to wake up the system - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_4_RX_ACTIVITY__EVENT_4_RX_ACTIVITY_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_4_RX_ACTIVITY__EVENT_4_RX_ACTIVITY_VALUE_1
 *
 * @BRIEF        Event can wake up the system - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_4_RX_ACTIVITY__EVENT_4_RX_ACTIVITY_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_3_DCD_CD_ACTIVITY__EVENT_3_DCD_CD_ACTIVITY_VALUE_0
 *
 * @BRIEF        Event is not allowed to wake up the system - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_3_DCD_CD_ACTIVITY__EVENT_3_DCD_CD_ACTIVITY_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_3_DCD_CD_ACTIVITY__EVENT_3_DCD_CD_ACTIVITY_VALUE_1
 *
 * @BRIEF        Event can wake up the system - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_3_DCD_CD_ACTIVITY__EVENT_3_DCD_CD_ACTIVITY_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_2_RI_ACTIVITY__EVENT_2_RI_ACTIVITY_VALUE_0
 *
 * @BRIEF        Event is not allowed to wake up the system - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_2_RI_ACTIVITY__EVENT_2_RI_ACTIVITY_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_2_RI_ACTIVITY__EVENT_2_RI_ACTIVITY_VALUE_1
 *
 * @BRIEF        Event can wake up the system - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_2_RI_ACTIVITY__EVENT_2_RI_ACTIVITY_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_1_DSR_ACTIVITY__EVENT_1_DSR_ACTIVITY_VALUE_0
 *
 * @BRIEF        Event is not allowed to wake up the system - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_1_DSR_ACTIVITY__EVENT_1_DSR_ACTIVITY_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_1_DSR_ACTIVITY__EVENT_1_DSR_ACTIVITY_VALUE_1
 *
 * @BRIEF        Event can wake up the system - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_1_DSR_ACTIVITY__EVENT_1_DSR_ACTIVITY_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_0_CTS_ACTIVITY__EVENT_0_CTS_ACTIVITY_VALUE_0
 *
 * @BRIEF        Event is not allowed to wake up the system - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_0_CTS_ACTIVITY__EVENT_0_CTS_ACTIVITY_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__WER__EVENT_0_CTS_ACTIVITY__EVENT_0_CTS_ACTIVITY_VALUE_1
 *
 * @BRIEF        Event can wake up the system - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__WER__EVENT_0_CTS_ACTIVITY__EVENT_0_CTS_ACTIVITY_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ISR2__TXFIFO_EMPTY_STS__TXFIFO_EMPTY_STS_VALUE_0
 *
 * @BRIEF        TXFIFO_EMPTY interrupt not pending. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ISR2__TXFIFO_EMPTY_STS__TXFIFO_EMPTY_STS_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ISR2__TXFIFO_EMPTY_STS__TXFIFO_EMPTY_STS_VALUE_1
 *
 * @BRIEF        TXFIFO_EMPTY interrupt pending. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ISR2__TXFIFO_EMPTY_STS__TXFIFO_EMPTY_STS_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ISR2__RXFIFO_EMPTY_STS__RXFIFO_EMPTY_STS_VALUE_0
 *
 * @BRIEF        RXFIFO_EMPTY interrupt not pending. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ISR2__RXFIFO_EMPTY_STS__RXFIFO_EMPTY_STS_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__ISR2__RXFIFO_EMPTY_STS__RXFIFO_EMPTY_STS_VALUE_1
 *
 * @BRIEF        RXFIFO_EMPTY interrupt pending. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__ISR2__RXFIFO_EMPTY_STS__RXFIFO_EMPTY_STS_VALUE_1 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR3__DISABLE_CIR_RX_DEMOD__DISABLE_CIR_RX_DEMOD_VALUE_0
 *
 * @BRIEF        Enables CIR RX demodulation - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR3__DISABLE_CIR_RX_DEMOD__DISABLE_CIR_RX_DEMOD_VALUE_0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   UART__MDR3__DISABLE_CIR_RX_DEMOD__DISABLE_CIR_RX_DEMOD_VALUE_1
 *
 * @BRIEF        Disables CIR RX demodulation - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define UART__MDR3__DISABLE_CIR_RX_DEMOD__DISABLE_CIR_RX_DEMOD_VALUE_1 0x1ul

#ifdef __cplusplus
}
#endif
#endif                                                     /* __UART_CRED_H */
