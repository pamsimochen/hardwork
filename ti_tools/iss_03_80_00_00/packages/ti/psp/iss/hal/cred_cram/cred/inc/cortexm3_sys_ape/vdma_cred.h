/** ==================================================================
 *  @file   vdma_cred.h                                                  
 *                                                                    
 *  @path   /ti/psp/iss/hal/cred_cram/cred/inc/cortexm3_sys_ape/                                                  
 *                                                                    
 *  @desc   This  File contains.                                      
 * ===================================================================
 *  Copyright (c) Texas Instruments Inc 2011, 2012                    
 *                                                                    
 *  Use of this software is controlled by the terms and conditions found
 *  in the license agreement under which this software has been supplied
 * ===================================================================*/

/* ============================================================================ 
 * TEXAS INSTRUMENTS INCORPORATED PROPRIETARY INFORMATION Property of Texas
 * Instruments For Unrestricted Internal Use Only Unauthorized reproduction
 * and/or distribution is strictly prohibited.  This product is protected
 * under copyright law and trade secret law as an unpublished work.  Created
 * 2008, (C) Copyright 2008 Texas Instruments.  All rights reserved. */

/**
 *  @Component:   VDMA
 *
 *  @Filename:    vdma_cred.h
 *
 *  @Description: Component description is not available
 *
 *  Generated by: Socrates CRED generator prototype
 *
    *//* ====================================================================== */

#ifndef __VDMA_CRED_H
#define __VDMA_CRED_H

#ifdef __cplusplus
extern "C" {
#endif

    /* 
     * Instance VDMA_CFG of component VDMA mapped in MONICA at address 0x5A050000
     */

                                                                              /*-------------------------------------------------------------------------*//**
 * @DEFINITION   BITFIELD
 *
 * @BRIEF        The bitfield must be defined according to register width
 *               of the component - 64/32/16/8
 *
    *//*------------------------------------------------------------------------ */
#undef BITFIELD
#define BITFIELD BITFIELD_32

    /* 
     *  List of Register arrays for component VDMA
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_GROUP_STATUS
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_GROUP_STATUS                            0x78ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_GROUP_STATUS__ELSIZE
 *
 * @BRIEF        VDMA_GROUP_STATUS register array element size in Bytes
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_GROUP_STATUS__ELSIZE                    0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_GROUP_STATUS__NELEMS
 *
 * @BRIEF        VDMA_GROUP_STATUS register array number of elements
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_GROUP_STATUS__NELEMS                    32

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_GROUP_DEFINITION
 *
 * @BRIEF        Group_definition register set is the SW user entry to define 
 *               groups mapping and routing into and through event engine:  
 *               -throw group into synchronous or asynchronous list 
 *               -pick descriptors from non deterministic or deterministic 
 *               memory 
 *               -start address of descriptors when belonging to a 
 *               deterministic group. 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_GROUP_DEFINITION                        0xF8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_GROUP_DEFINITION__ELSIZE
 *
 * @BRIEF        VDMA_GROUP_DEFINITION register array element size in Bytes
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_GROUP_DEFINITION__ELSIZE                0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_GROUP_DEFINITION__NELEMS
 *
 * @BRIEF        VDMA_GROUP_DEFINITION register array number of elements
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_GROUP_DEFINITION__NELEMS                32

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_NON_DETERM
 *
 * @BRIEF        Non deterministic descriptor FIFO width being 128b and 
 *               configuration port width being 32b, four OCP write commands 
 *               into four different (incremental) addresses to create one 
 *               (short) non deterministic descriptor. 
 *               Least significant 32b word of (short) descriptor shall be 
 *               written at 0x178h. 
 *               . 
 *               . 
 *               Most significant 32b word of (short) descriptor shall be 
 *               written at 0x184h. 
 *               Write command order has no importance. 
 *               When a long descriptor is required, four write commands 
 *               (above) sequence should be repeated. Note that the first 
 *               four write command sequence shall set the most significant 
 *               128b of the 256b descriptor to respect the requirement of 
 *               pushing the 128b part containing the descriptor header field 
 *               first. 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_NON_DETERM                              0x178ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_NON_DETERM__ELSIZE
 *
 * @BRIEF        VDMA_NON_DETERM register array element size in Bytes
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_NON_DETERM__ELSIZE                      0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_NON_DETERM__NELEMS
 *
 * @BRIEF        VDMA_NON_DETERM register array number of elements
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_NON_DETERM__NELEMS                      4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_TRIGGER_COUNTER
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_TRIGGER_COUNTER                         0x800ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_TRIGGER_COUNTER__ELSIZE
 *
 * @BRIEF        VDMA_TRIGGER_COUNTER register array element size in Bytes
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_TRIGGER_COUNTER__ELSIZE                 0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_TRIGGER_COUNTER__NELEMS
 *
 * @BRIEF        VDMA_TRIGGER_COUNTER register array number of elements
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_TRIGGER_COUNTER__NELEMS                 128

    /* 
     *  List of bundle arrays for component VDMA
     *
     */
                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__DETERMINISTIC_DESCRIPTOR_ENTRY
 *
 * @BRIEF        Bundle description is not available
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__DETERMINISTIC_DESCRIPTOR_ENTRY               0x1000ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__DETERMINISTIC_DESCRIPTOR_ENTRY__ELSIZE
 *
 * @BRIEF        DETERMINISTIC_DESCRIPTOR_ENTRY bundle array element size in Bytes
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__DETERMINISTIC_DESCRIPTOR_ENTRY__ELSIZE       0x20ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__DETERMINISTIC_DESCRIPTOR_ENTRY__NELEMS
 *
 * @BRIEF        DETERMINISTIC_DESCRIPTOR_ENTRY bundle array number of elements
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__DETERMINISTIC_DESCRIPTOR_ENTRY__NELEMS       128

    /* 
     *  List of bundles for component VDMA
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_L_DETERM_31_0__OFFSET
 *
 * @BRIEF        Register VDMA_L_DETERM_31_0 offset in bundle DETERMINISTIC_DESCRIPTOR_ENTRY 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_L_DETERM_31_0__OFFSET                   0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_L_DETERM_63_32__OFFSET
 *
 * @BRIEF        Register VDMA_L_DETERM_63_32 offset in bundle DETERMINISTIC_DESCRIPTOR_ENTRY 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_L_DETERM_63_32__OFFSET                  0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_L_DETERM_95_64__OFFSET
 *
 * @BRIEF        Register VDMA_L_DETERM_95_64 offset in bundle DETERMINISTIC_DESCRIPTOR_ENTRY 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_L_DETERM_95_64__OFFSET                  0x8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_L_DETERM_127_96__OFFSET
 *
 * @BRIEF        Register VDMA_L_DETERM_127_96 offset in bundle DETERMINISTIC_DESCRIPTOR_ENTRY 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_L_DETERM_127_96__OFFSET                 0xCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_H_DETERM_31_0__OFFSET
 *
 * @BRIEF        Register VDMA_H_DETERM_31_0 offset in bundle DETERMINISTIC_DESCRIPTOR_ENTRY 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_H_DETERM_31_0__OFFSET                   0x10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_H_DETERM_63_32__OFFSET
 *
 * @BRIEF        Register VDMA_H_DETERM_63_32 offset in bundle DETERMINISTIC_DESCRIPTOR_ENTRY 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_H_DETERM_63_32__OFFSET                  0x14ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_H_DETERM_95_64__OFFSET
 *
 * @BRIEF        Register VDMA_H_DETERM_95_64 offset in bundle DETERMINISTIC_DESCRIPTOR_ENTRY 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_H_DETERM_95_64__OFFSET                  0x18ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_H_DETERM_127_96__OFFSET
 *
 * @BRIEF        Register VDMA_H_DETERM_127_96 offset in bundle DETERMINISTIC_DESCRIPTOR_ENTRY 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_H_DETERM_127_96__OFFSET                 0x1Cul

    /* 
     * List of registers for component VDMA
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_REVISION
 *
 * @BRIEF        IP Revision Identifier 
 *               This allows a PID showing X.Y.R in silicon to relate the RTL 
 *               release with a (close-to-correct) spec version X.Y.S. 
 *               A peripheral ID register must be included at address offset 
 *               0 of a peripherals control register MAP.  The purpose is to 
 *               let software read the peripheral to understand what type of 
 *               peripheral is there and what features are enabled as well as 
 *               what bugs or issues may exist in a particular version. 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_REVISION                                0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_SYSCONFIG
 *
 * @BRIEF        Clock management configuration 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_SYSCONFIG                               0x10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQ_EOI
 *
 * @BRIEF        End Of Interrupt number specification 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQ_EOI                                 0x20ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQSTATUS_RAW_0
 *
 * @BRIEF        Per-end of group (31 down to 0) internal signaling raw 
 *               interrupt status vector, line #0.  
 *               Raw status is set even if end of group (31 downto 0) 
 *               interrupt is not enabled. 
 *               Write 1 to set the (raw) status, mostly for debug. 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQSTATUS_RAW_0                         0x24ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQSTATUS_0
 *
 * @BRIEF        Per-end of group (31 down to 0) internal signaling "enabled" 
 *               interrupt status vector, line #0. 
 *               Enabled status isn't set unless event is enabled. 
 *               Write 1 to clear the status after interrupt has been 
 *               serviced (raw status gets cleared, i.e. even if not 
 *               enabled). 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQSTATUS_0                             0x28ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQENABLE_SET_0
 *
 * @BRIEF        Per-end of group (31 down to 0) internal event interrupt 
 *               enable bit vector, line #0.  
 *               Write 1 to set (enable interrupt). 
 *               Readout equal to corresponding _CLR register. 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQENABLE_SET_0                         0x2Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQENABLE_CLR_0
 *
 * @BRIEF        Per-end of group (31 down to 0) internal event interrupt 
 *               enable bit vector, line #0.  
 *               Write 1 to clear (disable interrupt). 
 *               Readout equal to corresponding _SET register. 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQENABLE_CLR_0                         0x30ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQSTATUS_RAW_1
 *
 * @BRIEF        Per-end of group (31 down to 0) internal signaling raw 
 *               interrupt status vector, line #1.  
 *               Raw status is set even if event is not enabled. 
 *               Write 1 to set the (raw) status, mostly for debug. 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQSTATUS_RAW_1                         0x34ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQSTATUS_1
 *
 * @BRIEF        Per-end of group (31 down to 0) internal signaling "enabled" 
 *               interrupt status vector, line #1. 
 *               Enabled status isn't set unless event is enabled. 
 *               Write 1 to clear the status after interrupt has been 
 *               serviced (raw status gets cleared, i.e. even if not 
 *               enabled). 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQSTATUS_1                             0x38ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQENABLE_SET_1
 *
 * @BRIEF        Per-end of group (31 down to 0) internal event interrupt 
 *               enable bit vector, line #1.  
 *               Write 1 to set (enable interrupt). 
 *               Readout equal to corresponding _CLR register. 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQENABLE_SET_1                         0x3Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQENABLE_CLR_1
 *
 * @BRIEF        Per-end of group (31 down to 0) internal event interrupt 
 *               enable bit vector, line #1.  
 *               Write 1 to clear (disable interrupt). 
 *               Readout equal to corresponding _SET register. 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQENABLE_CLR_1                         0x40ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQSTATUS_RAW_2
 *
 * @BRIEF        Per-error event raw interrupt status vector, line #2.  
 *               Raw status is set even if event is not enabled. 
 *               Write 1 to set the (raw) status, mostly for debug. 
 *               Write 0:  No action  
 *               Read 0:  No evt pend.  
 *               Read 1:  Event pend.  
 *               Write 1:  Set event 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQSTATUS_RAW_2                         0x44ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQSTATUS_2
 *
 * @BRIEF        Per-error event "enabled" interrupt status vector, line #2. 
 *               Enabled status isn't set unless event is enabled. 
 *               Write 1 to clear the status after interrupt has been 
 *               serviced (raw status gets cleared, i.e. even if not 
 *               enabled). 
 *               Write 0:  No action  
 *               Read 0:  No (enabled) event pending  
 *               Read 1:  Event pending  
 *               Write 1:  Clear (raw) event 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQSTATUS_2                             0x48ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQENABLE_SET_2
 *
 * @BRIEF        Per-error event interrupt enable bit vector, line #2.  
 *               Write 1 to set (enable interrupt). 
 *               Readout equal to corresponding _CLR register. 
 *               enable for end_of_group31 to 0 interrupts 
 *               Write 0:  No action  
 *               Read 0:  Interrupt disabled (masked)  
 *               Read 1:  Interrupt enabled  
 *               Write 1:  Enable interrupt 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQENABLE_SET_2                         0x4Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQENABLE_CLR_2
 *
 * @BRIEF        Per-error event interrupt enable bit vector, line #2.  
 *               Write 1 to clear (disable interrupt). 
 *               Readout equal to corresponding _SET register. 
 *               Write 0:  No action  
 *               Read 0:  Interrupt disabled (masked)  
 *               Read 1:  Interrupt enabled  
 *               Write 1:  Disable interrupt 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQENABLE_CLR_2                         0x50ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_SYNCHR_LIST_LEVEL
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_SYNCHR_LIST_LEVEL                       0x54ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_ASYNCHR_LIST_LEVEL
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_ASYNCHR_LIST_LEVEL                      0x58ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_NON_DETERM_FIFO_LEVEL
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_NON_DETERM_FIFO_LEVEL                   0x5Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_TBA
 *
 * @BRIEF        tiler address mapping. 
 *               This register shall only be set statically, i.e. at early 
 *               vDMA configuration time, before any transfer is ever 
 *               triggered. 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_TBA                                     0x60ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_CONTEXT_STATUS
 *
 * @BRIEF        When individual bit is reset, corresponding context is 
 *               available 
 *               When individual bit is set, corresponding context is 
 *               allocated. 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_CONTEXT_STATUS                          0x64ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_GROUP_TRIGGER
 *
 * @BRIEF        Register entry for SW user to trigger deterministic (only) 
 *               groups through CPU writes. 
 *               write "1" to desired bit triggers corresponding group (which 
 *               SHALL be defined as deterministic through GROUP_DEFINITION 
 *               register set). 
 *               Writing "1" to a group defined as non deterministic leads to 
 *               vDMA undefined behavior. 
 *               write "0" has no effect. 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_GROUP_TRIGGER                           0x68ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_MAX_CONTEXT_SYNCHR
 *
 * @BRIEF        SW user configurable maximum number of context synchronous 
 *               list can get benefit of. 
 *               This register should only be set statically, i.e. at early 
 *               vDMA configuration time, before any transfer is ever 
 *               triggered. 
 *               Should it be set with another value at run time, SW user 
 *               shall ensure that there is no pending trigger, no pending 
 *               descriptors in non deterministic FIFO, no pending 
 *               descriptors in asynchronous nor synchronous list and no 
 *               pending transactions on master ports. 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_MAX_CONTEXT_SYNCHR                      0x6Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_MAX_CONTEXT_ASYNCHR
 *
 * @BRIEF        SW user configurable maximum number of context asynchronous 
 *               list can get benefit of. 
 *               This register should only be set statically, i.e. at early 
 *               vDMA configuration time, before any transfer is ever 
 *               triggered. 
 *               Should it be set with another value at run time, SW user 
 *               shall ensure that there is no pending trigger, no pending 
 *               descriptors in non deterministic FIFO, no pending 
 *               descriptors in asynchronous nor synchronous list and no 
 *               pending transactions on master ports. 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_MAX_CONTEXT_ASYNCHR                     0x70ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQ_NEOG
 *
 * @BRIEF        Sets whether end of group signaling should be set through 
 *               external HW lines (pulse) 
 *                or wrapped into interrupt line. 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQ_NEOG                                0x74ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_L_DETERM_31_0
 *
 * @BRIEF        Least significant 32b word of deterministic memory 128b word 
 *               entry  
 *               of least significant 128b word of 256b descriptor 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_L_DETERM_31_0                           0x1000ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_L_DETERM_63_32
 *
 * @BRIEF        32b word positionned at bits [63..32] in deterministic 
 *               memory 128b word entry 
 *               of least significant 128b word of 256b descriptor 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_L_DETERM_63_32                          0x1004ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_L_DETERM_95_64
 *
 * @BRIEF        32b word positionned at bit 95 to 64 in deterministic memory 
 *               128b word entry 
 *               of least significant 128b word of 256b descriptor 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_L_DETERM_95_64                          0x1008ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_L_DETERM_127_96
 *
 * @BRIEF        32b word positionned at bit 127 to 96 in deterministic 
 *               memory 128b word entry 
 *               of least significant 128b word of 256b descriptor 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_L_DETERM_127_96                         0x100Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_H_DETERM_31_0
 *
 * @BRIEF        Least significant 32b word of deterministic memory 128b word 
 *               entry  
 *               of most significant 128b word of 256b descriptor 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_H_DETERM_31_0                           0x1010ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_H_DETERM_63_32
 *
 * @BRIEF        32b word positionned at bits [63..32] in deterministic 
 *               memory 128b word entry 
 *               of most significant 128b word of 256b descriptor 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_H_DETERM_63_32                          0x1014ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_H_DETERM_95_64
 *
 * @BRIEF        32b word positionned at bit 95 to 64 in deterministic memory 
 *               128b word entry 
 *               of most significant 128b word of 256b descriptor 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_H_DETERM_95_64                          0x1018ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_H_DETERM_127_96
 *
 * @BRIEF        32b word positionned at bit 127 to 96 in deterministic 
 *               memory 128b word entry 
 *               of most significant 128b word of 256b descriptor 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_H_DETERM_127_96                         0x101Cul

    /* 
     * List of register bitfields for component VDMA
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_REVISION__SCHEME   
 *
 * @BRIEF        Used to distinguish between old Scheme and current.  
 *               Spare bit to encode future schemes. 
 *               Highlander 0.8 value: 0b01 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_REVISION__SCHEME                   BITFIELD(31, 30)
#define VDMA__VDMA_REVISION__SCHEME__POS              30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_REVISION__FUNC   
 *
 * @BRIEF        Function indicates a software compatible module family.   
 *               If there is no level of software compatibility a new Func 
 *               number (and hence PID) should be assigned. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_REVISION__FUNC                     BITFIELD(27, 16)
#define VDMA__VDMA_REVISION__FUNC__POS                16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_REVISION__RTL   
 *
 * @BRIEF        RTL Version.  
 *               R as described in PDR with additional 
 *               clarifications/definitions below.  Must be easily ECO-able 
 *               or controlled during fabrication.  Ideally through a top 
 *               level metal mask or e-fuse. This number is maintained/owned 
 *               by IP design owner.  
 *               RTL follows a numbering such as X.Y.R.Z which are explained 
 *               in this table.  
 *               R changes ONLY when:  
 *               (1) PDS uploads occur which may have been due to spec 
 *               changes  
 *               (2) Bug fixes occur  
 *               (3) Resets to '0' when X or Y changes.  
 *               Design team has an internal 'Z' (customer invisible) number 
 *               which increments on every drop that happens due to DV and 
 *               RTL updates. Z resets to 0 when R increments. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_REVISION__RTL                      BITFIELD(15, 11)
#define VDMA__VDMA_REVISION__RTL__POS                 11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_REVISION__MAJOR   
 *
 * @BRIEF        Major Revision.   
 *               X as described in PDR with additional 
 *               clarifications/definitions below. This number is 
 *               owned/maintained by IP specification owner.  
 *               X changes ONLY when:  
 *               (1) There is a major feature addition. An example would be 
 *               adding Master Mode to Utopia Level2. The Func field (or 
 *               Class/Type in old PID format) will remain the same.  
 *               X does NOT change due to:  
 *               (1) Bug fixes  
 *               (2) Change in feature parameters. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_REVISION__MAJOR                    BITFIELD(10, 8)
#define VDMA__VDMA_REVISION__MAJOR__POS               8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_REVISION__CUSTOM   
 *
 * @BRIEF        Indicates a special version for a particular device.  
 *               Consequence of use may avoid use of standard Chip Support 
 *               Library (CSL) / Drivers.   
 *               0 if non-custom. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_REVISION__CUSTOM                   BITFIELD(7, 6)
#define VDMA__VDMA_REVISION__CUSTOM__POS              6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_REVISION__MINOR   
 *
 * @BRIEF        Minor Revision.   
 *               Y as described in PDR with additional 
 *               clarifications/definitions below.  
 *               This number is owned/maintained by IP specification owner.  
 *               Y changes ONLY when:  
 *               (1) Features are scaled (up or down). Flexibility exists in 
 *               that this feature scalability may either be represented in 
 *               the Y change or a specific register in the IP that indicates 
 *               which features are exactly available.  
 *               (2) When feature creeps from Is-Not list to Is list. But 
 *               this may not be the case once it sees silicon; in which case 
 *               X will change.  
 *               Y does NOT change due to:  
 *               (1) Bug fixes  
 *               (2) Typos or clarifications  
 *               (3) major functional/feature change/addition/deletion. 
 *               Instead these changes may be reflected via R, S, X as 
 *               applicable.  
 *               Spec owner maintains a customer-invisible number 'S' which 
 *               changes due to:  
 *               (1) Typos/clarifications  
 *               (2) Bug documentation. Note that this bug is not due to a 
 *               spec change but due to implementation. Nevertheless, the 
 *               spec tracks the IP bugs. An RTL release (say for silicon 
 *               PG1.1) that occurs due to bug fix should document the 
 *               corresponding spec number (X.Y.S) in its release notes. - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_REVISION__MINOR                    BITFIELD(5, 0)
#define VDMA__VDMA_REVISION__MINOR__POS               0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_SYSCONFIG__STANDBYMODE   
 *
 * @BRIEF        Configuration of the local initiator state management mode. 
 *               By definition, initiator may generate read/write transaction 
 *               as long as it is out of STANDBY state. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_SYSCONFIG__STANDBYMODE             BITFIELD(5, 4)
#define VDMA__VDMA_SYSCONFIG__STANDBYMODE__POS        4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_SYSCONFIG__IDLEMODE   
 *
 * @BRIEF        Configuration of the local target state management mode. 
 *               By definition, target can handle read/write transaction as 
 *               long as it is out of IDLE state. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_SYSCONFIG__IDLEMODE                BITFIELD(3, 2)
#define VDMA__VDMA_SYSCONFIG__IDLEMODE__POS           2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_SYSCONFIG__SOFTRESET   
 *
 * @BRIEF        Software reset.  
 *               Read 0:  Software reset done, no pending action  
 *               Write 0:  No action  
 *               Write 1:  Initiate software reset  
 *               Read 1:  Software reset ongoing 
 *               Note that great care should be taken when SW user fires SW 
 *               reset. Actually even if SW reset puts vDMA registers, FIFOs, 
 *               counters, state machines etc in a reset clean state, it can 
 *               not be guaranteed that vDMA restarts clean from SW reset due 
 *               at least to outstanding request in the platform: 
 *               Think of a situation where read request has been emitted to 
 *               interconnect/DRAM and before all responses came back a SW 
 *               reset occured on vDMA. Then when responses will come back 
 *               they correspond to nothing in the recently reset vDMA, 
 *               leading to improper behavior (for instance improper end of 
 *               group signalling etc). 
 *               SW reset may have unpredictable side effect on vDMA/system 
 *               unless SW vuser can guaranty the system coherency at the 
 *               time of SW reset application. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_SYSCONFIG__SOFTRESET               BITFIELD(0, 0)
#define VDMA__VDMA_SYSCONFIG__SOFTRESET__POS          0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQ_EOI__LINE_NUMBER   
 *
 * @BRIEF        Software End Of Interrupt (EOI) control. Write number of 
 *               interrupt output. 
 *               Write 0x0:  EOI for interrupt output line #0  
 *               Write 0x1:  EOI for interrupt output line #1  
 *               Write 0x2:  EOI for interrupt output line #2 
 *               Write 0x3:  N/A  
 *               Write 0x4:  N/A 
 *               Write 0x5:  N/A 
 *               Write 0x6:  N/A 
 *               Write 0x7:  N/A - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQ_EOI__LINE_NUMBER               BITFIELD(7, 0)
#define VDMA__VDMA_IRQ_EOI__LINE_NUMBER__POS          0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQSTATUS_RAW_0__ICONT1_END_GROUP31_0   
 *
 * @BRIEF        settable raw status for port1 end of group 31 to 0 
 *               Write 0:  No action  
 *               Read 0:  No event pending  
 *               Read 1:  Event pending  
 *               Write 1:  Set event (debug) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQSTATUS_RAW_0__ICONT1_END_GROUP31_0 BITFIELD(31, 0)
#define VDMA__VDMA_IRQSTATUS_RAW_0__ICONT1_END_GROUP31_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQSTATUS_0__ICONT1_END_GROUP31_0   
 *
 * @BRIEF        Write 0:  No action  
 *               Read 0:  No (enabled) event pending  
 *               Read 1:  Event pending  
 *               Write 1:  Clear (raw) event - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQSTATUS_0__ICONT1_END_GROUP31_0  BITFIELD(31, 0)
#define VDMA__VDMA_IRQSTATUS_0__ICONT1_END_GROUP31_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQENABLE_SET_0__ENABLE_SET_ICONT1_GROUP31_0   
 *
 * @BRIEF        enable for end_of_port1_group31 to 0 interrupts 
 *               Write 0:  No action  
 *               Read 0:  Interrupt disabled (masked)  
 *               Read 1:  Interrupt enabled  
 *               Write 1:  Enable interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQENABLE_SET_0__ENABLE_SET_ICONT1_GROUP31_0 BITFIELD(31, 0)
#define VDMA__VDMA_IRQENABLE_SET_0__ENABLE_SET_ICONT1_GROUP31_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQENABLE_CLR_0__ENABLE_CLR_ICONT1_GROUP31_0   
 *
 * @BRIEF        Write 0:  No action  
 *               Read 0:  Interrupt disabled (masked)  
 *               Read 1:  Interrupt enabled  
 *               Write 1:  Disable interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQENABLE_CLR_0__ENABLE_CLR_ICONT1_GROUP31_0 BITFIELD(31, 0)
#define VDMA__VDMA_IRQENABLE_CLR_0__ENABLE_CLR_ICONT1_GROUP31_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQSTATUS_RAW_1__ICONT2_END_GROUP31_0   
 *
 * @BRIEF        settable raw status for port2 end of group 31 to 0 
 *               Write 0:  No action  
 *               Read 0:  No event pending  
 *               Read 1:  Event pending  
 *               Write 1:  Set event (debug) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQSTATUS_RAW_1__ICONT2_END_GROUP31_0 BITFIELD(31, 0)
#define VDMA__VDMA_IRQSTATUS_RAW_1__ICONT2_END_GROUP31_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQSTATUS_1__ICONT2_END_GROUP31_0   
 *
 * @BRIEF        Write 0:  No action  
 *               Read 0:  No (enabled) event pending  
 *               Read 1:  Event pending  
 *               Write 1:  Clear (raw) event - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQSTATUS_1__ICONT2_END_GROUP31_0  BITFIELD(31, 0)
#define VDMA__VDMA_IRQSTATUS_1__ICONT2_END_GROUP31_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQENABLE_SET_1__ENABLE_SET_ICONT2_GROUP31_0   
 *
 * @BRIEF        enable for end_of_group31 to 0 interrupts 
 *               Write 0:  No action  
 *               Read 0:  Interrupt disabled (masked)  
 *               Read 1:  Interrupt enabled  
 *               Write 1:  Enable interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQENABLE_SET_1__ENABLE_SET_ICONT2_GROUP31_0 BITFIELD(31, 0)
#define VDMA__VDMA_IRQENABLE_SET_1__ENABLE_SET_ICONT2_GROUP31_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQENABLE_CLR_1__ENABLE_CLR_ICONT2_GROUP31_0   
 *
 * @BRIEF        Write 0:  No action  
 *               Read 0:  Interrupt disabled (masked)  
 *               Read 1:  Interrupt enabled  
 *               Write 1:  Disable interrupt - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQENABLE_CLR_1__ENABLE_CLR_ICONT2_GROUP31_0 BITFIELD(31, 0)
#define VDMA__VDMA_IRQENABLE_CLR_1__ENABLE_CLR_ICONT2_GROUP31_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQSTATUS_RAW_2__MASTER_SRESPERR   
 *
 * @BRIEF        Interrupt fires when one vDMA OCP master port (SL2R, SL2W or 
 *               L3) received Sresp=ERR from platform. 
 *               Note that corresponding context does (did) not abort 
 *               corresponding transaction neither  
 *               corresponding group transfer and does (did) not re-submit 
 *               transaction. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQSTATUS_RAW_2__MASTER_SRESPERR   BITFIELD(3, 3)
#define VDMA__VDMA_IRQSTATUS_RAW_2__MASTER_SRESPERR__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQSTATUS_RAW_2__DIR_INTERLEAVE   
 *
 * @BRIEF        Interrupt fires (if enabled) in case U/V bit is set and DIR 
 *               field is different from 0b10. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQSTATUS_RAW_2__DIR_INTERLEAVE    BITFIELD(2, 2)
#define VDMA__VDMA_IRQSTATUS_RAW_2__DIR_INTERLEAVE__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQSTATUS_RAW_2__TRIGGER_TWICE   
 *
 * @BRIEF        From Sw user perspective: interrupt fires when same group 
 *               has been triggered twice without having received end of 
 *               corresponding group signaling in between. 
 *               From HW design perspective the actual condition for this 
 *               interrupt to fire is that same group trigger has been pushed 
 *               twice  
 *               in trigger queue, without the first one being poped out of 
 *               queue in between. 
 *               Note that this error signalling does not contain the faulty 
 *               group Id information. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQSTATUS_RAW_2__TRIGGER_TWICE     BITFIELD(1, 1)
#define VDMA__VDMA_IRQSTATUS_RAW_2__TRIGGER_TWICE__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQSTATUS_RAW_2__COHERENCY_ERROR   
 *
 * @BRIEF        Interrupt fires (if enabled) in case descriptors pushed into 
 *               lists (either asynchronous or synchronous) 
 *               do not match with current group being scheduled. 
 *               Reasons that can generate such a situation are: 
 *               -several hosts "concurrently" write descriptors through 
 *               configuration port, without synchronisation between each 
 *               other; since interconnect does not ensure initiator 
 *               atomicity, this might lead to group interleaved descriptors 
 *               into non deterministic descriptor FIFO 
 *               -"blocks" of descriptors to be pushed through transversal 
 *               port migth have been improperly prepared and then 
 *               potentially contain several  interleaved groups 
 *               -same comment as above for deterministic memory 
 *               configuration. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQSTATUS_RAW_2__COHERENCY_ERROR   BITFIELD(0, 0)
#define VDMA__VDMA_IRQSTATUS_RAW_2__COHERENCY_ERROR__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQSTATUS_2__MASTER_SRESPERR   
 *
 * @BRIEF        Interrupt fires when one vDMA OCP master port (SL2R, SL2W or 
 *               L3)  received Sresp=ERR from platform. 
 *               Note that corresponding context does (did) not abort 
 *               corresponding transaction neither  
 *               corresponding group transfer and does (did) not re-submit 
 *               transaction. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQSTATUS_2__MASTER_SRESPERR       BITFIELD(3, 3)
#define VDMA__VDMA_IRQSTATUS_2__MASTER_SRESPERR__POS  3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQSTATUS_2__DIR_INTERLEAVE   
 *
 * @BRIEF        Interrupt fires (if enabled) in case U/V bit is set and DIR 
 *               field is different from 0b10. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQSTATUS_2__DIR_INTERLEAVE        BITFIELD(2, 2)
#define VDMA__VDMA_IRQSTATUS_2__DIR_INTERLEAVE__POS   2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQSTATUS_2__TRIGGER_TWICE   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQSTATUS_2__TRIGGER_TWICE         BITFIELD(1, 1)
#define VDMA__VDMA_IRQSTATUS_2__TRIGGER_TWICE__POS    1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQSTATUS_2__COHERENCY_ERROR   
 *
 * @BRIEF        Interrupt fires (if enabled) in case descriptors pushed into 
 *               lists (either asynchronous or synchronous) 
 *               do not match with current group being scheduled. 
 *               Reasons that can generate such a situation are: 
 *               -several hosts "concurrently" write descriptors through 
 *               configuration port, without synchronisation between each 
 *               other; since interconnect does not ensure initiator 
 *               atomicity, this might lead to group interleaved descriptors 
 *               into non deterministic descriptor FIFO 
 *               -"blocks" of descriptors to be pushed through transversal 
 *               port migth have been improperly prepared and then 
 *               potentially contain several  interleaved groups 
 *               -same comment as above for deterministic memory 
 *               configuration. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQSTATUS_2__COHERENCY_ERROR       BITFIELD(0, 0)
#define VDMA__VDMA_IRQSTATUS_2__COHERENCY_ERROR__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQENABLE_SET_2__MASTER_SRESPERR   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQENABLE_SET_2__MASTER_SRESPERR   BITFIELD(3, 3)
#define VDMA__VDMA_IRQENABLE_SET_2__MASTER_SRESPERR__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQENABLE_SET_2__DIR_INTERLEAVE   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQENABLE_SET_2__DIR_INTERLEAVE    BITFIELD(2, 2)
#define VDMA__VDMA_IRQENABLE_SET_2__DIR_INTERLEAVE__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQENABLE_SET_2__TRIGGER_TWICE   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQENABLE_SET_2__TRIGGER_TWICE     BITFIELD(1, 1)
#define VDMA__VDMA_IRQENABLE_SET_2__TRIGGER_TWICE__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQENABLE_SET_2__COHERENCY_ERROR   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQENABLE_SET_2__COHERENCY_ERROR   BITFIELD(0, 0)
#define VDMA__VDMA_IRQENABLE_SET_2__COHERENCY_ERROR__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQENABLE_CLR_2__MASTER_SRESPERR   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQENABLE_CLR_2__MASTER_SRESPERR   BITFIELD(3, 3)
#define VDMA__VDMA_IRQENABLE_CLR_2__MASTER_SRESPERR__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQENABLE_CLR_2__DIR_INTERLEAVE   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQENABLE_CLR_2__DIR_INTERLEAVE    BITFIELD(2, 2)
#define VDMA__VDMA_IRQENABLE_CLR_2__DIR_INTERLEAVE__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQENABLE_CLR_2__TRIGGER_TWICE   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQENABLE_CLR_2__TRIGGER_TWICE     BITFIELD(1, 1)
#define VDMA__VDMA_IRQENABLE_CLR_2__TRIGGER_TWICE__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQENABLE_CLR_2__COHERENCY_ERROR   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQENABLE_CLR_2__COHERENCY_ERROR   BITFIELD(0, 0)
#define VDMA__VDMA_IRQENABLE_CLR_2__COHERENCY_ERROR__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_SYNCHR_LIST_LEVEL__LEVEL   
 *
 * @BRIEF        Indicates number of pending (i.e. which have been pushed 
 *               into and wait for breakdown logic to pick them from list) 
 *               entries of synchronous transfer list. 
 *               One entry contains one uniquified format descriptor. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_SYNCHR_LIST_LEVEL__LEVEL           BITFIELD(3, 0)
#define VDMA__VDMA_SYNCHR_LIST_LEVEL__LEVEL__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_ASYNCHR_LIST_LEVEL__LEVEL   
 *
 * @BRIEF        Indicates number of pending (i.e. which have been pushed 
 *               into and wait for breakdown logic to pick them from list) 
 *               entries of asynchronous transfer list. 
 *               One entry contains one uniquified format descriptor. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_ASYNCHR_LIST_LEVEL__LEVEL          BITFIELD(3, 0)
#define VDMA__VDMA_ASYNCHR_LIST_LEVEL__LEVEL__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_NON_DETERM_FIFO_LEVEL__LEVEL   
 *
 * @BRIEF        Indicates number of pending (i.e. which have been pushed 
 *               into and wait for read address generator to pick them from 
 *               list) entries of non deterministic object descriptor FIFO. 
 *               Note that it does not reflect the number of descriptors 
 *               present into this FIFO given there may be short and/or long 
 *               descriptors. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_NON_DETERM_FIFO_LEVEL__LEVEL       BITFIELD(7, 0)
#define VDMA__VDMA_NON_DETERM_FIFO_LEVEL__LEVEL__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_TBA__OCP_3MSB   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_TBA__OCP_3MSB                      BITFIELD(2, 0)
#define VDMA__VDMA_TBA__OCP_3MSB__POS                 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_CONTEXT_STATUS__CONTEXT15   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT15          BITFIELD(15, 15)
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT15__POS     15

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_CONTEXT_STATUS__CONTEXT14   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT14          BITFIELD(14, 14)
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT14__POS     14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_CONTEXT_STATUS__CONTEXT13   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT13          BITFIELD(13, 13)
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT13__POS     13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_CONTEXT_STATUS__CONTEXT12   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT12          BITFIELD(12, 12)
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT12__POS     12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_CONTEXT_STATUS__CONTEXT11   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT11          BITFIELD(11, 11)
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT11__POS     11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_CONTEXT_STATUS__CONTEXT10   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT10          BITFIELD(10, 10)
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT10__POS     10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_CONTEXT_STATUS__CONTEXT9   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT9           BITFIELD(9, 9)
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT9__POS      9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_CONTEXT_STATUS__CONTEXT8   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT8           BITFIELD(8, 8)
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT8__POS      8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_CONTEXT_STATUS__CONTEXT7   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT7           BITFIELD(7, 7)
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT7__POS      7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_CONTEXT_STATUS__CONTEXT6   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT6           BITFIELD(6, 6)
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT6__POS      6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_CONTEXT_STATUS__CONTEXT5   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT5           BITFIELD(5, 5)
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT5__POS      5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_CONTEXT_STATUS__CONTEXT4   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT4           BITFIELD(4, 4)
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT4__POS      4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_CONTEXT_STATUS__CONTEXT3   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT3           BITFIELD(3, 3)
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT3__POS      3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_CONTEXT_STATUS__CONTEXT2   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT2           BITFIELD(2, 2)
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT2__POS      2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_CONTEXT_STATUS__CONTEXT1   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT1           BITFIELD(1, 1)
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT1__POS      1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_CONTEXT_STATUS__CONTEXT0   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT0           BITFIELD(0, 0)
#define VDMA__VDMA_CONTEXT_STATUS__CONTEXT0__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_GROUP_TRIGGER__CPU_TRIGGER_GROUP0_31   
 *
 * @BRIEF        MS bit applies to group 31 
 *               LS bit applies to Group 0 - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_GROUP_TRIGGER__CPU_TRIGGER_GROUP0_31 BITFIELD(31, 0)
#define VDMA__VDMA_GROUP_TRIGGER__CPU_TRIGGER_GROUP0_31__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_MAX_CONTEXT_SYNCHR__MAX_VALUE   
 *
 * @BRIEF        (max_value + 1) is the actual number of context that HW will 
 *               allocate to service synchronous list. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_MAX_CONTEXT_SYNCHR__MAX_VALUE      BITFIELD(3, 0)
#define VDMA__VDMA_MAX_CONTEXT_SYNCHR__MAX_VALUE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_MAX_CONTEXT_ASYNCHR__MAX_VALUE   
 *
 * @BRIEF        (max_value + 1) is the actual number of context that HW will 
 *               allocate to service asynchronous list. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_MAX_CONTEXT_ASYNCHR__MAX_VALUE     BITFIELD(3, 0)
#define VDMA__VDMA_MAX_CONTEXT_ASYNCHR__MAX_VALUE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_IRQ_NEOG__IRQ_NEOG_GROUP31_0   
 *
 * @BRIEF        when set, corresponding end of group signaling is propagated 
 *               as interrupt source to both interrupt line 0 and 1.  
 *               SW user is expected in that case to enable corresponding 
 *               interrupt. 
 *               When reset, corresponding end of group signaling is 
 *               propagated to end of group port. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_IRQ_NEOG__IRQ_NEOG_GROUP31_0       BITFIELD(31, 0)
#define VDMA__VDMA_IRQ_NEOG__IRQ_NEOG_GROUP31_0__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_GROUP_STATUS__LAST   
 *
 * @BRIEF        When set, means that last breakdown of last descriptor of 
 *               group has been attributed to one context. 
 *               Bit is automatically cleared by HW when group transfer 
 *               completes. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_GROUP_STATUS__LAST                 BITFIELD(11, 11)
#define VDMA__VDMA_GROUP_STATUS__LAST__POS            11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_GROUP_STATUS__FIRST   
 *
 * @BRIEF        When set, means that first breakdown of first descriptor of 
 *               group has been attributed to one context. 
 *               bit is automatically cleared by HW when group transfer 
 *               completes. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_GROUP_STATUS__FIRST                BITFIELD(10, 10)
#define VDMA__VDMA_GROUP_STATUS__FIRST__POS           10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_GROUP_STATUS__PENDING_DATA_PROCESSING   
 *
 * @BRIEF        current number of data chunks (each of 128bytes max) that 
 *               will require some data processing. 
 *               Which kind of processing is not reflected. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_GROUP_STATUS__PENDING_DATA_PROCESSING BITFIELD(9, 5)
#define VDMA__VDMA_GROUP_STATUS__PENDING_DATA_PROCESSING__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_GROUP_STATUS__SERVICING_CONTEXTS   
 *
 * @BRIEF        number of contexts currently allocated to service this 
 *               group. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_GROUP_STATUS__SERVICING_CONTEXTS   BITFIELD(4, 0)
#define VDMA__VDMA_GROUP_STATUS__SERVICING_CONTEXTS__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_GROUP_DEFINITION__NON_DETERM_DETERM   
 *
 * @BRIEF        group is made of non deterministic object descriptors when 
 *               reset, and of deterministic object descriptors when set. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_GROUP_DEFINITION__NON_DETERM_DETERM BITFIELD(13, 13)
#define VDMA__VDMA_GROUP_DEFINITION__NON_DETERM_DETERM__POS 13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_GROUP_DEFINITION__ASYNCHR_SYNCHR   
 *
 * @BRIEF        when reset indicates that this (these) group descriptor(s) 
 *               are to be pushed into asynchronous transfer queue, when set 
 *               into synchronous transfer queue. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_GROUP_DEFINITION__ASYNCHR_SYNCHR   BITFIELD(12, 12)
#define VDMA__VDMA_GROUP_DEFINITION__ASYNCHR_SYNCHR__POS 12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_GROUP_DEFINITION__START_ADDRESS   
 *
 * @BRIEF        In case of deterministic transfers shall be the very first 
 *               descriptor address of group  
 *               Note that this field shall be filled-in with the 12 least 
 *               significant bits of L_DETERM_MEMORY_ENTRY_31_0_X address 
 *               offsets (X being the one among 128 entries that contains the 
 *               first descriptor of considered group), 
 *               In case of non deterministic transfer this field is N/A - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_GROUP_DEFINITION__START_ADDRESS    BITFIELD(11, 0)
#define VDMA__VDMA_GROUP_DEFINITION__START_ADDRESS__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_NON_DETERM__ONE_OUT_OF_FOUR_32B_WORD   
 *
 * @BRIEF        if address offset is 0x0178h data will be mapped into 
 *               descriptor entry bits [31..0] 
 *               if address offset  is 0x017Ch data will be mapped into 
 *               descriptor entry bits [63..32] 
 *               if address offset  is 0x0180h data will be mapped into 
 *               descriptor entry bits [95..64] 
 *               if address offset  is 0x0184h data will be mapped into 
 *               descriptor entry bits [127..96] - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_NON_DETERM__ONE_OUT_OF_FOUR_32B_WORD BITFIELD(31, 0)
#define VDMA__VDMA_NON_DETERM__ONE_OUT_OF_FOUR_32B_WORD__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_TRIGGER_COUNTER__DESTINATION   
 *
 * @BRIEF        byte slot to write intended counter value to start with for 
 *               the destination side of the transfer. 
 *               Note that when corresponding deterministic descriptor is 
 *               written (even partially) the destination (and the source) 
 *               trigger counter is automatically reset to 0 by HW. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_TRIGGER_COUNTER__DESTINATION       BITFIELD(15, 8)
#define VDMA__VDMA_TRIGGER_COUNTER__DESTINATION__POS  8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_TRIGGER_COUNTER__SOURCE   
 *
 * @BRIEF        byte slot to write intended counter value to start with for 
 *               the source side of the transfer. 
 *               Note that when corresponding deterministic descriptor is 
 *               written (even partially) the source (and the destination) 
 *               trigger counter is automatically reset to 0 by HW. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_TRIGGER_COUNTER__SOURCE            BITFIELD(7, 0)
#define VDMA__VDMA_TRIGGER_COUNTER__SOURCE__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_L_DETERM_31_0__DESCRIPTOR_BITS_31_TO_0   
 *
 * @BRIEF        Least significant 32b word of 256b word deterministic 
 *               descriptor - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_L_DETERM_31_0__DESCRIPTOR_BITS_31_TO_0 BITFIELD(31, 0)
#define VDMA__VDMA_L_DETERM_31_0__DESCRIPTOR_BITS_31_TO_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_L_DETERM_63_32__DESCRIPTOR_BITS_63_TO_32   
 *
 * @BRIEF        bits [63..32] of 256b word deterministic descriptor - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_L_DETERM_63_32__DESCRIPTOR_BITS_63_TO_32 BITFIELD(31, 0)
#define VDMA__VDMA_L_DETERM_63_32__DESCRIPTOR_BITS_63_TO_32__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_L_DETERM_95_64__DESCRIPTOR_BITS_95_TO_64   
 *
 * @BRIEF        bits [95..64] of 256b word deterministic descriptor - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_L_DETERM_95_64__DESCRIPTOR_BITS_95_TO_64 BITFIELD(31, 0)
#define VDMA__VDMA_L_DETERM_95_64__DESCRIPTOR_BITS_95_TO_64__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_L_DETERM_127_96__DESCRIPTOR_BITS_127_TO_96   
 *
 * @BRIEF        bits [127..96] of 256b word deterministic descriptor - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_L_DETERM_127_96__DESCRIPTOR_BITS_127_TO_96 BITFIELD(31, 0)
#define VDMA__VDMA_L_DETERM_127_96__DESCRIPTOR_BITS_127_TO_96__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_H_DETERM_31_0__DESCRIPTOR_BITS_159_TO_128   
 *
 * @BRIEF        bits [159..128] of 256b word deterministic descriptor - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_H_DETERM_31_0__DESCRIPTOR_BITS_159_TO_128 BITFIELD(31, 0)
#define VDMA__VDMA_H_DETERM_31_0__DESCRIPTOR_BITS_159_TO_128__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_H_DETERM_63_32__DESCRIPTOR_BITS_191_TO_160   
 *
 * @BRIEF        bits [191..160] of 256b word deterministic descriptor - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_H_DETERM_63_32__DESCRIPTOR_BITS_191_TO_160 BITFIELD(31, 0)
#define VDMA__VDMA_H_DETERM_63_32__DESCRIPTOR_BITS_191_TO_160__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_H_DETERM_95_64__DESCRIPTOR_BITS_223_TO_192   
 *
 * @BRIEF        bits [223..192] of 256b word deterministic descriptor - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_H_DETERM_95_64__DESCRIPTOR_BITS_223_TO_192 BITFIELD(31, 0)
#define VDMA__VDMA_H_DETERM_95_64__DESCRIPTOR_BITS_223_TO_192__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_H_DETERM_127_96__DESCRIPTOR_BITS_255_TO_224   
 *
 * @BRIEF        bits [255..224] of 256b word deterministic descriptor - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_H_DETERM_127_96__DESCRIPTOR_BITS_255_TO_224 BITFIELD(31, 0)
#define VDMA__VDMA_H_DETERM_127_96__DESCRIPTOR_BITS_255_TO_224__POS 0

    /* 
     * List of register bitfields values for component VDMA
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_SYSCONFIG__STANDBYMODE__0X0
 *
 * @BRIEF        Force-standby mode: local initiator is unconditionally 
 *               placed in standby state. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_SYSCONFIG__STANDBYMODE__0X0        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_SYSCONFIG__STANDBYMODE__0X1
 *
 * @BRIEF        No-standby mode: local initiator is unconditionally placed 
 *               out of standby state. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_SYSCONFIG__STANDBYMODE__0X1        0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_SYSCONFIG__STANDBYMODE__0X2
 *
 * @BRIEF        Smart-standby mode: local initiator standby status depends 
 *               on local conditions, i.e. the module's functional 
 *               requirement from the initiator. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_SYSCONFIG__STANDBYMODE__0X2        0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_SYSCONFIG__STANDBYMODE__0X3
 *
 * @BRIEF        Smart-Standby wakeup-capable mode: local initiator standby 
 *               status depends on local conditions, i.e. the module's 
 *               functional requirement from the initiator.  - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_SYSCONFIG__STANDBYMODE__0X3        0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_SYSCONFIG__IDLEMODE__0X0
 *
 * @BRIEF        N/A - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_SYSCONFIG__IDLEMODE__0X0           0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_SYSCONFIG__IDLEMODE__0X1
 *
 * @BRIEF        N/A - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_SYSCONFIG__IDLEMODE__0X1           0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_SYSCONFIG__IDLEMODE__0X2
 *
 * @BRIEF        Smart-idle mode: local target's idle state eventually 
 *               follows (acknowledges) the system's idle requests, depending 
 *               on the IP module's internal requirements. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_SYSCONFIG__IDLEMODE__0X2           0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   VDMA__VDMA_SYSCONFIG__IDLEMODE__0X3
 *
 * @BRIEF        N/A - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define VDMA__VDMA_SYSCONFIG__IDLEMODE__0X3           0x3ul

#ifdef __cplusplus
}
#endif
#endif                                                     /* __VDMA_CRED_H */
