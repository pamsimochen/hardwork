/** ==================================================================
 *  @file   sgx540_cred.h                                                  
 *                                                                    
 *  @path   /ti/psp/iss/hal/cred_cram/cred/inc/cortexm3_sys_ape/                                                  
 *                                                                    
 *  @desc   This  File contains.                                      
 * ===================================================================
 *  Copyright (c) Texas Instruments Inc 2011, 2012                    
 *                                                                    
 *  Use of this software is controlled by the terms and conditions found
 *  in the license agreement under which this software has been supplied
 * ===================================================================*/

/* ============================================================================ 
 * TEXAS INSTRUMENTS INCORPORATED PROPRIETARY INFORMATION Property of Texas
 * Instruments For Unrestricted Internal Use Only Unauthorized reproduction
 * and/or distribution is strictly prohibited.  This product is protected
 * under copyright law and trade secret law as an unpublished work.  Created
 * 2008, (C) Copyright 2008 Texas Instruments.  All rights reserved. */

/**
 *  @Component:   SGX540
 *
 *  @Filename:    sgx540_cred.h
 *
 * *  @Description: Corresponds to 
 *                SGX540.Technical_Reference_Manual.1.0.12a.OCP.External. 
 *
 *  Generated by: Socrates CRED generator prototype
 *
    *//* ====================================================================== */

#ifndef __SGX540_CRED_H
#define __SGX540_CRED_H

#ifdef __cplusplus
extern "C" {
#endif

    /* 
     * Instance SGX540 of component SGX540 mapped in MONICA at address 0x56000000
     */

                                                                              /*-------------------------------------------------------------------------*//**
 * @DEFINITION   BITFIELD
 *
 * @BRIEF        The bitfield must be defined according to register width
 *               of the component - 64/32/16/8
 *
    *//*------------------------------------------------------------------------ */
#undef BITFIELD
#define BITFIELD BITFIELD_32

    /* 
     *  List of Register arrays for component SGX540
     *
     */

    /* 
     *  List of bundle arrays for component SGX540
     *
     */

    /* 
     *  List of bundles for component SGX540
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__ALL
 *
 * @BRIEF        Bundle description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__ALL                                        0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL__OFFSET
 *
 * @BRIEF        Register EUR_CR_CLKGATECTL offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL__OFFSET                  0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL2__OFFSET
 *
 * @BRIEF        Register EUR_CR_CLKGATECTL2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL2__OFFSET                 0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS__OFFSET
 *
 * @BRIEF        Register EUR_CR_CLKGATESTATUS offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS__OFFSET               0x8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR__OFFSET
 *
 * @BRIEF        Register EUR_CR_CLKGATECTLOVR offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR__OFFSET               0xCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR2__OFFSET
 *
 * @BRIEF        Register EUR_CR_CLKGATECTLOVR2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR2__OFFSET              0x10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_POWER__OFFSET
 *
 * @BRIEF        Register EUR_CR_POWER offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_POWER__OFFSET                       0x1Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CORE_ID__OFFSET
 *
 * @BRIEF        Register EUR_CR_CORE_ID offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CORE_ID__OFFSET                     0x20ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CORE_REVISION__OFFSET
 *
 * @BRIEF        Register EUR_CR_CORE_REVISION offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CORE_REVISION__OFFSET               0x24ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DESIGNER_REV_FIELD1__OFFSET
 *
 * @BRIEF        Register EUR_CR_DESIGNER_REV_FIELD1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DESIGNER_REV_FIELD1__OFFSET         0x28ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DESIGNER_REV_FIELD2__OFFSET
 *
 * @BRIEF        Register EUR_CR_DESIGNER_REV_FIELD2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DESIGNER_REV_FIELD2__OFFSET         0x2Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF__OFFSET
 *
 * @BRIEF        Register EUR_CR_PERF offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF__OFFSET                        0x40ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER0__OFFSET
 *
 * @BRIEF        Register EUR_CR_PERF_COUNTER0 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER0__OFFSET               0x44ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER1__OFFSET
 *
 * @BRIEF        Register EUR_CR_PERF_COUNTER1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER1__OFFSET               0x48ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER2__OFFSET
 *
 * @BRIEF        Register EUR_CR_PERF_COUNTER2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER2__OFFSET               0x4Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER3__OFFSET
 *
 * @BRIEF        Register EUR_CR_PERF_COUNTER3 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER3__OFFSET               0x50ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER4__OFFSET
 *
 * @BRIEF        Register EUR_CR_PERF_COUNTER4 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER4__OFFSET               0x54ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER5__OFFSET
 *
 * @BRIEF        Register EUR_CR_PERF_COUNTER5 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER5__OFFSET               0x58ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER6__OFFSET
 *
 * @BRIEF        Register EUR_CR_PERF_COUNTER6 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER6__OFFSET               0x5Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER7__OFFSET
 *
 * @BRIEF        Register EUR_CR_PERF_COUNTER7 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER7__OFFSET               0x60ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER8__OFFSET
 *
 * @BRIEF        Register EUR_CR_PERF_COUNTER8 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER8__OFFSET               0x64ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DEBUG_REG0__OFFSET
 *
 * @BRIEF        Register EUR_CR_DEBUG_REG0 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DEBUG_REG0__OFFSET                  0x70ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DEBUG_REG1__OFFSET
 *
 * @BRIEF        Register EUR_CR_DEBUG_REG1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DEBUG_REG1__OFFSET                  0x74ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_SOFT_RESET__OFFSET
 *
 * @BRIEF        Register EUR_CR_SOFT_RESET offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_SOFT_RESET__OFFSET                  0x80ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DEBUG__OFFSET
 *
 * @BRIEF        Register EUR_CR_DEBUG offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DEBUG__OFFSET                       0x90ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TRIGGER__OFFSET
 *
 * @BRIEF        Register EUR_CR_TRIGGER offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TRIGGER__OFFSET                     0x100ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE2__OFFSET
 *
 * @BRIEF        Register EUR_CR_EVENT_HOST_ENABLE2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE2__OFFSET          0x110ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR2__OFFSET
 *
 * @BRIEF        Register EUR_CR_EVENT_HOST_CLEAR2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR2__OFFSET           0x114ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS2__OFFSET
 *
 * @BRIEF        Register EUR_CR_EVENT_STATUS2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS2__OFFSET               0x118ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__OFFSET
 *
 * @BRIEF        Register EUR_CR_EVENT_STATUS offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__OFFSET                0x12Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__OFFSET
 *
 * @BRIEF        Register EUR_CR_EVENT_HOST_ENABLE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__OFFSET           0x130ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__OFFSET
 *
 * @BRIEF        Register EUR_CR_EVENT_HOST_CLEAR offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__OFFSET            0x134ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_STATUS__OFFSET
 *
 * @BRIEF        Register EUR_CR_PDS_CACHE_STATUS offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_STATUS__OFFSET            0x138ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_HOST_ENABLE__OFFSET
 *
 * @BRIEF        Register EUR_CR_PDS_CACHE_HOST_ENABLE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_HOST_ENABLE__OFFSET       0x13Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_HOST_CLEAR__OFFSET
 *
 * @BRIEF        Register EUR_CR_PDS_CACHE_HOST_CLEAR offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_HOST_CLEAR__OFFSET        0x140ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TIMER__OFFSET
 *
 * @BRIEF        Register EUR_CR_TIMER offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TIMER__OFFSET                       0x144ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_START__OFFSET
 *
 * @BRIEF        Register EUR_CR_VDM_START offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_START__OFFSET                   0x200ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_AA__OFFSET
 *
 * @BRIEF        Register EUR_CR_TE_AA offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_AA__OFFSET                       0x204ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_MTILE1__OFFSET
 *
 * @BRIEF        Register EUR_CR_TE_MTILE1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_MTILE1__OFFSET                   0x208ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_MTILE2__OFFSET
 *
 * @BRIEF        Register EUR_CR_TE_MTILE2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_MTILE2__OFFSET                   0x20Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_SCREEN__OFFSET
 *
 * @BRIEF        Register EUR_CR_TE_SCREEN offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_SCREEN__OFFSET                   0x210ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_MTILE__OFFSET
 *
 * @BRIEF        Register EUR_CR_TE_MTILE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_MTILE__OFFSET                    0x214ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_PSG__OFFSET
 *
 * @BRIEF        Register EUR_CR_TE_PSG offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_PSG__OFFSET                      0x218ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_PSGREGION_BASE__OFFSET
 *
 * @BRIEF        Register EUR_CR_TE_PSGREGION_BASE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_PSGREGION_BASE__OFFSET           0x21Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_TPC_BASE__OFFSET
 *
 * @BRIEF        Register EUR_CR_TE_TPC_BASE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_TPC_BASE__OFFSET                 0x220ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_TPCCONTROL__OFFSET
 *
 * @BRIEF        Register EUR_CR_TE_TPCCONTROL offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_TPCCONTROL__OFFSET               0x224ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_RGNBBOX_X__OFFSET
 *
 * @BRIEF        Register EUR_CR_TE_RGNBBOX_X offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_RGNBBOX_X__OFFSET                0x228ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_RGNBBOX_Y__OFFSET
 *
 * @BRIEF        Register EUR_CR_TE_RGNBBOX_Y offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_RGNBBOX_Y__OFFSET                0x22Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_OTPM_CSM_FLUSH_BASE__OFFSET
 *
 * @BRIEF        Register EUR_CR_MTE_OTPM_CSM_FLUSH_BASE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_OTPM_CSM_FLUSH_BASE__OFFSET     0x230ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_OTPM_CSM_LOAD_BASE__OFFSET
 *
 * @BRIEF        Register EUR_CR_MTE_OTPM_CSM_LOAD_BASE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_OTPM_CSM_LOAD_BASE__OFFSET      0x234ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CTRL_STREAM_BASE__OFFSET
 *
 * @BRIEF        Register EUR_CR_VDM_CTRL_STREAM_BASE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CTRL_STREAM_BASE__OFFSET        0x238ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_CTRL__OFFSET
 *
 * @BRIEF        Register EUR_CR_MTE_CTRL offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_CTRL__OFFSET                    0x23Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_WCOMPARE__OFFSET
 *
 * @BRIEF        Register EUR_CR_MTE_WCOMPARE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_WCOMPARE__OFFSET                0x240ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_WCLAMP__OFFSET
 *
 * @BRIEF        Register EUR_CR_MTE_WCLAMP offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_WCLAMP__OFFSET                  0x244ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_SCREEN__OFFSET
 *
 * @BRIEF        Register EUR_CR_MTE_SCREEN offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_SCREEN__OFFSET                  0x248ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_OTPM_OP__OFFSET
 *
 * @BRIEF        Register EUR_CR_MTE_OTPM_OP offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_OTPM_OP__OFFSET                 0x24Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_MULTISAMPLECTL__OFFSET
 *
 * @BRIEF        Register EUR_CR_MTE_MULTISAMPLECTL offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_MULTISAMPLECTL__OFFSET          0x250ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_SIG1__OFFSET
 *
 * @BRIEF        Register EUR_CR_MTE_SIG1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_SIG1__OFFSET                    0x26Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_SIG2__OFFSET
 *
 * @BRIEF        Register EUR_CR_MTE_SIG2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_SIG2__OFFSET                    0x270ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_STATE__OFFSET
 *
 * @BRIEF        Register EUR_CR_TE_STATE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_STATE__OFFSET                    0x274ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_MACROTILING__OFFSET
 *
 * @BRIEF        Register EUR_CR_MTE_MACROTILING offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_MACROTILING__OFFSET             0x278ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE1__OFFSET
 *
 * @BRIEF        Register EUR_CR_TE1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE1__OFFSET                         0x2A0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE2__OFFSET
 *
 * @BRIEF        Register EUR_CR_TE2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE2__OFFSET                         0x2A4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLIP_SIG1__OFFSET
 *
 * @BRIEF        Register EUR_CR_CLIP_SIG1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLIP_SIG1__OFFSET                   0x304ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE_SIG01__OFFSET
 *
 * @BRIEF        Register EUR_CR_PIXELBE_SIG01 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE_SIG01__OFFSET               0x308ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE_SIG02__OFFSET
 *
 * @BRIEF        Register EUR_CR_PIXELBE_SIG02 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE_SIG02__OFFSET               0x30Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_START__OFFSET
 *
 * @BRIEF        Register EUR_CR_VDM_CONTEXT_STORE_START offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_START__OFFSET     0x330ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STREAM__OFFSET
 *
 * @BRIEF        Register EUR_CR_VDM_CONTEXT_STORE_STREAM offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STREAM__OFFSET    0x334ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_INDEX__OFFSET
 *
 * @BRIEF        Register EUR_CR_VDM_CONTEXT_STORE_INDEX offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_INDEX__OFFSET     0x338ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATUS__OFFSET
 *
 * @BRIEF        Register EUR_CR_VDM_CONTEXT_STORE_STATUS offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATUS__OFFSET    0x33Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE0__OFFSET
 *
 * @BRIEF        Register EUR_CR_VDM_CONTEXT_STORE_STATE0 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE0__OFFSET    0x340ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__OFFSET
 *
 * @BRIEF        Register EUR_CR_VDM_CONTEXT_STORE_STATE1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__OFFSET    0x344ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_WAIT_FOR_KICK__OFFSET
 *
 * @BRIEF        Register EUR_CR_VDM_WAIT_FOR_KICK offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_WAIT_FOR_KICK__OFFSET           0x348ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAP_INDEX__OFFSET
 *
 * @BRIEF        Register EUR_CR_VDM_CONTEXT_STORE_WRAP_INDEX offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAP_INDEX__OFFSET 0x34Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAPPED__OFFSET
 *
 * @BRIEF        Register EUR_CR_VDM_CONTEXT_STORE_WRAPPED offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAPPED__OFFSET   0x350ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_FAN__OFFSET
 *
 * @BRIEF        Register EUR_CR_VDM_CONTEXT_STORE_FAN offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_FAN__OFFSET       0x354ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAP__OFFSET
 *
 * @BRIEF        Register EUR_CR_VDM_CONTEXT_STORE_WRAP offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAP__OFFSET      0x358ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_MTE__OFFSET
 *
 * @BRIEF        Register EUR_CR_VDM_MTE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_MTE__OFFSET                     0x378ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE__OFFSET
 *
 * @BRIEF        Register EUR_CR_PIXELBE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE__OFFSET                     0x400ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_RENDER__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_RENDER offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_RENDER__OFFSET                  0x404ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_RGN_BASE__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_RGN_BASE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_RGN_BASE__OFFSET                0x408ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_RENDBOX1__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_RENDBOX1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_RENDBOX1__OFFSET                0x40Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_RENDBOX2__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_RENDBOX2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_RENDBOX2__OFFSET                0x410ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_IPFMISC__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_IPFMISC offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_IPFMISC__OFFSET                 0x414ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_OGL_MODE__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_OGL_MODE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_OGL_MODE__OFFSET                0x418ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_PERPENDICULAR__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_PERPENDICULAR offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_PERPENDICULAR__OFFSET           0x41Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_CULLVALUE__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_CULLVALUE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_CULLVALUE__OFFSET               0x420ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_DBIAS__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_DBIAS offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_DBIAS__OFFSET                   0x424ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_START_RENDER__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_START_RENDER offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_START_RENDER__OFFSET            0x428ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_THREED_AA_MODE__OFFSET
 *
 * @BRIEF        Register EUR_CR_THREED_AA_MODE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_THREED_AA_MODE__OFFSET              0x42Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_BREAK__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_BREAK offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_BREAK__OFFSET                   0x430ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_3DCONTEXT__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_3DCONTEXT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_3DCONTEXT__OFFSET               0x434ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_FPU__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_FPU offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_FPU__OFFSET                     0x438ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TSP_PARAMETER_CACHE__OFFSET
 *
 * @BRIEF        Register EUR_CR_TSP_PARAMETER_CACHE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TSP_PARAMETER_CACHE__OFFSET         0x43Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TSP_PARAMETER_FETCH__OFFSET
 *
 * @BRIEF        Register EUR_CR_TSP_PARAMETER_FETCH offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TSP_PARAMETER_FETCH__OFFSET         0x440ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_FPU_Z_ROUNDING__OFFSET
 *
 * @BRIEF        Register EUR_CR_FPU_Z_ROUNDING offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_FPU_Z_ROUNDING__OFFSET              0x444ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZLSCTL__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_ZLSCTL offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZLSCTL__OFFSET                  0x480ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZLOAD_BASE__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_ZLOAD_BASE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZLOAD_BASE__OFFSET              0x484ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZSTORE_BASE__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_ZSTORE_BASE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZSTORE_BASE__OFFSET             0x488ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_STENCIL_LOAD_BASE__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_STENCIL_LOAD_BASE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_STENCIL_LOAD_BASE__OFFSET       0x48Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_STENCIL_STORE_BASE__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_STENCIL_STORE_BASE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_STENCIL_STORE_BASE__OFFSET      0x490ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_CTRL__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_VISTEST_CTRL offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_CTRL__OFFSET            0x494ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE0__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_VISTEST_VISIBLE0 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE0__OFFSET        0x498ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE1__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_VISTEST_VISIBLE1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE1__OFFSET        0x49Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE2__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_VISTEST_VISIBLE2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE2__OFFSET        0x4A0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE3__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_VISTEST_VISIBLE3 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE3__OFFSET        0x4A4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE4__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_VISTEST_VISIBLE4 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE4__OFFSET        0x4A8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE5__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_VISTEST_VISIBLE5 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE5__OFFSET        0x4ACul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE6__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_VISTEST_VISIBLE6 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE6__OFFSET        0x4B0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE7__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_VISTEST_VISIBLE7 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE7__OFFSET        0x4B4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_BGOBJDEPTH__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_BGOBJDEPTH offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_BGOBJDEPTH__OFFSET              0x4B8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_BGOBJ__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_BGOBJ offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_BGOBJ__OFFSET                   0x4BCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_BGOBJTAG__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_BGOBJTAG offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_BGOBJTAG__OFFSET                0x4C4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_MULTISAMPLECTL__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_MULTISAMPLECTL offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_MULTISAMPLECTL__OFFSET          0x4C8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_SIG1__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_SIG1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_SIG1__OFFSET                    0x4CCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_SIG2__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_SIG2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_SIG2__OFFSET                    0x4D0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_SIG3__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_SIG3 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_SIG3__OFFSET                    0x4D4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_SIG4__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_SIG4 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_SIG4__OFFSET                    0x4D8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_TAGCTRL__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_TAGCTRL offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_TAGCTRL__OFFSET                 0x4DCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_STATUS1__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_STATUS1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_STATUS1__OFFSET                 0x4E0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_STATUS2__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_STATUS2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_STATUS2__OFFSET                 0x4E4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_DEPTHSORT__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP_DEPTHSORT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_DEPTHSORT__OFFSET               0x4E8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE_EMIT__OFFSET
 *
 * @BRIEF        Register EUR_CR_PIXELBE_EMIT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE_EMIT__OFFSET                0x4ECul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP2_ZLS_EXTZ_RGN_BASE__OFFSET
 *
 * @BRIEF        Register EUR_CR_ISP2_ZLS_EXTZ_RGN_BASE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP2_ZLS_EXTZ_RGN_BASE__OFFSET      0x50Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_PAGE_TABLE_BASE__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_3D_PAGE_TABLE_BASE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_PAGE_TABLE_BASE__OFFSET      0x600ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_FREE_LIST__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_3D_FREE_LIST offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_FREE_LIST__OFFSET            0x604ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_PDS_PAGE_THRESHOLD__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_PDS_PAGE_THRESHOLD offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_PDS_PAGE_THRESHOLD__OFFSET      0x614ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC_PAGE_TABLE_BASE__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_TA_ALLOC_PAGE_TABLE_BASE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC_PAGE_TABLE_BASE__OFFSET 0x618ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_TA_ALLOC_FREE_LIST offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST__OFFSET      0x61Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_PAGE_THRESHOLD__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_TA_PAGE_THRESHOLD offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_PAGE_THRESHOLD__OFFSET       0x620ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_ZLS_PAGE_THRESHOLD__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_ZLS_PAGE_THRESHOLD offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_ZLS_PAGE_THRESHOLD__OFFSET      0x624ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_GLOBAL_LIST__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_TA_GLOBAL_LIST offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_GLOBAL_LIST__OFFSET          0x628ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_STATE_TABLE_BASE__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_STATE_TABLE_BASE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_STATE_TABLE_BASE__OFFSET        0x62Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_STATE_CONTEXT_ID__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_STATE_CONTEXT_ID offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_STATE_CONTEXT_ID__OFFSET        0x630ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_CONTROL_TABLE_BASE__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_CONTROL_TABLE_BASE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_CONTROL_TABLE_BASE__OFFSET      0x634ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_START_OF_CONTEXT_PAGES_ALLOCATED__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_START_OF_CONTEXT_PAGES_ALLOCATED offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_START_OF_CONTEXT_PAGES_ALLOCATED__OFFSET 0x638ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_DEALLOCATE__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_3D_DEALLOCATE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_DEALLOCATE__OFFSET           0x63Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_ALLOC__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_ALLOC offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_ALLOC__OFFSET                   0x640ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_DALLOC__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_DALLOC offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_DALLOC__OFFSET                  0x644ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_TA_ALLOC offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC__OFFSET                0x648ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_3D offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D__OFFSET                      0x64Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_PARTIAL_RENDER__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_PARTIAL_RENDER offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_PARTIAL_RENDER__OFFSET          0x658ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_LSS_PARTIAL_CONTEXT__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_LSS_PARTIAL_CONTEXT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_LSS_PARTIAL_CONTEXT__OFFSET     0x65Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_START_OF_3D_CONTEXT_PAGES_ALLOCATED__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_START_OF_3D_CONTEXT_PAGES_ALLOCATED offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_START_OF_3D_CONTEXT_PAGES_ALLOCATED__OFFSET 0x660ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TASK_3D_FREE__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_TASK_3D_FREE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TASK_3D_FREE__OFFSET            0x680ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TASK_TA_FREE__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_TASK_TA_FREE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TASK_TA_FREE__OFFSET            0x684ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TASK_STATE__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_TASK_STATE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TASK_STATE__OFFSET              0x694ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TASK_CONTROL__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_TASK_CONTROL offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TASK_CONTROL__OFFSET            0x698ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_OUTOFMEM__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_OUTOFMEM offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_OUTOFMEM__OFFSET                0x69Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_FREE_CONTEXT__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_FREE_CONTEXT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_FREE_CONTEXT__OFFSET            0x6A0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_TIMEOUT__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_3D_TIMEOUT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_TIMEOUT__OFFSET              0x6A4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_EVM__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_TA_EVM offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_EVM__OFFSET                  0x6A8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS1__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS1__OFFSET 0x700ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS1__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_3D_FREE_LIST_STATUS1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS1__OFFSET    0x70Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS2__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS2__OFFSET 0x710ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS2__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_3D_FREE_LIST_STATUS2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS2__OFFSET    0x71Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_ABORT_STATUS_MTILE__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_ABORT_STATUS_MTILE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_ABORT_STATUS_MTILE__OFFSET      0x720ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_PAGE_STATUS__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_PAGE_STATUS offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_PAGE_STATUS__OFFSET             0x724ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_PAGE__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_PAGE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_PAGE__OFFSET                    0x728ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_GLOBAL_PAGE_STATUS__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_GLOBAL_PAGE_STATUS offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_GLOBAL_PAGE_STATUS__OFFSET      0x72Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_GLOBAL_PAGE__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_GLOBAL_PAGE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_GLOBAL_PAGE__OFFSET             0x730ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_REQUESTING__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_REQUESTING offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_REQUESTING__OFFSET              0x734ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_RGN_HDR_PARSER__OFFSET
 *
 * @BRIEF        Register EUR_CR_DPM_RGN_HDR_PARSER offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_RGN_HDR_PARSER__OFFSET          0x738ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TSP_CONFIG__OFFSET
 *
 * @BRIEF        Register EUR_CR_TSP_CONFIG offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TSP_CONFIG__OFFSET                  0x800ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CACHE_CTRL__OFFSET
 *
 * @BRIEF        Register EUR_CR_CACHE_CTRL offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CACHE_CTRL__OFFSET                  0x804ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TF_SIG00__OFFSET
 *
 * @BRIEF        Register EUR_CR_TF_SIG00 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TF_SIG00__OFFSET                    0x84Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TF_SIG01__OFFSET
 *
 * @BRIEF        Register EUR_CR_TF_SIG01 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TF_SIG01__OFFSET                    0x850ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TF_SIG02__OFFSET
 *
 * @BRIEF        Register EUR_CR_TF_SIG02 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TF_SIG02__OFFSET                    0x854ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TF_SIG03__OFFSET
 *
 * @BRIEF        Register EUR_CR_TF_SIG03 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TF_SIG03__OFFSET                    0x858ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ITR_TAG0__OFFSET
 *
 * @BRIEF        Register EUR_CR_ITR_TAG0 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ITR_TAG0__OFFSET                    0x85Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ITR_TAG1__OFFSET
 *
 * @BRIEF        Register EUR_CR_ITR_TAG1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ITR_TAG1__OFFSET                    0x860ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ITR_USE0__OFFSET
 *
 * @BRIEF        Register EUR_CR_ITR_USE0 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ITR_USE0__OFFSET                    0x864ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ITR_USE1__OFFSET
 *
 * @BRIEF        Register EUR_CR_ITR_USE1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ITR_USE1__OFFSET                    0x868ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ITR_USE2__OFFSET
 *
 * @BRIEF        Register EUR_CR_ITR_USE2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ITR_USE2__OFFSET                    0x86Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ITR_USE3__OFFSET
 *
 * @BRIEF        Register EUR_CR_ITR_USE3 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ITR_USE3__OFFSET                    0x870ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CTRL__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_CTRL offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CTRL__OFFSET                    0xA00ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_LD_REDIRECT__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_LD_REDIRECT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_LD_REDIRECT__OFFSET             0xA04ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CACHE__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_CACHE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CACHE__OFFSET                   0xA08ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_00__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_CODE_BASE_00 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_00__OFFSET            0xA0Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_01__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_CODE_BASE_01 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_01__OFFSET            0xA10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_02__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_CODE_BASE_02 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_02__OFFSET            0xA14ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_03__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_CODE_BASE_03 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_03__OFFSET            0xA18ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_04__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_CODE_BASE_04 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_04__OFFSET            0xA1Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_05__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_CODE_BASE_05 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_05__OFFSET            0xA20ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_06__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_CODE_BASE_06 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_06__OFFSET            0xA24ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_07__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_CODE_BASE_07 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_07__OFFSET            0xA28ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_08__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_CODE_BASE_08 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_08__OFFSET            0xA2Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_09__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_CODE_BASE_09 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_09__OFFSET            0xA30ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_10__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_CODE_BASE_10 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_10__OFFSET            0xA34ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_11__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_CODE_BASE_11 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_11__OFFSET            0xA38ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_12__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_CODE_BASE_12 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_12__OFFSET            0xA3Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_13__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_CODE_BASE_13 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_13__OFFSET            0xA40ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_14__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_CODE_BASE_14 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_14__OFFSET            0xA44ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_15__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_CODE_BASE_15 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_15__OFFSET            0xA48ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE2__OFFSET
 *
 * @BRIEF        Register EUR_CR_EVENT_PDS_ENABLE2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE2__OFFSET           0xA50ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_ENABLE__OFFSET
 *
 * @BRIEF        Register EUR_CR_PDS_CACHE_ENABLE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_ENABLE__OFFSET            0xA54ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__OFFSET
 *
 * @BRIEF        Register EUR_CR_EVENT_PDS_ENABLE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__OFFSET            0xA58ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PIXEL_PDS_EXEC__OFFSET
 *
 * @BRIEF        Register EUR_CR_EVENT_PIXEL_PDS_EXEC offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_EXEC__OFFSET        0xA5Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PIXEL_PDS_DATA__OFFSET
 *
 * @BRIEF        Register EUR_CR_EVENT_PIXEL_PDS_DATA offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_DATA__OFFSET        0xA60ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__OFFSET
 *
 * @BRIEF        Register EUR_CR_EVENT_PIXEL_PDS_INFO offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__OFFSET        0xA64ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_EXEC__OFFSET
 *
 * @BRIEF        Register EUR_CR_EVENT_OTHER_PDS_EXEC offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_EXEC__OFFSET        0xA68ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_DATA__OFFSET
 *
 * @BRIEF        Register EUR_CR_EVENT_OTHER_PDS_DATA offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_DATA__OFFSET        0xA6Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__OFFSET
 *
 * @BRIEF        Register EUR_CR_EVENT_OTHER_PDS_INFO offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__OFFSET        0xA70ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DMS_CTRL__OFFSET
 *
 * @BRIEF        Register EUR_CR_DMS_CTRL offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DMS_CTRL__OFFSET                    0xA74ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DMS_AGE__OFFSET
 *
 * @BRIEF        Register EUR_CR_DMS_AGE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DMS_AGE__OFFSET                     0xA78ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_G0__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_G0 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_G0__OFFSET                      0xA7Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_G1__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_G1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_G1__OFFSET                      0xA80ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER0_LEFT__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_FILTER0_LEFT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER0_LEFT__OFFSET            0xA84ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER0_RIGHT__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_FILTER0_RIGHT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER0_RIGHT__OFFSET           0xA88ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER0_EXTRA__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_FILTER0_EXTRA offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER0_EXTRA__OFFSET           0xA8Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER1_LEFT__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_FILTER1_LEFT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER1_LEFT__OFFSET            0xA90ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER1_RIGHT__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_FILTER1_RIGHT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER1_RIGHT__OFFSET           0xA94ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER1_EXTRA__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_FILTER1_EXTRA offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER1_EXTRA__OFFSET           0xA98ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER_TABLE__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_FILTER_TABLE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER_TABLE__OFFSET            0xA9Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_ST_RANGE__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_ST_RANGE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_ST_RANGE__OFFSET                0xAA0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_DM_SLOT__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE0_DM_SLOT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_DM_SLOT__OFFSET                0xAA4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_DM_SLOT__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE1_DM_SLOT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_DM_SLOT__OFFSET                0xAA8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_KICK1__OFFSET
 *
 * @BRIEF        Register EUR_CR_EVENT_KICK1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_KICK1__OFFSET                 0xAB0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_EXEF__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_EXEF offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_EXEF__OFFSET                    0xAB4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_EXEC_BASE__OFFSET
 *
 * @BRIEF        Register EUR_CR_PDS_EXEC_BASE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_EXEC_BASE__OFFSET               0xAB8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS__OFFSET
 *
 * @BRIEF        Register EUR_CR_PDS offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS__OFFSET                         0xABCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_KICK2__OFFSET
 *
 * @BRIEF        Register EUR_CR_EVENT_KICK2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_KICK2__OFFSET                 0xAC0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_KICKER__OFFSET
 *
 * @BRIEF        Register EUR_CR_EVENT_KICKER offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_KICKER__OFFSET                0xAC4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_KICK__OFFSET
 *
 * @BRIEF        Register EUR_CR_EVENT_KICK offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_KICK__OFFSET                  0xAC8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_TIMER__OFFSET
 *
 * @BRIEF        Register EUR_CR_EVENT_TIMER offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_TIMER__OFFSET                 0xACCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_INV0__OFFSET
 *
 * @BRIEF        Register EUR_CR_PDS_INV0 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_INV0__OFFSET                    0xAD0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_INV1__OFFSET
 *
 * @BRIEF        Register EUR_CR_PDS_INV1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_INV1__OFFSET                    0xAD4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_KICK3__OFFSET
 *
 * @BRIEF        Register EUR_CR_EVENT_KICK3 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_KICK3__OFFSET                 0xAD8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_INV3__OFFSET
 *
 * @BRIEF        Register EUR_CR_PDS_INV3 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_INV3__OFFSET                    0xADCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_INV_CSC__OFFSET
 *
 * @BRIEF        Register EUR_CR_PDS_INV_CSC offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_INV_CSC__OFFSET                 0xAE0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM0__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_GLOBCOM0 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM0__OFFSET                0xAE4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM1__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_GLOBCOM1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM1__OFFSET                0xAE8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM2__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_GLOBCOM2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM2__OFFSET                0xAECul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM3__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_GLOBCOM3 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM3__OFFSET                0xAF0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM4__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_GLOBCOM4 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM4__OFFSET                0xAF4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM5__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_GLOBCOM5 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM5__OFFSET                0xAF8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM6__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_GLOBCOM6 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM6__OFFSET                0xAFCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM7__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_GLOBCOM7 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM7__OFFSET                0xB00ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_LOOPBACK__OFFSET
 *
 * @BRIEF        Register EUR_CR_LOOPBACK offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_LOOPBACK__OFFSET                    0xB04ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_SERV_PIXEL__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE0_SERV_PIXEL offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_SERV_PIXEL__OFFSET             0xB08ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_SERV_VERTEX__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE0_SERV_VERTEX offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_SERV_VERTEX__OFFSET            0xB0Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_SERV_EVENT__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE0_SERV_EVENT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_SERV_EVENT__OFFSET             0xB10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_SERV_PIXEL__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE1_SERV_PIXEL offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_SERV_PIXEL__OFFSET             0xB14ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_SERV_VERTEX__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE1_SERV_VERTEX offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_SERV_VERTEX__OFFSET            0xB18ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_SERV_EVENT__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE1_SERV_EVENT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_SERV_EVENT__OFFSET             0xB1Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER2_LEFT__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_FILTER2_LEFT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER2_LEFT__OFFSET            0xB20ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER2_RIGHT__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_FILTER2_RIGHT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER2_RIGHT__OFFSET           0xB24ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER2_EXTRA__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_FILTER2_EXTRA offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER2_EXTRA__OFFSET           0xB28ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_PC_BASE__OFFSET
 *
 * @BRIEF        Register EUR_CR_PDS_PC_BASE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_PC_BASE__OFFSET                 0xB2Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_MOE__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_MOE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_MOE__OFFSET                     0xB30ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_DM_SLOT__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE2_DM_SLOT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_DM_SLOT__OFFSET                0xB80ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_DM_SLOT__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE3_DM_SLOT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_DM_SLOT__OFFSET                0xB84ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_SERV_PIXEL__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE2_SERV_PIXEL offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_SERV_PIXEL__OFFSET             0xB88ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_SERV_VERTEX__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE2_SERV_VERTEX offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_SERV_VERTEX__OFFSET            0xB8Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_SERV_EVENT__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE2_SERV_EVENT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_SERV_EVENT__OFFSET             0xB90ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_SERV_PIXEL__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE3_SERV_PIXEL offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_SERV_PIXEL__OFFSET             0xB94ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_SERV_VERTEX__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE3_SERV_VERTEX offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_SERV_VERTEX__OFFSET            0xB98ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_SERV_EVENT__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE3_SERV_EVENT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_SERV_EVENT__OFFSET             0xB9Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER0_CENTRE__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_FILTER0_CENTRE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER0_CENTRE__OFFSET          0xBA0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER1_CENTRE__OFFSET
 *
 * @BRIEF        Register EUR_CR_USE_FILTER1_CENTRE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER1_CENTRE__OFFSET          0xBA4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_CTRL__OFFSET
 *
 * @BRIEF        Register EUR_CR_BIF_CTRL offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_CTRL__OFFSET                    0xC00ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_INT_STAT__OFFSET
 *
 * @BRIEF        Register EUR_CR_BIF_INT_STAT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_INT_STAT__OFFSET                0xC04ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_FAULT__OFFSET
 *
 * @BRIEF        Register EUR_CR_BIF_FAULT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_FAULT__OFFSET                   0xC08ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_DIR_LIST_BASE0__OFFSET
 *
 * @BRIEF        Register EUR_CR_BIF_DIR_LIST_BASE0 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_DIR_LIST_BASE0__OFFSET          0xC84ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_TA_REQ_BASE__OFFSET
 *
 * @BRIEF        Register EUR_CR_BIF_TA_REQ_BASE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_TA_REQ_BASE__OFFSET             0xC90ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_MEM_REQ_STAT__OFFSET
 *
 * @BRIEF        Register EUR_CR_BIF_MEM_REQ_STAT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_MEM_REQ_STAT__OFFSET            0xCA8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_3D_REQ_BASE__OFFSET
 *
 * @BRIEF        Register EUR_CR_BIF_3D_REQ_BASE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_3D_REQ_BASE__OFFSET             0xCACul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_ZLS_REQ_BASE__OFFSET
 *
 * @BRIEF        Register EUR_CR_BIF_ZLS_REQ_BASE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_ZLS_REQ_BASE__OFFSET            0xCB0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_SIG0__OFFSET
 *
 * @BRIEF        Register EUR_CR_BIF_SIG0 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_SIG0__OFFSET                    0xCC0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_SIG1__OFFSET
 *
 * @BRIEF        Register EUR_CR_BIF_SIG1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_SIG1__OFFSET                    0xCC4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_CYCLE_COUNT__OFFSET
 *
 * @BRIEF        Register EUR_CR_EMU_CYCLE_COUNT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_CYCLE_COUNT__OFFSET             0xE80ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_TA_PHASE__OFFSET
 *
 * @BRIEF        Register EUR_CR_EMU_TA_PHASE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_TA_PHASE__OFFSET                0xE84ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_3D_PHASE__OFFSET
 *
 * @BRIEF        Register EUR_CR_EMU_3D_PHASE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_3D_PHASE__OFFSET                0xE88ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_TA_CYCLE__OFFSET
 *
 * @BRIEF        Register EUR_CR_EMU_TA_CYCLE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_TA_CYCLE__OFFSET                0xE8Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_3D_CYCLE__OFFSET
 *
 * @BRIEF        Register EUR_CR_EMU_3D_CYCLE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_3D_CYCLE__OFFSET                0xE90ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_MEM_READ__OFFSET
 *
 * @BRIEF        Register EUR_CR_EMU_MEM_READ offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_MEM_READ__OFFSET                0xEB4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_TA_OR_3D_CYCLE__OFFSET
 *
 * @BRIEF        Register EUR_CR_EMU_TA_OR_3D_CYCLE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_TA_OR_3D_CYCLE__OFFSET          0xEB8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_MEM_WRITE__OFFSET
 *
 * @BRIEF        Register EUR_CR_EMU_MEM_WRITE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_MEM_WRITE__OFFSET               0xEBCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_MEM_BYTE_WRITE__OFFSET
 *
 * @BRIEF        Register EUR_CR_EMU_MEM_BYTE_WRITE offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_MEM_BYTE_WRITE__OFFSET          0xEC0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_MEM_STALL__OFFSET
 *
 * @BRIEF        Register EUR_CR_EMU_MEM_STALL offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_MEM_STALL__OFFSET               0xEC4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_REVISION__OFFSET
 *
 * @BRIEF        Register OCP_REVISION offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_REVISION__OFFSET                       0xFE00ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_HWINFO__OFFSET
 *
 * @BRIEF        Register OCP_HWINFO offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_HWINFO__OFFSET                         0xFE04ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_SYSCONFIG__OFFSET
 *
 * @BRIEF        Register OCP_SYSCONFIG offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_SYSCONFIG__OFFSET                      0xFE10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_RAW_0__OFFSET
 *
 * @BRIEF        Register OCP_IRQSTATUS_RAW_0 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_RAW_0__OFFSET                0xFE24ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_RAW_1__OFFSET
 *
 * @BRIEF        Register OCP_IRQSTATUS_RAW_1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_RAW_1__OFFSET                0xFE28ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_RAW_2__OFFSET
 *
 * @BRIEF        Register OCP_IRQSTATUS_RAW_2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_RAW_2__OFFSET                0xFE2Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_0__OFFSET
 *
 * @BRIEF        Register OCP_IRQSTATUS_0 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_0__OFFSET                    0xFE30ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_1__OFFSET
 *
 * @BRIEF        Register OCP_IRQSTATUS_1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_1__OFFSET                    0xFE34ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_2__OFFSET
 *
 * @BRIEF        Register OCP_IRQSTATUS_2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_2__OFFSET                    0xFE38ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_SET_0__OFFSET
 *
 * @BRIEF        Register OCP_IRQENABLE_SET_0 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_SET_0__OFFSET                0xFE3Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_SET_1__OFFSET
 *
 * @BRIEF        Register OCP_IRQENABLE_SET_1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_SET_1__OFFSET                0xFE40ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_SET_2__OFFSET
 *
 * @BRIEF        Register OCP_IRQENABLE_SET_2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_SET_2__OFFSET                0xFE44ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_CLR_0__OFFSET
 *
 * @BRIEF        Register OCP_IRQENABLE_CLR_0 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_CLR_0__OFFSET                0xFE48ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_CLR_1__OFFSET
 *
 * @BRIEF        Register OCP_IRQENABLE_CLR_1 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_CLR_1__OFFSET                0xFE4Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_CLR_2__OFFSET
 *
 * @BRIEF        Register OCP_IRQENABLE_CLR_2 offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_CLR_2__OFFSET                0xFE50ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_PAGE_CONFIG__OFFSET
 *
 * @BRIEF        Register OCP_PAGE_CONFIG offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_PAGE_CONFIG__OFFSET                    0xFF00ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__OFFSET
 *
 * @BRIEF        Register OCP_INTERRUPT_EVENT offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__OFFSET                0xFF04ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_CONFIG__OFFSET
 *
 * @BRIEF        Register OCP_DEBUG_CONFIG offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_CONFIG__OFFSET                   0xFF08ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__OFFSET
 *
 * @BRIEF        Register OCP_DEBUG_STATUS offset in bundle ALL 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__OFFSET                   0xFF0Cul

    /* 
     * List of registers for component SGX540
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL
 *
 * @BRIEF        Core module clock gating controls: allows clocks to be 
 *               forced off, forced on or operate under automatic pipeline 
 *               activity based clock gating. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL                          0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL2
 *
 * @BRIEF        Core module clock gating controls: allows clocks to be 
 *               forced off, forced on or operate under automatic pipeline 
 *               activity based clock gating. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL2                         0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS
 *
 * @BRIEF        Clock Gating Status reflects the condition of the clock gate 
 *               controls for each module. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS                       0x8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR
 *
 * @BRIEF        Core module clock gating override controls: allows clocks to 
 *               be enabled temporarily for register writes by hosts. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR                       0xCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR2
 *
 * @BRIEF        Core module clock gating override controls: allows clocks to 
 *               be enabled temporarily for register writes by hosts. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR2                      0x10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_POWER
 *
 * @BRIEF        Chip can be run with half the number of pipes enabled. 
 *               Default is all pipes enabled 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_POWER                               0x1Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CORE_ID
 *
 * @BRIEF        Core ID Register 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CORE_ID                             0x20ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CORE_REVISION
 *
 * @BRIEF        Core Revision Register identifies the specific core 
 *               revision. This is updated to reflect the formal release 
 *               status of the core. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CORE_REVISION                       0x24ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DESIGNER_REV_FIELD1
 *
 * @BRIEF        Designer Revision Field. The SOC designer can use this 
 *               register for their own revision control if required. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DESIGNER_REV_FIELD1                 0x28ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DESIGNER_REV_FIELD2
 *
 * @BRIEF        Designer Revision Field The SOC designer can use this 
 *               register for their own revision control if required. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DESIGNER_REV_FIELD2                 0x2Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF
 *
 * @BRIEF        Within SGX there are a number of performance counters which 
 *               enable profiling of an application in terms of the low level 
 *               hardware performance; this register enables selection of 
 *               specific groups of performance counters and the ability to 
 *               reset those counters.  Full details can be found in the 
 *               performance profiling section of this document.  Write a '1' 
 *               followed by a '0' to the _CLR fields to reset the specific 
 *               counter 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF                                0x40ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER0
 *
 * @BRIEF        Performance counter 0 status register 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER0                       0x44ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER1
 *
 * @BRIEF        Performance counter 1 status register 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER1                       0x48ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER2
 *
 * @BRIEF        Performance counter 2 status register 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER2                       0x4Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER3
 *
 * @BRIEF        Performance counter 3 status register 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER3                       0x50ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER4
 *
 * @BRIEF        Performance counter 4 status register 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER4                       0x54ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER5
 *
 * @BRIEF        Performance counter 5 status register 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER5                       0x58ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER6
 *
 * @BRIEF        Performance counter 6 status register 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER6                       0x5Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER7
 *
 * @BRIEF        Performance counter 7 status register 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER7                       0x60ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER8
 *
 * @BRIEF        Performance counter  status register 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER8                       0x64ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DEBUG_REG0
 *
 * @BRIEF        Performance counter  status register 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DEBUG_REG0                          0x70ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DEBUG_REG1
 *
 * @BRIEF        Performance counter  status register 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DEBUG_REG1                          0x74ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_SOFT_RESET
 *
 * @BRIEF        Soft reset control register which drives all modules except 
 *               the register bank. Write a '1' to reset and a '0' to clear 
 *               Bits 31 : 16 are reserved 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_SOFT_RESET                          0x80ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DEBUG
 *
 * @BRIEF        Debug select control: Dictates which module control signals 
 *               are to be muxed out to the external pins for debugging.  The 
 *               external debug bus is arranged in 2 8-bit busses A and B.  
 *               The source module for each 8-bit output bus is selectable, 
 *               and within each core module there is a 6-bit control field 
 *               to select individual control signals.  (Debug only, for 
 *               further information contact Imagination Technologies) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DEBUG                               0x90ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TRIGGER
 *
 * @BRIEF        TA/3D Lockup counter timeout value (16K cycle granularity) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TRIGGER                             0x100ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE2
 *
 * @BRIEF        This register enables interrupts. Writing a '1' to a bit 
 *               field enables the relevant Event. All the bit fields 
 *               correspond exactly to those in the EUR_CR_EVENT_STATUS2 
 *               register. 
 *               The MASTER_INTERRUPT bit is a global enable which overrides 
 *               the Event enables, i.e. '1' - enable external interrupts, 
 *               '0' - disable external interrupts. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE2                  0x110ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR2
 *
 * @BRIEF        This register is used to clear event interrupts. Writing a 
 *               '1' to a bit field clears the relevant Event. All the bit 
 *               fields correspond exactly to those in the 
 *               EUR_CR_EVENT_STATUS2 register. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR2                   0x114ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS2
 *
 * @BRIEF        There are 2 sources of external interrupts in the PowerVR 
 *               SGX core: General system events and PDS cache invalidation 
 *               events. 
 *               The event status2 register indicates the source of any 
 *               general event interrupt generated by PowerVR SGX.  These 
 *               events only result in an external interrupt if the relevant 
 *               bit in the EUR_CR_EVENT_HOST_ENABLE register is set. 
 *               Note1: This register must be combined with the 
 *               EUR_CR_PDS_CACHE_STATUS register information to determine 
 *               what has caused the external interrupt. 
 *               Note2: The host can write to this register in which case any 
 *               bits written as a '1' are ORed into the register i.e. the 
 *               host can cause the core to generate an interrupt. (This is 
 *               typically for debug purposes only) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS2                       0x118ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS
 *
 * @BRIEF        There are 2 sources of external interrupts in the PowerVR 
 *               SGX core: General system events and PDS cache invalidation 
 *               events. 
 *               The event status register indicates the source of any 
 *               general event interrupt generated by PowerVR SGX.  These 
 *               events only result in an external interrupt if the relevant 
 *               bit in the EUR_CR_EVENT_HOST_ENABLE register is set. 
 *               Note1: This register must be combined with the 
 *               EUR_CR_PDS_CACHE_STATUS register information to determine 
 *               what has caused the external interrupt. 
 *               Note2: The host can write to this register in which case any 
 *               bits written as a '1' are ORed into the register i.e. the 
 *               host can cause the core to generate an interrupt. (This is 
 *               typically for debug purposes only) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS                        0x12Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE
 *
 * @BRIEF        This register enables interrupts. Writing a '1' to a bit 
 *               field enables the relevant Event. All the bit fields 
 *               correspond exactly to those in the EUR_CR_EVENT_STATUS 
 *               register. 
 *               The MASTER_INTERRUPT bit is a global enable which overrides 
 *               the Event enables, i.e. '1' - enable external interrupts, 
 *               '0' - disable external interrupts. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE                   0x130ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR
 *
 * @BRIEF        This register is used to clear event interrupts. Writing a 
 *               '1' to a bit field clears the relevant Event. All the bit 
 *               fields correspond exactly to those in the 
 *               EUR_CR_EVENT_STATUS register. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR                    0x134ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_STATUS
 *
 * @BRIEF        There are 2 sources of external interrupts in the PowerVR 
 *               SGX core: General system events and PDS cache invalidation 
 *               events. 
 *               The PDS cache status register indicates the source of any 
 *               PDS cache invalidation event interrupts generated by PowerVR 
 *               SGX.  These events only result in an external interrupt if 
 *               the relevant bit in the EUR_CR_PDS_CACHE_HOST_ENABLE 
 *               register is set. 
 *               Note1: This register must be combined with the 
 *               EUR_CR_EVENT_STATUS register information to determine what 
 *               has caused the external interrupt. 
 *               Note2: The host can write to this register in which case any 
 *               bits written as a '1' are ORed into the register i.e. the 
 *               host can cause the core to generate an interrupt. (This is 
 *               typically for debug purposes only) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_STATUS                    0x138ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_HOST_ENABLE
 *
 * @BRIEF        This register enables interrupts. Writing a '1' to a bit 
 *               field enables the relevant Event. All the bit fields 
 *               correspond exactly to those in the EUR_CR_PDS_CACHE_STATUS 
 *               register. 
 *               The MASTER_INTERRUPT bit contained in the 
 *               EUR_CR_EVENT_HOST_ENABLE register is a global enable which 
 *               overrides the Event enables, i.e. '1' - enable external 
 *               interrupts, '0' - disable external interrupts. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_HOST_ENABLE               0x13Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_HOST_CLEAR
 *
 * @BRIEF        This register is used to clear event interrupts. Writing a 
 *               '1' to a bit field clears the relevant Event. All the bit 
 *               fields correspond exactly to those in the 
 *               EUR_CR_PDS_CACHE_STATUS register. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_HOST_CLEAR                0x140ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TIMER
 *
 * @BRIEF        {This register return the value of the internal timer. The 
 *               timer runs continuously, and wraps at the top end. It counts 
 *               16 cycle lots of the core clock frequency.  
 *               This means that at 100 MHz: 
 *               Period = 1/100MHz = 10 * 10^-9 seconds 
 *               1 count value = 16 * 10 * 10^-9 seconds = 0.16 us 
 *               It is a 32 bit counter so it will wrap every: 
 *               2^32 * 0.16 us = 687 seconds. 
 *               at 100MHz 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TIMER                               0x144ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_START
 *
 * @BRIEF        Any write to this register starts the Vertex Data Master DMA 
 *               operation 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_START                           0x200ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_AA
 *
 * @BRIEF        This register controls the anti-aliasing mode of the Tiling 
 *               Co-Processor, independent control is provided in both X and 
 *               Y axis. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_AA                               0x204ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_MTILE1
 *
 * @BRIEF        The Tiling Co-Processor allocates memory in macrotiles, 
 *               which is a group of individual tiles.  The number of 
 *               macrotiles is selectable between 4 and 16, the boundaries of 
 *               the macrotiles in the X axis are defined in this register. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_MTILE1                           0x208ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_MTILE2
 *
 * @BRIEF        The Tiling Co-Processor allocates memory in macrotiles, 
 *               which is a group of individual tiles.  The number of 
 *               macrotiles is selectable between 4 and 16, the boundaries of 
 *               the macrotiles in the Y axis are defined in this register. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_MTILE2                           0x20Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_SCREEN
 *
 * @BRIEF        In order to perform the tiling operation and generate the 
 *               display list the maximum screen size must be configured in 
 *               terms of the number of tiles in X and Y axis. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_SCREEN                           0x210ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_MTILE
 *
 * @BRIEF        This register defines the number of individual tiles within 
 *               the macrotiles. This is used in the process of memory 
 *               allocation. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_MTILE                            0x214ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_PSG
 *
 * @BRIEF        This register defines the global control for the Parameter 
 *               Stream Generator within the Tiling Co-Processor. This module 
 *               formats the display list generated by the Tiling 
 *               Co-Processor. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_PSG                              0x218ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_PSGREGION_BASE
 *
 * @BRIEF        This register defines the base address in memory of the 
 *               Region Header writes by the TA.  Region headers are the 
 *               first part of the display list and contain an entry per tile 
 *               with information on global setup and a link address to 
 *               parameters. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_PSGREGION_BASE                   0x21Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_TPC_BASE
 *
 * @BRIEF        This register defines the base address in memory of the Tail 
 *               Pointer Cache.  A tail pointer is the current last address 
 *               written to for a tiles individual display list, an entry for 
 *               active tiles is maintained as primitives are processed by 
 *               the TA. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_TPC_BASE                         0x220ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_TPCCONTROL
 *
 * @BRIEF        The Tail Pointer Cache is used to keep track of the last 
 *               address written to for a particular tile, this is stored in 
 *               a mixture of on chip cache and external memory.  Under 
 *               certain circumstances it is neccesary to either reset the 
 *               cache or flush the on chip cache contents such that they are 
 *               visible in memory. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_TPCCONTROL                       0x224ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_RGNBBOX_X
 *
 * @BRIEF        Reset or enabled by the MTE_RESETBBOX and MTE_UPDATEBBOX 
 *               fields in the MTEControl word of the Input Parameter format. 
 *               This is the maximum extent in X of the post transformed, 
 *               clipped data before region clipping. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_RGNBBOX_X                        0x228ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_RGNBBOX_Y
 *
 * @BRIEF        Reset or enabled by the MTE_RESETBBOX and MTE_UPDATEBBOX 
 *               fields in the MTE Control word of the Input Parameter 
 *               format. This is the maximum extent in Y of the post 
 *               transformed, clipped data before region clipping. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_RGNBBOX_Y                        0x22Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_OTPM_CSM_FLUSH_BASE
 *
 * @BRIEF        The TA maintains internal state of the current information 
 *               for each macro tile and global list regarding the vertex 
 *               blocks written to memory. In certain circumstances during a 
 *               context switch it is neccessary to flush this information to 
 *               external memory. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_OTPM_CSM_FLUSH_BASE             0x230ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_OTPM_CSM_LOAD_BASE
 *
 * @BRIEF        The TA maintains internal state of the current information 
 *               for each macro tile and global list regarding the vertex 
 *               blocks written to memory. In certain circumstances during a 
 *               context switch it is neccessary to load this information 
 *               from external memory. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_OTPM_CSM_LOAD_BASE              0x234ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CTRL_STREAM_BASE
 *
 * @BRIEF        PowerVR SGX masters information from memory using advanced 
 *               DMA, this register defines the base address of the Vertex 
 *               Data input control stream in memory. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CTRL_STREAM_BASE                0x238ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_CTRL
 *
 * @BRIEF        This register controls the global setup of the Tiling 
 *               Process. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_CTRL                            0x23Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_WCOMPARE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_WCOMPARE                        0x240ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_WCLAMP
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_WCLAMP                          0x244ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_SCREEN
 *
 * @BRIEF        In order to perform the tiling operation and generate the 
 *               display list the maximum screen size must be configured in 
 *               terms of the number of pixels in X and Y axis since this may 
 *               not be the same as the number of tiles defined in the 
 *               EUR_CR_TE_SCREEN register. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_SCREEN                          0x248ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_OTPM_OP
 *
 * @BRIEF        The TA maintains internal state of the current information 
 *               for each macro tile and global list regarding the vertex 
 *               blocks written to memory. In certain circumstances during a 
 *               context switch it is necessary to load or flush this 
 *               information to external memory. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_OTPM_OP                         0x24Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_MULTISAMPLECTL
 *
 * @BRIEF        This applies when anti-aliasing is enabled. This is used to 
 *               calculate whether an anti-aliased triangle can be perfect 
 *               small object culled. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_MULTISAMPLECTL                  0x250ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_SIG1
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_SIG1                            0x26Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_SIG2
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_SIG2                            0x270ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_STATE
 *
 * @BRIEF        This register is read on VDM_START_PULSE and should be saved 
 *               and updated by the driver app by app 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_STATE                            0x274ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_MACROTILING
 *
 * @BRIEF        This register applies a margin to macrotiling. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_MACROTILING                     0x278ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE1
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE1                                 0x2A0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE2
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE2                                 0x2A4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLIP_SIG1
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLIP_SIG1                           0x304ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE_SIG01
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE_SIG01                       0x308ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE_SIG02
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE_SIG02                       0x30Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_START
 *
 * @BRIEF        Start VDM Context store, pulse kicks off the store 
 *               operation. Status flags when this is complete and the stream 
 *               and index position registers are valid 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_START             0x330ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STREAM
 *
 * @BRIEF        Stores the stream position when the context store occured 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STREAM            0x334ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_INDEX
 *
 * @BRIEF        Stores the index position when the context store occured 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_INDEX             0x338ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATUS
 *
 * @BRIEF        Signals when a context store is complete and the stream and 
 *               index location registers are valid 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATUS            0x33Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE0
 *
 * @BRIEF        Terminate state control registers used for creating the 
 *               terminate PDS task. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE0            0x340ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1
 *
 * @BRIEF        Terminate state control registers used for creating the 
 *               terminate PDS task. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1            0x344ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_WAIT_FOR_KICK
 *
 * @BRIEF        Indicates the status on the control stream fetch 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_WAIT_FOR_KICK                   0x348ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAP_INDEX
 *
 * @BRIEF        Stores the index position when the context store occured 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAP_INDEX        0x34Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAPPED
 *
 * @BRIEF        Stores the index position when the context store occured 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAPPED           0x350ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_FAN
 *
 * @BRIEF        Stores the index position when the context store occured 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_FAN               0x354ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAP
 *
 * @BRIEF        Stores the index position when the context store occured 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAP              0x358ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_MTE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_MTE                             0x378ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE
 *
 * @BRIEF        The PixelBE modules format the pixel data before writing to 
 *               memory, this register contains global control signals. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE                             0x400ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_RENDER
 *
 * @BRIEF        The Image Synthesis Processor can be configured to operate 
 *               in 3 different render modes 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_RENDER                          0x404ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_RGN_BASE
 *
 * @BRIEF        This register defines the base address in memory of the 
 *               Region Header reads by the ISP.  Region headers are the 
 *               first part of the display list and contain an entry per tile 
 *               with information on global setup and a link address to 
 *               parameters. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_RGN_BASE                        0x408ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_RENDBOX1
 *
 * @BRIEF        When the render type is set to Fast 2D Render or Fast Scale 
 *               Render, no region headers are read from memory. Instead, 
 *               region headers are internally generated for all tiles 
 *               enclosed in the bounding box defined by this register and 
 *               the EUR_CR_ISP_RENDBOX2 register. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_RENDBOX1                        0x40Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_RENDBOX2
 *
 * @BRIEF        When the render type is set to Fast 2D Render or Fast Scale 
 *               Render, no region headers are read from memory. Instead, 
 *               region headers are internally generated for all tiles 
 *               enclosed in the bounding box defined by this register and 
 *               the EUR_CR_ISP_RENDBOX1 register. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_RENDBOX2                        0x410ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_IPFMISC
 *
 * @BRIEF        Global control register for the ISP parameter fetch. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_IPFMISC                         0x414ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_OGL_MODE
 *
 * @BRIEF        Global control register which modifies the pixel sample 
 *               position to comply with OGL requirements. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_OGL_MODE                        0x418ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_PERPENDICULAR
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_PERPENDICULAR                   0x41Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_CULLVALUE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_CULLVALUE                       0x420ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_DBIAS
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_DBIAS                           0x424ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_START_RENDER
 *
 * @BRIEF        Any write to this register starts a 3D Render. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_START_RENDER                    0x428ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_THREED_AA_MODE
 *
 * @BRIEF        Indicates to the 3D pipeline whether anti-aliasing is 
 *               enabled or disabled 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_THREED_AA_MODE                      0x42Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_BREAK
 *
 * @BRIEF        Object breakpoints can be inserted by the driver to 
 *               interrupt a render part way and then resume the render from 
 *               the point of interrupt at a later time, this register 
 *               controls what happens when a breakpoint has been 
 *               encountered. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_BREAK                           0x430ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_3DCONTEXT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_3DCONTEXT                       0x434ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_FPU
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_FPU                             0x438ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TSP_PARAMETER_CACHE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TSP_PARAMETER_CACHE                 0x43Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TSP_PARAMETER_FETCH
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TSP_PARAMETER_FETCH                 0x440ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_FPU_Z_ROUNDING
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_FPU_Z_ROUNDING                      0x444ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZLSCTL
 *
 * @BRIEF        Image Synthesis Processor Z Load/Store and format global 
 *               control register 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZLSCTL                          0x480ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZLOAD_BASE
 *
 * @BRIEF        This register defines the base address in memory of the Z 
 *               Buffer base address to load into the ISP for non-compressed 
 *               ZLS formats. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZLOAD_BASE                      0x484ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZSTORE_BASE
 *
 * @BRIEF        This register defines the base address in memory of the Z 
 *               Buffer base address to store data from the ISP for 
 *               non-compressed ZLS formats. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZSTORE_BASE                     0x488ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_STENCIL_LOAD_BASE
 *
 * @BRIEF        This register defines the base address in memory of the 
 *               Stencil Buffer base address to load into the ISP for Int24 
 *               and IEEE ZLS formats. This alternate stencil buffer base 
 *               address is selectable based on the enable bit. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_STENCIL_LOAD_BASE               0x48Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_STENCIL_STORE_BASE
 *
 * @BRIEF        This register defines the base address in memory of the 
 *               Stencil Buffer base address to store data from the ISP for 
 *               Int24 and IEEE ZLS formats. This alternate stencil buffer 
 *               base address is selectable based on the enable bit. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_STENCIL_STORE_BASE              0x490ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_CTRL
 *
 * @BRIEF        This register can be used to reset the results of the 8 
 *               visibility test results. 
 *               Write a 1 to the required bit field to clear the result 
 *               register 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_CTRL                    0x494ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE0
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE0                0x498ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE1
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE1                0x49Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE2
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE2                0x4A0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE3
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE3                0x4A4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE4
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE4                0x4A8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE5
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE5                0x4ACul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE6
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE6                0x4B0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE7
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE7                0x4B4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_BGOBJDEPTH
 *
 * @BRIEF        The ISP operates by comparing depth values of incoming 
 *               objects with the results of previous depth compares, in 
 *               order to make sure there are no unitialised values at the 
 *               start of the tile or to cover pixels where there are no 
 *               objects in the scene a default background object is 
 *               configured under register control. This register provides 
 *               the floating point depth value for this background object. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_BGOBJDEPTH                      0x4B8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_BGOBJ
 *
 * @BRIEF        The ISP operates by comparing depth values of incoming 
 *               objects with the results of previous depth compares, in 
 *               order to make sure there is no unitialised values at the 
 *               start of the tile or to cover pixels where there are no 
 *               objects in the scene a default background object is 
 *               configured under register control. This register provides 
 *               tag, mask and stencil information for this background 
 *               object. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_BGOBJ                           0x4BCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_BGOBJTAG
 *
 * @BRIEF        The ISP operates by comparing depth values of incoming 
 *               objects with the results of previous depth compares, in 
 *               order to make sure there are no unitialised values at the 
 *               start of the tile or to cover pixels where there are no 
 *               objects in the scene a default background object is 
 *               configured under register control. This register provides 
 *               TSP and Vertex information for this background object. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_BGOBJTAG                        0x4C4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_MULTISAMPLECTL
 *
 * @BRIEF        This applies when anti-aliasing is enabled. This is used by 
 *               the ISP to adjust the sample positions. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_MULTISAMPLECTL                  0x4C8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_SIG1
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_SIG1                            0x4CCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_SIG2
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_SIG2                            0x4D0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_SIG3
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_SIG3                            0x4D4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_SIG4
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_SIG4                            0x4D8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_TAGCTRL
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_TAGCTRL                         0x4DCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_STATUS1
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_STATUS1                         0x4E0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_STATUS2
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_STATUS2                         0x4E4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_DEPTHSORT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_DEPTHSORT                       0x4E8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE_EMIT
 *
 * @BRIEF        This register indicates if the PixelBE would stall the USE 
 *               if there were another emit. '0' indicates that the PixelBE 
 *               would stall the USE. '1' indicates that the PixelBE would 
 *               not stall the USE. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE_EMIT                        0x4ECul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP2_ZLS_EXTZ_RGN_BASE
 *
 * @BRIEF        This register defines the base address in memory of where 
 *               the zls stores out the tile starting address and the number 
 *               of bursts of the current tile when using an external z 
 *               buffer. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP2_ZLS_EXTZ_RGN_BASE              0x50Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_PAGE_TABLE_BASE
 *
 * @BRIEF        Effective on load 3D context, this register defines the base 
 *               address of the page table being referenced in the process of 
 *               de-allocating pages during a 3D render. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_PAGE_TABLE_BASE              0x600ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_FREE_LIST
 *
 * @BRIEF        Between the FREE_LIST_HEAD and FREE_LIST_TAIL there must be 
 *               a valid chain of linked pages. The linked list is stored in 
 *               memory, at the EUR_CR_DPM_3D_PAGE_TABLE_BASE_ADDRESS and is 
 *               effective on load 3D context. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_FREE_LIST                    0x604ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_PDS_PAGE_THRESHOLD
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_PDS_PAGE_THRESHOLD              0x614ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC_PAGE_TABLE_BASE
 *
 * @BRIEF        Effective on Loading the TA Page Table Context, this 
 *               register defines the base address of the page table being 
 *               referenced in the process of allocating pages by the TE and 
 *               MTE. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC_PAGE_TABLE_BASE        0x618ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST
 *
 * @BRIEF        Between the FREE_LIST_HEAD and FREE_LIST_TAIL there must be 
 *               a valid chain of linked pages. The linked list is stored in 
 *               memory, at the EUR_CR_DPM_TA_ALLOC_PAGE_TABLE_BASE_ADDRESS 
 *               and is effective on Loading the TA Page Table Context. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST              0x61Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_PAGE_THRESHOLD
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_PAGE_THRESHOLD               0x620ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_ZLS_PAGE_THRESHOLD
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_ZLS_PAGE_THRESHOLD              0x624ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_GLOBAL_LIST
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_GLOBAL_LIST                  0x628ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_STATE_TABLE_BASE
 *
 * @BRIEF        Effective immediately, this register defines the base 
 *               address of the state table when it is read and written 
 *               to/from memory. The state table itself contains the head, 
 *               tail and number of pages allocated to every macrotile, and 
 *               the global list. Each context needs a separate state page 
 *               table. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_STATE_TABLE_BASE                0x62Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_STATE_CONTEXT_ID
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_STATE_CONTEXT_ID                0x630ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_CONTROL_TABLE_BASE
 *
 * @BRIEF        Effective immediately, this register defines the base 
 *               address of the control table when it is read and written 
 *               to/from memory. The control table itself contains the 
 *               current offset into the page, and whether a page has been 
 *               allocated, for each macrotile. Each context needs a separate 
 *               state page table. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_CONTROL_TABLE_BASE              0x634ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_START_OF_CONTEXT_PAGES_ALLOCATED
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_START_OF_CONTEXT_PAGES_ALLOCATED 0x638ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_DEALLOCATE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_DEALLOCATE                   0x63Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_ALLOC
 *
 * @BRIEF        A write to this register invalidates the current contents 
 *               and causes a new allocation cycle 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_ALLOC                           0x640ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_DALLOC
 *
 * @BRIEF        A write to this register invalidates the current contents 
 *               and causes a new de-allocation cycle 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_DALLOC                          0x644ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC                        0x648ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D                              0x64Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_PARTIAL_RENDER
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_PARTIAL_RENDER                  0x658ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_LSS_PARTIAL_CONTEXT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_LSS_PARTIAL_CONTEXT             0x65Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_START_OF_3D_CONTEXT_PAGES_ALLOCATED
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_START_OF_3D_CONTEXT_PAGES_ALLOCATED 0x660ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TASK_3D_FREE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TASK_3D_FREE                    0x680ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TASK_TA_FREE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TASK_TA_FREE                    0x684ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TASK_STATE
 *
 * @BRIEF        This register controls the DPM module task state for page 
 *               tables.  The normal order of operation is Store context, 
 *               Clear context, Load new context. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TASK_STATE                      0x694ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TASK_CONTROL
 *
 * @BRIEF        This register controls the DPM module task state for control 
 *               page tables.  The normal order of operation is Store 
 *               context, Clear context, Load new context. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TASK_CONTROL                    0x698ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_OUTOFMEM
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_OUTOFMEM                        0x69Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_FREE_CONTEXT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_FREE_CONTEXT                    0x6A0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_TIMEOUT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_TIMEOUT                      0x6A4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_EVM
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_EVM                          0x6A8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS1
 *
 * @BRIEF        This status register is read for a context switch, and 
 *               reprogrammed on a context load. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS1      0x700ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS1
 *
 * @BRIEF        This status register is read for a context switch, and 
 *               reprogrammed on a context load. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS1            0x70Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS2
 *
 * @BRIEF        This status register is read for a context switch, and 
 *               reprogrammed on a context load. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS2      0x710ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS2
 *
 * @BRIEF        This status register is read for a context switch, and 
 *               reprogrammed on a context load. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS2            0x71Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_ABORT_STATUS_MTILE
 *
 * @BRIEF        This status register is read for a context switch, and 
 *               reprogrammed on a context load. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_ABORT_STATUS_MTILE              0x720ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_PAGE_STATUS
 *
 * @BRIEF        This status register is read for a context switch, and 
 *               reprogrammed on a context load. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_PAGE_STATUS                     0x724ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_PAGE
 *
 * @BRIEF        This status register is read for a context switch, and 
 *               reprogrammed on a context load. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_PAGE                            0x728ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_GLOBAL_PAGE_STATUS
 *
 * @BRIEF        This status register is read for a context switch, and 
 *               reprogrammed on a context load. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_GLOBAL_PAGE_STATUS              0x72Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_GLOBAL_PAGE
 *
 * @BRIEF        This status register is read for a context switch, and 
 *               reprogrammed on a context load. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_GLOBAL_PAGE                     0x730ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_REQUESTING
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_REQUESTING                      0x734ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_RGN_HDR_PARSER
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_RGN_HDR_PARSER                  0x738ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TSP_CONFIG
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TSP_CONFIG                          0x800ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CACHE_CTRL
 *
 * @BRIEF        Unified Cache global control register 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CACHE_CTRL                          0x804ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TF_SIG00
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TF_SIG00                            0x84Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TF_SIG01
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TF_SIG01                            0x850ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TF_SIG02
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TF_SIG02                            0x854ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TF_SIG03
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TF_SIG03                            0x858ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ITR_TAG0
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ITR_TAG0                            0x85Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ITR_TAG1
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ITR_TAG1                            0x860ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ITR_USE0
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ITR_USE0                            0x864ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ITR_USE1
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ITR_USE1                            0x868ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ITR_USE2
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ITR_USE2                            0x86Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ITR_USE3
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ITR_USE3                            0x870ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CTRL
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CTRL                            0xA00ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_LD_REDIRECT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_LD_REDIRECT                     0xA04ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CACHE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CACHE                           0xA08ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_00
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_00                    0xA0Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_01
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_01                    0xA10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_02
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_02                    0xA14ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_03
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_03                    0xA18ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_04
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_04                    0xA1Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_05
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_05                    0xA20ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_06
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_06                    0xA24ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_07
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_07                    0xA28ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_08
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_08                    0xA2Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_09
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_09                    0xA30ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_10
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_10                    0xA34ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_11
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_11                    0xA38ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_12
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_12                    0xA3Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_13
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_13                    0xA40ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_14
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_14                    0xA44ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_15
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_15                    0xA48ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE2
 *
 * @BRIEF        Enables general event bits into the PDS event data master 
 *               for processing by the PDS Micro Controller 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE2                   0xA50ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_ENABLE
 *
 * @BRIEF        Enables PDS cache invalidation events bits into the PDS 
 *               event data master for processing by the PDS Micro Controller 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_ENABLE                    0xA54ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE
 *
 * @BRIEF        Enables general event bits into the PDS event data master 
 *               for processing by the PDS Micro Controller 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE                    0xA58ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PIXEL_PDS_EXEC
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_EXEC                0xA5Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PIXEL_PDS_DATA
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_DATA                0xA60ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO                0xA64ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_EXEC
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_EXEC                0xA68ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_DATA
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_DATA                0xA6Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_INFO
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO                0xA70ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DMS_CTRL
 *
 * @BRIEF        Control register used to disable individual data masters - 
 *               '1' - disable data master, '0' - enable data master 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DMS_CTRL                            0xA74ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DMS_AGE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DMS_AGE                             0xA78ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_G0
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_G0                              0xA7Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_G1
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_G1                              0xA80ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER0_LEFT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER0_LEFT                    0xA84ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER0_RIGHT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER0_RIGHT                   0xA88ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER0_EXTRA
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER0_EXTRA                   0xA8Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER1_LEFT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER1_LEFT                    0xA90ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER1_RIGHT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER1_RIGHT                   0xA94ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER1_EXTRA
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER1_EXTRA                   0xA98ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER_TABLE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER_TABLE                    0xA9Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_ST_RANGE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_ST_RANGE                        0xAA0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_DM_SLOT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_DM_SLOT                        0xAA4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_DM_SLOT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_DM_SLOT                        0xAA8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_KICK1
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_KICK1                         0xAB0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_EXEF
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_EXEF                            0xAB4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_EXEC_BASE
 *
 * @BRIEF        Base Address in memory where the PDS programs are located 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_EXEC_BASE                       0xAB8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS                                 0xABCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_KICK2
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_KICK2                         0xAC0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_KICKER
 *
 * @BRIEF        Base Address in memory where the Kick Synchronisation data 
 *               will be read from 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_KICKER                        0xAC4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_KICK
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_KICK                          0xAC8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_TIMER
 *
 * @BRIEF        The timer which runs at the core clock when enabled, 
 *               decrementing from the loaded value. Wraps when it hits 0 
 *               back to the starting value. A transition through 0 creates 
 *               an event, which can be enabled into either the PDS or the 
 *               Host status register. The timer can also be read/written 
 *               from within the PDS program. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_TIMER                         0xACCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_INV0
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_INV0                            0xAD0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_INV1
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_INV1                            0xAD4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_KICK3
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_KICK3                         0xAD8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_INV3
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_INV3                            0xADCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_INV_CSC
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_INV_CSC                         0xAE0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM0
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM0                        0xAE4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM1
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM1                        0xAE8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM2
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM2                        0xAECul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM3
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM3                        0xAF0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM4
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM4                        0xAF4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM5
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM5                        0xAF8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM6
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM6                        0xAFCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM7
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM7                        0xB00ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_LOOPBACK
 *
 * @BRIEF        This USE can issue loopback tasks through the PDS back to 
 *               itself. This bit indicates the status of this interface. A 
 *               value of 1 should that there are no pending loopback 
 *               requests (for any USE pipeline), A value of 0 indicates that 
 *               a loop task is pending, and that further loopback events may 
 *               cause the USE pipeline to wait until new resource becomes 
 *               available. Issuing loopback events when tasks are already 
 *               pending is not recommended, as this may result in system 
 *               lockups. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_LOOPBACK                            0xB04ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_SERV_PIXEL
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_SERV_PIXEL                     0xB08ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_SERV_VERTEX
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_SERV_VERTEX                    0xB0Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_SERV_EVENT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_SERV_EVENT                     0xB10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_SERV_PIXEL
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_SERV_PIXEL                     0xB14ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_SERV_VERTEX
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_SERV_VERTEX                    0xB18ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_SERV_EVENT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_SERV_EVENT                     0xB1Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER2_LEFT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER2_LEFT                    0xB20ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER2_RIGHT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER2_RIGHT                   0xB24ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER2_EXTRA
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER2_EXTRA                   0xB28ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_PC_BASE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_PC_BASE                         0xB2Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_MOE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_MOE                             0xB30ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_DM_SLOT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_DM_SLOT                        0xB80ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_DM_SLOT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_DM_SLOT                        0xB84ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_SERV_PIXEL
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_SERV_PIXEL                     0xB88ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_SERV_VERTEX
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_SERV_VERTEX                    0xB8Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_SERV_EVENT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_SERV_EVENT                     0xB90ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_SERV_PIXEL
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_SERV_PIXEL                     0xB94ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_SERV_VERTEX
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_SERV_VERTEX                    0xB98ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_SERV_EVENT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_SERV_EVENT                     0xB9Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER0_CENTRE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER0_CENTRE                  0xBA0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER1_CENTRE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER1_CENTRE                  0xBA4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_CTRL
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_CTRL                            0xC00ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_INT_STAT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_INT_STAT                        0xC04ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_FAULT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_FAULT                           0xC08ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_DIR_LIST_BASE0
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_DIR_LIST_BASE0                  0xC84ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_TA_REQ_BASE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_TA_REQ_BASE                     0xC90ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_MEM_REQ_STAT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_MEM_REQ_STAT                    0xCA8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_3D_REQ_BASE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_3D_REQ_BASE                     0xCACul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_ZLS_REQ_BASE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_ZLS_REQ_BASE                    0xCB0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_SIG0
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_SIG0                            0xCC0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_SIG1
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_SIG1                            0xCC4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_CYCLE_COUNT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_CYCLE_COUNT                     0xE80ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_TA_PHASE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_TA_PHASE                        0xE84ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_3D_PHASE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_3D_PHASE                        0xE88ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_TA_CYCLE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_TA_CYCLE                        0xE8Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_3D_CYCLE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_3D_CYCLE                        0xE90ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_MEM_READ
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_MEM_READ                        0xEB4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_TA_OR_3D_CYCLE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_TA_OR_3D_CYCLE                  0xEB8ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_MEM_WRITE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_MEM_WRITE                       0xEBCul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_MEM_BYTE_WRITE
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_MEM_BYTE_WRITE                  0xEC0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_MEM_STALL
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_MEM_STALL                       0xEC4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_REVISION
 *
 * @BRIEF        OCP Revision Register. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_REVISION                               0xFE00ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_HWINFO
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_HWINFO                                 0xFE04ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_SYSCONFIG
 *
 * @BRIEF        Sys Config register 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_SYSCONFIG                              0xFE10ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_RAW_0
 *
 * @BRIEF        Raw IRQ 0 Status 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_RAW_0                        0xFE24ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_RAW_1
 *
 * @BRIEF        Raw IRQ 1 Status . Slave port interrupt. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_RAW_1                        0xFE28ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_RAW_2
 *
 * @BRIEF        Raw IRQ 2 Status. Thalia interrupt. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_RAW_2                        0xFE2Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_0
 *
 * @BRIEF        Interrupt 0 Status event. Master port interrupt. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_0                            0xFE30ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_1
 *
 * @BRIEF        Interrupt 1 - slave port status event 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_1                            0xFE34ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_2
 *
 * @BRIEF        Interrupt 2 - Thalia status event 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_2                            0xFE38ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_SET_0
 *
 * @BRIEF        Enable Interrupt 0 - Master port 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_SET_0                        0xFE3Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_SET_1
 *
 * @BRIEF        Enable Interrupt 1. Target port interrupt. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_SET_1                        0xFE40ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_SET_2
 *
 * @BRIEF        Enable Interrupt 2. Thalia (core) interrupt. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_SET_2                        0xFE44ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_CLR_0
 *
 * @BRIEF        Clear Interrupt 0 - Master port 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_CLR_0                        0xFE48ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_CLR_1
 *
 * @BRIEF        Clear Interrupt 1 - slave port 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_CLR_1                        0xFE4Cul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_CLR_2
 *
 * @BRIEF        Clear Interrupt 2 -Thalia (core) interrupt 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_CLR_2                        0xFE50ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_PAGE_CONFIG
 *
 * @BRIEF        Configure memory pages.. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_PAGE_CONFIG                            0xFF00ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT
 *
 * @BRIEF        Register description is not available
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT                        0xFF04ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_CONFIG
 *
 * @BRIEF        Configuration of debug modes. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_CONFIG                           0xFF08ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS
 *
 * @BRIEF        Status of debug. 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS                           0xFF0Cul

    /* 
     * List of register bitfields for component SGX540
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL__RESERVED_29   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL__RESERVED_29        BITFIELD(31, 29)
#define SGX540__EUR_CR_CLKGATECTL__RESERVED_29__POS   29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL__SYSTEM_CLKG   
 *
 * @BRIEF        Disable gating of the system, mem and ungated core clocks 
 *               0x0 Enable automatic clock gating for sys, mem and ungated 
 *               core clocks 
 *               0x1 Disable automatic clock gating for sys, mem and ungated 
 *               core clocks - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL__SYSTEM_CLKG        BITFIELD(28, 28)
#define SGX540__EUR_CR_CLKGATECTL__SYSTEM_CLKG__POS   28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL__RESERVED_25   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL__RESERVED_25        BITFIELD(27, 25)
#define SGX540__EUR_CR_CLKGATECTL__RESERVED_25__POS   25

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL__AUTO_MAN_REG   
 *
 * @BRIEF        Automatic Register Power Management Control 
 *               0x0 Register updates automatically turn on clock domains 
 *               0x1 Manual clock domain control for register updates - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL__AUTO_MAN_REG       BITFIELD(24, 24)
#define SGX540__EUR_CR_CLKGATECTL__AUTO_MAN_REG__POS  24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL__RESERVED_20   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL__RESERVED_20        BITFIELD(23, 20)
#define SGX540__EUR_CR_CLKGATECTL__RESERVED_20__POS   20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL__TA_CLKG   
 *
 * @BRIEF        Clock gating control for the TA 
 *               0x0 Clock gating is active and no clock is supplied to the 
 *               TA 
 *               0x1 Clock to the TA is enabled 
 *               0x2 Automatic gating is active, the TA clock is only active 
 *               whilst data is being processed 
 *               0x3 Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL__TA_CLKG            BITFIELD(19, 18)
#define SGX540__EUR_CR_CLKGATECTL__TA_CLKG__POS       18

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL__IDXFIFO_CLKG   
 *
 * @BRIEF        Clock gating control for the IDXFIFO 
 *               0x0 Clock gating is active and no clock is supplied to the 
 *               IDXFIFO 
 *               0x1 Clock to the IDXFIFO is enabled 
 *               0x2 Automatic gating is active, the IDXFIFO clock is only 
 *               active whilst data is being processed 
 *               0x3 Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL__IDXFIFO_CLKG       BITFIELD(17, 16)
#define SGX540__EUR_CR_CLKGATECTL__IDXFIFO_CLKG__POS  16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL__PDS_CLKG   
 *
 * @BRIEF        Clock gating control for the PDS 
 *               0x0 Clock gating is active and no clock is supplied to the 
 *               PDS 
 *               0x1 Clock to the PDS is enabled 
 *               0x2 Automatic gating is active, the PDS clock is only active 
 *               whilst data is being processed 
 *               0x3 Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL__PDS_CLKG           BITFIELD(15, 14)
#define SGX540__EUR_CR_CLKGATECTL__PDS_CLKG__POS      14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL__VDM_CLKG   
 *
 * @BRIEF        Clock gating control for the VDM 
 *               0x0 Clock gating is active and no clock is supplied to the 
 *               VDM 
 *               0x1 Clock to the VDM is enabled 
 *               0x2 Automatic gating is active, the VDM clock is only active 
 *               whilst data is being processed 
 *               0x3 Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL__VDM_CLKG           BITFIELD(13, 12)
#define SGX540__EUR_CR_CLKGATECTL__VDM_CLKG__POS      12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL__DPM_CLKG   
 *
 * @BRIEF        Clock gating control for the DPM 
 *               0x0 Clock gating is active and no clock is supplied to the 
 *               DPM 
 *               0x1 Clock to the DPM is enabled 
 *               0x2 Automatic gating is active, the DPM clock is only active 
 *               whilst data is being processed 
 *               0x3 Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL__DPM_CLKG           BITFIELD(11, 10)
#define SGX540__EUR_CR_CLKGATECTL__DPM_CLKG__POS      10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL__MTE_CLKG   
 *
 * @BRIEF        Clock gating control for the MTE 
 *               0x0 Clock gating is active and no clock is supplied to the 
 *               MTE 
 *               0x1 Clock to the MTE is enabled 
 *               0x2 Automatic gating is active, the MTE clock is only active 
 *               whilst data is being processed 
 *               0x3 Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL__MTE_CLKG           BITFIELD(9, 8)
#define SGX540__EUR_CR_CLKGATECTL__MTE_CLKG__POS      8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL__TE_CLKG   
 *
 * @BRIEF        Clock gating control for the TE 
 *               0x0 Clock gating is active and no clock is supplied to the 
 *               TE 
 *               0x1 Clock to the TE is enabled 
 *               0x2 Automatic gating is active, the TE clock is only active 
 *               whilst data is being processed 
 *               0x3 Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL__TE_CLKG            BITFIELD(7, 6)
#define SGX540__EUR_CR_CLKGATECTL__TE_CLKG__POS       6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL__TSP_CLKG   
 *
 * @BRIEF        Clock gating control for the TSP 
 *               0x0 Clock gating is active and no clock is supplied to the 
 *               TSP 
 *               0x1 Clock to the TSP is enabled 
 *               0x2 Automatic gating is active, the TSP clock is only active 
 *               whilst data is being processed 
 *               0x3 Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL__TSP_CLKG           BITFIELD(5, 4)
#define SGX540__EUR_CR_CLKGATECTL__TSP_CLKG__POS      4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL__ISP2_CLKG   
 *
 * @BRIEF        Clock gating control for the ISP2 
 *               0x0 Clock gating is active and no clock is supplied to the 
 *               ISP 
 *               0x1 Clock to the ISP2 is enabled 
 *               0x2 Automatic gating is active, the ISP2 clock is only 
 *               active whilst data is being processed 
 *               0x3 Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL__ISP2_CLKG          BITFIELD(3, 2)
#define SGX540__EUR_CR_CLKGATECTL__ISP2_CLKG__POS     2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL__ISP_CLKG   
 *
 * @BRIEF        Clock gating control for the ISP 
 *               0x0 Clock gating is active and no clock is supplied to the 
 *               ISP 
 *               0x1 Clock to the ISP is enabled 
 *               0x2 Automatic gating is active, the ISP clock is only active 
 *               whilst data is being processed 
 *               0x3 Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL__ISP_CLKG           BITFIELD(1, 0)
#define SGX540__EUR_CR_CLKGATECTL__ISP_CLKG__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL2__RESERVED_22   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL2__RESERVED_22       BITFIELD(31, 22)
#define SGX540__EUR_CR_CLKGATECTL2__RESERVED_22__POS  22

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL2__MADD1_CLKG   
 *
 * @BRIEF        Clock gating control for the MADD1 
 *               0x0 Clock gating is active and no clock is supplied to the 
 *               MADD1 
 *               0x1 Clock to the MADD1 is enabled 
 *               0x2 Automatic gating is active, the MADD1 clock is only 
 *               active whilst data is being processed 
 *               0x3 Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL2__MADD1_CLKG        BITFIELD(21, 20)
#define SGX540__EUR_CR_CLKGATECTL2__MADD1_CLKG__POS   20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL2__TEX1_CLKG   
 *
 * @BRIEF        Clock gating control for the TEX1 
 *               0x0 Clock gating is active and no clock is supplied to the 
 *               TEX1 
 *               0x1 Clock to the TEX1 is enabled 
 *               0x2 Automatic gating is active, the TEX1 clock is only 
 *               active whilst data is being processed 
 *               0x3 Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL2__TEX1_CLKG         BITFIELD(19, 18)
#define SGX540__EUR_CR_CLKGATECTL2__TEX1_CLKG__POS    18

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL2__ITR1_CLKG   
 *
 * @BRIEF        Clock gating control for the ITR1 
 *               0x0 Clock gating is active and no clock is supplied to the 
 *               ITR1 
 *               0x1 Clock to the ITR1 is enabled 
 *               0x2 Automatic gating is active, the ITR1 clock is only 
 *               active whilst data is being processed 
 *               0x3 Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL2__ITR1_CLKG         BITFIELD(17, 16)
#define SGX540__EUR_CR_CLKGATECTL2__ITR1_CLKG__POS    16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL2__USE1_CLKG   
 *
 * @BRIEF        Clock gating control for the USE1 
 *               0x0 Clock gating is active and no clock is supplied to the 
 *               USE1 
 *               0x1 Clock to the USE1 is enabled 
 *               0x2 Automatic gating is active, the USE1 clock is only 
 *               active whilst data is being processed 
 *               0x3 Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL2__USE1_CLKG         BITFIELD(15, 14)
#define SGX540__EUR_CR_CLKGATECTL2__USE1_CLKG__POS    14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL2__MADD0_CLKG   
 *
 * @BRIEF        Clock gating control for the MADD0 
 *               0x0 Clock gating is active and no clock is supplied to the 
 *               MADD0 
 *               0x1 Clock to the MADD0 is enabled 
 *               0x2 Automatic gating is active, the MADD- clock is only 
 *               active whilst data is being processed 
 *               0x3 Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL2__MADD0_CLKG        BITFIELD(13, 12)
#define SGX540__EUR_CR_CLKGATECTL2__MADD0_CLKG__POS   12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL2__TEX0_CLKG   
 *
 * @BRIEF        Clock gating control for the TEX0 
 *               0x0 Clock gating is active and no clock is supplied to the 
 *               TEX0 
 *               0x1 Clock to the TEX0 is enabled 
 *               0x2 Automatic gating is active, the TEX0 clock is only 
 *               active whilst data is being processed 
 *               0x3 Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL2__TEX0_CLKG         BITFIELD(11, 10)
#define SGX540__EUR_CR_CLKGATECTL2__TEX0_CLKG__POS    10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL2__ITR0_CLKG   
 *
 * @BRIEF        Clock gating control for the ITR0 
 *               0x0 Clock gating is active and no clock is supplied to the 
 *               ITR0 
 *               0x1 Clock to the ITR0 is enabled 
 *               0x2 Automatic gating is active, the ITR0 clock is only 
 *               active whilst data is being processed 
 *               0x3 Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL2__ITR0_CLKG         BITFIELD(9, 8)
#define SGX540__EUR_CR_CLKGATECTL2__ITR0_CLKG__POS    8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL2__USE0_CLKG   
 *
 * @BRIEF        Clock gating control for the USE0 
 *               0x0 Clock gating is active and no clock is supplied to the 
 *               USE0 
 *               0x1 Clock to the USE0 is enabled 
 *               0x2 Automatic gating is active, the USE0 clock is only 
 *               active whilst data is being processed 
 *               0x3 Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL2__USE0_CLKG         BITFIELD(7, 6)
#define SGX540__EUR_CR_CLKGATECTL2__USE0_CLKG__POS    6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL2__UCACHEL2_CLKG   
 *
 * @BRIEF        Clock gating control for the USE INST CACHE L2 
 *               0x0 Clock gating is active and no clock is supplied to the 
 *               USE INST CACHE L2 
 *               0x1 Clock to the USE INST CACHE L2 is enabled 
 *               0x2 Automatic gating is active, the USE INST CACHE L2 clock 
 *               is only active whilst data is being processed 
 *               0x3 Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL2__UCACHEL2_CLKG     BITFIELD(5, 4)
#define SGX540__EUR_CR_CLKGATECTL2__UCACHEL2_CLKG__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL2__CACHEL2_CLKG   
 *
 * @BRIEF        Clock gating control for the TEX/PDS/USE CACHE L2 
 *               0x0 Clock gating is active and no clock is supplied to the 
 *               TEX/PDS/USE CACHE L2 
 *               0x1 Clock to the TEX/PDS/USE CACHE L2 is enabled 
 *               0x2 Automatic gating is active, the TEX/PDS/USE CACHE L2 
 *               clock is only active whilst data is being processed 
 *               0x3 Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL2__CACHEL2_CLKG      BITFIELD(3, 2)
#define SGX540__EUR_CR_CLKGATECTL2__CACHEL2_CLKG__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTL2__PBE_CLKG   
 *
 * @BRIEF        Clock gating control for the PBE 
 *               0x0 Clock gating is active and no clock is supplied to the 
 *               PBE 
 *               0x1 Clock to the PBE is enabled 
 *               0x2 Automatic gating is active, the PBE clock is only active 
 *               whilst data is being processed 
 *               0x3 Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTL2__PBE_CLKG          BITFIELD(1, 0)
#define SGX540__EUR_CR_CLKGATECTL2__PBE_CLKG__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS__RESERVED_21   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS__RESERVED_21     BITFIELD(31, 21)
#define SGX540__EUR_CR_CLKGATESTATUS__RESERVED_21__POS 21

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS__TA_CLKS   
 *
 * @BRIEF        Status of the TA clock 
 *               0 TA clock is gated and the module is inactive 
 *               1 Clock to the TA is running - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS__TA_CLKS         BITFIELD(20, 20)
#define SGX540__EUR_CR_CLKGATESTATUS__TA_CLKS__POS    20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS__IDXFIFO_CLKS   
 *
 * @BRIEF        Status of the IDXFIFO clock 
 *               0 IDXFIFO clock is gated and the module is inactive 
 *               1 Clock to the IDXFIFO is running - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS__IDXFIFO_CLKS    BITFIELD(19, 19)
#define SGX540__EUR_CR_CLKGATESTATUS__IDXFIFO_CLKS__POS 19

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS__MADD1_CLKS   
 *
 * @BRIEF        Status of the MADD1 clock 
 *               0 MADD1 clock is gated and the module is inactive 
 *               1 Clock to MADD1 is running - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS__MADD1_CLKS      BITFIELD(18, 18)
#define SGX540__EUR_CR_CLKGATESTATUS__MADD1_CLKS__POS 18

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS__TEX1_CLKS   
 *
 * @BRIEF        Status of the TEX1 clock 
 *               0 TEX1 clock is gated and the module is inactive 
 *               1 Clock to TEX1 is running - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS__TEX1_CLKS       BITFIELD(17, 17)
#define SGX540__EUR_CR_CLKGATESTATUS__TEX1_CLKS__POS  17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS__ITR1_CLKS   
 *
 * @BRIEF        Status of the ITR1 clock 
 *               0 ITR1 clock is gated and the module is inactive 
 *               1 Clock to ITR1 is running - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS__ITR1_CLKS       BITFIELD(16, 16)
#define SGX540__EUR_CR_CLKGATESTATUS__ITR1_CLKS__POS  16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS__USE1_CLKS   
 *
 * @BRIEF        Status of the USE1 clock 
 *               0 USE1 clock is gated and the module is inactive 
 *               1 Clock to USE1 is running - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS__USE1_CLKS       BITFIELD(15, 15)
#define SGX540__EUR_CR_CLKGATESTATUS__USE1_CLKS__POS  15

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS__MADD0_CLKS   
 *
 * @BRIEF        Status of the MADD0 clock 
 *               0 MADD0 clock is gated and the module is inactive 
 *               1 Clock to MADD0 is running - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS__MADD0_CLKS      BITFIELD(14, 14)
#define SGX540__EUR_CR_CLKGATESTATUS__MADD0_CLKS__POS 14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS__TEX0_CLKS   
 *
 * @BRIEF        Status of the TEX0 clock 
 *               0 TEX0 clock is gated and the module is inactive 
 *               1 Clock to TEX0 is running - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS__TEX0_CLKS       BITFIELD(13, 13)
#define SGX540__EUR_CR_CLKGATESTATUS__TEX0_CLKS__POS  13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS__ITR0_CLKS   
 *
 * @BRIEF        Status of the ITR0 clock 
 *               0 ITR0 clock is gated and the module is inactive 
 *               1 Clock to ITR0 is running - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS__ITR0_CLKS       BITFIELD(12, 12)
#define SGX540__EUR_CR_CLKGATESTATUS__ITR0_CLKS__POS  12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS__USE0_CLKS   
 *
 * @BRIEF        Status of the USE0 clock 
 *               0 USE0 clock is gated and the module is inactive 
 *               1 Clock to USE0 is running - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS__USE0_CLKS       BITFIELD(11, 11)
#define SGX540__EUR_CR_CLKGATESTATUS__USE0_CLKS__POS  11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS__UCACHEL2_CLKS   
 *
 * @BRIEF        Status of the USE INST CACHE_L2 clock 
 *               0 USE INST CACHE_L2 clock is gated and the module is 
 *               inactive 
 *               1 Clock to the USE INST CACHE_L2 is running - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS__UCACHEL2_CLKS   BITFIELD(10, 10)
#define SGX540__EUR_CR_CLKGATESTATUS__UCACHEL2_CLKS__POS 10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS__CACHEL2_CLKS   
 *
 * @BRIEF        Status of the TEX/PDS/USE CACHE_L2 clock 
 *               0 TEX/PDS/USE CACHE_L2 clock is gated and the module is 
 *               inactive 
 *               1 Clock to the TEX/PDS/USE CACHE_L2 is running - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS__CACHEL2_CLKS    BITFIELD(9, 9)
#define SGX540__EUR_CR_CLKGATESTATUS__CACHEL2_CLKS__POS 9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS__PBE_CLKS   
 *
 * @BRIEF        Status of the PBE clock 
 *               0 PBE clock is gated and the module is inactive 
 *               1 Clock to the PBE is running - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS__PBE_CLKS        BITFIELD(8, 8)
#define SGX540__EUR_CR_CLKGATESTATUS__PBE_CLKS__POS   8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS__PDS_CLKS   
 *
 * @BRIEF        Status of the PDS clock 
 *               0 PDS clock is gated and the module is inactive 
 *               1 Clock to the PDS is running - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS__PDS_CLKS        BITFIELD(7, 7)
#define SGX540__EUR_CR_CLKGATESTATUS__PDS_CLKS__POS   7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS__VDM_CLKS   
 *
 * @BRIEF        Status of the VDM clock 
 *               0 VDM clock is gated and the module is inactive 
 *               1 Clock to the VDM is running - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS__VDM_CLKS        BITFIELD(6, 6)
#define SGX540__EUR_CR_CLKGATESTATUS__VDM_CLKS__POS   6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS__DPM_CLKS   
 *
 * @BRIEF        Status of the DPM clock 
 *               0 DPM clock is gated and the module is inactive 
 *               1 Clock to the DPM is running - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS__DPM_CLKS        BITFIELD(5, 5)
#define SGX540__EUR_CR_CLKGATESTATUS__DPM_CLKS__POS   5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS__MTE_CLKS   
 *
 * @BRIEF        Status of the MTE clock 
 *               0 MTE clock is gated and the module is inactive 
 *               1 Clock to the MTE is running - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS__MTE_CLKS        BITFIELD(4, 4)
#define SGX540__EUR_CR_CLKGATESTATUS__MTE_CLKS__POS   4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS__TE_CLKS   
 *
 * @BRIEF        Status of the TE clock 
 *               0 TE clock is gated and the module is inactive 
 *               1 Clock to the TE is running - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS__TE_CLKS         BITFIELD(3, 3)
#define SGX540__EUR_CR_CLKGATESTATUS__TE_CLKS__POS    3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS__TSP_CLKS   
 *
 * @BRIEF        Status of the TSP clock 
 *               0 TSP clock is gated and the module is inactive 
 *               1 Clock to the TSP is running - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS__TSP_CLKS        BITFIELD(2, 2)
#define SGX540__EUR_CR_CLKGATESTATUS__TSP_CLKS__POS   2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS__ISP2_CLKS   
 *
 * @BRIEF        Status of the ISP2 clock 
 *               0 ISP2 clock is gated and the module is inactive 
 *               1 Clock to the ISP2 is running - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS__ISP2_CLKS       BITFIELD(1, 1)
#define SGX540__EUR_CR_CLKGATESTATUS__ISP2_CLKS__POS  1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATESTATUS__ISP_CLKS   
 *
 * @BRIEF        Status of the ISP clock 
 *               0 ISP clock is gated and the module is inactive 
 *               1 Clock to the ISP is running - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATESTATUS__ISP_CLKS        BITFIELD(0, 0)
#define SGX540__EUR_CR_CLKGATESTATUS__ISP_CLKS__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR__RESERVED_20   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR__RESERVED_20     BITFIELD(31, 20)
#define SGX540__EUR_CR_CLKGATECTLOVR__RESERVED_20__POS 20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR__TA_CLKO   
 *
 * @BRIEF        Clock gating control override for the TA 
 *               0x0 Reserved 
 *               0x1 Clock to the TA is enabled 
 *               0x2     Reserved 
 *               0x3 Host disable clock to IDXFIFO request. TA clock may be 
 *               gated if not other oustanding host requests. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR__TA_CLKO         BITFIELD(19, 18)
#define SGX540__EUR_CR_CLKGATECTLOVR__TA_CLKO__POS    18

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR__IDXFIFO_CLKO   
 *
 * @BRIEF        Clock gating control override for the IDXFIFO 
 *               0x0 Reserved 
 *               0x1 Clock to the IDXFIFO is enabled 
 *               0x2     Reserved 
 *               0x3 Host disable clock to IDXFIFO request. IDXFIFO clock may 
 *               be gated if not other oustanding host requests. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR__IDXFIFO_CLKO    BITFIELD(17, 16)
#define SGX540__EUR_CR_CLKGATECTLOVR__IDXFIFO_CLKO__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR__PDS_CLKO   
 *
 * @BRIEF        Clock gating control override for the PDS 
 *               0x0 Reserved 
 *               0x1 Host enable clock to the PDS request 
 *               0x2     Reserved 
 *               0x3 Host disable clock to PDS request. PDS clock may be 
 *               gated if not other oustanding host requests. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR__PDS_CLKO        BITFIELD(15, 14)
#define SGX540__EUR_CR_CLKGATECTLOVR__PDS_CLKO__POS   14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR__VDM_CLKO   
 *
 * @BRIEF        Clock gating control override for the VDM 
 *               0x0 Reserved 
 *               0x1 Host enable clock to the VDM request 
 *               0x2     Reserved 
 *               0x3 Host disable clock to VDM request. VDM clock may be 
 *               gated if not other oustanding host requests. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR__VDM_CLKO        BITFIELD(13, 12)
#define SGX540__EUR_CR_CLKGATECTLOVR__VDM_CLKO__POS   12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR__DPM_CLKO   
 *
 * @BRIEF        Clock gating control override for the DPM 
 *               0x0 Reserved 
 *               0x1 Host enable clock to the DPM request 
 *               0x2     Reserved 
 *               0x3 Host disable clock to DPM request. DPM clock may be 
 *               gated if not other oustanding host requests. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR__DPM_CLKO        BITFIELD(11, 10)
#define SGX540__EUR_CR_CLKGATECTLOVR__DPM_CLKO__POS   10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR__MTE_CLKO   
 *
 * @BRIEF        Clock gating control override for the MTE 
 *               0x0 Reserved 
 *               0x1 Clock to the MTE is enabled 
 *               0x2     Reserved 
 *               0x3 Host disable clock to MTE request. MTE clock may be 
 *               gated if not other oustanding host requests. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR__MTE_CLKO        BITFIELD(9, 8)
#define SGX540__EUR_CR_CLKGATECTLOVR__MTE_CLKO__POS   8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR__TE_CLKO   
 *
 * @BRIEF        Clock gating control override for the TE 
 *               0x0 Reserved 
 *               0x1 Clock to the TE is enabled 
 *               0x2     Reserved 
 *               0x3 Host disable clock to TE request. TE clock may be gated 
 *               if not other oustanding host requests. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR__TE_CLKO         BITFIELD(7, 6)
#define SGX540__EUR_CR_CLKGATECTLOVR__TE_CLKO__POS    6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR__TSP_CLKO   
 *
 * @BRIEF        Clock gating control override for the TSP 
 *               0x0 Reserved 
 *               0x1 Clock to the TSP is enabled 
 *               0x2     Reserved 
 *               0x3 Host disable clock to TSP request. TSP clock may be 
 *               gated if no other oustanding host requests. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR__TSP_CLKO        BITFIELD(5, 4)
#define SGX540__EUR_CR_CLKGATECTLOVR__TSP_CLKO__POS   4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR__ISP2_CLKO   
 *
 * @BRIEF        Clock gating control override for the ISP2 
 *               0x0 Reserved 
 *               0x1 Clock to the ISP2 is enabled 
 *               0x2     Reserved 
 *               0x3 Host disable clock to ISP2 request. ISP2 clock may be 
 *               gated if no other oustanding host requests. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR__ISP2_CLKO       BITFIELD(3, 2)
#define SGX540__EUR_CR_CLKGATECTLOVR__ISP2_CLKO__POS  2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR__ISP_CLKO   
 *
 * @BRIEF        Clock gating control override for the ISP 
 *               0x0 Reserved 
 *               0x1 Clock to the ISP is enabled 
 *               0x2     Reserved 
 *               0x3 Host disable clock to ISP request. ISP clock may be 
 *               gated if no other oustanding host requests. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR__ISP_CLKO        BITFIELD(1, 0)
#define SGX540__EUR_CR_CLKGATECTLOVR__ISP_CLKO__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR2__RESERVED_22   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR2__RESERVED_22    BITFIELD(31, 22)
#define SGX540__EUR_CR_CLKGATECTLOVR2__RESERVED_22__POS 22

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR2__MADD1_CLKO   
 *
 * @BRIEF        Clock gating control override for the MADD1 
 *               0x0 Reserved 
 *               0x1 Host enable clock to the MADD1 request 
 *               0x2     Reserved 
 *               0x3 Host disable clock to MADD1 request. MADD1 clock may be 
 *               gated if not other oustanding host requests. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR2__MADD1_CLKO     BITFIELD(21, 20)
#define SGX540__EUR_CR_CLKGATECTLOVR2__MADD1_CLKO__POS 20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR2__TEX1_CLKO   
 *
 * @BRIEF        Clock gating control override for the TEX1 
 *               0x0 Reserved 
 *               0x1 Host enable clock to the TEX1 request 
 *               0x2     Reserved 
 *               0x3 Host disable clock to TEX1 request. TEX1 clock may be 
 *               gated if not other oustanding host requests. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR2__TEX1_CLKO      BITFIELD(19, 18)
#define SGX540__EUR_CR_CLKGATECTLOVR2__TEX1_CLKO__POS 18

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR2__ITR1_CLKO   
 *
 * @BRIEF        Clock gating control override for the ITR1 
 *               0x0 Reserved 
 *               0x1 Clock to the ITR1 is enabled 
 *               0x2     Reserved 
 *               0x3 Host disable clock to ITR1 request.  ITR1 clock may be 
 *               gated if not other oustanding host requests. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR2__ITR1_CLKO      BITFIELD(17, 16)
#define SGX540__EUR_CR_CLKGATECTLOVR2__ITR1_CLKO__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR2__USE1_CLKO   
 *
 * @BRIEF        Clock gating control override for the USE1 
 *               0x0 Reserved 
 *               0x1 Clock to the USE1 is enabled 
 *               0x2     Reserved 
 *               0x3 Host disable clock to USE1 request. USE1 clock may be 
 *               gated if not other oustanding host requests. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR2__USE1_CLKO      BITFIELD(15, 14)
#define SGX540__EUR_CR_CLKGATECTLOVR2__USE1_CLKO__POS 14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR2__MADD0_CLKO   
 *
 * @BRIEF        Clock gating control override for the MADD0 
 *               0x0 Reserved 
 *               0x1 Host enable clock to the MADD0 request 
 *               0x2     Reserved 
 *               0x3 Host disable clock to MADD0 request. MADD0 clock may be 
 *               gated if not other oustanding host requests. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR2__MADD0_CLKO     BITFIELD(13, 12)
#define SGX540__EUR_CR_CLKGATECTLOVR2__MADD0_CLKO__POS 12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR2__TEX0_CLKO   
 *
 * @BRIEF        Clock gating control override for the TEX0 
 *               0x0 Reserved 
 *               0x1 Host enable clock to the TEX0 request 
 *               0x2     Reserved 
 *               0x3 Host disable clock to TEX0 request. TEX0 clock may be 
 *               gated if not other oustanding host requests. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR2__TEX0_CLKO      BITFIELD(11, 10)
#define SGX540__EUR_CR_CLKGATECTLOVR2__TEX0_CLKO__POS 10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR2__ITR0_CLKO   
 *
 * @BRIEF        Clock gating control override for the ITR0 
 *               0x0 Reserved 
 *               0x1 Clock to the ITR0 is enabled 
 *               0x2     Reserved 
 *               0x3 Host disable clock to ITR0 request.  ITR0 clock may be 
 *               gated if not other oustanding host requests. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR2__ITR0_CLKO      BITFIELD(9, 8)
#define SGX540__EUR_CR_CLKGATECTLOVR2__ITR0_CLKO__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR2__USE0_CLKO   
 *
 * @BRIEF        Clock gating control override for the USE0 
 *               0x0 Reserved 
 *               0x1 Clock to the USE0 is enabled 
 *               0x2     Reserved 
 *               0x3 Host disable clock to USE0 request. USE0 clock may be 
 *               gated if not other oustanding host requests. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR2__USE0_CLKO      BITFIELD(7, 6)
#define SGX540__EUR_CR_CLKGATECTLOVR2__USE0_CLKO__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR2__UCACHEL2_CLKO   
 *
 * @BRIEF        Clock gating control override for the USE INST CACHE L2 
 *               0x0 Reserved 
 *               0x1 Clock to the USE INST CACHE L2 is enabled 
 *               0x2     Reserved 
 *               0x3 Host disable clock to USE INST CACHE L2 request. USE 
 *               INST CACHE L2 clock may be gated if no other oustanding host 
 *               requests. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR2__UCACHEL2_CLKO  BITFIELD(5, 4)
#define SGX540__EUR_CR_CLKGATECTLOVR2__UCACHEL2_CLKO__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR2__CACHEL2_CLKO   
 *
 * @BRIEF        Clock gating control override for the CACHEL2 
 *               0x0 Reserved 
 *               0x1 Clock to the CACHEL2 is enabled 
 *               0x2     Reserved 
 *               0x3 Host disable clock to CACHEL2 request. CACHEL2 clock may 
 *               be gated if no other oustanding host requests. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR2__CACHEL2_CLKO   BITFIELD(3, 2)
#define SGX540__EUR_CR_CLKGATECTLOVR2__CACHEL2_CLKO__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLKGATECTLOVR2__PBE_CLKO   
 *
 * @BRIEF        Clock gating control override for the PBE 
 *               0x0 Reserved 
 *               0x1 Clock to the PBE is enabled 
 *               0x2     Reserved 
 *               0x3 Host disable clock to PBE request. PBE clock may be 
 *               gated if no other oustanding host requests. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLKGATECTLOVR2__PBE_CLKO       BITFIELD(1, 0)
#define SGX540__EUR_CR_CLKGATECTLOVR2__PBE_CLKO__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_POWER__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_POWER__RESERVED_1              BITFIELD(31, 1)
#define SGX540__EUR_CR_POWER__RESERVED_1__POS         1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_POWER__PIPE_DISABLE   
 *
 * @BRIEF        0      All pipes enabled 
 *               1       Half pipes disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_POWER__PIPE_DISABLE            BITFIELD(0, 0)
#define SGX540__EUR_CR_POWER__PIPE_DISABLE__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CORE_ID__ID   
 *
 * @BRIEF        Core ID - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CORE_ID__ID                    BITFIELD(31, 16)
#define SGX540__EUR_CR_CORE_ID__ID__POS               16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CORE_ID__CONFIG   
 *
 * @BRIEF        Core Configuration - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CORE_ID__CONFIG                BITFIELD(15, 0)
#define SGX540__EUR_CR_CORE_ID__CONFIG__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CORE_REVISION__DESIGNER   
 *
 * @BRIEF        Designer Field - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CORE_REVISION__DESIGNER        BITFIELD(31, 24)
#define SGX540__EUR_CR_CORE_REVISION__DESIGNER__POS   24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CORE_REVISION__MAJOR   
 *
 * @BRIEF        Major Revision - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CORE_REVISION__MAJOR           BITFIELD(23, 16)
#define SGX540__EUR_CR_CORE_REVISION__MAJOR__POS      16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CORE_REVISION__MINOR   
 *
 * @BRIEF        Minor Revision - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CORE_REVISION__MINOR           BITFIELD(15, 8)
#define SGX540__EUR_CR_CORE_REVISION__MINOR__POS      8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CORE_REVISION__MAINTENANCE   
 *
 * @BRIEF        Maintenance Revision - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CORE_REVISION__MAINTENANCE     BITFIELD(7, 0)
#define SGX540__EUR_CR_CORE_REVISION__MAINTENANCE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DESIGNER_REV_FIELD1__DESIGNER_REV_FIELD1   
 *
 * @BRIEF        Designer Field - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DESIGNER_REV_FIELD1__DESIGNER_REV_FIELD1 BITFIELD(31, 0)
#define SGX540__EUR_CR_DESIGNER_REV_FIELD1__DESIGNER_REV_FIELD1__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DESIGNER_REV_FIELD2__DESIGNER_REV_FIELD2   
 *
 * @BRIEF        Designer Field - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DESIGNER_REV_FIELD2__DESIGNER_REV_FIELD2 BITFIELD(31, 0)
#define SGX540__EUR_CR_DESIGNER_REV_FIELD2__DESIGNER_REV_FIELD2__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF__RESERVED_13   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF__RESERVED_13              BITFIELD(31, 13)
#define SGX540__EUR_CR_PERF__RESERVED_13__POS         13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF__COUNTER_SELECT   
 *
 * @BRIEF        0x0      Core Overview counter group 
 *               0x1      Primitive Clipping counter group 
 *               0x2      Scene Buffer counter group 
 *               0x3      ISP counter group 
 *               0x4      TSP counter group 
 *               0x5      USE counter group 
 *               0x6      Texturing counter group 
 *               0x7      Reserved 
 *               0x8      reserved 
 *               0x9     Core Overview-2 counter group 
 *               0xA - 0xF reserved 
 *               Default value is set to 0xF, no counter will be in operation 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF__COUNTER_SELECT           BITFIELD(12, 9)
#define SGX540__EUR_CR_PERF__COUNTER_SELECT__POS      9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF__COUNTER_8_CLR   
 *
 * @BRIEF        Reset counter = '1', normal counter operation '0' - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF__COUNTER_8_CLR            BITFIELD(8, 8)
#define SGX540__EUR_CR_PERF__COUNTER_8_CLR__POS       8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF__COUNTER_7_CLR   
 *
 * @BRIEF        Reset counter = '1', normal counter operation '0' - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF__COUNTER_7_CLR            BITFIELD(7, 7)
#define SGX540__EUR_CR_PERF__COUNTER_7_CLR__POS       7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF__COUNTER_6_CLR   
 *
 * @BRIEF        Reset counter = '1', normal counter operation '0' - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF__COUNTER_6_CLR            BITFIELD(6, 6)
#define SGX540__EUR_CR_PERF__COUNTER_6_CLR__POS       6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF__COUNTER_5_CLR   
 *
 * @BRIEF        Reset counter = '1', normal counter operation '0' - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF__COUNTER_5_CLR            BITFIELD(5, 5)
#define SGX540__EUR_CR_PERF__COUNTER_5_CLR__POS       5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF__COUNTER_4_CLR   
 *
 * @BRIEF        Reset counter = '1', normal counter operation '0' - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF__COUNTER_4_CLR            BITFIELD(4, 4)
#define SGX540__EUR_CR_PERF__COUNTER_4_CLR__POS       4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF__COUNTER_3_CLR   
 *
 * @BRIEF        Reset counter = '1', normal counter operation '0' - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF__COUNTER_3_CLR            BITFIELD(3, 3)
#define SGX540__EUR_CR_PERF__COUNTER_3_CLR__POS       3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF__COUNTER_2_CLR   
 *
 * @BRIEF        Reset counter = '1', normal counter operation '0' - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF__COUNTER_2_CLR            BITFIELD(2, 2)
#define SGX540__EUR_CR_PERF__COUNTER_2_CLR__POS       2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF__COUNTER_1_CLR   
 *
 * @BRIEF        Reset counter = '1', normal counter operation '0' - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF__COUNTER_1_CLR            BITFIELD(1, 1)
#define SGX540__EUR_CR_PERF__COUNTER_1_CLR__POS       1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF__COUNTER_0_CLR   
 *
 * @BRIEF        Reset counter = '1', normal counter operation '0' - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF__COUNTER_0_CLR            BITFIELD(0, 0)
#define SGX540__EUR_CR_PERF__COUNTER_0_CLR__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER0__ZERO   
 *
 * @BRIEF        32 bit integer count value, see performance profiling 
 *               section for details - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER0__ZERO            BITFIELD(31, 0)
#define SGX540__EUR_CR_PERF_COUNTER0__ZERO__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER1__ONE   
 *
 * @BRIEF        32 bit integer count value, see performance profiling 
 *               section for details - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER1__ONE             BITFIELD(31, 0)
#define SGX540__EUR_CR_PERF_COUNTER1__ONE__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER2__TWO   
 *
 * @BRIEF        32 bit integer count value, see performance profiling 
 *               section for details - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER2__TWO             BITFIELD(31, 0)
#define SGX540__EUR_CR_PERF_COUNTER2__TWO__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER3__THREE   
 *
 * @BRIEF        32 bit integer count value, see performance profiling 
 *               section for details - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER3__THREE           BITFIELD(31, 0)
#define SGX540__EUR_CR_PERF_COUNTER3__THREE__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER4__FOUR   
 *
 * @BRIEF        32 bit integer count value, see performance profiling 
 *               section for details - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER4__FOUR            BITFIELD(31, 0)
#define SGX540__EUR_CR_PERF_COUNTER4__FOUR__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER5__FIVE   
 *
 * @BRIEF        32 bit integer count value, see performance profiling 
 *               section for details - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER5__FIVE            BITFIELD(31, 0)
#define SGX540__EUR_CR_PERF_COUNTER5__FIVE__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER6__SIX   
 *
 * @BRIEF        32 bit integer count value, see performance profiling 
 *               section for details - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER6__SIX             BITFIELD(31, 0)
#define SGX540__EUR_CR_PERF_COUNTER6__SIX__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER7__SEVEN   
 *
 * @BRIEF        32 bit integer count value, see performance profiling 
 *               section for details - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER7__SEVEN           BITFIELD(31, 0)
#define SGX540__EUR_CR_PERF_COUNTER7__SEVEN__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PERF_COUNTER8__EIGHT   
 *
 * @BRIEF        32 bit integer count value, see performance profiling 
 *               section for details - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PERF_COUNTER8__EIGHT           BITFIELD(31, 0)
#define SGX540__EUR_CR_PERF_COUNTER8__EIGHT__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DEBUG_REG0__ZERO   
 *
 * @BRIEF        32 bit debug, see debug document profiling section for 
 *               details - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DEBUG_REG0__ZERO               BITFIELD(31, 0)
#define SGX540__EUR_CR_DEBUG_REG0__ZERO__POS          0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DEBUG_REG1__ZERO   
 *
 * @BRIEF        32 bit debug, see debug document profiling section for 
 *               details - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DEBUG_REG1__ZERO               BITFIELD(31, 0)
#define SGX540__EUR_CR_DEBUG_REG1__ZERO__POS          0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_SOFT_RESET__RESERVED_18   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_SOFT_RESET__RESERVED_18        BITFIELD(31, 18)
#define SGX540__EUR_CR_SOFT_RESET__RESERVED_18__POS   18

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_SOFT_RESET__TA_RESET   
 *
 * @BRIEF        IDXFIFO soft reset control field - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_SOFT_RESET__TA_RESET           BITFIELD(17, 17)
#define SGX540__EUR_CR_SOFT_RESET__TA_RESET__POS      17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_SOFT_RESET__IDXFIFO_RESET   
 *
 * @BRIEF        IDXFIFO soft reset control field - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_SOFT_RESET__IDXFIFO_RESET      BITFIELD(16, 16)
#define SGX540__EUR_CR_SOFT_RESET__IDXFIFO_RESET__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_SOFT_RESET__USE_RESET   
 *
 * @BRIEF        USE soft reset control field - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_SOFT_RESET__USE_RESET          BITFIELD(15, 15)
#define SGX540__EUR_CR_SOFT_RESET__USE_RESET__POS     15

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_SOFT_RESET__TEX_RESET   
 *
 * @BRIEF        TEX soft reset control field - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_SOFT_RESET__TEX_RESET          BITFIELD(14, 14)
#define SGX540__EUR_CR_SOFT_RESET__TEX_RESET__POS     14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_SOFT_RESET__ITR_RESET   
 *
 * @BRIEF        ITR soft reset control field - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_SOFT_RESET__ITR_RESET          BITFIELD(13, 13)
#define SGX540__EUR_CR_SOFT_RESET__ITR_RESET__POS     13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_SOFT_RESET__MADD_RESET   
 *
 * @BRIEF        MADD soft reset control field - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_SOFT_RESET__MADD_RESET         BITFIELD(12, 12)
#define SGX540__EUR_CR_SOFT_RESET__MADD_RESET__POS    12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_SOFT_RESET__UCACHEL2_RESET   
 *
 * @BRIEF        UCACHEL2 soft reset control field - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_SOFT_RESET__UCACHEL2_RESET     BITFIELD(11, 11)
#define SGX540__EUR_CR_SOFT_RESET__UCACHEL2_RESET__POS 11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_SOFT_RESET__CACHEL2_RESET   
 *
 * @BRIEF        CACHEL2 soft reset control field - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_SOFT_RESET__CACHEL2_RESET      BITFIELD(10, 10)
#define SGX540__EUR_CR_SOFT_RESET__CACHEL2_RESET__POS 10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_SOFT_RESET__PBE_RESET   
 *
 * @BRIEF        PBE soft reset control field - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_SOFT_RESET__PBE_RESET          BITFIELD(9, 9)
#define SGX540__EUR_CR_SOFT_RESET__PBE_RESET__POS     9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_SOFT_RESET__PDS_RESET   
 *
 * @BRIEF        PDS soft reset control field - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_SOFT_RESET__PDS_RESET          BITFIELD(8, 8)
#define SGX540__EUR_CR_SOFT_RESET__PDS_RESET__POS     8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_SOFT_RESET__TSP_RESET   
 *
 * @BRIEF        TSP soft reset control field - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_SOFT_RESET__TSP_RESET          BITFIELD(7, 7)
#define SGX540__EUR_CR_SOFT_RESET__TSP_RESET__POS     7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_SOFT_RESET__ISP2_RESET   
 *
 * @BRIEF        ISP2 soft reset control field - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_SOFT_RESET__ISP2_RESET         BITFIELD(6, 6)
#define SGX540__EUR_CR_SOFT_RESET__ISP2_RESET__POS    6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_SOFT_RESET__ISP_RESET   
 *
 * @BRIEF        ISP soft reset control field - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_SOFT_RESET__ISP_RESET          BITFIELD(5, 5)
#define SGX540__EUR_CR_SOFT_RESET__ISP_RESET__POS     5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_SOFT_RESET__MTE_RESET   
 *
 * @BRIEF        MTE soft reset control field - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_SOFT_RESET__MTE_RESET          BITFIELD(4, 4)
#define SGX540__EUR_CR_SOFT_RESET__MTE_RESET__POS     4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_SOFT_RESET__TE_RESET   
 *
 * @BRIEF        TE soft reset control field - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_SOFT_RESET__TE_RESET           BITFIELD(3, 3)
#define SGX540__EUR_CR_SOFT_RESET__TE_RESET__POS      3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_SOFT_RESET__DPM_RESET   
 *
 * @BRIEF        DPM soft reset control field - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_SOFT_RESET__DPM_RESET          BITFIELD(2, 2)
#define SGX540__EUR_CR_SOFT_RESET__DPM_RESET__POS     2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_SOFT_RESET__VDM_RESET   
 *
 * @BRIEF        VDM soft reset control field - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_SOFT_RESET__VDM_RESET          BITFIELD(1, 1)
#define SGX540__EUR_CR_SOFT_RESET__VDM_RESET__POS     1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_SOFT_RESET__BIF_RESET   
 *
 * @BRIEF        BIF soft reset control field - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_SOFT_RESET__BIF_RESET          BITFIELD(0, 0)
#define SGX540__EUR_CR_SOFT_RESET__BIF_RESET__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DEBUG__RESERVED_29   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DEBUG__RESERVED_29             BITFIELD(31, 29)
#define SGX540__EUR_CR_DEBUG__RESERVED_29__POS        29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DEBUG__BLOCK_SELECT_A   
 *
 * @BRIEF        Block select field for Block A 
 *               0x0 Select ITR0  
 *               0x1 Select ITR1  
 *               0x2 Select USE0  
 *               0x3 Select USE1  
 *               0x4 Select PP0  
 *               0x5 Select PP1  
 *               0x6 Select PWRMP0 
 *               0x7 Select PWRMP1 
 *               0x8 Select SOCIF 
 *               0x9 Select BIF 
 *               0xA select TA 
 *               0xB select PWRM 
 *               0xC select REGB 
 *               0xD select RAS 
 *               0xE select VDM 
 *               0xF select PDS 
 *               0x10 select PBE 
 *               0x11 select USSEC 
 *               0x12 select DATL2 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DEBUG__BLOCK_SELECT_A          BITFIELD(28, 24)
#define SGX540__EUR_CR_DEBUG__BLOCK_SELECT_A__POS     24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DEBUG__RESERVED_21   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DEBUG__RESERVED_21             BITFIELD(23, 21)
#define SGX540__EUR_CR_DEBUG__RESERVED_21__POS        21

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DEBUG__BLOCK_SELECT_B   
 *
 * @BRIEF        Block select field for Block B 
 *               0x0 Select ITR0  
 *               0x1 Select ITR1  
 *               0x2 Select USE0  
 *               0x3 Select USE1  
 *               0x4 Select PP0  
 *               0x5 Select PP1  
 *               0x6 Select PWRMP0 
 *               0x7 Select PWRMP1 
 *               0x8 Select SOCIF 
 *               0x9 Select BIF 
 *               0xA select TA 
 *               0xB select PWRM 
 *               0xC select REGB 
 *               0xD select RAS 
 *               0xE select VDM 
 *               0xF select PDS 
 *               0x10 select PBE 
 *               0x11 select USSEC 
 *               0x12 select DATL2 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DEBUG__BLOCK_SELECT_B          BITFIELD(20, 16)
#define SGX540__EUR_CR_DEBUG__BLOCK_SELECT_B__POS     16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DEBUG__RESERVED_14   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DEBUG__RESERVED_14             BITFIELD(15, 14)
#define SGX540__EUR_CR_DEBUG__RESERVED_14__POS        14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DEBUG__MUX_SELECT_A   
 *
 * @BRIEF        Mux select field for block B - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DEBUG__MUX_SELECT_A            BITFIELD(13, 8)
#define SGX540__EUR_CR_DEBUG__MUX_SELECT_A__POS       8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DEBUG__RESERVED_6   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DEBUG__RESERVED_6              BITFIELD(7, 6)
#define SGX540__EUR_CR_DEBUG__RESERVED_6__POS         6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DEBUG__MUX_SELECT_B   
 *
 * @BRIEF        Mux select field for block A - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DEBUG__MUX_SELECT_B            BITFIELD(5, 0)
#define SGX540__EUR_CR_DEBUG__MUX_SELECT_B__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TRIGGER__RESERVED_6   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TRIGGER__RESERVED_6            BITFIELD(31, 6)
#define SGX540__EUR_CR_TRIGGER__RESERVED_6__POS       6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TRIGGER__COUNT   
 *
 * @BRIEF        Trigger count value in 16K cycles for TA and 3D lockup 
 *               triggers - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TRIGGER__COUNT                 BITFIELD(5, 0)
#define SGX540__EUR_CR_TRIGGER__COUNT__POS            0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE2__RESERVED_5   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE2__RESERVED_5 BITFIELD(31, 5)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE2__RESERVED_5__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE2__TRIG_TA   
 *
 * @BRIEF        Host_Enable: Lockup in TA Phase Trigger - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE2__TRIG_TA    BITFIELD(4, 4)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE2__TRIG_TA__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE2__TRIG_3D   
 *
 * @BRIEF        Host_Enable: Lockup in 3d Phase Trigger - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE2__TRIG_3D    BITFIELD(3, 3)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE2__TRIG_3D__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE2__TRIG_DL   
 *
 * @BRIEF        Host_Enable: Deadlock has occured after a Partial Render - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE2__TRIG_DL    BITFIELD(2, 2)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE2__TRIG_DL__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE2__DPM_3D_FREE_LOAD   
 *
 * @BRIEF        Host_Enable: DPM 3D Free Load task complete - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE2__DPM_3D_FREE_LOAD BITFIELD(1, 1)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE2__DPM_3D_FREE_LOAD__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE2__DPM_TA_FREE_LOAD   
 *
 * @BRIEF        Host_Enable: DPM TA Free Load task complete - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE2__DPM_TA_FREE_LOAD BITFIELD(0, 0)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE2__DPM_TA_FREE_LOAD__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR2__RESERVED_5   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR2__RESERVED_5  BITFIELD(31, 5)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR2__RESERVED_5__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR2__TRIG_TA   
 *
 * @BRIEF        Host_Clear: Lockup in TA Phase Trigger - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR2__TRIG_TA     BITFIELD(4, 4)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR2__TRIG_TA__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR2__TRIG_3D   
 *
 * @BRIEF        Host_Clear: Lockup in 3d Phase Trigger - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR2__TRIG_3D     BITFIELD(3, 3)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR2__TRIG_3D__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR2__TRIG_DL   
 *
 * @BRIEF        Host_Clear: Deadlock has occured after a Partial Render - 
 *               (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR2__TRIG_DL     BITFIELD(2, 2)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR2__TRIG_DL__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR2__DPM_3D_FREE_LOAD   
 *
 * @BRIEF        Host_Clear: DPM 3D Free Load task complete - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR2__DPM_3D_FREE_LOAD BITFIELD(1, 1)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR2__DPM_3D_FREE_LOAD__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR2__DPM_TA_FREE_LOAD   
 *
 * @BRIEF        Host_Clear: DPM TA Free Load task complete - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR2__DPM_TA_FREE_LOAD BITFIELD(0, 0)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR2__DPM_TA_FREE_LOAD__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS2__RESERVED_5   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS2__RESERVED_5      BITFIELD(31, 5)
#define SGX540__EUR_CR_EVENT_STATUS2__RESERVED_5__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS2__TRIG_TA   
 *
 * @BRIEF        Status: Lockup in TA Phase Trigger - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS2__TRIG_TA         BITFIELD(4, 4)
#define SGX540__EUR_CR_EVENT_STATUS2__TRIG_TA__POS    4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS2__TRIG_3D   
 *
 * @BRIEF        Status: Lockup in 3d Phase Trigger - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS2__TRIG_3D         BITFIELD(3, 3)
#define SGX540__EUR_CR_EVENT_STATUS2__TRIG_3D__POS    3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS2__TRIG_DL   
 *
 * @BRIEF        Status: Deadlock has occured after a Partial Render - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS2__TRIG_DL         BITFIELD(2, 2)
#define SGX540__EUR_CR_EVENT_STATUS2__TRIG_DL__POS    2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS2__DPM_3D_FREE_LOAD   
 *
 * @BRIEF        Status: DPM 3d free load task complete - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS2__DPM_3D_FREE_LOAD BITFIELD(1, 1)
#define SGX540__EUR_CR_EVENT_STATUS2__DPM_3D_FREE_LOAD__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS2__DPM_TA_FREE_LOAD   
 *
 * @BRIEF        Status: DPM ta free load task complete - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS2__DPM_TA_FREE_LOAD BITFIELD(0, 0)
#define SGX540__EUR_CR_EVENT_STATUS2__DPM_TA_FREE_LOAD__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__MASTER_INTERRUPT   
 *
 * @BRIEF        Status: PowerVR SGX Master Interrupt Control - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__MASTER_INTERRUPT BITFIELD(31, 31)
#define SGX540__EUR_CR_EVENT_STATUS__MASTER_INTERRUPT__POS 31

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__RESERVED_30   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__RESERVED_30      BITFIELD(30, 30)
#define SGX540__EUR_CR_EVENT_STATUS__RESERVED_30__POS 30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__TIMER   
 *
 * @BRIEF        Status: The PDS Event timer interrupt (signalled on timer 
 *               traversing through 0). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__TIMER            BITFIELD(29, 29)
#define SGX540__EUR_CR_EVENT_STATUS__TIMER__POS       29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__TA_DPM_FAULT   
 *
 * @BRIEF        Status: The TA Object Passing System has got out of sync, a 
 *               Terminate Control Word DPM read was met by StartofBlock data 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__TA_DPM_FAULT     BITFIELD(28, 28)
#define SGX540__EUR_CR_EVENT_STATUS__TA_DPM_FAULT__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__TWOD_COMPLETE   
 *
 * @BRIEF        Status: 2d core has completed writing out all data to memory 
 *               and it has received a complete signal from the tiling 
 *               co-processor - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__TWOD_COMPLETE    BITFIELD(27, 27)
#define SGX540__EUR_CR_EVENT_STATUS__TWOD_COMPLETE__POS 27

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__MADD_CACHE_INVALCOMPLETE   
 *
 * @BRIEF        Status: Invalidate of Madd L0, L1, L2 Cache Complete - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__MADD_CACHE_INVALCOMPLETE BITFIELD(26, 26)
#define SGX540__EUR_CR_EVENT_STATUS__MADD_CACHE_INVALCOMPLETE__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__DPM_OUT_OF_MEMORY_ZLS   
 *
 * @BRIEF        Status: Memory Allocation Failed for ZLS - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__DPM_OUT_OF_MEMORY_ZLS BITFIELD(25, 25)
#define SGX540__EUR_CR_EVENT_STATUS__DPM_OUT_OF_MEMORY_ZLS__POS 25

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__DPM_TA_MEM_FREE   
 *
 * @BRIEF        Status: All memory associated with TA context has been freed 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__DPM_TA_MEM_FREE  BITFIELD(24, 24)
#define SGX540__EUR_CR_EVENT_STATUS__DPM_TA_MEM_FREE__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__ISP_END_TILE   
 *
 * @BRIEF        Status: ISP End tile - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__ISP_END_TILE     BITFIELD(23, 23)
#define SGX540__EUR_CR_EVENT_STATUS__ISP_END_TILE__POS 23

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__DPM_INITEND   
 *
 * @BRIEF        Status: DPM Initialisation Complete - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__DPM_INITEND      BITFIELD(22, 22)
#define SGX540__EUR_CR_EVENT_STATUS__DPM_INITEND__POS 22

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__OTPM_LOADED   
 *
 * @BRIEF        Status: The OTPM has loaded its state - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__OTPM_LOADED      BITFIELD(21, 21)
#define SGX540__EUR_CR_EVENT_STATUS__OTPM_LOADED__POS 21

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__OTPM_INV   
 *
 * @BRIEF        Status: The OTPM has invalidated its contents - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__OTPM_INV         BITFIELD(20, 20)
#define SGX540__EUR_CR_EVENT_STATUS__OTPM_INV__POS    20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__OTPM_FLUSHED   
 *
 * @BRIEF        Status: The OTPM has flushed its state - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__OTPM_FLUSHED     BITFIELD(19, 19)
#define SGX540__EUR_CR_EVENT_STATUS__OTPM_FLUSHED__POS 19

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__PIXELBE_END_RENDER   
 *
 * @BRIEF        Status: End of Scene - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__PIXELBE_END_RENDER BITFIELD(18, 18)
#define SGX540__EUR_CR_EVENT_STATUS__PIXELBE_END_RENDER__POS 18

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__ISP_HALT   
 *
 * @BRIEF        Status: ISP Halt breakpoint triggered - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__ISP_HALT         BITFIELD(17, 17)
#define SGX540__EUR_CR_EVENT_STATUS__ISP_HALT__POS    17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__ISP_VISIBILITY_FAIL   
 *
 * @BRIEF        Status: Visibility Test Fail - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__ISP_VISIBILITY_FAIL BITFIELD(16, 16)
#define SGX540__EUR_CR_EVENT_STATUS__ISP_VISIBILITY_FAIL__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__BREAKPOINT   
 *
 * @BRIEF        Status: ISP Breakpoint - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__BREAKPOINT       BITFIELD(15, 15)
#define SGX540__EUR_CR_EVENT_STATUS__BREAKPOINT__POS  15

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__SW_EVENT   
 *
 * @BRIEF        Status: Software triggered event - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__SW_EVENT         BITFIELD(14, 14)
#define SGX540__EUR_CR_EVENT_STATUS__SW_EVENT__POS    14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__TA_FINISHED   
 *
 * @BRIEF        Status: TA complete - This is set and held high after the TE 
 *               terminates scene, until TA is restarted - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__TA_FINISHED      BITFIELD(13, 13)
#define SGX540__EUR_CR_EVENT_STATUS__TA_FINISHED__POS 13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__TA_TERMINATE   
 *
 * @BRIEF        Status: The TA terminate complete (issue as part of complex 
 *               scene) - This is set and held high after the TE aborts a 
 *               MacroTile after failed DPM allocation request, until TA is 
 *               restarted - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__TA_TERMINATE     BITFIELD(12, 12)
#define SGX540__EUR_CR_EVENT_STATUS__TA_TERMINATE__POS 12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__TPC_CLEAR   
 *
 * @BRIEF        Status: The TPC has reset its state - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__TPC_CLEAR        BITFIELD(11, 11)
#define SGX540__EUR_CR_EVENT_STATUS__TPC_CLEAR__POS   11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__TPC_FLUSH   
 *
 * @BRIEF        Status: The TPC has stored its state - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__TPC_FLUSH        BITFIELD(10, 10)
#define SGX540__EUR_CR_EVENT_STATUS__TPC_FLUSH__POS   10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__DPM_CONTROL_CLEAR   
 *
 * @BRIEF        Status: The reset of the DPM control context has been 
 *               completed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__DPM_CONTROL_CLEAR BITFIELD(9, 9)
#define SGX540__EUR_CR_EVENT_STATUS__DPM_CONTROL_CLEAR__POS 9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__DPM_CONTROL_LOAD   
 *
 * @BRIEF        Status: The load of the DPM control context has been 
 *               completed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__DPM_CONTROL_LOAD BITFIELD(8, 8)
#define SGX540__EUR_CR_EVENT_STATUS__DPM_CONTROL_LOAD__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__DPM_CONTROL_STORE   
 *
 * @BRIEF        Status: The store of the DPM control context has been 
 *               completed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__DPM_CONTROL_STORE BITFIELD(7, 7)
#define SGX540__EUR_CR_EVENT_STATUS__DPM_CONTROL_STORE__POS 7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__DPM_STATE_CLEAR   
 *
 * @BRIEF        Status: The reset of the DPM state context has been 
 *               completed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__DPM_STATE_CLEAR  BITFIELD(6, 6)
#define SGX540__EUR_CR_EVENT_STATUS__DPM_STATE_CLEAR__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__DPM_STATE_LOAD   
 *
 * @BRIEF        Status: The load of the DPM state context has been completed 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__DPM_STATE_LOAD   BITFIELD(5, 5)
#define SGX540__EUR_CR_EVENT_STATUS__DPM_STATE_LOAD__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__DPM_STATE_STORE   
 *
 * @BRIEF        Status: The store of the DPM state context has been 
 *               completed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__DPM_STATE_STORE  BITFIELD(4, 4)
#define SGX540__EUR_CR_EVENT_STATUS__DPM_STATE_STORE__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__DPM_REACHED_MEM_THRESH   
 *
 * @BRIEF        Status: DPM Memory allocation has reached the preset memory 
 *               threshold for total memory allocation - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__DPM_REACHED_MEM_THRESH BITFIELD(3, 3)
#define SGX540__EUR_CR_EVENT_STATUS__DPM_REACHED_MEM_THRESH__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__DPM_OUT_OF_MEMORY_GBL   
 *
 * @BRIEF        Status: DPM Memory allocation failed for the global list - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__DPM_OUT_OF_MEMORY_GBL BITFIELD(2, 2)
#define SGX540__EUR_CR_EVENT_STATUS__DPM_OUT_OF_MEMORY_GBL__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__DPM_OUT_OF_MEMORY_MT   
 *
 * @BRIEF        Status: DPM Memory allocation failed for a macro tile - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__DPM_OUT_OF_MEMORY_MT BITFIELD(1, 1)
#define SGX540__EUR_CR_EVENT_STATUS__DPM_OUT_OF_MEMORY_MT__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_STATUS__DPM_3D_MEM_FREE   
 *
 * @BRIEF        Status: DPM Memory allocation complete for the current 
 *               render - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_STATUS__DPM_3D_MEM_FREE  BITFIELD(0, 0)
#define SGX540__EUR_CR_EVENT_STATUS__DPM_3D_MEM_FREE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__MASTER_INTERRUPT   
 *
 * @BRIEF        Host_Enable: PowerVR SGX Master Interrupt Control - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__MASTER_INTERRUPT BITFIELD(31, 31)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__MASTER_INTERRUPT__POS 31

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__RESERVED_30   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__RESERVED_30 BITFIELD(30, 30)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__RESERVED_30__POS 30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__TIMER   
 *
 * @BRIEF        Host_Enable: The PDS Event timer interrupt (signalled on 
 *               timer traversing through 0). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__TIMER       BITFIELD(29, 29)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__TIMER__POS  29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__TA_DPM_FAULT   
 *
 * @BRIEF        Host_Enable: The Tiling Co-Processor Object Passing System 
 *               has got out of sync, a Terminate Control Word DPM read was 
 *               met by StartofBlock data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__TA_DPM_FAULT BITFIELD(28, 28)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__TA_DPM_FAULT__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__TWOD_COMPLETE   
 *
 * @BRIEF        Host_Enable: 2d core has completed writing out all data to 
 *               memory and it has received a complete signal from the ta - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__TWOD_COMPLETE BITFIELD(27, 27)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__TWOD_COMPLETE__POS 27

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__MADD_CACHE_INVALCOMPLETE   
 *
 * @BRIEF        Host_Enable: Invalidate of Madd L0, L1, L2 Cache Complete - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__MADD_CACHE_INVALCOMPLETE BITFIELD(26, 26)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__MADD_CACHE_INVALCOMPLETE__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_OUT_OF_MEMORY_ZLS   
 *
 * @BRIEF        Host_Enable: Memory Allocation Failed for ZLS - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_OUT_OF_MEMORY_ZLS BITFIELD(25, 25)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_OUT_OF_MEMORY_ZLS__POS 25

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_TA_MEM_FREE   
 *
 * @BRIEF        Host_Enable: All memory associated with TA context has been 
 *               freed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_TA_MEM_FREE BITFIELD(24, 24)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_TA_MEM_FREE__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__ISP_END_TILE   
 *
 * @BRIEF        Host_Enable: ISP End tile - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__ISP_END_TILE BITFIELD(23, 23)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__ISP_END_TILE__POS 23

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_INITEND   
 *
 * @BRIEF        Host_Enable: DPM Initialisation Complete - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_INITEND BITFIELD(22, 22)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_INITEND__POS 22

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__OTPM_LOADED   
 *
 * @BRIEF        Host_Enable: The OTPM has loaded its state - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__OTPM_LOADED BITFIELD(21, 21)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__OTPM_LOADED__POS 21

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__OTPM_INV   
 *
 * @BRIEF        Host_Enable: The OTPM has invalidated its contents - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__OTPM_INV    BITFIELD(20, 20)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__OTPM_INV__POS 20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__OTPM_FLUSHED   
 *
 * @BRIEF        Host_Enable: The OTPM has flushed its state - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__OTPM_FLUSHED BITFIELD(19, 19)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__OTPM_FLUSHED__POS 19

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__PIXELBE_END_RENDER   
 *
 * @BRIEF        Host_Enable: End of Scene - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__PIXELBE_END_RENDER BITFIELD(18, 18)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__PIXELBE_END_RENDER__POS 18

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__ISP_HALT   
 *
 * @BRIEF        Host_Enable: ISP Halt breakpoint triggered - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__ISP_HALT    BITFIELD(17, 17)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__ISP_HALT__POS 17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__ISP_VISIBILITY_FAIL   
 *
 * @BRIEF        Host_Enable: Visibility Test Fail - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__ISP_VISIBILITY_FAIL BITFIELD(16, 16)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__ISP_VISIBILITY_FAIL__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__BREAKPOINT   
 *
 * @BRIEF        Host_Enable: ISP Breakpoint - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__BREAKPOINT  BITFIELD(15, 15)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__BREAKPOINT__POS 15

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__SW_EVENT   
 *
 * @BRIEF        Host_Enable: Software triggered event - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__SW_EVENT    BITFIELD(14, 14)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__SW_EVENT__POS 14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__TA_FINISHED   
 *
 * @BRIEF        Host_Enable: Tiling Co-Processor complete, (Scene 
 *               Terminated) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__TA_FINISHED BITFIELD(13, 13)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__TA_FINISHED__POS 13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__TA_TERMINATE   
 *
 * @BRIEF        Host_Enable: The Tiling Co-Processor terminate complete 
 *               (issue as part of complex scene) (MacroTile Aborted) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__TA_TERMINATE BITFIELD(12, 12)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__TA_TERMINATE__POS 12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__TPC_CLEAR   
 *
 * @BRIEF        Host_Enable: The TPC has reset its state - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__TPC_CLEAR   BITFIELD(11, 11)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__TPC_CLEAR__POS 11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__TPC_FLUSH   
 *
 * @BRIEF        Host_Enable: The TPC has stored its state - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__TPC_FLUSH   BITFIELD(10, 10)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__TPC_FLUSH__POS 10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_CONTROL_CLEAR   
 *
 * @BRIEF        Host_Enable: The reset of the DPM control context has been 
 *               completed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_CONTROL_CLEAR BITFIELD(9, 9)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_CONTROL_CLEAR__POS 9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_CONTROL_LOAD   
 *
 * @BRIEF        Host_Enable: The load of the DPM control context has been 
 *               completed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_CONTROL_LOAD BITFIELD(8, 8)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_CONTROL_LOAD__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_CONTROL_STORE   
 *
 * @BRIEF        Host_Enable: The store of the DPM control context has been 
 *               completed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_CONTROL_STORE BITFIELD(7, 7)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_CONTROL_STORE__POS 7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_STATE_CLEAR   
 *
 * @BRIEF        Host_Enable: The reset of the DPM state context has been 
 *               completed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_STATE_CLEAR BITFIELD(6, 6)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_STATE_CLEAR__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_STATE_LOAD   
 *
 * @BRIEF        Host_Enable: The load of the DPM state context has been 
 *               completed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_STATE_LOAD BITFIELD(5, 5)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_STATE_LOAD__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_STATE_STORE   
 *
 * @BRIEF        Host_Enable: The store of the DPM state context has been 
 *               completed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_STATE_STORE BITFIELD(4, 4)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_STATE_STORE__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_REACHED_MEM_THRESH   
 *
 * @BRIEF        Host_Enable: DPM Memory allocation has reached the preset 
 *               memory threshold for total memory allocation - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_REACHED_MEM_THRESH BITFIELD(3, 3)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_REACHED_MEM_THRESH__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_OUT_OF_MEMORY_GBL   
 *
 * @BRIEF        Host_Enable: DPM Memory allocation failed for the global 
 *               list - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_OUT_OF_MEMORY_GBL BITFIELD(2, 2)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_OUT_OF_MEMORY_GBL__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_OUT_OF_MEMORY_MT   
 *
 * @BRIEF        Host_Enable: DPM Memory allocation failed for a macro tile - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_OUT_OF_MEMORY_MT BITFIELD(1, 1)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_OUT_OF_MEMORY_MT__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_3D_MEM_FREE   
 *
 * @BRIEF        Host_Enable: DPM Memory allocation complete for the current 
 *               render - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_3D_MEM_FREE BITFIELD(0, 0)
#define SGX540__EUR_CR_EVENT_HOST_ENABLE__DPM_3D_MEM_FREE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__MASTER_INTERRUPT   
 *
 * @BRIEF        Host_Clear: PowerVR SGX Master Interrupt - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__MASTER_INTERRUPT BITFIELD(31, 31)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__MASTER_INTERRUPT__POS 31

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__RESERVED_30   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__RESERVED_30  BITFIELD(30, 30)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__RESERVED_30__POS 30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__TIMER   
 *
 * @BRIEF        Host_Clear: The PDS Event timer interrupt (signalled on 
 *               timer traversing through 0). - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__TIMER        BITFIELD(29, 29)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__TIMER__POS   29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__TA_DPM_FAULT   
 *
 * @BRIEF        Host_Clear: The TA Object Passing System has got out of 
 *               sync, a Terminate Control Word DPM read was met by 
 *               StartofBlock data - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__TA_DPM_FAULT BITFIELD(28, 28)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__TA_DPM_FAULT__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__TWOD_COMPLETE   
 *
 * @BRIEF        Host_Clear: 2d core has completed writing out all data to 
 *               memory and it has received a complete signal from the tiling 
 *               co-processor - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__TWOD_COMPLETE BITFIELD(27, 27)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__TWOD_COMPLETE__POS 27

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__MADD_CACHE_INVALCOMPLETE   
 *
 * @BRIEF        Host_Clear: Invalidate of Madd L1, L2 Cache Complete - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__MADD_CACHE_INVALCOMPLETE BITFIELD(26, 26)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__MADD_CACHE_INVALCOMPLETE__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_OUT_OF_MEMORY_ZLS   
 *
 * @BRIEF        Host_Clear: Memory Allocation Failed for ZLS - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_OUT_OF_MEMORY_ZLS BITFIELD(25, 25)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_OUT_OF_MEMORY_ZLS__POS 25

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_TA_MEM_FREE   
 *
 * @BRIEF        Host_Clear: All memory associated with TA context has been 
 *               freed - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_TA_MEM_FREE BITFIELD(24, 24)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_TA_MEM_FREE__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__ISP_END_TILE   
 *
 * @BRIEF        Host_Clear: ISP End tile - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__ISP_END_TILE BITFIELD(23, 23)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__ISP_END_TILE__POS 23

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_INITEND   
 *
 * @BRIEF        Host_Clear: DPM Initialisation Complete - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_INITEND  BITFIELD(22, 22)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_INITEND__POS 22

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__OTPM_LOADED   
 *
 * @BRIEF        Host_Clear: The OTPM has loaded its state - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__OTPM_LOADED  BITFIELD(21, 21)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__OTPM_LOADED__POS 21

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__OTPM_INV   
 *
 * @BRIEF        Host_Clear: The OTPM has invalidated its contents - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__OTPM_INV     BITFIELD(20, 20)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__OTPM_INV__POS 20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__OTPM_FLUSHED   
 *
 * @BRIEF        Host_Clear: The OTPM has flushed its state - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__OTPM_FLUSHED BITFIELD(19, 19)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__OTPM_FLUSHED__POS 19

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__PIXELBE_END_RENDER   
 *
 * @BRIEF        Host_Clear: End of Scene - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__PIXELBE_END_RENDER BITFIELD(18, 18)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__PIXELBE_END_RENDER__POS 18

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__ISP_HALT   
 *
 * @BRIEF        Host_Clear: ISP Halt breakpoint triggered - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__ISP_HALT     BITFIELD(17, 17)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__ISP_HALT__POS 17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__ISP_VISIBILITY_FAIL   
 *
 * @BRIEF        Host_Clear: Visibility Test Fail - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__ISP_VISIBILITY_FAIL BITFIELD(16, 16)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__ISP_VISIBILITY_FAIL__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__BREAKPOINT   
 *
 * @BRIEF        Host_Clear: ISP Breakpoint - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__BREAKPOINT   BITFIELD(15, 15)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__BREAKPOINT__POS 15

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__SW_EVENT   
 *
 * @BRIEF        Host_Clear: Software triggered event - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__SW_EVENT     BITFIELD(14, 14)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__SW_EVENT__POS 14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__TA_FINISHED   
 *
 * @BRIEF        Host_Clear: Tiling Co-Processor complete (Scene Terminated) 
 *               - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__TA_FINISHED  BITFIELD(13, 13)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__TA_FINISHED__POS 13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__TA_TERMINATE   
 *
 * @BRIEF        Host_Clear: The Tiling Co-Processor terminate complete 
 *               (issue as part of complex scene) (MacroTile aborted) - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__TA_TERMINATE BITFIELD(12, 12)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__TA_TERMINATE__POS 12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__TPC_CLEAR   
 *
 * @BRIEF        Host_Clear: The TPC has reset its state - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__TPC_CLEAR    BITFIELD(11, 11)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__TPC_CLEAR__POS 11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__TPC_FLUSH   
 *
 * @BRIEF        Host_Clear: The TPC has stored its state - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__TPC_FLUSH    BITFIELD(10, 10)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__TPC_FLUSH__POS 10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_CONTROL_CLEAR   
 *
 * @BRIEF        Host_Clear: The reset of the DPM control context has been 
 *               completed - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_CONTROL_CLEAR BITFIELD(9, 9)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_CONTROL_CLEAR__POS 9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_CONTROL_LOAD   
 *
 * @BRIEF        Host_Clear: The load of the DPM control context has been 
 *               completed - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_CONTROL_LOAD BITFIELD(8, 8)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_CONTROL_LOAD__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_CONTROL_STORE   
 *
 * @BRIEF        Host_Clear: The store of the DPM control context has been 
 *               completed - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_CONTROL_STORE BITFIELD(7, 7)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_CONTROL_STORE__POS 7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_STATE_CLEAR   
 *
 * @BRIEF        Host_Clear: The reset of the DPM state context has been 
 *               completed - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_STATE_CLEAR BITFIELD(6, 6)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_STATE_CLEAR__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_STATE_LOAD   
 *
 * @BRIEF        Host_Clear: The load of the DPM state context has been 
 *               completed - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_STATE_LOAD BITFIELD(5, 5)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_STATE_LOAD__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_STATE_STORE   
 *
 * @BRIEF        Host_Clear: The store of the DPM state context has been 
 *               completed - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_STATE_STORE BITFIELD(4, 4)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_STATE_STORE__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_REACHED_MEM_THRESH   
 *
 * @BRIEF        Host_Clear: DPM Memory allocation has reached the preset 
 *               memory threshold for total memory allocation - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_REACHED_MEM_THRESH BITFIELD(3, 3)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_REACHED_MEM_THRESH__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_OUT_OF_MEMORY_GBL   
 *
 * @BRIEF        Host_Clear: DPM Memory allocation failed for the global list 
 *               - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_OUT_OF_MEMORY_GBL BITFIELD(2, 2)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_OUT_OF_MEMORY_GBL__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_OUT_OF_MEMORY_MT   
 *
 * @BRIEF        Host_Clear: DPM Memory allocation failed for a macro tile - 
 *               (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_OUT_OF_MEMORY_MT BITFIELD(1, 1)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_OUT_OF_MEMORY_MT__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_3D_MEM_FREE   
 *
 * @BRIEF        Host_Clear: DPM Memory allocation complete for the current 
 *               render - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_3D_MEM_FREE BITFIELD(0, 0)
#define SGX540__EUR_CR_EVENT_HOST_CLEAR__DPM_3D_MEM_FREE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_STATUS__RESERVED_5   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_STATUS__RESERVED_5   BITFIELD(31, 5)
#define SGX540__EUR_CR_PDS_CACHE_STATUS__RESERVED_5__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_STATUS__DSC_INV3   
 *
 * @BRIEF        Status: Context ID 3 has been invalidated in PDS Data Store 
 *               Cache - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_STATUS__DSC_INV3     BITFIELD(4, 4)
#define SGX540__EUR_CR_PDS_CACHE_STATUS__DSC_INV3__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_STATUS__RESERVED_3   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_STATUS__RESERVED_3   BITFIELD(3, 3)
#define SGX540__EUR_CR_PDS_CACHE_STATUS__RESERVED_3__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_STATUS__DSC_INV1   
 *
 * @BRIEF        Status: Context ID 1 has been invalidated in PDS Data Store 
 *               Cache - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_STATUS__DSC_INV1     BITFIELD(2, 2)
#define SGX540__EUR_CR_PDS_CACHE_STATUS__DSC_INV1__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_STATUS__DSC_INV0   
 *
 * @BRIEF        Status: Context ID 0 has been invalidated in PDS Data Store 
 *               Cache - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_STATUS__DSC_INV0     BITFIELD(1, 1)
#define SGX540__EUR_CR_PDS_CACHE_STATUS__DSC_INV0__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_STATUS__CSC_INV   
 *
 * @BRIEF        Status: PDS Code Store Cache has been invalidated - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_STATUS__CSC_INV      BITFIELD(0, 0)
#define SGX540__EUR_CR_PDS_CACHE_STATUS__CSC_INV__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_HOST_ENABLE__RESERVED_5   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_HOST_ENABLE__RESERVED_5 BITFIELD(31, 5)
#define SGX540__EUR_CR_PDS_CACHE_HOST_ENABLE__RESERVED_5__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_HOST_ENABLE__DSC_INV3   
 *
 * @BRIEF        Host_Enable: Context ID 3 has been invalidated in PDS Data 
 *               Store Cache - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_HOST_ENABLE__DSC_INV3 BITFIELD(4, 4)
#define SGX540__EUR_CR_PDS_CACHE_HOST_ENABLE__DSC_INV3__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_HOST_ENABLE__RESERVED_3   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_HOST_ENABLE__RESERVED_3 BITFIELD(3, 3)
#define SGX540__EUR_CR_PDS_CACHE_HOST_ENABLE__RESERVED_3__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_HOST_ENABLE__DSC_INV1   
 *
 * @BRIEF        Host_Enable: Context ID 1 has been invalidated in PDS Data 
 *               Store Cache - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_HOST_ENABLE__DSC_INV1 BITFIELD(2, 2)
#define SGX540__EUR_CR_PDS_CACHE_HOST_ENABLE__DSC_INV1__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_HOST_ENABLE__DSC_INV0   
 *
 * @BRIEF        Host_Enable: Context ID 0 has been invalidated in PDS Data 
 *               Store Cache - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_HOST_ENABLE__DSC_INV0 BITFIELD(1, 1)
#define SGX540__EUR_CR_PDS_CACHE_HOST_ENABLE__DSC_INV0__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_HOST_ENABLE__CSC_INV   
 *
 * @BRIEF        Host_Enable: PDS Code Store Cache has been invalidated - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_HOST_ENABLE__CSC_INV BITFIELD(0, 0)
#define SGX540__EUR_CR_PDS_CACHE_HOST_ENABLE__CSC_INV__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_HOST_CLEAR__RESERVED_5   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_HOST_CLEAR__RESERVED_5 BITFIELD(31, 5)
#define SGX540__EUR_CR_PDS_CACHE_HOST_CLEAR__RESERVED_5__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_HOST_CLEAR__DSC_INV3   
 *
 * @BRIEF        Host_Clear: Context ID 3 has been invalidated in PDS Data 
 *               Store Cache 0 - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_HOST_CLEAR__DSC_INV3 BITFIELD(4, 4)
#define SGX540__EUR_CR_PDS_CACHE_HOST_CLEAR__DSC_INV3__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_HOST_CLEAR__RESERVED_3   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_HOST_CLEAR__RESERVED_3 BITFIELD(3, 3)
#define SGX540__EUR_CR_PDS_CACHE_HOST_CLEAR__RESERVED_3__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_HOST_CLEAR__DSC_INV1   
 *
 * @BRIEF        Host_Clear: Context ID 1 has been invalidated in PDS Data 
 *               Store Cache 0 - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_HOST_CLEAR__DSC_INV1 BITFIELD(2, 2)
#define SGX540__EUR_CR_PDS_CACHE_HOST_CLEAR__DSC_INV1__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_HOST_CLEAR__DSC_INV0   
 *
 * @BRIEF        Host_Clear: Context ID 0 has been invalidated in PDS Data 
 *               Store Cache 0 - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_HOST_CLEAR__DSC_INV0 BITFIELD(1, 1)
#define SGX540__EUR_CR_PDS_CACHE_HOST_CLEAR__DSC_INV0__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_HOST_CLEAR__CSC_INV   
 *
 * @BRIEF        Host_Clear: PDS Code Store Cache has been invalidated - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_HOST_CLEAR__CSC_INV  BITFIELD(0, 0)
#define SGX540__EUR_CR_PDS_CACHE_HOST_CLEAR__CSC_INV__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TIMER__VALUE   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TIMER__VALUE                   BITFIELD(31, 0)
#define SGX540__EUR_CR_TIMER__VALUE__POS              0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_START__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_START__RESERVED_1          BITFIELD(31, 1)
#define SGX540__EUR_CR_VDM_START__RESERVED_1__POS     1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_START__PULSE   
 *
 * @BRIEF        Start VDM DMA - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_START__PULSE               BITFIELD(0, 0)
#define SGX540__EUR_CR_VDM_START__PULSE__POS          0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_AA__X   
 *
 * @BRIEF        Anti-Aliasing in X: 
 *               0 No Anti-Aliasing on X plane 
 *               1 Anti-Aliasing on X plane - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_AA__X                       BITFIELD(31, 31)
#define SGX540__EUR_CR_TE_AA__X__POS                  31

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_AA__Y   
 *
 * @BRIEF        Anti-Aliasing in Y: 
 *               0 No Anti-Aliasing on Y plane 
 *               1 Anti-Aliasing on Y plane - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_AA__Y                       BITFIELD(30, 30)
#define SGX540__EUR_CR_TE_AA__Y__POS                  30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_AA__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_AA__RESERVED_0              BITFIELD(29, 0)
#define SGX540__EUR_CR_TE_AA__RESERVED_0__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_MTILE1__NUMBER   
 *
 * @BRIEF        PSG_MacroTile_Number: 
 *               0 4  MacroTiles 
 *               1 16 MacroTiles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_MTILE1__NUMBER              BITFIELD(31, 31)
#define SGX540__EUR_CR_TE_MTILE1__NUMBER__POS         31

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_MTILE1__RESERVED_30   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_MTILE1__RESERVED_30         BITFIELD(30, 30)
#define SGX540__EUR_CR_TE_MTILE1__RESERVED_30__POS    30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_MTILE1__X1   
 *
 * @BRIEF        X1 MacroTile boundary, left tile X for second column of 
 *               macrotiles (16MT mode) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_MTILE1__X1                  BITFIELD(29, 22)
#define SGX540__EUR_CR_TE_MTILE1__X1__POS             22

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_MTILE1__RESERVED_20   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_MTILE1__RESERVED_20         BITFIELD(21, 20)
#define SGX540__EUR_CR_TE_MTILE1__RESERVED_20__POS    20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_MTILE1__X2   
 *
 * @BRIEF        X2 MacroTile boundary, left tile X for 
 *               second(4MT)/third(16MT) column of macrotiles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_MTILE1__X2                  BITFIELD(19, 12)
#define SGX540__EUR_CR_TE_MTILE1__X2__POS             12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_MTILE1__RESERVED_8   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_MTILE1__RESERVED_8          BITFIELD(11, 8)
#define SGX540__EUR_CR_TE_MTILE1__RESERVED_8__POS     8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_MTILE1__X3   
 *
 * @BRIEF        X3 MacroTile boundary, left tile X for fourth column of 
 *               macrotiles (16MT) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_MTILE1__X3                  BITFIELD(7, 0)
#define SGX540__EUR_CR_TE_MTILE1__X3__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_MTILE2__RESERVED_30   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_MTILE2__RESERVED_30         BITFIELD(31, 30)
#define SGX540__EUR_CR_TE_MTILE2__RESERVED_30__POS    30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_MTILE2__Y1   
 *
 * @BRIEF        Y1 MacroTile boundary, top tile Y for second row of 
 *               macrotiles (16MT mode) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_MTILE2__Y1                  BITFIELD(29, 22)
#define SGX540__EUR_CR_TE_MTILE2__Y1__POS             22

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_MTILE2__RESERVED_20   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_MTILE2__RESERVED_20         BITFIELD(21, 20)
#define SGX540__EUR_CR_TE_MTILE2__RESERVED_20__POS    20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_MTILE2__Y2   
 *
 * @BRIEF        Y2 MacroTile boundary, top tile Y for 
 *               second(4MT)/third(16MT) row of macrotiles - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_MTILE2__Y2                  BITFIELD(19, 12)
#define SGX540__EUR_CR_TE_MTILE2__Y2__POS             12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_MTILE2__RESERVED_8   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_MTILE2__RESERVED_8          BITFIELD(11, 8)
#define SGX540__EUR_CR_TE_MTILE2__RESERVED_8__POS     8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_MTILE2__Y3   
 *
 * @BRIEF        Y1 MacroTile boundary, top tile Y for fourth row of 
 *               macrotiles (16MT mode) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_MTILE2__Y3                  BITFIELD(7, 0)
#define SGX540__EUR_CR_TE_MTILE2__Y3__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_SCREEN__RESERVED_20   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_SCREEN__RESERVED_20         BITFIELD(31, 20)
#define SGX540__EUR_CR_TE_SCREEN__RESERVED_20__POS    20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_SCREEN__YMAX   
 *
 * @BRIEF        Maximum Y tile address visible on screen - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_SCREEN__YMAX                BITFIELD(19, 12)
#define SGX540__EUR_CR_TE_SCREEN__YMAX__POS           12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_SCREEN__RESERVED_8   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_SCREEN__RESERVED_8          BITFIELD(11, 8)
#define SGX540__EUR_CR_TE_SCREEN__RESERVED_8__POS     8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_SCREEN__XMAX   
 *
 * @BRIEF        Maximum X tile address visible on screen - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_SCREEN__XMAX                BITFIELD(7, 0)
#define SGX540__EUR_CR_TE_SCREEN__XMAX__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_MTILE__RESERVED_18   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_MTILE__RESERVED_18          BITFIELD(31, 18)
#define SGX540__EUR_CR_TE_MTILE__RESERVED_18__POS     18

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_MTILE__STRIDE   
 *
 * @BRIEF        Number of tiles in a Macrotile. Stride = (XTile * YTiles) - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_MTILE__STRIDE               BITFIELD(17, 0)
#define SGX540__EUR_CR_TE_MTILE__STRIDE__POS          0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_PSG__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_PSG__RESERVED_26            BITFIELD(31, 26)
#define SGX540__EUR_CR_TE_PSG__RESERVED_26__POS       26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_PSG__EXTERNALZBUFFER   
 *
 * @BRIEF        When set do not initialise ZLS dword in Region Array - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_PSG__EXTERNALZBUFFER        BITFIELD(25, 25)
#define SGX540__EUR_CR_TE_PSG__EXTERNALZBUFFER__POS   25

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_PSG__ENABLE_CONTEXT_STATE_RESTORE   
 *
 * @BRIEF        Enables sampling of Driver TE_STATE_ISP_STATE_ID register on 
 *               context switch/restore when set, when reset current local 
 *               value is preserved. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_PSG__ENABLE_CONTEXT_STATE_RESTORE BITFIELD(24, 24)
#define SGX540__EUR_CR_TE_PSG__ENABLE_CONTEXT_STATE_RESTORE__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_PSG__ZONLYRENDER   
 *
 * @BRIEF        Don't invalidate Tail Pointer Cache entries on a Terminate 
 *               command.  Only effective when COMPLETEONTERMINATE is 0x0 
 *               0x0 Do Invalidate 
 *               0x1 Don't Invalidate - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_PSG__ZONLYRENDER            BITFIELD(23, 23)
#define SGX540__EUR_CR_TE_PSG__ZONLYRENDER__POS       23

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_PSG__COMPLETEONTERMINATE   
 *
 * @BRIEF        0x1 Write region headers, terminate streams and invalidate 
 *               tail pointer cache entries on terminate. 
 *               0x0 If ZONLYRENDER = 0x0 then force an Interrupt, however if 
 *               ZONLYRENDER = 0x1 then write region headers and terminate 
 *               streams. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_PSG__COMPLETEONTERMINATE    BITFIELD(22, 22)
#define SGX540__EUR_CR_TE_PSG__COMPLETEONTERMINATE__POS 22

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_PSG__ZLOADENABLE   
 *
 * @BRIEF        If 0x1 set the zload enable bit in the region headers. If 
 *               0x0 the region header zload bit is controlled by the 
 *               hardware automatically. The bit is set if a partial render 
 *               has been performed on that tile. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_PSG__ZLOADENABLE            BITFIELD(21, 21)
#define SGX540__EUR_CR_TE_PSG__ZLOADENABLE__POS       21

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_PSG__ZSTOREENABLE   
 *
 * @BRIEF        If 0x1 set the zstore enable bit in the region headers. If 
 *               0x0 the region header zstore bit is controlled by the 
 *               hardware automatically. The bit is set if a partial render 
 *               is about to be performed on that tile. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_PSG__ZSTOREENABLE           BITFIELD(20, 20)
#define SGX540__EUR_CR_TE_PSG__ZSTOREENABLE__POS      20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_PSG__PADZEROS   
 *
 * @BRIEF        Pad empty doublewords in allocation with zeros after Stream 
 *               Link/Terminate. The allocation block size is 16 DWords, so 
 *               potentially inserts 13 extra DWords of zeros into a pointer 
 *               block. Debug only. Makes examination of memory more readable 
 *               on a per frame basis. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_PSG__PADZEROS               BITFIELD(19, 19)
#define SGX540__EUR_CR_TE_PSG__PADZEROS__POS          19

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_PSG__FORCENEWSTATE   
 *
 * @BRIEF        Always embed state information in control stream. Debug 
 *               only. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_PSG__FORCENEWSTATE          BITFIELD(18, 18)
#define SGX540__EUR_CR_TE_PSG__FORCENEWSTATE__POS     18

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_PSG__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_PSG__RESERVED_0             BITFIELD(17, 0)
#define SGX540__EUR_CR_TE_PSG__RESERVED_0__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_PSGREGION_BASE__RESERVED_28   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_PSGREGION_BASE__RESERVED_28 BITFIELD(31, 28)
#define SGX540__EUR_CR_TE_PSGREGION_BASE__RESERVED_28__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_PSGREGION_BASE__ADDR   
 *
 * @BRIEF        256MB Addressable, 512-bit aligned Base Address for Region 
 *               Header writes - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_PSGREGION_BASE__ADDR        BITFIELD(27, 6)
#define SGX540__EUR_CR_TE_PSGREGION_BASE__ADDR__POS   6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_PSGREGION_BASE__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_PSGREGION_BASE__RESERVED_0  BITFIELD(5, 0)
#define SGX540__EUR_CR_TE_PSGREGION_BASE__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_TPC_BASE__RESERVED_28   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_TPC_BASE__RESERVED_28       BITFIELD(31, 28)
#define SGX540__EUR_CR_TE_TPC_BASE__RESERVED_28__POS  28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_TPC_BASE__ADDR   
 *
 * @BRIEF        256MB Addressable, 512-bit aligned Base Address for Tail 
 *               Pointer Cache. The tail pointer is the current last address 
 *               written to for a control stream for a tile. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_TPC_BASE__ADDR              BITFIELD(27, 6)
#define SGX540__EUR_CR_TE_TPC_BASE__ADDR__POS         6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_TPC_BASE__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_TPC_BASE__RESERVED_0        BITFIELD(5, 0)
#define SGX540__EUR_CR_TE_TPC_BASE__RESERVED_0__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_TPCCONTROL__CLEAR   
 *
 * @BRIEF        Reset contents of Tail Pointer Cache - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_TPCCONTROL__CLEAR           BITFIELD(31, 31)
#define SGX540__EUR_CR_TE_TPCCONTROL__CLEAR__POS      31

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_TPCCONTROL__FLUSH   
 *
 * @BRIEF        Flush contents of Tail Pointer Cache to Memory - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_TPCCONTROL__FLUSH           BITFIELD(30, 30)
#define SGX540__EUR_CR_TE_TPCCONTROL__FLUSH__POS      30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_TPCCONTROL__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_TPCCONTROL__RESERVED_0      BITFIELD(29, 0)
#define SGX540__EUR_CR_TE_TPCCONTROL__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_RGNBBOX_X__RESERVED_25   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_RGNBBOX_X__RESERVED_25      BITFIELD(31, 25)
#define SGX540__EUR_CR_TE_RGNBBOX_X__RESERVED_25__POS 25

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_RGNBBOX_X__MAX   
 *
 * @BRIEF        XMax value for maintained Region Generator Bounding Box - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_RGNBBOX_X__MAX              BITFIELD(24, 16)
#define SGX540__EUR_CR_TE_RGNBBOX_X__MAX__POS         16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_RGNBBOX_X__RESERVED_9   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_RGNBBOX_X__RESERVED_9       BITFIELD(15, 9)
#define SGX540__EUR_CR_TE_RGNBBOX_X__RESERVED_9__POS  9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_RGNBBOX_X__MIN   
 *
 * @BRIEF        XMin value for maintained Region Generator Bounding Box - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_RGNBBOX_X__MIN              BITFIELD(8, 0)
#define SGX540__EUR_CR_TE_RGNBBOX_X__MIN__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_RGNBBOX_Y__RESERVED_25   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_RGNBBOX_Y__RESERVED_25      BITFIELD(31, 25)
#define SGX540__EUR_CR_TE_RGNBBOX_Y__RESERVED_25__POS 25

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_RGNBBOX_Y__MAX   
 *
 * @BRIEF        YMax value for maintained Region Generator Bounding Box - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_RGNBBOX_Y__MAX              BITFIELD(24, 16)
#define SGX540__EUR_CR_TE_RGNBBOX_Y__MAX__POS         16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_RGNBBOX_Y__RESERVED_9   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_RGNBBOX_Y__RESERVED_9       BITFIELD(15, 9)
#define SGX540__EUR_CR_TE_RGNBBOX_Y__RESERVED_9__POS  9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_RGNBBOX_Y__MIN   
 *
 * @BRIEF        YMin value for maintained Region Generator Bounding Box - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_RGNBBOX_Y__MIN              BITFIELD(8, 0)
#define SGX540__EUR_CR_TE_RGNBBOX_Y__MIN__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_OTPM_CSM_FLUSH_BASE__RESERVED_28   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_OTPM_CSM_FLUSH_BASE__RESERVED_28 BITFIELD(31, 28)
#define SGX540__EUR_CR_MTE_OTPM_CSM_FLUSH_BASE__RESERVED_28__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_OTPM_CSM_FLUSH_BASE__ADDR   
 *
 * @BRIEF        256MB Addressable, 512-bit aligned Base Address for Object 
 *               Tail Pointer Memory Context Switchable Memory (OTPM CSM) 
 *               Flush.  This is the current point for each macro tile and 
 *               global list, for the vertex blocks written to memory by the 
 *               Tile Accelerator. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_OTPM_CSM_FLUSH_BASE__ADDR  BITFIELD(27, 4)
#define SGX540__EUR_CR_MTE_OTPM_CSM_FLUSH_BASE__ADDR__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_OTPM_CSM_FLUSH_BASE__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_OTPM_CSM_FLUSH_BASE__RESERVED_0 BITFIELD(3, 0)
#define SGX540__EUR_CR_MTE_OTPM_CSM_FLUSH_BASE__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_OTPM_CSM_LOAD_BASE__RESERVED_28   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_OTPM_CSM_LOAD_BASE__RESERVED_28 BITFIELD(31, 28)
#define SGX540__EUR_CR_MTE_OTPM_CSM_LOAD_BASE__RESERVED_28__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_OTPM_CSM_LOAD_BASE__ADDR   
 *
 * @BRIEF        256MB Addressable, 512-bit aligned Base Address for Object 
 *               Tail Pointer Memory Context Switchable Memory (OTPM CSM) 
 *               Load. This is the current point for each macro tile and 
 *               global list, for the vertex blocks written to memory by the 
 *               Tile Accelerator. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_OTPM_CSM_LOAD_BASE__ADDR   BITFIELD(27, 4)
#define SGX540__EUR_CR_MTE_OTPM_CSM_LOAD_BASE__ADDR__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_OTPM_CSM_LOAD_BASE__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_OTPM_CSM_LOAD_BASE__RESERVED_0 BITFIELD(3, 0)
#define SGX540__EUR_CR_MTE_OTPM_CSM_LOAD_BASE__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CTRL_STREAM_BASE__RESERVED_28   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CTRL_STREAM_BASE__RESERVED_28 BITFIELD(31, 28)
#define SGX540__EUR_CR_VDM_CTRL_STREAM_BASE__RESERVED_28__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CTRL_STREAM_BASE__ADDR   
 *
 * @BRIEF        256MB Addressable, byte aligned Base Address for Vertex Data 
 *               control streams - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CTRL_STREAM_BASE__ADDR     BITFIELD(27, 2)
#define SGX540__EUR_CR_VDM_CTRL_STREAM_BASE__ADDR__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CTRL_STREAM_BASE__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CTRL_STREAM_BASE__RESERVED_0 BITFIELD(1, 0)
#define SGX540__EUR_CR_VDM_CTRL_STREAM_BASE__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_CTRL__RESERVED_12   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_CTRL__RESERVED_12          BITFIELD(31, 12)
#define SGX540__EUR_CR_MTE_CTRL__RESERVED_12__POS     12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_CTRL__GLOBAL_THRESH_DISABLE   
 *
 * @BRIEF        Disables mode where no global list is written above a 
 *               threshold. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_CTRL__GLOBAL_THRESH_DISABLE BITFIELD(11, 11)
#define SGX540__EUR_CR_MTE_CTRL__GLOBAL_THRESH_DISABLE__POS 11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_CTRL__TE_PAD256   
 *
 * @BRIEF        Selects whether or not we pad out TE control stream accesses 
 *               with dummy data in order to avoid masked 256bit writes, '0' 
 *               don't pad, '1' pad. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_CTRL__TE_PAD256            BITFIELD(10, 10)
#define SGX540__EUR_CR_MTE_CTRL__TE_PAD256__POS       10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_CTRL__TE_PAD128   
 *
 * @BRIEF        Selects whether or not we pad out TE control stream accesses 
 *               with dummy data in order to avoid masked 128bit writes, '0' 
 *               don't pad, '1' pad. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_CTRL__TE_PAD128            BITFIELD(9, 9)
#define SGX540__EUR_CR_MTE_CTRL__TE_PAD128__POS       9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_CTRL__NUM_PARTITIONS   
 *
 * @BRIEF        Maximum number of partitions in the vertex cache/fifo: 
 *               0 Four partitions in total 
 *               1 Eight partitions in total - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_CTRL__NUM_PARTITIONS       BITFIELD(8, 8)
#define SGX540__EUR_CR_MTE_CTRL__NUM_PARTITIONS__POS  8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_CTRL__OPENGL   
 *
 * @BRIEF        Select OpenGL or D3D mode 
 *               0 D3D 
 *               1 OpenGL - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_CTRL__OPENGL               BITFIELD(7, 7)
#define SGX540__EUR_CR_MTE_CTRL__OPENGL__POS          7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_CTRL__PSOCULL_DISABLE   
 *
 * @BRIEF        Disable for perfect small object culling 
 *               0 Perfect small object culling enabled 
 *               1 Perfect small object culling disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_CTRL__PSOCULL_DISABLE      BITFIELD(6, 6)
#define SGX540__EUR_CR_MTE_CTRL__PSOCULL_DISABLE__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_CTRL__WCLAMPEN   
 *
 * @BRIEF        Enable W clamping 
 *               0 W clamping disabled 
 *               1 W clamping enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_CTRL__WCLAMPEN             BITFIELD(5, 5)
#define SGX540__EUR_CR_MTE_CTRL__WCLAMPEN__POS        5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_CTRL__GLOBALMACROTILETHRESH   
 *
 * @BRIEF        When writing to global list, number of primitives which are 
 *               within the same macrotile before the macrotile calculation 
 *               will change from global. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_CTRL__GLOBALMACROTILETHRESH BITFIELD(4, 0)
#define SGX540__EUR_CR_MTE_CTRL__GLOBALMACROTILETHRESH__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_WCOMPARE__VALUE   
 *
 * @BRIEF        Compare value for W clamping. See the Input parameter 
 *               format, viewport transform for details. Compare is applied 
 *               post viewport transform. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_WCOMPARE__VALUE            BITFIELD(31, 0)
#define SGX540__EUR_CR_MTE_WCOMPARE__VALUE__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_WCLAMP__VALUE   
 *
 * @BRIEF        Clamp value for W clamping. See the Input parameter format, 
 *               viewport transform for details. Clamp is applied post 
 *               viewport transform, if the w value is less than the WCOMPARE 
 *               value. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_WCLAMP__VALUE              BITFIELD(31, 0)
#define SGX540__EUR_CR_MTE_WCLAMP__VALUE__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_SCREEN__RESERVED_24   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_SCREEN__RESERVED_24        BITFIELD(31, 24)
#define SGX540__EUR_CR_MTE_SCREEN__RESERVED_24__POS   24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_SCREEN__PIXYMAX   
 *
 * @BRIEF        Screen height in pixels. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_SCREEN__PIXYMAX            BITFIELD(23, 12)
#define SGX540__EUR_CR_MTE_SCREEN__PIXYMAX__POS       12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_SCREEN__PIXXMAX   
 *
 * @BRIEF        Screen width in pixels. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_SCREEN__PIXXMAX            BITFIELD(11, 0)
#define SGX540__EUR_CR_MTE_SCREEN__PIXXMAX__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_OTPM_OP__RESERVED_3   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_OTPM_OP__RESERVED_3        BITFIELD(31, 3)
#define SGX540__EUR_CR_MTE_OTPM_OP__RESERVED_3__POS   3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_OTPM_OP__CSM_FLUSH   
 *
 * @BRIEF        Flush CSM contents to CSM Flush Address - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_OTPM_OP__CSM_FLUSH         BITFIELD(2, 2)
#define SGX540__EUR_CR_MTE_OTPM_OP__CSM_FLUSH__POS    2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_OTPM_OP__CSM_LOAD   
 *
 * @BRIEF        Load CSM contents from CSM Load Address - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_OTPM_OP__CSM_LOAD          BITFIELD(1, 1)
#define SGX540__EUR_CR_MTE_OTPM_OP__CSM_LOAD__POS     1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_OTPM_OP__CSM_INV   
 *
 * @BRIEF        Invalidate CSM contents - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_OTPM_OP__CSM_INV           BITFIELD(0, 0)
#define SGX540__EUR_CR_MTE_OTPM_OP__CSM_INV__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_Y3   
 *
 * @BRIEF        Unsigned sub-pixel offset for the 4th multisample Y position 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_Y3    BITFIELD(31, 28)
#define SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_Y3__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_X3   
 *
 * @BRIEF        Unsigned sub-pixel offset for the 4th multisample X position 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_X3    BITFIELD(27, 24)
#define SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_X3__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_Y2   
 *
 * @BRIEF        Unsigned sub-pixel offset for the 3rd multisample Y position 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_Y2    BITFIELD(23, 20)
#define SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_Y2__POS 20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_X2   
 *
 * @BRIEF        Unsigned sub-pixel offset for the 3rd multisample X position 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_X2    BITFIELD(19, 16)
#define SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_X2__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_Y1   
 *
 * @BRIEF        Unsigned sub-pixel offset for the 2nd multisample Y position 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_Y1    BITFIELD(15, 12)
#define SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_Y1__POS 12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_X1   
 *
 * @BRIEF        Unsigned sub-pixel offset for the 2nd multisample X position 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_X1    BITFIELD(11, 8)
#define SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_X1__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_Y0   
 *
 * @BRIEF        Unsigned sub-pixel offset for the 1st multisample Y position 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_Y0    BITFIELD(7, 4)
#define SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_Y0__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_X0   
 *
 * @BRIEF        Unsigned sub-pixel offset for the 1st multisample X position 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_X0    BITFIELD(3, 0)
#define SGX540__EUR_CR_MTE_MULTISAMPLECTL__MSAA_X0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_SIG1__TE_SIGNATURE   
 *
 * @BRIEF        Signature of output to TE. A signature is an accumulative 
 *               LFSR (Linear Feedback Shift Register) of the valid pipeline 
 *               data using an XOR structure. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_SIG1__TE_SIGNATURE         BITFIELD(31, 0)
#define SGX540__EUR_CR_MTE_SIG1__TE_SIGNATURE__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_SIG2__MEM_SIGNATURE   
 *
 * @BRIEF        Signature of output to memory. A signature is an 
 *               accumulative LFSR (Linear Feedback Shift Register) of the 
 *               valid pipeline data using an XOR structure. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_SIG2__MEM_SIGNATURE        BITFIELD(31, 0)
#define SGX540__EUR_CR_MTE_SIG2__MEM_SIGNATURE__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_STATE__RESERVED_21   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_STATE__RESERVED_21          BITFIELD(31, 21)
#define SGX540__EUR_CR_TE_STATE__RESERVED_21__POS     21

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_STATE__ISP_STATE_ID   
 *
 * @BRIEF        The current status of the ISP State Counter in the PSG.. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_STATE__ISP_STATE_ID         BITFIELD(20, 16)
#define SGX540__EUR_CR_TE_STATE__ISP_STATE_ID__POS    16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE_STATE__ABORTED_MTILE   
 *
 * @BRIEF        The Macrotiles aborted by the TE, should be saved and 
 *               restored. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE_STATE__ABORTED_MTILE        BITFIELD(15, 0)
#define SGX540__EUR_CR_TE_STATE__ABORTED_MTILE__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_MACROTILING__RESERVED_8   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_MACROTILING__RESERVED_8    BITFIELD(31, 8)
#define SGX540__EUR_CR_MTE_MACROTILING__RESERVED_8__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_MTE_MACROTILING__MARGIN   
 *
 * @BRIEF        Macrotiling margin to prevent clipping inaccuracy causing 
 *               change of macrotile. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_MTE_MACROTILING__MARGIN        BITFIELD(7, 0)
#define SGX540__EUR_CR_MTE_MACROTILING__MARGIN__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE1__SIGNATURE   
 *
 * @BRIEF        TE Comprehensive Signature. A signature is an accumulative 
 *               LFSR (Linear Feedback Shift Register) of the valid pipeline 
 *               data using an XOR structure. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE1__SIGNATURE                 BITFIELD(31, 0)
#define SGX540__EUR_CR_TE1__SIGNATURE__POS            0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TE2__SIGNATURE   
 *
 * @BRIEF        TE Cutdown Signature. A signature is an accumulative LFSR 
 *               (Linear Feedback Shift Register) of the valid pipeline data 
 *               using an XOR structure. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TE2__SIGNATURE                 BITFIELD(31, 0)
#define SGX540__EUR_CR_TE2__SIGNATURE__POS            0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CLIP_SIG1__CLIP_SIGNATURE   
 *
 * @BRIEF        Signature of Barycentric vertices output during each 
 *               clipping pass i.e. clipped against each clip plane in turn. 
 *               A signature is an accumulative LFSR (Linear Feedback Shift 
 *               Register) of the valid pipeline data using an XOR structure. 
 *               - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CLIP_SIG1__CLIP_SIGNATURE      BITFIELD(31, 0)
#define SGX540__EUR_CR_CLIP_SIG1__CLIP_SIGNATURE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE_SIG01__SIGNATURE   
 *
 * @BRIEF        Signature of data output from PBE to BIF. A signature is an 
 *               accumulative LFSR (Linear Feedback Shift Register) of the 
 *               valid pipeline data using an XOR structure. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE_SIG01__SIGNATURE       BITFIELD(31, 0)
#define SGX540__EUR_CR_PIXELBE_SIG01__SIGNATURE__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE_SIG02__SIGNATURE   
 *
 * @BRIEF        Signature of control data output from PBE to BIF. A 
 *               signature is an accumulative LFSR (Linear Feedback Shift 
 *               Register) of the valid pipeline data using an XOR structure. 
 *               - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE_SIG02__SIGNATURE       BITFIELD(31, 0)
#define SGX540__EUR_CR_PIXELBE_SIG02__SIGNATURE__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_START__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_START__RESERVED_1 BITFIELD(31, 1)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_START__RESERVED_1__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_START__PULSE   
 *
 * @BRIEF        Start VDM Context store - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_START__PULSE BITFIELD(0, 0)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_START__PULSE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STREAM__RESERVED_28   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STREAM__RESERVED_28 BITFIELD(31, 28)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STREAM__RESERVED_28__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STREAM__ADDR   
 *
 * @BRIEF        stream position for context store, number of 32bit dwords 
 *               from a base address update (ie. between stream link or 
 *               terminates) - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STREAM__ADDR BITFIELD(27, 2)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STREAM__ADDR__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STREAM__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STREAM__RESERVED_0 BITFIELD(1, 0)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STREAM__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_INDEX__RESERVED_23   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_INDEX__RESERVED_23 BITFIELD(31, 23)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_INDEX__RESERVED_23__POS 23

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_INDEX__ADDR   
 *
 * @BRIEF        ** Top MSB bit 22 used for winding order resume **  Index 
 *               position for context store, number of index words from an 
 *               index define - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_INDEX__ADDR  BITFIELD(22, 0)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_INDEX__ADDR__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATUS__RESERVED_9   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATUS__RESERVED_9 BITFIELD(31, 9)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATUS__RESERVED_9__POS 9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATUS__NA   
 *
 * @BRIEF        Context store not applicable doing a stream terminate - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATUS__NA   BITFIELD(8, 8)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATUS__NA__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATUS__RESERVED_5   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATUS__RESERVED_5 BITFIELD(7, 5)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATUS__RESERVED_5__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATUS__PROCESS   
 *
 * @BRIEF        Context store processing - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATUS__PROCESS BITFIELD(4, 4)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATUS__PROCESS__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATUS__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATUS__RESERVED_1 BITFIELD(3, 1)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATUS__RESERVED_1__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATUS__COMPLETE   
 *
 * @BRIEF        Context store complete - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATUS__COMPLETE BITFIELD(0, 0)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATUS__COMPLETE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE0__RESERVED_30   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE0__RESERVED_30 BITFIELD(31, 30)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE0__RESERVED_30__POS 30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE0__TAPDSSTATE_TERMINATE   
 *
 * @BRIEF        defines the last word in the control stream, used to 
 *               generate end ta - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE0__TAPDSSTATE_TERMINATE BITFIELD(29, 29)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE0__TAPDSSTATE_TERMINATE__POS 29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE0__TAPDSSTATE_COMPLEX   
 *
 * @BRIEF        defines if the state update is complex - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE0__TAPDSSTATE_COMPLEX BITFIELD(28, 28)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE0__TAPDSSTATE_COMPLEX__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE0__RESERVED_22   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE0__RESERVED_22 BITFIELD(27, 22)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE0__RESERVED_22__POS 22

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE0__TAPDSSTATE_BASEADDR   
 *
 * @BRIEF        Base address (128Bit Aligned, 256 MByte range), in 16 byte 
 *               units of the PDS code and data to be executed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE0__TAPDSSTATE_BASEADDR BITFIELD(21, 0)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE0__TAPDSSTATE_BASEADDR__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_DATASIZE   
 *
 * @BRIEF        Size of the PDS Data segment in 128 bit words. The data 
 *               segment always precedes the code segment. 0 = 0x0, Max = 
 *               0x20 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_DATASIZE BITFIELD(31, 26)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_DATASIZE__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__RESERVED_25   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__RESERVED_25 BITFIELD(25, 25)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__RESERVED_25__POS 25

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_DEBUG   
 *
 * @BRIEF        Enables breakpoints on this program - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_DEBUG BITFIELD(24, 24)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_DEBUG__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__RESERVED_19   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__RESERVED_19 BITFIELD(23, 19)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__RESERVED_19__POS 19

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_MTE_EMIT   
 *
 * @BRIEF        If set the USSE will output state to the MTE - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_MTE_EMIT BITFIELD(18, 18)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_MTE_EMIT__POS 18

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_SEC_EXEC   
 *
 * @BRIEF        0 ' Do not execute secondary task on the USSE/1 ' Execute 
 *               secondary task on the USSE Has no effect on primary tasks. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_SEC_EXEC BITFIELD(17, 17)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_SEC_EXEC__POS 17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_SD   
 *
 * @BRIEF        Indicates a sequential dependency - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_SD BITFIELD(16, 16)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_SD__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_USEPIPE   
 *
 * @BRIEF        0 ' Reserved/1 ' Run on pipe 1/2 ' Run on pipe 2/3 ' Run on 
 *               pipe 3/4 Run on pipe 
 *                 4 ' 7 Run on all pipes ' - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_USEPIPE BITFIELD(15, 13)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_USEPIPE__POS 13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_PARTIAL   
 *
 * @BRIEF        Indicates partial secondary updates. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_PARTIAL BITFIELD(12, 12)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_PARTIAL__POS 12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_PARTITIONS   
 *
 * @BRIEF        Number of output partitions required. 0 = 0x0 and Max = 0x4 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_PARTITIONS BITFIELD(11, 9)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_PARTITIONS__POS 9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_SECONDARY   
 *
 * @BRIEF        Indicates that the allocation is secondary - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_SECONDARY BITFIELD(8, 8)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_SECONDARY__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_USEATTRIBUTESIZE   
 *
 * @BRIEF        Size of the USSE Attribute Requirements for the task in 128 
 *               bit Words - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_USEATTRIBUTESIZE BITFIELD(7, 0)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_STATE1__TAPDSSTATE_USEATTRIBUTESIZE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_WAIT_FOR_KICK__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_WAIT_FOR_KICK__RESERVED_1  BITFIELD(31, 1)
#define SGX540__EUR_CR_VDM_WAIT_FOR_KICK__RESERVED_1__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_WAIT_FOR_KICK__STATUS   
 *
 * @BRIEF        Indicates when state machine is in idle - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_WAIT_FOR_KICK__STATUS      BITFIELD(0, 0)
#define SGX540__EUR_CR_VDM_WAIT_FOR_KICK__STATUS__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAP_INDEX__RESERVED_22   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAP_INDEX__RESERVED_22 BITFIELD(31, 22)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAP_INDEX__RESERVED_22__POS 22

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAP_INDEX__COUNT   
 *
 * @BRIEF        Wrap Index Count for context store, number of indices since 
 *               last wrap - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAP_INDEX__COUNT BITFIELD(21, 0)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAP_INDEX__COUNT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAPPED__RESERVED_22   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAPPED__RESERVED_22 BITFIELD(31, 22)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAPPED__RESERVED_22__POS 22

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAPPED__COUNT   
 *
 * @BRIEF        ** Top MSB bit 22 used for winding order resume **Wrapped 
 *               count for context store, number of times the HW has wrapped 
 *               after a context store - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAPPED__COUNT BITFIELD(21, 0)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAPPED__COUNT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_FAN__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_FAN__RESERVED_26 BITFIELD(31, 26)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_FAN__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_FAN__INDEX   
 *
 * @BRIEF        ** Top MSB bit 25 used for winding order resume ** Context 
 *               store, index to be used as center point to Fan after a 
 *               context store. NB, bit 24 is the enable and triggered on 
 *               VDM_START_PULSE if set next fan take the values in 23:0 - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_FAN__INDEX   BITFIELD(25, 0)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_FAN__INDEX__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAP__RESERVED_24   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAP__RESERVED_24 BITFIELD(31, 24)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAP__RESERVED_24__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAP__RESUME   
 *
 * @BRIEF        Context store, wrap count values used on a resume of a 
 *               context, triggered on bit 22 followed by plus one on next 
 *               header by bit 23 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAP__RESUME BITFIELD(23, 0)
#define SGX540__EUR_CR_VDM_CONTEXT_STORE_WRAP__RESUME__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_VDM_MTE__SIG   
 *
 * @BRIEF        Signature of output to MTE. A signature is an accumulative 
 *               LFSR (Linear Feedback Shift Register) of the valid pipeline 
 *               data using an XOR structure. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_VDM_MTE__SIG                   BITFIELD(31, 0)
#define SGX540__EUR_CR_VDM_MTE__SIG__POS              0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE__RESERVED_11   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE__RESERVED_11           BITFIELD(31, 11)
#define SGX540__EUR_CR_PIXELBE__RESERVED_11__POS      11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE__CLEAR_ERROR   
 *
 * @BRIEF        Writing 1 to this bit clears the 
 *               eur_cr_pixelbe_emit_count_errorX bits and writing 0 would 
 *               allow these registers to be updated - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE__CLEAR_ERROR           BITFIELD(10, 10)
#define SGX540__EUR_CR_PIXELBE__CLEAR_ERROR__POS      10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE__CHKSUM_INIT   
 *
 * @BRIEF        Writing 1 to this bit initialises the PBE Vertex Checksum, 
 *               it must be written to 0 for checksum to start - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE__CHKSUM_INIT           BITFIELD(9, 9)
#define SGX540__EUR_CR_PIXELBE__CHKSUM_INIT__POS      9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE__IDF_USE_FBADDR   
 *
 * @BRIEF        Use Frame buffer address for IDF's when set to 1. Default is 
 *               0 which means IDFs use the last address written too by the 
 *               PBE - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE__IDF_USE_FBADDR        BITFIELD(8, 8)
#define SGX540__EUR_CR_PIXELBE__IDF_USE_FBADDR__POS   8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE__ALPHATHRESHOLD   
 *
 * @BRIEF        Alpha threshold used when encoding 1555 format. If the 
 *               internal 8bit Alpha value exceeds this value, then a 1 is 
 *               written to the top bit of the output, otherwise a 0 is 
 *               written - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE__ALPHATHRESHOLD        BITFIELD(7, 0)
#define SGX540__EUR_CR_PIXELBE__ALPHATHRESHOLD__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_RENDER__RESERVED_2   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_RENDER__RESERVED_2         BITFIELD(31, 2)
#define SGX540__EUR_CR_ISP_RENDER__RESERVED_2__POS    2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_RENDER__TYPE   
 *
 * @BRIEF        0x0, 0x1 = Normal 3D render 
 *               0x2 = Fast 2D render 
 *               0x3 = Fast scale render - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_RENDER__TYPE               BITFIELD(1, 0)
#define SGX540__EUR_CR_ISP_RENDER__TYPE__POS          0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_RGN_BASE__RESERVED_28   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_RGN_BASE__RESERVED_28      BITFIELD(31, 28)
#define SGX540__EUR_CR_ISP_RGN_BASE__RESERVED_28__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_RGN_BASE__ADDR   
 *
 * @BRIEF        256MB Addressable, Dword aligned Base Address for Region 
 *               Header Reads - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_RGN_BASE__ADDR             BITFIELD(27, 2)
#define SGX540__EUR_CR_ISP_RGN_BASE__ADDR__POS        2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_RGN_BASE__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_RGN_BASE__RESERVED_0       BITFIELD(1, 0)
#define SGX540__EUR_CR_ISP_RGN_BASE__RESERVED_0__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_RENDBOX1__RESERVED_24   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_RENDBOX1__RESERVED_24      BITFIELD(31, 24)
#define SGX540__EUR_CR_ISP_RENDBOX1__RESERVED_24__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_RENDBOX1__X   
 *
 * @BRIEF        Bounding box X1. X address, in tiles, of top left most tile 
 *               in bounding box. The LSB is ignored if AA_MODE is low. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_RENDBOX1__X                BITFIELD(23, 16)
#define SGX540__EUR_CR_ISP_RENDBOX1__X__POS           16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_RENDBOX1__RESERVED_8   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_RENDBOX1__RESERVED_8       BITFIELD(15, 8)
#define SGX540__EUR_CR_ISP_RENDBOX1__RESERVED_8__POS  8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_RENDBOX1__Y   
 *
 * @BRIEF        Bounding box Y1. Y address, in tiles, of top left most tile 
 *               in bounding box. The LSB is ignored if AA_MODE is low. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_RENDBOX1__Y                BITFIELD(7, 0)
#define SGX540__EUR_CR_ISP_RENDBOX1__Y__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_RENDBOX2__RESERVED_24   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_RENDBOX2__RESERVED_24      BITFIELD(31, 24)
#define SGX540__EUR_CR_ISP_RENDBOX2__RESERVED_24__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_RENDBOX2__X   
 *
 * @BRIEF        Bounding box X2. X address, in tiles, of bottom right most 
 *               tile in bounding box. The LSB is ignored if AA_MODE is low. 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_RENDBOX2__X                BITFIELD(23, 16)
#define SGX540__EUR_CR_ISP_RENDBOX2__X__POS           16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_RENDBOX2__RESERVED_8   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_RENDBOX2__RESERVED_8       BITFIELD(15, 8)
#define SGX540__EUR_CR_ISP_RENDBOX2__RESERVED_8__POS  8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_RENDBOX2__Y   
 *
 * @BRIEF        Bounding box Y2. Y address, in tiles, of bottom right most 
 *               tile in bounding box.The LSB is ignored if AA_MODE is low. - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_RENDBOX2__Y                BITFIELD(7, 0)
#define SGX540__EUR_CR_ISP_RENDBOX2__Y__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_IPFMISC__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_IPFMISC__RESERVED_26       BITFIELD(31, 26)
#define SGX540__EUR_CR_ISP_IPFMISC__RESERVED_26__POS  26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_IPFMISC__TTE_SCALE   
 *
 * @BRIEF        Scale factor for ISP parameter fetch to BIF TTE. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_IPFMISC__TTE_SCALE         BITFIELD(25, 24)
#define SGX540__EUR_CR_ISP_IPFMISC__TTE_SCALE__POS    24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_IPFMISC__RESERVED_20   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_IPFMISC__RESERVED_20       BITFIELD(23, 20)
#define SGX540__EUR_CR_ISP_IPFMISC__RESERVED_20__POS  20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_IPFMISC__UPASSSTART   
 *
 * @BRIEF        Initial upass_ctrl value, loaded at the start of each tile, 
 *               for user pass spawning in the ISP. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_IPFMISC__UPASSSTART        BITFIELD(19, 16)
#define SGX540__EUR_CR_ISP_IPFMISC__UPASSSTART__POS   16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_IPFMISC__RESERVED_9   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_IPFMISC__RESERVED_9        BITFIELD(15, 9)
#define SGX540__EUR_CR_ISP_IPFMISC__RESERVED_9__POS   9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_IPFMISC__PROCESSEMPTY   
 *
 * @BRIEF        If this bit is set, all empty regions encountered will be 
 *               processed by the 3D core ie the hardware background object 
 *               being rendered in each empty tile. NOTE that this bit does 
 *               not affect a "Fast Scale Render" i.e. empty regions are 
 *               always processed when performing a "Fast Scale Render". - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_IPFMISC__PROCESSEMPTY      BITFIELD(8, 8)
#define SGX540__EUR_CR_ISP_IPFMISC__PROCESSEMPTY__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_IPFMISC__RESERVED_6   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_IPFMISC__RESERVED_6        BITFIELD(7, 6)
#define SGX540__EUR_CR_ISP_IPFMISC__RESERVED_6__POS   6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_IPFMISC__VALIDID   
 *
 * @BRIEF        6 bit field specify the minimum object ID required for 
 *               opaque and translucent objects to be rendered. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_IPFMISC__VALIDID           BITFIELD(5, 0)
#define SGX540__EUR_CR_ISP_IPFMISC__VALIDID__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_OGL_MODE__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_OGL_MODE__RESERVED_1       BITFIELD(31, 1)
#define SGX540__EUR_CR_ISP_OGL_MODE__RESERVED_1__POS  1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_OGL_MODE__ENABLE   
 *
 * @BRIEF        0 Non OGL Rules 
 *               1 OGL Rules - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_OGL_MODE__ENABLE           BITFIELD(0, 0)
#define SGX540__EUR_CR_ISP_OGL_MODE__ENABLE__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_PERPENDICULAR__RESERVED_31   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_PERPENDICULAR__RESERVED_31 BITFIELD(31, 31)
#define SGX540__EUR_CR_ISP_PERPENDICULAR__RESERVED_31__POS 31

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_PERPENDICULAR__THRESHOLD   
 *
 * @BRIEF        If the determinant in the ISP FPU is smaller than this 
 *               unsigned float, then perpendicular maths is used. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_PERPENDICULAR__THRESHOLD   BITFIELD(30, 4)
#define SGX540__EUR_CR_ISP_PERPENDICULAR__THRESHOLD__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_PERPENDICULAR__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_PERPENDICULAR__RESERVED_0  BITFIELD(3, 0)
#define SGX540__EUR_CR_ISP_PERPENDICULAR__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_CULLVALUE__RESERVED_31   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_CULLVALUE__RESERVED_31     BITFIELD(31, 31)
#define SGX540__EUR_CR_ISP_CULLVALUE__RESERVED_31__POS 31

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_CULLVALUE__THRESHOLD   
 *
 * @BRIEF        If the determinant in the ISP FPU is smaller than this 
 *               unsigned float, then the triangle is culled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_CULLVALUE__THRESHOLD       BITFIELD(30, 4)
#define SGX540__EUR_CR_ISP_CULLVALUE__THRESHOLD__POS  4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_CULLVALUE__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_CULLVALUE__RESERVED_0      BITFIELD(3, 0)
#define SGX540__EUR_CR_ISP_CULLVALUE__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_DBIAS__RESERVED_16   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_DBIAS__RESERVED_16         BITFIELD(31, 16)
#define SGX540__EUR_CR_ISP_DBIAS__RESERVED_16__POS    16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_DBIAS__FACTORADJ   
 *
 * @BRIEF        Signed 2's complement integer used to control the slope 
 *               dependent part of depth bias. The default value should be 
 *               -23. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_DBIAS__FACTORADJ           BITFIELD(15, 8)
#define SGX540__EUR_CR_ISP_DBIAS__FACTORADJ__POS      8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_DBIAS__UNITSADJ   
 *
 * @BRIEF        Signed 2's complement integer used to control the slope 
 *               independent part of depth bias. The default value should be 
 *               0. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_DBIAS__UNITSADJ            BITFIELD(7, 0)
#define SGX540__EUR_CR_ISP_DBIAS__UNITSADJ__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_START_RENDER__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_START_RENDER__RESERVED_1   BITFIELD(31, 1)
#define SGX540__EUR_CR_ISP_START_RENDER__RESERVED_1__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_START_RENDER__PULSE   
 *
 * @BRIEF        Start 3D render - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_START_RENDER__PULSE        BITFIELD(0, 0)
#define SGX540__EUR_CR_ISP_START_RENDER__PULSE__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_THREED_AA_MODE__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_THREED_AA_MODE__RESERVED_1     BITFIELD(31, 1)
#define SGX540__EUR_CR_THREED_AA_MODE__RESERVED_1__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_THREED_AA_MODE__ENABLE   
 *
 * @BRIEF        0 anti aliasing disabled 
 *               1 anti-aliasing enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_THREED_AA_MODE__ENABLE         BITFIELD(0, 0)
#define SGX540__EUR_CR_THREED_AA_MODE__ENABLE__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_BREAK__RESERVED_5   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_BREAK__RESERVED_5          BITFIELD(31, 5)
#define SGX540__EUR_CR_ISP_BREAK__RESERVED_5__POS     5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_BREAK__RESUME   
 *
 * @BRIEF        Resumes the current render after a breakpoint object is 
 *               encountered in the internal parameter stream - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_BREAK__RESUME              BITFIELD(4, 4)
#define SGX540__EUR_CR_ISP_BREAK__RESUME__POS         4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_BREAK__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_BREAK__RESERVED_1          BITFIELD(3, 1)
#define SGX540__EUR_CR_ISP_BREAK__RESERVED_1__POS     1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_BREAK__HALT   
 *
 * @BRIEF        Terminates the current render after a breakpoint object is 
 *               encountered in the internal parameter stream - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_BREAK__HALT                BITFIELD(0, 0)
#define SGX540__EUR_CR_ISP_BREAK__HALT__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_3DCONTEXT__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_3DCONTEXT__RESERVED_1      BITFIELD(31, 1)
#define SGX540__EUR_CR_ISP_3DCONTEXT__RESERVED_1__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_3DCONTEXT__STORE   
 *
 * @BRIEF        ISP Context Store, any write to this register will cause the 
 *               ISP to halt processing new primitives, insert an end of 
 *               render command and wait for the current primitives in the 
 *               pipeline to complete processing up to the inserted end of 
 *               render. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_3DCONTEXT__STORE           BITFIELD(0, 0)
#define SGX540__EUR_CR_ISP_3DCONTEXT__STORE__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_FPU__SIGNATURE   
 *
 * @BRIEF        ISP FPU signature result. A signature is an accumulative 
 *               LFSR (Linear Feedback Shift Register) of the valid pipeline 
 *               data using an XOR structure. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_FPU__SIGNATURE             BITFIELD(31, 0)
#define SGX540__EUR_CR_ISP_FPU__SIGNATURE__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TSP_PARAMETER_CACHE__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TSP_PARAMETER_CACHE__RESERVED_1 BITFIELD(31, 1)
#define SGX540__EUR_CR_TSP_PARAMETER_CACHE__RESERVED_1__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TSP_PARAMETER_CACHE__INVALIDATE   
 *
 * @BRIEF        Any write to this register will invalidate the Content 
 *               Addressable Memory in the TSP parameter fetch cache - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TSP_PARAMETER_CACHE__INVALIDATE BITFIELD(0, 0)
#define SGX540__EUR_CR_TSP_PARAMETER_CACHE__INVALIDATE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TSP_PARAMETER_FETCH__RESERVED_2   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TSP_PARAMETER_FETCH__RESERVED_2 BITFIELD(31, 2)
#define SGX540__EUR_CR_TSP_PARAMETER_FETCH__RESERVED_2__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TSP_PARAMETER_FETCH__TTE_SCALE   
 *
 * @BRIEF        Scale factor for TSP parameter fetch to BIF TTE. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TSP_PARAMETER_FETCH__TTE_SCALE BITFIELD(1, 0)
#define SGX540__EUR_CR_TSP_PARAMETER_FETCH__TTE_SCALE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_FPU_Z_ROUNDING__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_FPU_Z_ROUNDING__RESERVED_1     BITFIELD(31, 1)
#define SGX540__EUR_CR_FPU_Z_ROUNDING__RESERVED_1__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_FPU_Z_ROUNDING__DISABLE   
 *
 * @BRIEF        Disables rounding on coefficients for the Z plane in the ISP 
 *               and TSP - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_FPU_Z_ROUNDING__DISABLE        BITFIELD(0, 0)
#define SGX540__EUR_CR_FPU_Z_ROUNDING__DISABLE__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZLSCTL__RESERVED_24   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZLSCTL__RESERVED_24        BITFIELD(31, 24)
#define SGX540__EUR_CR_ISP_ZLSCTL__RESERVED_24__POS   24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZLSCTL__EXTERNALZBUFFER   
 *
 * @BRIEF        When set an external z buffer is used instead of dpm mode - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZLSCTL__EXTERNALZBUFFER    BITFIELD(23, 23)
#define SGX540__EUR_CR_ISP_ZLSCTL__EXTERNALZBUFFER__POS 23

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZLSCTL__STOREMASK   
 *
 * @BRIEF        This bit modifies the behaviour when 
 *               EUR_CR_ISP_ZLSCTL:[ZSTOREFORMAT] = 0x0. 
 *               0 - Binary 0 is stored in place of the current rendered mask 
 *               plane. All stored Z values will appear in memory as positive 
 *               IEEE floats 
 *               1 - The mask plane is stored per pixel location as rendered 
 *               to the on-chip tile buffer and occupies the MSB (sign bit) 
 *               of all IEEE float dwords - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZLSCTL__STOREMASK          BITFIELD(22, 22)
#define SGX540__EUR_CR_ISP_ZLSCTL__STOREMASK__POS     22

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZLSCTL__LOADMASK   
 *
 * @BRIEF        This bit modifies the behaviour when 
 *               EUR_CR_ISP_ZLSCTL:[ZLOADFORMAT] = 0x0. 
 *               0 - The entire tile will be loaded with the mask plane value 
 *               as determined by EUR_CR_ISP_BGOBJ:[MASK] 
 *               1 - The mask plane is loaded exactly as it appears in memory 
 *               with the mask plane bit in the MSB (sign bit) of each loaded 
 *               IEEE float formatted dword - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZLSCTL__LOADMASK           BITFIELD(21, 21)
#define SGX540__EUR_CR_ISP_ZLSCTL__LOADMASK__POS      21

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZLSCTL__ZONLYRENDER   
 *
 * @BRIEF        When set, only the Z buffer is rendered. Opaque and 
 *               translucent objects are stencil and depth tested as usual 
 *               but no pixel spans are emitted to the PDS Pixel presenter. 
 *               Pixels within punch through and depth feedback objects are 
 *               emitted on their first pass as a result of passing the 
 *               up-front depth test by default. However, on their feedback 
 *               depth test, these pixels will not be output regardless of 
 *               the depth test result. The intention is to calculate a scene 
 *               Z buffer without doing any further rendering. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZLSCTL__ZONLYRENDER        BITFIELD(20, 20)
#define SGX540__EUR_CR_ISP_ZLSCTL__ZONLYRENDER__POS   20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZLSCTL__ZSTOREFORMAT   
 *
 * @BRIEF        Selects the format depth, stencil and viewport is stored in: 
 *               0x0 32 bit IEEE SP Float  
 *               0x1 24 bit Integer + 8-bit Stencil  
 *               0x2 Two 16 bit Integers (Packed format)  
 *               0x3 32-bit IEEE Float 8-bit Stencil 1-bit Viewport 
 *               Compressed, addressed using DPM - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZLSCTL__ZSTOREFORMAT       BITFIELD(19, 18)
#define SGX540__EUR_CR_ISP_ZLSCTL__ZSTOREFORMAT__POS  18

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZLSCTL__ZLOADFORMAT   
 *
 * @BRIEF        Selects the format depth, stencil and viewport is stored in: 
 *               0x0 32 bit IEEE SP Float  
 *               0x1 24 bit Integer + 8-bit Stencil  
 *               0x2 Two 16 bit Integers (Packed format)  
 *               0x3 32-bit IEEE Float 8-bit Stencil 1-bit Viewport 
 *               Compressed, addressed using DPM - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZLSCTL__ZLOADFORMAT        BITFIELD(17, 16)
#define SGX540__EUR_CR_ISP_ZLSCTL__ZLOADFORMAT__POS   16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZLSCTL__ZLSEXTENT   
 *
 * @BRIEF        Display width in tiles (16 pixels) minus one:  
 *               0x00 1 tile (16 pixels) 
 *               0x01 2 tiles (32 pixels) 
 *                .. 
 *               0xFF 256 tiles (4096 pixels) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZLSCTL__ZLSEXTENT          BITFIELD(15, 8)
#define SGX540__EUR_CR_ISP_ZLSCTL__ZLSEXTENT__POS     8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZLSCTL__SSTOREEN   
 *
 * @BRIEF        When set to 1, if the ZSTORE bit in the region header is 
 *               also set then the stencil buffer is stored to memory after 
 *               each tile is processed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZLSCTL__SSTOREEN           BITFIELD(7, 7)
#define SGX540__EUR_CR_ISP_ZLSCTL__SSTOREEN__POS      7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZLSCTL__FORCEZSTORE   
 *
 * @BRIEF        If set to 1 the depth/stencil buffer is always stored at the 
 *               end of each tile irrespective of the region header ZSTORE 
 *               bit. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZLSCTL__FORCEZSTORE        BITFIELD(6, 6)
#define SGX540__EUR_CR_ISP_ZLSCTL__FORCEZSTORE__POS   6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZLSCTL__FORCEZLOAD   
 *
 * @BRIEF        If set to 1 the depth/stencil buffer is always loaded at the 
 *               start of each tile irrespective of the region header ZLOAD 
 *               bit. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZLSCTL__FORCEZLOAD         BITFIELD(5, 5)
#define SGX540__EUR_CR_ISP_ZLSCTL__FORCEZLOAD__POS    5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZLSCTL__ZSTOREEN   
 *
 * @BRIEF        When set to 1, if the ZSTORE bit in the region header is 
 *               also set then the depth buffer is stored to memory after 
 *               each tile is processed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZLSCTL__ZSTOREEN           BITFIELD(4, 4)
#define SGX540__EUR_CR_ISP_ZLSCTL__ZSTOREEN__POS      4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZLSCTL__STORETILED   
 *
 * @BRIEF        When set to 1 depth and stencil data is written out in 
 *               "Tiled" order. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZLSCTL__STORETILED         BITFIELD(3, 3)
#define SGX540__EUR_CR_ISP_ZLSCTL__STORETILED__POS    3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZLSCTL__ZLOADEN   
 *
 * @BRIEF        When set to 1, if the ZLOAD bit in the region header is also 
 *               set then  the depth buffer is read from memory prior to tile 
 *               processing - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZLSCTL__ZLOADEN            BITFIELD(2, 2)
#define SGX540__EUR_CR_ISP_ZLSCTL__ZLOADEN__POS       2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZLSCTL__SLOADEN   
 *
 * @BRIEF        When set to 1, if the ZLOAD bit in the region header is also 
 *               set then the stencil buffer is read from memory prior to 
 *               tile processing - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZLSCTL__SLOADEN            BITFIELD(1, 1)
#define SGX540__EUR_CR_ISP_ZLSCTL__SLOADEN__POS       1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZLSCTL__LOADTILED   
 *
 * @BRIEF        When set to 1 depth, stencil data is loaded in "Tiled" order 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZLSCTL__LOADTILED          BITFIELD(0, 0)
#define SGX540__EUR_CR_ISP_ZLSCTL__LOADTILED__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZLOAD_BASE__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZLOAD_BASE__RESERVED_26    BITFIELD(31, 26)
#define SGX540__EUR_CR_ISP_ZLOAD_BASE__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZLOAD_BASE__ADDR   
 *
 * @BRIEF        64MB Addressable, 16byte aligned Base Address of the Z 
 *               Buffer Load base address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZLOAD_BASE__ADDR           BITFIELD(25, 4)
#define SGX540__EUR_CR_ISP_ZLOAD_BASE__ADDR__POS      4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZLOAD_BASE__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZLOAD_BASE__RESERVED_0     BITFIELD(3, 0)
#define SGX540__EUR_CR_ISP_ZLOAD_BASE__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZSTORE_BASE__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZSTORE_BASE__RESERVED_26   BITFIELD(31, 26)
#define SGX540__EUR_CR_ISP_ZSTORE_BASE__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZSTORE_BASE__ADDR   
 *
 * @BRIEF        64MB Addressable, 16byte aligned Base Address of the Z 
 *               Buffer Load base address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZSTORE_BASE__ADDR          BITFIELD(25, 4)
#define SGX540__EUR_CR_ISP_ZSTORE_BASE__ADDR__POS     4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_ZSTORE_BASE__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_ZSTORE_BASE__RESERVED_0    BITFIELD(3, 0)
#define SGX540__EUR_CR_ISP_ZSTORE_BASE__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_STENCIL_LOAD_BASE__ENABLE   
 *
 * @BRIEF        When set to 1, enables fetching of stencil from a separate 
 *               base address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_STENCIL_LOAD_BASE__ENABLE  BITFIELD(31, 31)
#define SGX540__EUR_CR_ISP_STENCIL_LOAD_BASE__ENABLE__POS 31

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_STENCIL_LOAD_BASE__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_STENCIL_LOAD_BASE__RESERVED_26 BITFIELD(30, 26)
#define SGX540__EUR_CR_ISP_STENCIL_LOAD_BASE__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_STENCIL_LOAD_BASE__ADDR   
 *
 * @BRIEF        64MB Addressable, 16byte aligned Base Address of the Stencil 
 *               Buffer Load base address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_STENCIL_LOAD_BASE__ADDR    BITFIELD(25, 4)
#define SGX540__EUR_CR_ISP_STENCIL_LOAD_BASE__ADDR__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_STENCIL_LOAD_BASE__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_STENCIL_LOAD_BASE__RESERVED_0 BITFIELD(3, 0)
#define SGX540__EUR_CR_ISP_STENCIL_LOAD_BASE__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_STENCIL_STORE_BASE__ENABLE   
 *
 * @BRIEF        When set to 1, enables saving of stencil to a separate base 
 *               address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_STENCIL_STORE_BASE__ENABLE BITFIELD(31, 31)
#define SGX540__EUR_CR_ISP_STENCIL_STORE_BASE__ENABLE__POS 31

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_STENCIL_STORE_BASE__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_STENCIL_STORE_BASE__RESERVED_26 BITFIELD(30, 26)
#define SGX540__EUR_CR_ISP_STENCIL_STORE_BASE__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_STENCIL_STORE_BASE__ADDR   
 *
 * @BRIEF        64MB Addressable, 16byte aligned Base Address of the Stencil 
 *               Buffer Load base address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_STENCIL_STORE_BASE__ADDR   BITFIELD(25, 4)
#define SGX540__EUR_CR_ISP_STENCIL_STORE_BASE__ADDR__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_STENCIL_STORE_BASE__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_STENCIL_STORE_BASE__RESERVED_0 BITFIELD(3, 0)
#define SGX540__EUR_CR_ISP_STENCIL_STORE_BASE__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_CTRL__RESERVED_8   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_CTRL__RESERVED_8   BITFIELD(31, 8)
#define SGX540__EUR_CR_ISP_VISTEST_CTRL__RESERVED_8__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR7   
 *
 * @BRIEF        Resets Visibility Test register 7 - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR7       BITFIELD(7, 7)
#define SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR7__POS  7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR6   
 *
 * @BRIEF        Resets Visibility Test register 6 - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR6       BITFIELD(6, 6)
#define SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR6__POS  6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR5   
 *
 * @BRIEF        Resets Visibility Test register 5 - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR5       BITFIELD(5, 5)
#define SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR5__POS  5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR4   
 *
 * @BRIEF        Resets Visibility Test register 4 - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR4       BITFIELD(4, 4)
#define SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR4__POS  4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR3   
 *
 * @BRIEF        Resets Visibility Test register 3 - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR3       BITFIELD(3, 3)
#define SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR3__POS  3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR2   
 *
 * @BRIEF        Resets Visibility Test register 2 - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR2       BITFIELD(2, 2)
#define SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR2__POS  2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR1   
 *
 * @BRIEF        Resets Visibility Test register 1 - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR1       BITFIELD(1, 1)
#define SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR1__POS  1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR0   
 *
 * @BRIEF        Resets Visibility Test register 0 - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR0       BITFIELD(0, 0)
#define SGX540__EUR_CR_ISP_VISTEST_CTRL__CLEAR0__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE0__COUNT   
 *
 * @BRIEF        Visibility Test counter 0 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE0__COUNT    BITFIELD(31, 0)
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE0__COUNT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE1__COUNT   
 *
 * @BRIEF        Visibility Test counter 1 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE1__COUNT    BITFIELD(31, 0)
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE1__COUNT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE2__COUNT   
 *
 * @BRIEF        Visibility Test counter 2 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE2__COUNT    BITFIELD(31, 0)
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE2__COUNT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE3__COUNT   
 *
 * @BRIEF        Visibility Test counter 3 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE3__COUNT    BITFIELD(31, 0)
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE3__COUNT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE4__COUNT   
 *
 * @BRIEF        Visibility Test counter 4 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE4__COUNT    BITFIELD(31, 0)
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE4__COUNT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE5__COUNT   
 *
 * @BRIEF        Visibility Test counter 5 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE5__COUNT    BITFIELD(31, 0)
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE5__COUNT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE6__COUNT   
 *
 * @BRIEF        Visibility Test counter 6 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE6__COUNT    BITFIELD(31, 0)
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE6__COUNT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_VISTEST_VISIBLE7__COUNT   
 *
 * @BRIEF        Visibility Test counter 7 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE7__COUNT    BITFIELD(31, 0)
#define SGX540__EUR_CR_ISP_VISTEST_VISIBLE7__COUNT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_BGOBJDEPTH__VALUE   
 *
 * @BRIEF        Hardware background object depth value in 32 bit IEEE single 
 *               precision floating point format - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_BGOBJDEPTH__VALUE          BITFIELD(31, 0)
#define SGX540__EUR_CR_ISP_BGOBJDEPTH__VALUE__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_BGOBJ__RESERVED_10   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_BGOBJ__RESERVED_10         BITFIELD(31, 10)
#define SGX540__EUR_CR_ISP_BGOBJ__RESERVED_10__POS    10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_BGOBJ__ENABLEBGTAG   
 *
 * @BRIEF        When set to 1, at the start of each tile the ISP tag buffer 
 *               is initialised with the background object tag (default = 1) 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_BGOBJ__ENABLEBGTAG         BITFIELD(9, 9)
#define SGX540__EUR_CR_ISP_BGOBJ__ENABLEBGTAG__POS    9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_BGOBJ__MASK   
 *
 * @BRIEF        Hardware background object mask plane - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_BGOBJ__MASK                BITFIELD(8, 8)
#define SGX540__EUR_CR_ISP_BGOBJ__MASK__POS           8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_BGOBJ__STENCIL   
 *
 * @BRIEF        Hardware background object stencil - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_BGOBJ__STENCIL             BITFIELD(7, 0)
#define SGX540__EUR_CR_ISP_BGOBJ__STENCIL__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_BGOBJTAG__RESERVED_30   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_BGOBJTAG__RESERVED_30      BITFIELD(31, 30)
#define SGX540__EUR_CR_ISP_BGOBJTAG__RESERVED_30__POS 30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_BGOBJTAG__TSPDATASIZE   
 *
 * @BRIEF        Hardware background object TSP data size in dwords - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_BGOBJTAG__TSPDATASIZE      BITFIELD(29, 24)
#define SGX540__EUR_CR_ISP_BGOBJTAG__TSPDATASIZE__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_BGOBJTAG__RESERVED_22   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_BGOBJTAG__RESERVED_22      BITFIELD(23, 22)
#define SGX540__EUR_CR_ISP_BGOBJTAG__RESERVED_22__POS 22

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_BGOBJTAG__VERTEXPTR   
 *
 * @BRIEF        Bits 25:4 of the hardware background object vertex pointer 
 *               (64MB range on 16 byte boundaries) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_BGOBJTAG__VERTEXPTR        BITFIELD(21, 0)
#define SGX540__EUR_CR_ISP_BGOBJTAG__VERTEXPTR__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_Y3   
 *
 * @BRIEF        Unsigned sub-pixel offset for the 4th multisample Y position 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_Y3    BITFIELD(31, 28)
#define SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_Y3__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_X3   
 *
 * @BRIEF        Unsigned sub-pixel offset for the 4th multisample X position 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_X3    BITFIELD(27, 24)
#define SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_X3__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_Y2   
 *
 * @BRIEF        Unsigned sub-pixel offset for the 3rd multisample Y position 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_Y2    BITFIELD(23, 20)
#define SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_Y2__POS 20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_X2   
 *
 * @BRIEF        Unsigned sub-pixel offset for the 3rd multisample X position 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_X2    BITFIELD(19, 16)
#define SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_X2__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_Y1   
 *
 * @BRIEF        Unsigned sub-pixel offset for the 2nd multisample Y position 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_Y1    BITFIELD(15, 12)
#define SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_Y1__POS 12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_X1   
 *
 * @BRIEF        Unsigned sub-pixel offset for the 2nd multisample X position 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_X1    BITFIELD(11, 8)
#define SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_X1__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_Y0   
 *
 * @BRIEF        Unsigned sub-pixel offset for the 1st multisample Y position 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_Y0    BITFIELD(7, 4)
#define SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_Y0__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_X0   
 *
 * @BRIEF        Unsigned sub-pixel offset for the 1st multisample X position 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_X0    BITFIELD(3, 0)
#define SGX540__EUR_CR_ISP_MULTISAMPLECTL__MSAA_X0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_SIG1__PRECALC   
 *
 * @BRIEF        Signature analysis - face equation precalc. A signature is 
 *               an accumulative LFSR (Linear Feedback Shift Register) of the 
 *               valid pipeline data using an XOR structure. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_SIG1__PRECALC              BITFIELD(31, 0)
#define SGX540__EUR_CR_ISP_SIG1__PRECALC__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_SIG2__EDGE   
 *
 * @BRIEF        Signature analysis - edge processors. A signature is an 
 *               accumulative LFSR (Linear Feedback Shift Register) of the 
 *               valid pipeline data using an XOR structure. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_SIG2__EDGE                 BITFIELD(31, 0)
#define SGX540__EUR_CR_ISP_SIG2__EDGE__POS            0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_SIG3__TAGWRITE   
 *
 * @BRIEF        Signature analysis - state buffer storage. A signature is an 
 *               accumulative LFSR (Linear Feedback Shift Register) of the 
 *               valid pipeline data using an XOR structure. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_SIG3__TAGWRITE             BITFIELD(31, 0)
#define SGX540__EUR_CR_ISP_SIG3__TAGWRITE__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_SIG4__SPAN   
 *
 * @BRIEF        Signature analysis - spans to PDS pixel presenter. A 
 *               signature is an accumulative LFSR (Linear Feedback Shift 
 *               Register) of the valid pipeline data using an XOR structure. 
 *               - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_SIG4__SPAN                 BITFIELD(31, 0)
#define SGX540__EUR_CR_ISP_SIG4__SPAN__POS            0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_TAGCTRL__RESERVED_2   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_TAGCTRL__RESERVED_2        BITFIELD(31, 2)
#define SGX540__EUR_CR_ISP_TAGCTRL__RESERVED_2__POS   2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_TAGCTRL__FORCE_PT_OFF   
 *
 * @BRIEF        Debug punchthrough mode which forces pt_off after every 
 *               pt,dfb and fpt triangle - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_TAGCTRL__FORCE_PT_OFF      BITFIELD(1, 1)
#define SGX540__EUR_CR_ISP_TAGCTRL__FORCE_PT_OFF__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_TAGCTRL__SAFE   
 *
 * @BRIEF        Safe flush mode, pass-spawn flushes for every translucent 
 *               object - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_TAGCTRL__SAFE              BITFIELD(0, 0)
#define SGX540__EUR_CR_ISP_TAGCTRL__SAFE__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_STATUS1__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_STATUS1__RESERVED_26       BITFIELD(31, 26)
#define SGX540__EUR_CR_ISP_STATUS1__RESERVED_26__POS  26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_STATUS1__CTRL_STREAM_POS   
 *
 * @BRIEF        Control Stream Position after context switch - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_STATUS1__CTRL_STREAM_POS   BITFIELD(25, 2)
#define SGX540__EUR_CR_ISP_STATUS1__CTRL_STREAM_POS__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_STATUS1__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_STATUS1__RESERVED_0        BITFIELD(1, 0)
#define SGX540__EUR_CR_ISP_STATUS1__RESERVED_0__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_STATUS2__RESERVED_21   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_STATUS2__RESERVED_21       BITFIELD(31, 21)
#define SGX540__EUR_CR_ISP_STATUS2__RESERVED_21__POS  21

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_STATUS2__PRIM_NUM   
 *
 * @BRIEF        Position of current primitive after context switch - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_STATUS2__PRIM_NUM          BITFIELD(20, 16)
#define SGX540__EUR_CR_ISP_STATUS2__PRIM_NUM__POS     16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_STATUS2__TILE_Y   
 *
 * @BRIEF        Tile Y coordinate after context switch - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_STATUS2__TILE_Y            BITFIELD(15, 8)
#define SGX540__EUR_CR_ISP_STATUS2__TILE_Y__POS       8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_STATUS2__TILE_X   
 *
 * @BRIEF        Tile X coordinate after context switch - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_STATUS2__TILE_X            BITFIELD(7, 0)
#define SGX540__EUR_CR_ISP_STATUS2__TILE_X__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_DEPTHSORT__RESERVED_9   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_DEPTHSORT__RESERVED_9      BITFIELD(31, 9)
#define SGX540__EUR_CR_ISP_DEPTHSORT__RESERVED_9__POS 9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_DEPTHSORT__FB_ABC_ORDER   
 *
 * @BRIEF        Selects the ABC coefficient 2 phase feedback order 
 *               when 0: 
 *               B is taken from 1st iteration src1 in the PCOEFF instruction 
 *               (bits 63:32, iteration 0 on ISP feedback bus) 
 *               A is taken from 2nd iteration src0 in the PCOEFF instruction 
 *               (bits 31:0, iteration 1 on ISP feedback bus) 
 *               C is taken from 2nd iteration src1 in the PCOEFF instruction 
 *               (bits 63:32, iteration 1 on ISP feedback bus) 
 *               when 1: 
 *               A is taken from 1st iteration src0 in the PCOEFF instruction 
 *               (bits 31:0, iteration 0 on ISP feedback bus) 
 *               B is taken from 2nd iteration src0 in the PCOEFF instruction 
 *               (bits 31:0, iteration 1 on ISP feedback bus) 
 *               C is taken from 2nd iteration src1 in the PCOEFF instruction 
 *               (bits 63:32, iteration 1 on ISP feedback bus) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_DEPTHSORT__FB_ABC_ORDER    BITFIELD(8, 8)
#define SGX540__EUR_CR_ISP_DEPTHSORT__FB_ABC_ORDER__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_DEPTHSORT__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_DEPTHSORT__RESERVED_1      BITFIELD(7, 1)
#define SGX540__EUR_CR_ISP_DEPTHSORT__RESERVED_1__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP_DEPTHSORT__DETERMINISTIC   
 *
 * @BRIEF        deterministic mode - depth test is forced to pass - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP_DEPTHSORT__DETERMINISTIC   BITFIELD(0, 0)
#define SGX540__EUR_CR_ISP_DEPTHSORT__DETERMINISTIC__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE_EMIT__RESERVED_8   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE_EMIT__RESERVED_8       BITFIELD(31, 8)
#define SGX540__EUR_CR_PIXELBE_EMIT__RESERVED_8__POS  8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE_EMIT__COUNT_ERROR3   
 *
 * @BRIEF        '1' indicates Pipe 3 - Count of zero received for non-pixel 
 *               data master - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE_EMIT__COUNT_ERROR3     BITFIELD(7, 7)
#define SGX540__EUR_CR_PIXELBE_EMIT__COUNT_ERROR3__POS 7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE_EMIT__COUNT_ERROR2   
 *
 * @BRIEF        '1' indicates Pipe 2 - Count of zero received for non-pixel 
 *               data master - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE_EMIT__COUNT_ERROR2     BITFIELD(6, 6)
#define SGX540__EUR_CR_PIXELBE_EMIT__COUNT_ERROR2__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE_EMIT__COUNT_ERROR1   
 *
 * @BRIEF        '1' indicates Pipe 1 - Count of zero received for non-pixel 
 *               data master - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE_EMIT__COUNT_ERROR1     BITFIELD(5, 5)
#define SGX540__EUR_CR_PIXELBE_EMIT__COUNT_ERROR1__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE_EMIT__COUNT_ERROR0   
 *
 * @BRIEF        '1' indicates Pipe 0 - Count of zero received for non-pixel 
 *               data master - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE_EMIT__COUNT_ERROR0     BITFIELD(4, 4)
#define SGX540__EUR_CR_PIXELBE_EMIT__COUNT_ERROR0__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE_EMIT__STATUS3   
 *
 * @BRIEF        Pipe 3 status - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE_EMIT__STATUS3          BITFIELD(3, 3)
#define SGX540__EUR_CR_PIXELBE_EMIT__STATUS3__POS     3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE_EMIT__STATUS2   
 *
 * @BRIEF        Pipe 2 status - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE_EMIT__STATUS2          BITFIELD(2, 2)
#define SGX540__EUR_CR_PIXELBE_EMIT__STATUS2__POS     2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE_EMIT__STATUS1   
 *
 * @BRIEF        Pipe 1 status - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE_EMIT__STATUS1          BITFIELD(1, 1)
#define SGX540__EUR_CR_PIXELBE_EMIT__STATUS1__POS     1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PIXELBE_EMIT__STATUS0   
 *
 * @BRIEF        Pipe 0 status - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PIXELBE_EMIT__STATUS0          BITFIELD(0, 0)
#define SGX540__EUR_CR_PIXELBE_EMIT__STATUS0__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP2_ZLS_EXTZ_RGN_BASE__RESERVED_28   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP2_ZLS_EXTZ_RGN_BASE__RESERVED_28 BITFIELD(31, 28)
#define SGX540__EUR_CR_ISP2_ZLS_EXTZ_RGN_BASE__RESERVED_28__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP2_ZLS_EXTZ_RGN_BASE__ADDR   
 *
 * @BRIEF        4GB Addressable, Dword aligned Base Address for Region 
 *               Header Reads - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP2_ZLS_EXTZ_RGN_BASE__ADDR   BITFIELD(27, 2)
#define SGX540__EUR_CR_ISP2_ZLS_EXTZ_RGN_BASE__ADDR__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ISP2_ZLS_EXTZ_RGN_BASE__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ISP2_ZLS_EXTZ_RGN_BASE__RESERVED_0 BITFIELD(1, 0)
#define SGX540__EUR_CR_ISP2_ZLS_EXTZ_RGN_BASE__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_PAGE_TABLE_BASE__RESERVED_28   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_PAGE_TABLE_BASE__RESERVED_28 BITFIELD(31, 28)
#define SGX540__EUR_CR_DPM_3D_PAGE_TABLE_BASE__RESERVED_28__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_PAGE_TABLE_BASE__ADDR   
 *
 * @BRIEF        256MB Addressable, 16Byte aligned Base Address for 3D 
 *               context page tables in the DPM module - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_PAGE_TABLE_BASE__ADDR   BITFIELD(27, 4)
#define SGX540__EUR_CR_DPM_3D_PAGE_TABLE_BASE__ADDR__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_PAGE_TABLE_BASE__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_PAGE_TABLE_BASE__RESERVED_0 BITFIELD(3, 0)
#define SGX540__EUR_CR_DPM_3D_PAGE_TABLE_BASE__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_FREE_LIST__RESERVED_30   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_FREE_LIST__RESERVED_30  BITFIELD(31, 30)
#define SGX540__EUR_CR_DPM_3D_FREE_LIST__RESERVED_30__POS 30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_FREE_LIST__TAIL   
 *
 * @BRIEF        This register defines the last page to be used for the 3D 
 *               page allocation, on a load 3D context. (The tail of the free 
 *               list.) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_FREE_LIST__TAIL         BITFIELD(29, 16)
#define SGX540__EUR_CR_DPM_3D_FREE_LIST__TAIL__POS    16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_FREE_LIST__RESERVED_14   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_FREE_LIST__RESERVED_14  BITFIELD(15, 14)
#define SGX540__EUR_CR_DPM_3D_FREE_LIST__RESERVED_14__POS 14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_FREE_LIST__HEAD   
 *
 * @BRIEF        This register defines the first page to be used for the 3D 
 *               page allocation, on a load 3D context. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_FREE_LIST__HEAD         BITFIELD(13, 0)
#define SGX540__EUR_CR_DPM_3D_FREE_LIST__HEAD__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_PDS_PAGE_THRESHOLD__RESERVED_14   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_PDS_PAGE_THRESHOLD__RESERVED_14 BITFIELD(31, 14)
#define SGX540__EUR_CR_DPM_PDS_PAGE_THRESHOLD__RESERVED_14__POS 14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_PDS_PAGE_THRESHOLD__VALUE   
 *
 * @BRIEF        Effective  Immediately - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_PDS_PAGE_THRESHOLD__VALUE  BITFIELD(13, 0)
#define SGX540__EUR_CR_DPM_PDS_PAGE_THRESHOLD__VALUE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC_PAGE_TABLE_BASE__RESERVED_28   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC_PAGE_TABLE_BASE__RESERVED_28 BITFIELD(31, 28)
#define SGX540__EUR_CR_DPM_TA_ALLOC_PAGE_TABLE_BASE__RESERVED_28__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC_PAGE_TABLE_BASE__ADDR   
 *
 * @BRIEF        256MB Addressable, 16Byte aligned Base Address for TE/MTE 
 *               context page tables in the DPM module. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC_PAGE_TABLE_BASE__ADDR BITFIELD(27, 4)
#define SGX540__EUR_CR_DPM_TA_ALLOC_PAGE_TABLE_BASE__ADDR__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC_PAGE_TABLE_BASE__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC_PAGE_TABLE_BASE__RESERVED_0 BITFIELD(3, 0)
#define SGX540__EUR_CR_DPM_TA_ALLOC_PAGE_TABLE_BASE__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST__RESERVED_30   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST__RESERVED_30 BITFIELD(31, 30)
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST__RESERVED_30__POS 30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST__TAIL   
 *
 * @BRIEF        This register defines the last page for the free list 
 *               manipulated during TE and MTE page allocation - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST__TAIL   BITFIELD(29, 16)
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST__TAIL__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST__RESERVED_14   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST__RESERVED_14 BITFIELD(15, 14)
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST__RESERVED_14__POS 14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST__HEAD   
 *
 * @BRIEF        This register defines the start page for the free list 
 *               manipulated during TE and MTE page allocation - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST__HEAD   BITFIELD(13, 0)
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST__HEAD__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_PAGE_THRESHOLD__RESERVED_14   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_PAGE_THRESHOLD__RESERVED_14 BITFIELD(31, 14)
#define SGX540__EUR_CR_DPM_TA_PAGE_THRESHOLD__RESERVED_14__POS 14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_PAGE_THRESHOLD__VALUE   
 *
 * @BRIEF        Effective on Loading the TA Page Table Context, the maximum 
 *               number of pages to allocate before signalling almost out of 
 *               memory. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_PAGE_THRESHOLD__VALUE   BITFIELD(13, 0)
#define SGX540__EUR_CR_DPM_TA_PAGE_THRESHOLD__VALUE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_ZLS_PAGE_THRESHOLD__RESERVED_14   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_ZLS_PAGE_THRESHOLD__RESERVED_14 BITFIELD(31, 14)
#define SGX540__EUR_CR_DPM_ZLS_PAGE_THRESHOLD__RESERVED_14__POS 14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_ZLS_PAGE_THRESHOLD__VALUE   
 *
 * @BRIEF        Effective on Loading the TA Page Table Context, the maximum 
 *               number of pages to allocate before signalling out of memory 
 *               to the host. The ZLS threshold should be set such that 
 *               suffient pages are left available to the ZLS module when it 
 *               performs its dynamic memory allocation upon a partial 
 *               render. The number of pages spare should be set to be larger 
 *               than the maximum pages for 1 macro tile of Z data. For 
 *               example: If 4 pages are required for 1 macro tile of Z, and 
 *               there are 50 pages in the system, then this threshold should 
 *               be set to 50 - 4 = 46. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_ZLS_PAGE_THRESHOLD__VALUE  BITFIELD(13, 0)
#define SGX540__EUR_CR_DPM_ZLS_PAGE_THRESHOLD__VALUE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_GLOBAL_LIST__RESERVED_17   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_GLOBAL_LIST__RESERVED_17 BITFIELD(31, 17)
#define SGX540__EUR_CR_DPM_TA_GLOBAL_LIST__RESERVED_17__POS 17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_GLOBAL_LIST__POLICY   
 *
 * @BRIEF        Effective on Loading the TA Page Table Context, a value of 1 
 *               in this field enables the global list size limit - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_GLOBAL_LIST__POLICY     BITFIELD(16, 16)
#define SGX540__EUR_CR_DPM_TA_GLOBAL_LIST__POLICY__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_GLOBAL_LIST__RESERVED_14   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_GLOBAL_LIST__RESERVED_14 BITFIELD(15, 14)
#define SGX540__EUR_CR_DPM_TA_GLOBAL_LIST__RESERVED_14__POS 14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_GLOBAL_LIST__SIZE   
 *
 * @BRIEF        Effective on Loading the TA Page Table Context, the maximum 
 *               number of pages to allocate to the global list before 
 *               signalling global list out of memory. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_GLOBAL_LIST__SIZE       BITFIELD(13, 0)
#define SGX540__EUR_CR_DPM_TA_GLOBAL_LIST__SIZE__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_STATE_TABLE_BASE__RESERVED_28   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_STATE_TABLE_BASE__RESERVED_28 BITFIELD(31, 28)
#define SGX540__EUR_CR_DPM_STATE_TABLE_BASE__RESERVED_28__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_STATE_TABLE_BASE__ADDR   
 *
 * @BRIEF        256MB Addressable, 16Byte aligned Base Address for State 
 *               Table in the DPM module. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_STATE_TABLE_BASE__ADDR     BITFIELD(27, 4)
#define SGX540__EUR_CR_DPM_STATE_TABLE_BASE__ADDR__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_STATE_TABLE_BASE__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_STATE_TABLE_BASE__RESERVED_0 BITFIELD(3, 0)
#define SGX540__EUR_CR_DPM_STATE_TABLE_BASE__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_STATE_CONTEXT_ID__RESERVED_3   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_STATE_CONTEXT_ID__RESERVED_3 BITFIELD(31, 3)
#define SGX540__EUR_CR_DPM_STATE_CONTEXT_ID__RESERVED_3__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_STATE_CONTEXT_ID__ALLOC   
 *
 * @BRIEF        Effective immediately, this field defines the which of the 
 *               internal contexts is to be used for allocating memory - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_STATE_CONTEXT_ID__ALLOC    BITFIELD(2, 2)
#define SGX540__EUR_CR_DPM_STATE_CONTEXT_ID__ALLOC__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_STATE_CONTEXT_ID__DALLOC   
 *
 * @BRIEF        Effective immediately, this field defines the which of the 
 *               internal contexts is to be used for de-allocating memory - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_STATE_CONTEXT_ID__DALLOC   BITFIELD(1, 1)
#define SGX540__EUR_CR_DPM_STATE_CONTEXT_ID__DALLOC__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_STATE_CONTEXT_ID__LS   
 *
 * @BRIEF        Effective immediately, this field defines which of the 
 *               internal contexts is to be loaded or stored from/to memory - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_STATE_CONTEXT_ID__LS       BITFIELD(0, 0)
#define SGX540__EUR_CR_DPM_STATE_CONTEXT_ID__LS__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_CONTROL_TABLE_BASE__RESERVED_28   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_CONTROL_TABLE_BASE__RESERVED_28 BITFIELD(31, 28)
#define SGX540__EUR_CR_DPM_CONTROL_TABLE_BASE__RESERVED_28__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_CONTROL_TABLE_BASE__ADDR   
 *
 * @BRIEF        256MB Addressable, 16Byte aligned Base Address for the 
 *               Control Table in the DPM module. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_CONTROL_TABLE_BASE__ADDR   BITFIELD(27, 4)
#define SGX540__EUR_CR_DPM_CONTROL_TABLE_BASE__ADDR__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_CONTROL_TABLE_BASE__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_CONTROL_TABLE_BASE__RESERVED_0 BITFIELD(3, 0)
#define SGX540__EUR_CR_DPM_CONTROL_TABLE_BASE__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_START_OF_CONTEXT_PAGES_ALLOCATED__RESERVED_30   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_START_OF_CONTEXT_PAGES_ALLOCATED__RESERVED_30 BITFIELD(31, 30)
#define SGX540__EUR_CR_DPM_START_OF_CONTEXT_PAGES_ALLOCATED__RESERVED_30__POS 30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_START_OF_CONTEXT_PAGES_ALLOCATED__GLOBAL   
 *
 * @BRIEF        Effective on the loading of the TA Page Table Context, this 
 *               register defines the number of the pages which are currently 
 *               allocated to the context global list. The value for this 
 *               register is read from the matching status register, on a 
 *               context store, and loaded on a context load. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_START_OF_CONTEXT_PAGES_ALLOCATED__GLOBAL BITFIELD(29, 16)
#define SGX540__EUR_CR_DPM_START_OF_CONTEXT_PAGES_ALLOCATED__GLOBAL__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_START_OF_CONTEXT_PAGES_ALLOCATED__RESERVED_14   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_START_OF_CONTEXT_PAGES_ALLOCATED__RESERVED_14 BITFIELD(15, 14)
#define SGX540__EUR_CR_DPM_START_OF_CONTEXT_PAGES_ALLOCATED__RESERVED_14__POS 14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_START_OF_CONTEXT_PAGES_ALLOCATED__LOCAL   
 *
 * @BRIEF        Effective on the loading of the TA Page Table Context, this 
 *               register defines the number of the pages which are currently 
 *               allocated to the context. The value for this register is 
 *               read from the matching status register, on a context store, 
 *               and loaded on a context load. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_START_OF_CONTEXT_PAGES_ALLOCATED__LOCAL BITFIELD(13, 0)
#define SGX540__EUR_CR_DPM_START_OF_CONTEXT_PAGES_ALLOCATED__LOCAL__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_DEALLOCATE__RESERVED_2   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_DEALLOCATE__RESERVED_2  BITFIELD(31, 2)
#define SGX540__EUR_CR_DPM_3D_DEALLOCATE__RESERVED_2__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_DEALLOCATE__ENABLE   
 *
 * @BRIEF        Effective on start render, this field indicates that the 
 *               hardware should de-allocate memory. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_DEALLOCATE__ENABLE      BITFIELD(1, 1)
#define SGX540__EUR_CR_DPM_3D_DEALLOCATE__ENABLE__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_DEALLOCATE__GLOBAL   
 *
 * @BRIEF        Effective on start render, this field indicates that the 
 *               hardware should de-allocate the memory associated with the 
 *               global list if it is set. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_DEALLOCATE__GLOBAL      BITFIELD(0, 0)
#define SGX540__EUR_CR_DPM_3D_DEALLOCATE__GLOBAL__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_ALLOC__RESERVED_18   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_ALLOC__RESERVED_18         BITFIELD(31, 18)
#define SGX540__EUR_CR_DPM_ALLOC__RESERVED_18__POS    18

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_ALLOC__PAGE_OUTOFMEMORY   
 *
 * @BRIEF        Out of memory. Indicates that the action is pending due to 
 *               an out of memory condition. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_ALLOC__PAGE_OUTOFMEMORY    BITFIELD(17, 17)
#define SGX540__EUR_CR_DPM_ALLOC__PAGE_OUTOFMEMORY__POS 17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_ALLOC__PAGE_VALID   
 *
 * @BRIEF        On a read a value of 1 in this field indicates that the page 
 *               has been allocated, and that the page is valid. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_ALLOC__PAGE_VALID          BITFIELD(16, 16)
#define SGX540__EUR_CR_DPM_ALLOC__PAGE_VALID__POS     16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_ALLOC__RESERVED_14   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_ALLOC__RESERVED_14         BITFIELD(15, 14)
#define SGX540__EUR_CR_DPM_ALLOC__RESERVED_14__POS    14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_ALLOC__PAGE   
 *
 * @BRIEF        A read of this register returns the page allocated to the 
 *               host, when valid. If it is not valid the return data is 
 *               undefined. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_ALLOC__PAGE                BITFIELD(13, 0)
#define SGX540__EUR_CR_DPM_ALLOC__PAGE__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_DALLOC__RESERVED_17   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_DALLOC__RESERVED_17        BITFIELD(31, 17)
#define SGX540__EUR_CR_DPM_DALLOC__RESERVED_17__POS   17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_DALLOC__PAGE_FREE   
 *
 * @BRIEF        A read indicates whether the page has been freed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_DALLOC__PAGE_FREE          BITFIELD(16, 16)
#define SGX540__EUR_CR_DPM_DALLOC__PAGE_FREE__POS     16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_DALLOC__RESERVED_14   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_DALLOC__RESERVED_14        BITFIELD(15, 14)
#define SGX540__EUR_CR_DPM_DALLOC__RESERVED_14__POS   14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_DALLOC__PAGE   
 *
 * @BRIEF        The page to be de-allocated by the hardware - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_DALLOC__PAGE               BITFIELD(13, 0)
#define SGX540__EUR_CR_DPM_DALLOC__PAGE__POS          0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC__RESERVED_30   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC__RESERVED_30      BITFIELD(31, 30)
#define SGX540__EUR_CR_DPM_TA_ALLOC__RESERVED_30__POS 30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC__FREE_LIST_PREVIOUS   
 *
 * @BRIEF        Effective on Load TA Page Table Context: TA Alloc Free List 
 *               Previous Page. The DPM maintains the previous and current 
 *               free list pointers. On a context load this value must be 
 *               loaded in. For the initial case it should be set to the 
 *               penultimate page after initialisation (normally TAIL - 1). - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC__FREE_LIST_PREVIOUS BITFIELD(29, 16)
#define SGX540__EUR_CR_DPM_TA_ALLOC__FREE_LIST_PREVIOUS__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC__RESERVED_0       BITFIELD(15, 0)
#define SGX540__EUR_CR_DPM_TA_ALLOC__RESERVED_0__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D__RESERVED_30   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D__RESERVED_30            BITFIELD(31, 30)
#define SGX540__EUR_CR_DPM_3D__RESERVED_30__POS       30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D__FREE_LIST_PREVIOUS   
 *
 * @BRIEF        Effective on Load 3D Page Table Context: 3D Free List 
 *               Previous Page. The DPM maintains the previous and current 
 *               free list pointers. On a context load this value must be 
 *               loaded in. For the initial case it should be set to the 
 *               penultimate page after initialisation (normally TAIL - 1). - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D__FREE_LIST_PREVIOUS     BITFIELD(29, 16)
#define SGX540__EUR_CR_DPM_3D__FREE_LIST_PREVIOUS__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D__RESERVED_0             BITFIELD(15, 0)
#define SGX540__EUR_CR_DPM_3D__RESERVED_0__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_PARTIAL_RENDER__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_PARTIAL_RENDER__RESERVED_1 BITFIELD(31, 1)
#define SGX540__EUR_CR_DPM_PARTIAL_RENDER__RESERVED_1__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_PARTIAL_RENDER__ENABLE   
 *
 * @BRIEF        Once The TA DPM has run out of memory, and the driver has 
 *               scheduled an abort, there must be a partial render performed 
 *               on the context in order to free memory. This bit is set 
 *               before the partial render is started. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_PARTIAL_RENDER__ENABLE     BITFIELD(0, 0)
#define SGX540__EUR_CR_DPM_PARTIAL_RENDER__ENABLE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_LSS_PARTIAL_CONTEXT__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_LSS_PARTIAL_CONTEXT__RESERVED_1 BITFIELD(31, 1)
#define SGX540__EUR_CR_DPM_LSS_PARTIAL_CONTEXT__RESERVED_1__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_LSS_PARTIAL_CONTEXT__OPERATION   
 *
 * @BRIEF        When set indicates that on a Context state table load, reset 
 *               or store only the best macro tile, rather than the full 
 *               scene. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_LSS_PARTIAL_CONTEXT__OPERATION BITFIELD(0, 0)
#define SGX540__EUR_CR_DPM_LSS_PARTIAL_CONTEXT__OPERATION__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_START_OF_3D_CONTEXT_PAGES_ALLOCATED__RESERVED_30   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_START_OF_3D_CONTEXT_PAGES_ALLOCATED__RESERVED_30 BITFIELD(31, 30)
#define SGX540__EUR_CR_DPM_START_OF_3D_CONTEXT_PAGES_ALLOCATED__RESERVED_30__POS 30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_START_OF_3D_CONTEXT_PAGES_ALLOCATED__GLOBAL   
 *
 * @BRIEF        Effective on the loading of the 3D Page Table Context, this 
 *               register defines the number of the pages which are currently 
 *               allocated to the context global list. The value for this 
 *               register is read from the matching status register, on a 
 *               context store, and loaded on a context load. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_START_OF_3D_CONTEXT_PAGES_ALLOCATED__GLOBAL BITFIELD(29, 16)
#define SGX540__EUR_CR_DPM_START_OF_3D_CONTEXT_PAGES_ALLOCATED__GLOBAL__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_START_OF_3D_CONTEXT_PAGES_ALLOCATED__RESERVED_14   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_START_OF_3D_CONTEXT_PAGES_ALLOCATED__RESERVED_14 BITFIELD(15, 14)
#define SGX540__EUR_CR_DPM_START_OF_3D_CONTEXT_PAGES_ALLOCATED__RESERVED_14__POS 14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_START_OF_3D_CONTEXT_PAGES_ALLOCATED__LOCAL   
 *
 * @BRIEF        Effective on the loading of the 3D Page Table Context, this 
 *               register defines the number of the pages which are currently 
 *               allocated to the context. The value for this register is 
 *               read from the matching status register, on a context store, 
 *               and loaded on a context load. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_START_OF_3D_CONTEXT_PAGES_ALLOCATED__LOCAL BITFIELD(13, 0)
#define SGX540__EUR_CR_DPM_START_OF_3D_CONTEXT_PAGES_ALLOCATED__LOCAL__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TASK_3D_FREE__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TASK_3D_FREE__RESERVED_1   BITFIELD(31, 1)
#define SGX540__EUR_CR_DPM_TASK_3D_FREE__RESERVED_1__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TASK_3D_FREE__LOAD   
 *
 * @BRIEF        Causes the 3D free list context to be loaded from the 
 *               relevant configuration registers - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TASK_3D_FREE__LOAD         BITFIELD(0, 0)
#define SGX540__EUR_CR_DPM_TASK_3D_FREE__LOAD__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TASK_TA_FREE__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TASK_TA_FREE__RESERVED_1   BITFIELD(31, 1)
#define SGX540__EUR_CR_DPM_TASK_TA_FREE__RESERVED_1__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TASK_TA_FREE__LOAD   
 *
 * @BRIEF        Causes the TA free list context to be loaded from the 
 *               relevant configuration registers - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TASK_TA_FREE__LOAD         BITFIELD(0, 0)
#define SGX540__EUR_CR_DPM_TASK_TA_FREE__LOAD__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TASK_STATE__RESERVED_3   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TASK_STATE__RESERVED_3     BITFIELD(31, 3)
#define SGX540__EUR_CR_DPM_TASK_STATE__RESERVED_3__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TASK_STATE__LOAD   
 *
 * @BRIEF        Causes the state for the DPM page table to be read from 
 *               memory. Only the selected context ID is loaded. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TASK_STATE__LOAD           BITFIELD(2, 2)
#define SGX540__EUR_CR_DPM_TASK_STATE__LOAD__POS      2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TASK_STATE__CLEAR   
 *
 * @BRIEF        Causes the state for the DPM page table to be cleared. Only 
 *               the selected context ID is cleared. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TASK_STATE__CLEAR          BITFIELD(1, 1)
#define SGX540__EUR_CR_DPM_TASK_STATE__CLEAR__POS     1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TASK_STATE__STORE   
 *
 * @BRIEF        Causes the state for the DPM page table (non-destructive - 
 *               the state is not cleared as it is written) to be written to 
 *               memory. Only the selected context ID is written out. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TASK_STATE__STORE          BITFIELD(0, 0)
#define SGX540__EUR_CR_DPM_TASK_STATE__STORE__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TASK_CONTROL__RESERVED_3   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TASK_CONTROL__RESERVED_3   BITFIELD(31, 3)
#define SGX540__EUR_CR_DPM_TASK_CONTROL__RESERVED_3__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TASK_CONTROL__LOAD   
 *
 * @BRIEF        Causes the state for the control page table to be read from 
 *               memory. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TASK_CONTROL__LOAD         BITFIELD(2, 2)
#define SGX540__EUR_CR_DPM_TASK_CONTROL__LOAD__POS    2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TASK_CONTROL__CLEAR   
 *
 * @BRIEF        Causes the state for the control page table to be cleared. - 
 *               (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TASK_CONTROL__CLEAR        BITFIELD(1, 1)
#define SGX540__EUR_CR_DPM_TASK_CONTROL__CLEAR__POS   1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TASK_CONTROL__STORE   
 *
 * @BRIEF        Causes the state for the control table (non-destructive - 
 *               the control is not cleared as it is written) to be written 
 *               to memory. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TASK_CONTROL__STORE        BITFIELD(0, 0)
#define SGX540__EUR_CR_DPM_TASK_CONTROL__STORE__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_OUTOFMEM__RESERVED_3   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_OUTOFMEM__RESERVED_3       BITFIELD(31, 3)
#define SGX540__EUR_CR_DPM_OUTOFMEM__RESERVED_3__POS  3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_OUTOFMEM__ABORTALL   
 *
 * @BRIEF        Causes the hardware to initiate the abort cycle, resulting 
 *               in an abort complete, and requiring a subsequent full 
 *               render, in the order of busiest to least busy macro tile. 
 *               The region headers need to be re-ordered by the driver to 
 *               guarantee this condition - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_OUTOFMEM__ABORTALL         BITFIELD(2, 2)
#define SGX540__EUR_CR_DPM_OUTOFMEM__ABORTALL__POS    2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_OUTOFMEM__ABORT   
 *
 * @BRIEF        Causes the hardware to initiate the abort cycle, resulting 
 *               in an abort complete, and requiring a subsequent partial 
 *               render - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_OUTOFMEM__ABORT            BITFIELD(1, 1)
#define SGX540__EUR_CR_DPM_OUTOFMEM__ABORT__POS       1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_OUTOFMEM__RESTART   
 *
 * @BRIEF        Causes the parameter management to resume trying to allocate 
 *               pages - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_OUTOFMEM__RESTART          BITFIELD(0, 0)
#define SGX540__EUR_CR_DPM_OUTOFMEM__RESTART__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_FREE_CONTEXT__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_FREE_CONTEXT__RESERVED_1   BITFIELD(31, 1)
#define SGX540__EUR_CR_DPM_FREE_CONTEXT__RESERVED_1__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_FREE_CONTEXT__NOW   
 *
 * @BRIEF        Causes the hardware to free the memory associated with the 
 *               current TA context - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_FREE_CONTEXT__NOW          BITFIELD(0, 0)
#define SGX540__EUR_CR_DPM_FREE_CONTEXT__NOW__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_TIMEOUT__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_TIMEOUT__RESERVED_1     BITFIELD(31, 1)
#define SGX540__EUR_CR_DPM_3D_TIMEOUT__RESERVED_1__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_TIMEOUT__NOW   
 *
 * @BRIEF        Causes the hardware to free the memory associated with the 
 *               current 3D context, and if a render is in progress, treat 
 *               this as if it were complete. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_TIMEOUT__NOW            BITFIELD(0, 0)
#define SGX540__EUR_CR_DPM_3D_TIMEOUT__NOW__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_EVM__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_EVM__RESERVED_1         BITFIELD(31, 1)
#define SGX540__EUR_CR_DPM_TA_EVM__RESERVED_1__POS    1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_EVM__INIT   
 *
 * @BRIEF        Initialise the TA linked list (between start and end only), 
 *               to an area of linear memory - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_EVM__INIT               BITFIELD(0, 0)
#define SGX540__EUR_CR_DPM_TA_EVM__INIT__POS          0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS1__RESERVED_30   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS1__RESERVED_30 BITFIELD(31, 30)
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS1__RESERVED_30__POS 30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS1__TAIL   
 *
 * @BRIEF        The current tail of the free list for the TA allocation 
 *               context - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS1__TAIL BITFIELD(29, 16)
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS1__TAIL__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS1__RESERVED_14   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS1__RESERVED_14 BITFIELD(15, 14)
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS1__RESERVED_14__POS 14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS1__HEAD   
 *
 * @BRIEF        The current head of the free list for the TA allocation 
 *               context - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS1__HEAD BITFIELD(13, 0)
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS1__HEAD__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS1__RESERVED_30   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS1__RESERVED_30 BITFIELD(31, 30)
#define SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS1__RESERVED_30__POS 30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS1__TAIL   
 *
 * @BRIEF        The current tail of the free list for the 3D context - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS1__TAIL BITFIELD(29, 16)
#define SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS1__TAIL__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS1__RESERVED_14   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS1__RESERVED_14 BITFIELD(15, 14)
#define SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS1__RESERVED_14__POS 14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS1__HEAD   
 *
 * @BRIEF        The current head of the free list for the 3D context - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS1__HEAD BITFIELD(13, 0)
#define SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS1__HEAD__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS2__RESERVED_14   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS2__RESERVED_14 BITFIELD(31, 14)
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS2__RESERVED_14__POS 14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS2__PREVIOUS   
 *
 * @BRIEF        The element before the tail of the free list for the TA 
 *               allocation context - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS2__PREVIOUS BITFIELD(13, 0)
#define SGX540__EUR_CR_DPM_TA_ALLOC_FREE_LIST_STATUS2__PREVIOUS__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS2__RESERVED_14   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS2__RESERVED_14 BITFIELD(31, 14)
#define SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS2__RESERVED_14__POS 14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS2__PREVIOUS   
 *
 * @BRIEF        The element before the tail of the free list for the 3D 
 *               context - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS2__PREVIOUS BITFIELD(13, 0)
#define SGX540__EUR_CR_DPM_3D_FREE_LIST_STATUS2__PREVIOUS__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_ABORT_STATUS_MTILE__RESERVED_5   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_ABORT_STATUS_MTILE__RESERVED_5 BITFIELD(31, 5)
#define SGX540__EUR_CR_DPM_ABORT_STATUS_MTILE__RESERVED_5__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_ABORT_STATUS_MTILE__GLOBAL   
 *
 * @BRIEF        Indicates that the whole scene must be aborted - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_ABORT_STATUS_MTILE__GLOBAL BITFIELD(4, 4)
#define SGX540__EUR_CR_DPM_ABORT_STATUS_MTILE__GLOBAL__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_ABORT_STATUS_MTILE__INDEX   
 *
 * @BRIEF        The macro tile which will be aborted by the hardware - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_ABORT_STATUS_MTILE__INDEX  BITFIELD(3, 0)
#define SGX540__EUR_CR_DPM_ABORT_STATUS_MTILE__INDEX__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_PAGE_STATUS__RESERVED_30   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_PAGE_STATUS__RESERVED_30   BITFIELD(31, 30)
#define SGX540__EUR_CR_DPM_PAGE_STATUS__RESERVED_30__POS 30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_PAGE_STATUS__TA   
 *
 * @BRIEF        The number of pages allocated by the hardware, for the TA 
 *               context - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_PAGE_STATUS__TA            BITFIELD(29, 16)
#define SGX540__EUR_CR_DPM_PAGE_STATUS__TA__POS       16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_PAGE_STATUS__RESERVED_14   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_PAGE_STATUS__RESERVED_14   BITFIELD(15, 14)
#define SGX540__EUR_CR_DPM_PAGE_STATUS__RESERVED_14__POS 14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_PAGE_STATUS__TOTAL   
 *
 * @BRIEF        The total number of pages allocated by the hardware, across 
 *               all contexts - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_PAGE_STATUS__TOTAL         BITFIELD(13, 0)
#define SGX540__EUR_CR_DPM_PAGE_STATUS__TOTAL__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_PAGE__RESERVED_14   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_PAGE__RESERVED_14          BITFIELD(31, 14)
#define SGX540__EUR_CR_DPM_PAGE__RESERVED_14__POS     14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_PAGE__STATUS_3D   
 *
 * @BRIEF        The number of pages allocated by the hardware, for the 3D 
 *               context - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_PAGE__STATUS_3D            BITFIELD(13, 0)
#define SGX540__EUR_CR_DPM_PAGE__STATUS_3D__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_GLOBAL_PAGE_STATUS__RESERVED_30   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_GLOBAL_PAGE_STATUS__RESERVED_30 BITFIELD(31, 30)
#define SGX540__EUR_CR_DPM_GLOBAL_PAGE_STATUS__RESERVED_30__POS 30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_GLOBAL_PAGE_STATUS__TA   
 *
 * @BRIEF        The number of global pages allocated by the hardware, for 
 *               the TA context - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_GLOBAL_PAGE_STATUS__TA     BITFIELD(29, 16)
#define SGX540__EUR_CR_DPM_GLOBAL_PAGE_STATUS__TA__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_GLOBAL_PAGE_STATUS__RESERVED_14   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_GLOBAL_PAGE_STATUS__RESERVED_14 BITFIELD(15, 14)
#define SGX540__EUR_CR_DPM_GLOBAL_PAGE_STATUS__RESERVED_14__POS 14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_GLOBAL_PAGE_STATUS__TOTAL   
 *
 * @BRIEF        The total number of global pages allocated by the hardware, 
 *               across all contexts - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_GLOBAL_PAGE_STATUS__TOTAL  BITFIELD(13, 0)
#define SGX540__EUR_CR_DPM_GLOBAL_PAGE_STATUS__TOTAL__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_GLOBAL_PAGE__RESERVED_14   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_GLOBAL_PAGE__RESERVED_14   BITFIELD(31, 14)
#define SGX540__EUR_CR_DPM_GLOBAL_PAGE__RESERVED_14__POS 14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_GLOBAL_PAGE__STATUS_3D   
 *
 * @BRIEF        The total number of global pages allocated by the hardware, 
 *               across the 3D contexts - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_GLOBAL_PAGE__STATUS_3D     BITFIELD(13, 0)
#define SGX540__EUR_CR_DPM_GLOBAL_PAGE__STATUS_3D__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_REQUESTING__RESERVED_2   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_REQUESTING__RESERVED_2     BITFIELD(31, 2)
#define SGX540__EUR_CR_DPM_REQUESTING__RESERVED_2__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_REQUESTING__SOURCE   
 *
 * @BRIEF        The device that is requesting memory; Bit 0 is the TA 
 *               (Control Stream Request), Bit 1 is the TA (Vertex Data 
 *               Stream Request) - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_REQUESTING__SOURCE         BITFIELD(1, 0)
#define SGX540__EUR_CR_DPM_REQUESTING__SOURCE__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_RGN_HDR_PARSER__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_RGN_HDR_PARSER__RESERVED_1 BITFIELD(31, 1)
#define SGX540__EUR_CR_DPM_RGN_HDR_PARSER__RESERVED_1__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DPM_RGN_HDR_PARSER__IDLE   
 *
 * @BRIEF        The DPM Region Header IDLE indication - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DPM_RGN_HDR_PARSER__IDLE       BITFIELD(0, 0)
#define SGX540__EUR_CR_DPM_RGN_HDR_PARSER__IDLE__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TSP_CONFIG__RESERVED_3   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TSP_CONFIG__RESERVED_3         BITFIELD(31, 3)
#define SGX540__EUR_CR_TSP_CONFIG__RESERVED_3__POS    3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TSP_CONFIG__CEMEDGE_DONTFILTER   
 *
 * @BRIEF        Disable filtering over edges/corners for CEM - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TSP_CONFIG__CEMEDGE_DONTFILTER BITFIELD(2, 2)
#define SGX540__EUR_CR_TSP_CONFIG__CEMEDGE_DONTFILTER__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TSP_CONFIG__CEMGRAD_DONTNEGATE   
 *
 * @BRIEF        Disable negation for user supplied gradients for cem swap 
 *               i.e. will only swap dudx etc not negate - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TSP_CONFIG__CEMGRAD_DONTNEGATE BITFIELD(1, 1)
#define SGX540__EUR_CR_TSP_CONFIG__CEMGRAD_DONTNEGATE__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TSP_CONFIG__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TSP_CONFIG__RESERVED_0         BITFIELD(0, 0)
#define SGX540__EUR_CR_TSP_CONFIG__RESERVED_0__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CACHE_CTRL__RESERVED_30   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CACHE_CTRL__RESERVED_30        BITFIELD(31, 30)
#define SGX540__EUR_CR_CACHE_CTRL__RESERVED_30__POS   30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CACHE_CTRL__L0P0OFF   
 *
 * @BRIEF        Cache L0 Pipe1 Bypass - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CACHE_CTRL__L0P0OFF            BITFIELD(29, 29)
#define SGX540__EUR_CR_CACHE_CTRL__L0P0OFF__POS       29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CACHE_CTRL__INVALIDATE   
 *
 * @BRIEF        Cache Invalidate - To invalidate the cache, ie remove all 
 *               contents from the cache, then setting this bit to 1 will 
 *               start an invalidation cycle within the cache. Immediately 
 *               the cache will not except anymore read request until the 
 *               invalidation cycle completes. All requests pending in the 
 *               cache (L0/L1/L2) will be completed before the cache 
 *               completes its invalidation cycle. On completion of the 
 *               invalidation cycle an interrupt will occur, if enabled, and 
 *               the MADD_CACHE_INVALCOMP bit will be set and the cache will 
 *               return to its normal operation - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CACHE_CTRL__INVALIDATE         BITFIELD(28, 28)
#define SGX540__EUR_CR_CACHE_CTRL__INVALIDATE__POS    28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CACHE_CTRL__RESERVED_27   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CACHE_CTRL__RESERVED_27        BITFIELD(27, 27)
#define SGX540__EUR_CR_CACHE_CTRL__RESERVED_27__POS   27

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CACHE_CTRL__L1P1OFF   
 *
 * @BRIEF        Cache Off L1 Pipe1 - When set to 1 turns off the L1 cache 
 *               associated with Pipe 1. Read request to the L1 cache will be 
 *               forwarded directly to the L2 cache. The cache must be 
 *               invalidated after the bit is set to 0 (Cache Level On) - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CACHE_CTRL__L1P1OFF            BITFIELD(26, 26)
#define SGX540__EUR_CR_CACHE_CTRL__L1P1OFF__POS       26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CACHE_CTRL__L1P0OFF   
 *
 * @BRIEF        Cache Off L1 Pipe0 - When set to 1 turns off the L1 cache 
 *               associated with Pipe 0. Read request to the L1 cache will be 
 *               forwarded directly to the L2 cache. The cache must be 
 *               invalidated after the bit is set to 0 (Cache Level On) - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CACHE_CTRL__L1P0OFF            BITFIELD(25, 25)
#define SGX540__EUR_CR_CACHE_CTRL__L1P0OFF__POS       25

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CACHE_CTRL__RESERVED_16   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CACHE_CTRL__RESERVED_16        BITFIELD(24, 16)
#define SGX540__EUR_CR_CACHE_CTRL__RESERVED_16__POS   16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CACHE_CTRL__PARTDM3   
 *
 * @BRIEF        Cache Partition Mask for DM3 - defines which cache lines are 
 *               used for Data Master type 3. Each bit represents one cache 
 *               line, where there are 4 cache lines in the cache. Each cache 
 *               line contains 8 possible address tags which are compared 
 *               against the incoming address to determine if the data 
 *               requested is in the cache or not. If all bits are set then 
 *               there are 4 x 8 possible address tags i.e. DM3 read request 
 *               will try and match against all the cache ram contents. 
 *               Setting a bit to 0, will exclude that cache line from being 
 *               compared against the incoming request address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CACHE_CTRL__PARTDM3            BITFIELD(15, 12)
#define SGX540__EUR_CR_CACHE_CTRL__PARTDM3__POS       12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CACHE_CTRL__PARTDM2   
 *
 * @BRIEF        Cache Partition Mask for DM2 - Refer to PARTDM3, but with 
 *               respect to DM2 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CACHE_CTRL__PARTDM2            BITFIELD(11, 8)
#define SGX540__EUR_CR_CACHE_CTRL__PARTDM2__POS       8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CACHE_CTRL__PARTDM1   
 *
 * @BRIEF        Cache Partition Mask for DM1 - Refer to PARTDM3, but with 
 *               respect to DM1 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CACHE_CTRL__PARTDM1            BITFIELD(7, 4)
#define SGX540__EUR_CR_CACHE_CTRL__PARTDM1__POS       4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_CACHE_CTRL__PARTDM0   
 *
 * @BRIEF        Cache Partition Mask for DM0 - Refer to PARTDM3, but with 
 *               respect to DM0 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_CACHE_CTRL__PARTDM0            BITFIELD(3, 0)
#define SGX540__EUR_CR_CACHE_CTRL__PARTDM0__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TF_SIG00__SIGNATURE   
 *
 * @BRIEF        Signature of data output from TF to USE0. A signature is an 
 *               accumulative LFSR (Linear Feedback Shift Register) of the 
 *               valid pipeline data using an XOR structure. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TF_SIG00__SIGNATURE            BITFIELD(31, 0)
#define SGX540__EUR_CR_TF_SIG00__SIGNATURE__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TF_SIG01__SIGNATURE   
 *
 * @BRIEF        Signature of data output from TF to USE1. A signature is an 
 *               accumulative LFSR (Linear Feedback Shift Register) of the 
 *               valid pipeline data using an XOR structure. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TF_SIG01__SIGNATURE            BITFIELD(31, 0)
#define SGX540__EUR_CR_TF_SIG01__SIGNATURE__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TF_SIG02__SIGNATURE   
 *
 * @BRIEF        Signature of data output from TF to USE2. A signature is an 
 *               accumulative LFSR (Linear Feedback Shift Register) of the 
 *               valid pipeline data using an XOR structure. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TF_SIG02__SIGNATURE            BITFIELD(31, 0)
#define SGX540__EUR_CR_TF_SIG02__SIGNATURE__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_TF_SIG03__SIGNATURE   
 *
 * @BRIEF        Signature of data output from TF to USE3. A signature is an 
 *               accumulative LFSR (Linear Feedback Shift Register) of the 
 *               valid pipeline data using an XOR structure. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_TF_SIG03__SIGNATURE            BITFIELD(31, 0)
#define SGX540__EUR_CR_TF_SIG03__SIGNATURE__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ITR_TAG0__SIGNATURE   
 *
 * @BRIEF        Signature of data output from ITR to TAG0. A signature is an 
 *               accumulative LFSR (Linear Feedback Shift Register) of the 
 *               valid pipeline data using an XOR structure. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ITR_TAG0__SIGNATURE            BITFIELD(31, 0)
#define SGX540__EUR_CR_ITR_TAG0__SIGNATURE__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ITR_TAG1__SIGNATURE   
 *
 * @BRIEF        Signature of data output from ITR to TAG1. A signature is an 
 *               accumulative LFSR (Linear Feedback Shift Register) of the 
 *               valid pipeline data using an XOR structure. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ITR_TAG1__SIGNATURE            BITFIELD(31, 0)
#define SGX540__EUR_CR_ITR_TAG1__SIGNATURE__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ITR_USE0__SIGNATURE   
 *
 * @BRIEF        Signature of data output from ITR to USE0. A signature is an 
 *               accumulative LFSR (Linear Feedback Shift Register) of the 
 *               valid pipeline data using an XOR structure. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ITR_USE0__SIGNATURE            BITFIELD(31, 0)
#define SGX540__EUR_CR_ITR_USE0__SIGNATURE__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ITR_USE1__SIGNATURE   
 *
 * @BRIEF        Signature of data output from ITR to USE1. A signature is an 
 *               accumulative LFSR (Linear Feedback Shift Register) of the 
 *               valid pipeline data using an XOR structure. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ITR_USE1__SIGNATURE            BITFIELD(31, 0)
#define SGX540__EUR_CR_ITR_USE1__SIGNATURE__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ITR_USE2__SIGNATURE   
 *
 * @BRIEF        Signature of data output from ITR to USE2. A signature is an 
 *               accumulative LFSR (Linear Feedback Shift Register) of the 
 *               valid pipeline data using an XOR structure. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ITR_USE2__SIGNATURE            BITFIELD(31, 0)
#define SGX540__EUR_CR_ITR_USE2__SIGNATURE__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_ITR_USE3__SIGNATURE   
 *
 * @BRIEF        Signature of data output from ITR to USE3. A signature is an 
 *               accumulative LFSR (Linear Feedback Shift Register) of the 
 *               valid pipeline data using an XOR structure. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_ITR_USE3__SIGNATURE            BITFIELD(31, 0)
#define SGX540__EUR_CR_ITR_USE3__SIGNATURE__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CTRL__RESERVED_20   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CTRL__RESERVED_20          BITFIELD(31, 20)
#define SGX540__EUR_CR_USE_CTRL__RESERVED_20__POS     20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CTRL__REGBOUND_ZERO   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CTRL__REGBOUND_ZERO        BITFIELD(19, 19)
#define SGX540__EUR_CR_USE_CTRL__REGBOUND_ZERO__POS   19

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CTRL__INSTLIMIT   
 *
 * @BRIEF        Maximum number of times an active slot can be serviced in a 
 *               row - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CTRL__INSTLIMIT            BITFIELD(18, 14)
#define SGX540__EUR_CR_USE_CTRL__INSTLIMIT__POS       14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CTRL__RESERVED_4   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CTRL__RESERVED_4           BITFIELD(13, 4)
#define SGX540__EUR_CR_USE_CTRL__RESERVED_4__POS      4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CTRL__KILL_MODE   
 *
 * @BRIEF        0x0 Off 
 *               0x1 Kill 
 *               0x2 Flush 
 *               0x3 Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CTRL__KILL_MODE            BITFIELD(3, 2)
#define SGX540__EUR_CR_USE_CTRL__KILL_MODE__POS       2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CTRL__KILL_DM   
 *
 * @BRIEF        Data master to kill - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CTRL__KILL_DM              BITFIELD(1, 0)
#define SGX540__EUR_CR_USE_CTRL__KILL_DM__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_LD_REDIRECT__ADDR   
 *
 * @BRIEF        Byte-aligned memory address to redirect LD instructions 
 *               which fail range check - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_LD_REDIRECT__ADDR          BITFIELD(31, 4)
#define SGX540__EUR_CR_USE_LD_REDIRECT__ADDR__POS     4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_LD_REDIRECT__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_LD_REDIRECT__RESERVED_0    BITFIELD(3, 0)
#define SGX540__EUR_CR_USE_LD_REDIRECT__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CACHE__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CACHE__RESERVED_1          BITFIELD(31, 1)
#define SGX540__EUR_CR_USE_CACHE__RESERVED_1__POS     1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CACHE__INVALIDATE   
 *
 * @BRIEF        Any write to this location invalidates the instruction cache 
 *               automatically - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CACHE__INVALIDATE          BITFIELD(0, 0)
#define SGX540__EUR_CR_USE_CACHE__INVALIDATE__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_00__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_00__RESERVED_26  BITFIELD(31, 26)
#define SGX540__EUR_CR_USE_CODE_BASE_00__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_00__DM   
 *
 * @BRIEF        Data Master - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_00__DM           BITFIELD(25, 24)
#define SGX540__EUR_CR_USE_CODE_BASE_00__DM__POS      24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_00__ADDR   
 *
 * @BRIEF        Code base address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_00__ADDR         BITFIELD(23, 0)
#define SGX540__EUR_CR_USE_CODE_BASE_00__ADDR__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_01__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_01__RESERVED_26  BITFIELD(31, 26)
#define SGX540__EUR_CR_USE_CODE_BASE_01__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_01__DM   
 *
 * @BRIEF        Data Master - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_01__DM           BITFIELD(25, 24)
#define SGX540__EUR_CR_USE_CODE_BASE_01__DM__POS      24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_01__ADDR   
 *
 * @BRIEF        Code base address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_01__ADDR         BITFIELD(23, 0)
#define SGX540__EUR_CR_USE_CODE_BASE_01__ADDR__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_02__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_02__RESERVED_26  BITFIELD(31, 26)
#define SGX540__EUR_CR_USE_CODE_BASE_02__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_02__DM   
 *
 * @BRIEF        Data Master - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_02__DM           BITFIELD(25, 24)
#define SGX540__EUR_CR_USE_CODE_BASE_02__DM__POS      24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_02__ADDR   
 *
 * @BRIEF        Code base address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_02__ADDR         BITFIELD(23, 0)
#define SGX540__EUR_CR_USE_CODE_BASE_02__ADDR__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_03__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_03__RESERVED_26  BITFIELD(31, 26)
#define SGX540__EUR_CR_USE_CODE_BASE_03__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_03__DM   
 *
 * @BRIEF        Data Master - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_03__DM           BITFIELD(25, 24)
#define SGX540__EUR_CR_USE_CODE_BASE_03__DM__POS      24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_03__ADDR   
 *
 * @BRIEF        Code base address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_03__ADDR         BITFIELD(23, 0)
#define SGX540__EUR_CR_USE_CODE_BASE_03__ADDR__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_04__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_04__RESERVED_26  BITFIELD(31, 26)
#define SGX540__EUR_CR_USE_CODE_BASE_04__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_04__DM   
 *
 * @BRIEF        Data Master - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_04__DM           BITFIELD(25, 24)
#define SGX540__EUR_CR_USE_CODE_BASE_04__DM__POS      24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_04__ADDR   
 *
 * @BRIEF        Code base address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_04__ADDR         BITFIELD(23, 0)
#define SGX540__EUR_CR_USE_CODE_BASE_04__ADDR__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_05__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_05__RESERVED_26  BITFIELD(31, 26)
#define SGX540__EUR_CR_USE_CODE_BASE_05__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_05__DM   
 *
 * @BRIEF        Data Master - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_05__DM           BITFIELD(25, 24)
#define SGX540__EUR_CR_USE_CODE_BASE_05__DM__POS      24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_05__ADDR   
 *
 * @BRIEF        Code base address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_05__ADDR         BITFIELD(23, 0)
#define SGX540__EUR_CR_USE_CODE_BASE_05__ADDR__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_06__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_06__RESERVED_26  BITFIELD(31, 26)
#define SGX540__EUR_CR_USE_CODE_BASE_06__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_06__DM   
 *
 * @BRIEF        Data Master - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_06__DM           BITFIELD(25, 24)
#define SGX540__EUR_CR_USE_CODE_BASE_06__DM__POS      24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_06__ADDR   
 *
 * @BRIEF        Code base address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_06__ADDR         BITFIELD(23, 0)
#define SGX540__EUR_CR_USE_CODE_BASE_06__ADDR__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_07__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_07__RESERVED_26  BITFIELD(31, 26)
#define SGX540__EUR_CR_USE_CODE_BASE_07__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_07__DM   
 *
 * @BRIEF        Data Master - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_07__DM           BITFIELD(25, 24)
#define SGX540__EUR_CR_USE_CODE_BASE_07__DM__POS      24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_07__ADDR   
 *
 * @BRIEF        Code base address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_07__ADDR         BITFIELD(23, 0)
#define SGX540__EUR_CR_USE_CODE_BASE_07__ADDR__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_08__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_08__RESERVED_26  BITFIELD(31, 26)
#define SGX540__EUR_CR_USE_CODE_BASE_08__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_08__DM   
 *
 * @BRIEF        Data Master - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_08__DM           BITFIELD(25, 24)
#define SGX540__EUR_CR_USE_CODE_BASE_08__DM__POS      24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_08__ADDR   
 *
 * @BRIEF        Code base address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_08__ADDR         BITFIELD(23, 0)
#define SGX540__EUR_CR_USE_CODE_BASE_08__ADDR__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_09__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_09__RESERVED_26  BITFIELD(31, 26)
#define SGX540__EUR_CR_USE_CODE_BASE_09__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_09__DM   
 *
 * @BRIEF        Data Master - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_09__DM           BITFIELD(25, 24)
#define SGX540__EUR_CR_USE_CODE_BASE_09__DM__POS      24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_09__ADDR   
 *
 * @BRIEF        Code base address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_09__ADDR         BITFIELD(23, 0)
#define SGX540__EUR_CR_USE_CODE_BASE_09__ADDR__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_10__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_10__RESERVED_26  BITFIELD(31, 26)
#define SGX540__EUR_CR_USE_CODE_BASE_10__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_10__DM   
 *
 * @BRIEF        Data Master - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_10__DM           BITFIELD(25, 24)
#define SGX540__EUR_CR_USE_CODE_BASE_10__DM__POS      24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_10__ADDR   
 *
 * @BRIEF        Code base address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_10__ADDR         BITFIELD(23, 0)
#define SGX540__EUR_CR_USE_CODE_BASE_10__ADDR__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_11__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_11__RESERVED_26  BITFIELD(31, 26)
#define SGX540__EUR_CR_USE_CODE_BASE_11__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_11__DM   
 *
 * @BRIEF        Data Master - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_11__DM           BITFIELD(25, 24)
#define SGX540__EUR_CR_USE_CODE_BASE_11__DM__POS      24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_11__ADDR   
 *
 * @BRIEF        Code base address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_11__ADDR         BITFIELD(23, 0)
#define SGX540__EUR_CR_USE_CODE_BASE_11__ADDR__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_12__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_12__RESERVED_26  BITFIELD(31, 26)
#define SGX540__EUR_CR_USE_CODE_BASE_12__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_12__DM   
 *
 * @BRIEF        Data Master - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_12__DM           BITFIELD(25, 24)
#define SGX540__EUR_CR_USE_CODE_BASE_12__DM__POS      24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_12__ADDR   
 *
 * @BRIEF        Code base address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_12__ADDR         BITFIELD(23, 0)
#define SGX540__EUR_CR_USE_CODE_BASE_12__ADDR__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_13__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_13__RESERVED_26  BITFIELD(31, 26)
#define SGX540__EUR_CR_USE_CODE_BASE_13__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_13__DM   
 *
 * @BRIEF        Data Master - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_13__DM           BITFIELD(25, 24)
#define SGX540__EUR_CR_USE_CODE_BASE_13__DM__POS      24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_13__ADDR   
 *
 * @BRIEF        Code base address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_13__ADDR         BITFIELD(23, 0)
#define SGX540__EUR_CR_USE_CODE_BASE_13__ADDR__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_14__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_14__RESERVED_26  BITFIELD(31, 26)
#define SGX540__EUR_CR_USE_CODE_BASE_14__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_14__DM   
 *
 * @BRIEF        Data Master - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_14__DM           BITFIELD(25, 24)
#define SGX540__EUR_CR_USE_CODE_BASE_14__DM__POS      24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_14__ADDR   
 *
 * @BRIEF        Code base address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_14__ADDR         BITFIELD(23, 0)
#define SGX540__EUR_CR_USE_CODE_BASE_14__ADDR__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_15__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_15__RESERVED_26  BITFIELD(31, 26)
#define SGX540__EUR_CR_USE_CODE_BASE_15__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_15__DM   
 *
 * @BRIEF        Data Master - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_15__DM           BITFIELD(25, 24)
#define SGX540__EUR_CR_USE_CODE_BASE_15__DM__POS      24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CODE_BASE_15__ADDR   
 *
 * @BRIEF        Code base address - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CODE_BASE_15__ADDR         BITFIELD(23, 0)
#define SGX540__EUR_CR_USE_CODE_BASE_15__ADDR__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE2__RESERVED_5   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE2__RESERVED_5  BITFIELD(31, 5)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE2__RESERVED_5__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE2__TRIG_TA   
 *
 * @BRIEF        PDS_Enable: Lockup in TA Phase Trigger - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE2__TRIG_TA     BITFIELD(4, 4)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE2__TRIG_TA__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE2__TRIG_3D   
 *
 * @BRIEF        PDS_Enable: Lockup in 3d Phase Trigger - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE2__TRIG_3D     BITFIELD(3, 3)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE2__TRIG_3D__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE2__TRIG_DL   
 *
 * @BRIEF        PDS_Enable: Deadlock has occured after a Partial Render - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE2__TRIG_DL     BITFIELD(2, 2)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE2__TRIG_DL__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE2__DPM_3D_FREE_LOAD   
 *
 * @BRIEF        PDS_Enable: DPM 3D Task free load complete - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE2__DPM_3D_FREE_LOAD BITFIELD(1, 1)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE2__DPM_3D_FREE_LOAD__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE2__DPM_TA_FREE_LOAD   
 *
 * @BRIEF        PDS_Enable: DPM TA Task free load complete - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE2__DPM_TA_FREE_LOAD BITFIELD(0, 0)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE2__DPM_TA_FREE_LOAD__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_ENABLE__RESERVED_5   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_ENABLE__RESERVED_5   BITFIELD(31, 5)
#define SGX540__EUR_CR_PDS_CACHE_ENABLE__RESERVED_5__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_ENABLE__DSC_INV3   
 *
 * @BRIEF        PDS_Enable: Context ID 3 has been invalidated in PDS Data 
 *               Store Cache - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_ENABLE__DSC_INV3     BITFIELD(4, 4)
#define SGX540__EUR_CR_PDS_CACHE_ENABLE__DSC_INV3__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_ENABLE__RESERVED_3   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_ENABLE__RESERVED_3   BITFIELD(3, 3)
#define SGX540__EUR_CR_PDS_CACHE_ENABLE__RESERVED_3__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_ENABLE__DSC_INV1   
 *
 * @BRIEF        PDS_Enable: Context ID 1 has been invalidated in PDS Data 
 *               Store Cache - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_ENABLE__DSC_INV1     BITFIELD(2, 2)
#define SGX540__EUR_CR_PDS_CACHE_ENABLE__DSC_INV1__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_ENABLE__DSC_INV0   
 *
 * @BRIEF        PDS_Enable: Context ID 0 has been invalidated in PDS Data 
 *               Store Cache - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_ENABLE__DSC_INV0     BITFIELD(1, 1)
#define SGX540__EUR_CR_PDS_CACHE_ENABLE__DSC_INV0__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_CACHE_ENABLE__CSC_INV   
 *
 * @BRIEF        PDS_Enable: PDS Code Store Cache has been invalidated - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_CACHE_ENABLE__CSC_INV      BITFIELD(0, 0)
#define SGX540__EUR_CR_PDS_CACHE_ENABLE__CSC_INV__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__RESERVED_30   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__RESERVED_30  BITFIELD(31, 30)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__RESERVED_30__POS 30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__TIMER   
 *
 * @BRIEF        PDS_Enable: The PDS Event timer interrupt (signalled on 
 *               timer traversing through 0). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__TIMER        BITFIELD(29, 29)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__TIMER__POS   29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__TA_DPM_FAULT   
 *
 * @BRIEF        PDS_Enable: The TA Object Passing System has got out of 
 *               sync, a Terminate Control Word DPM read was met by 
 *               StartofBlock data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__TA_DPM_FAULT BITFIELD(28, 28)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__TA_DPM_FAULT__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__TWOD_COMPLETE   
 *
 * @BRIEF        PDS_Enable: 2d core has completed writing out all data to 
 *               memory and it has received a complete signal from the ta - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__TWOD_COMPLETE BITFIELD(27, 27)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__TWOD_COMPLETE__POS 27

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__MADD_CACHE_INVALCOMPLETE   
 *
 * @BRIEF        PDS_Enable: Invalidate of Madd L0, L1, L2 Cache Complete - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__MADD_CACHE_INVALCOMPLETE BITFIELD(26, 26)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__MADD_CACHE_INVALCOMPLETE__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_OUT_OF_MEMORY_ZLS   
 *
 * @BRIEF        PDS_Enable: Memory Allocation Failed for ZLS - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_OUT_OF_MEMORY_ZLS BITFIELD(25, 25)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_OUT_OF_MEMORY_ZLS__POS 25

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_TA_MEM_FREE   
 *
 * @BRIEF        PDS_Enable: All memory associated with TA context has been 
 *               freed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_TA_MEM_FREE BITFIELD(24, 24)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_TA_MEM_FREE__POS 24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__ISP_END_PASS   
 *
 * @BRIEF        PDS_Enable: ISP End pass - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__ISP_END_PASS BITFIELD(23, 23)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__ISP_END_PASS__POS 23

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_INITEND   
 *
 * @BRIEF        PDS_Enable: DPM Initialisation Complete - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_INITEND  BITFIELD(22, 22)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_INITEND__POS 22

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__OTPM_LOADED   
 *
 * @BRIEF        PDS_Enable: The OTPM has loaded its state - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__OTPM_LOADED  BITFIELD(21, 21)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__OTPM_LOADED__POS 21

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__OTPM_INV   
 *
 * @BRIEF        PDS_Enable: The OTPM has invalidated its contents - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__OTPM_INV     BITFIELD(20, 20)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__OTPM_INV__POS 20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__OTPM_FLUSHED   
 *
 * @BRIEF        PDS_Enable: The OTPM has flushed its state - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__OTPM_FLUSHED BITFIELD(19, 19)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__OTPM_FLUSHED__POS 19

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__PIXELBE_END_RENDER   
 *
 * @BRIEF        PDS_Enable: End of Scene - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__PIXELBE_END_RENDER BITFIELD(18, 18)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__PIXELBE_END_RENDER__POS 18

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__ISP_HALT   
 *
 * @BRIEF        PDS_Enable: ISP Halt breakpoint triggered - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__ISP_HALT     BITFIELD(17, 17)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__ISP_HALT__POS 17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__ISP_VISIBILITY_FAIL   
 *
 * @BRIEF        PDS_Enable: Visibility Test Fail - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__ISP_VISIBILITY_FAIL BITFIELD(16, 16)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__ISP_VISIBILITY_FAIL__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__BREAKPOINT   
 *
 * @BRIEF        PDS_Enable: ISP Breakpoint - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__BREAKPOINT   BITFIELD(15, 15)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__BREAKPOINT__POS 15

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__SW_EVENT   
 *
 * @BRIEF        PDS_Enable: Software triggered event - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__SW_EVENT     BITFIELD(14, 14)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__SW_EVENT__POS 14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__TA_FINISHED   
 *
 * @BRIEF        PDS_Enable: TA complete, (Scene Terminated) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__TA_FINISHED  BITFIELD(13, 13)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__TA_FINISHED__POS 13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__TA_TERMINATE   
 *
 * @BRIEF        PDS_Enable: The TA terminate complete (issue as part of 
 *               complex scene) (MacroTile aborted) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__TA_TERMINATE BITFIELD(12, 12)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__TA_TERMINATE__POS 12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__TPC_CLEAR   
 *
 * @BRIEF        PDS_Enable: The TPC has reset its state - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__TPC_CLEAR    BITFIELD(11, 11)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__TPC_CLEAR__POS 11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__TPC_FLUSH   
 *
 * @BRIEF        PDS_Enable: The TPC has stored its state - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__TPC_FLUSH    BITFIELD(10, 10)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__TPC_FLUSH__POS 10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_CONTROL_CLEAR   
 *
 * @BRIEF        PDS_Enable: The reset of the DPM control context has been 
 *               completed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_CONTROL_CLEAR BITFIELD(9, 9)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_CONTROL_CLEAR__POS 9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_CONTROL_LOAD   
 *
 * @BRIEF        PDS_Enable: The load of the DPM control context has been 
 *               completed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_CONTROL_LOAD BITFIELD(8, 8)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_CONTROL_LOAD__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_CONTROL_STORE   
 *
 * @BRIEF        PDS_Enable: The store of the DPM control context has been 
 *               completed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_CONTROL_STORE BITFIELD(7, 7)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_CONTROL_STORE__POS 7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_STATE_CLEAR   
 *
 * @BRIEF        PDS_Enable: The reset of the DPM state context has been 
 *               completed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_STATE_CLEAR BITFIELD(6, 6)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_STATE_CLEAR__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_STATE_LOAD   
 *
 * @BRIEF        PDS_Enable: The load of the DPM state context has been 
 *               completed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_STATE_LOAD BITFIELD(5, 5)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_STATE_LOAD__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_STATE_STORE   
 *
 * @BRIEF        PDS_Enable: The store of the DPM state context has been 
 *               completed - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_STATE_STORE BITFIELD(4, 4)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_STATE_STORE__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_REACHED_MEM_THRESH   
 *
 * @BRIEF        PDS_Enable: DPM Memory allocation has reached the preset 
 *               memory threshold for total memory allocation - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_REACHED_MEM_THRESH BITFIELD(3, 3)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_REACHED_MEM_THRESH__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_OUT_OF_MEMORY_GBL   
 *
 * @BRIEF        PDS_Enable: DPM Memory allocation failed for the global list 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_OUT_OF_MEMORY_GBL BITFIELD(2, 2)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_OUT_OF_MEMORY_GBL__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_OUT_OF_MEMORY_MT   
 *
 * @BRIEF        PDS_Enable: DPM Memory allocation failed for a macro tile - 
 *               (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_OUT_OF_MEMORY_MT BITFIELD(1, 1)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_OUT_OF_MEMORY_MT__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_3D_MEM_FREE   
 *
 * @BRIEF        PDS_Enable: DPM Memory allocation complete for the current 
 *               render - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_3D_MEM_FREE BITFIELD(0, 0)
#define SGX540__EUR_CR_EVENT_PDS_ENABLE__DPM_3D_MEM_FREE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PIXEL_PDS_EXEC__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_EXEC__RESERVED_26 BITFIELD(31, 26)
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_EXEC__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PIXEL_PDS_EXEC__ADDR   
 *
 * @BRIEF        PDS Execution Address for pixel tasks (Positioned as a byte 
 *               address, 128 bit granularity) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_EXEC__ADDR     BITFIELD(25, 4)
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_EXEC__ADDR__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PIXEL_PDS_EXEC__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_EXEC__RESERVED_0 BITFIELD(3, 0)
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_EXEC__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PIXEL_PDS_DATA__RESERVED_6   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_DATA__RESERVED_6 BITFIELD(31, 6)
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_DATA__RESERVED_6__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PIXEL_PDS_DATA__SIZE   
 *
 * @BRIEF        PDS Data Size in 128 bit words, Pixel Tasks - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_DATA__SIZE     BITFIELD(5, 0)
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_DATA__SIZE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__RESERVED_22   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__RESERVED_22 BITFIELD(31, 22)
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__RESERVED_22__POS 22

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__ATTRIBUTE_SIZE   
 *
 * @BRIEF        The attribute size in 128 bit words - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__ATTRIBUTE_SIZE BITFIELD(21, 13)
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__ATTRIBUTE_SIZE__POS 13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__DM   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__DM       BITFIELD(12, 11)
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__DM__POS  11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__PNS   
 *
 * @BRIEF        Allocate primary not secondary memory - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__PNS      BITFIELD(10, 10)
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__PNS__POS 10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__RESERVED_8   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__RESERVED_8 BITFIELD(9, 8)
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__RESERVED_8__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__ODS   
 *
 * @BRIEF        The output data stride in 128 bit words - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__ODS      BITFIELD(7, 1)
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__ODS__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__SD   
 *
 * @BRIEF        Sequential Dependency bit. All end of tile tasks should set 
 *               this bit, in order to ensure that preceding pixel tasks 
 *               complete before the tile is emitted. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__SD       BITFIELD(0, 0)
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__SD__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_EXEC__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_EXEC__RESERVED_26 BITFIELD(31, 26)
#define SGX540__EUR_CR_EVENT_OTHER_PDS_EXEC__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_EXEC__ADDR   
 *
 * @BRIEF        PDS Execution Address for pixel tasks (Positioned as a byte 
 *               address, 128 bit granularity) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_EXEC__ADDR     BITFIELD(25, 4)
#define SGX540__EUR_CR_EVENT_OTHER_PDS_EXEC__ADDR__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_EXEC__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_EXEC__RESERVED_0 BITFIELD(3, 0)
#define SGX540__EUR_CR_EVENT_OTHER_PDS_EXEC__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_DATA__RESERVED_6   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_DATA__RESERVED_6 BITFIELD(31, 6)
#define SGX540__EUR_CR_EVENT_OTHER_PDS_DATA__RESERVED_6__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_DATA__SIZE   
 *
 * @BRIEF        PDS Data Size in 128 bit words, Pixel Tasks - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_DATA__SIZE     BITFIELD(5, 0)
#define SGX540__EUR_CR_EVENT_OTHER_PDS_DATA__SIZE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__RESERVED_26   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__RESERVED_26 BITFIELD(31, 26)
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__RESERVED_26__POS 26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__USESECEXEC   
 *
 * @BRIEF        Secondary tasks should execute on the USSE - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__USESECEXEC BITFIELD(25, 25)
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__USESECEXEC__POS 25

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__OBUFFER_REQD   
 *
 * @BRIEF        The number of output buffers to be allocated - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__OBUFFER_REQD BITFIELD(24, 22)
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__OBUFFER_REQD__POS 22

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__RESERVED_21   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__RESERVED_21 BITFIELD(21, 21)
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__RESERVED_21__POS 21

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__ATTRIBUTE_SIZE   
 *
 * @BRIEF        The attribute size in 128 bit words - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__ATTRIBUTE_SIZE BITFIELD(20, 13)
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__ATTRIBUTE_SIZE__POS 13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__DM   
 *
 * @BRIEF        Selects the Data Master 
 *               0x0 Vertex 
 *               0x1 Pixel 
 *               0x2 Reserved 
 *               0x3 Event - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__DM       BITFIELD(12, 11)
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__DM__POS  11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__PNS   
 *
 * @BRIEF        Allocate primary not secondary memory - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__PNS      BITFIELD(10, 10)
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__PNS__POS 10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__RESERVED_9   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__RESERVED_9 BITFIELD(9, 9)
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__RESERVED_9__POS 9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__USE_PIPELINE   
 *
 * @BRIEF        Selects the USSE pipeline allocated to the data master  
 *               0x0 Pipe 0 (also resets round-robin to start from pipe 0) 
 *               0x1 Round-robin between pipes - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__USE_PIPELINE BITFIELD(8, 8)
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__USE_PIPELINE__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__ODS   
 *
 * @BRIEF        The output data stride in 128 bit words - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__ODS      BITFIELD(7, 1)
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__ODS__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__SD   
 *
 * @BRIEF        Sequential Dependency bit. All end of tile tasks should set 
 *               this bit, in order to ensure that preceding pixel tasks 
 *               complete before the tile is emitted. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__SD       BITFIELD(0, 0)
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__SD__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DMS_CTRL__RESERVED_28   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DMS_CTRL__RESERVED_28          BITFIELD(31, 28)
#define SGX540__EUR_CR_DMS_CTRL__RESERVED_28__POS     28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DMS_CTRL__MAX_NUM_VERTEX_PARTITIONS   
 *
 * @BRIEF        The maximum number of partitions allowed on each USSE for 
 *               vertex tasks - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DMS_CTRL__MAX_NUM_VERTEX_PARTITIONS BITFIELD(27, 25)
#define SGX540__EUR_CR_DMS_CTRL__MAX_NUM_VERTEX_PARTITIONS__POS 25

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DMS_CTRL__MAX_NUM_PIXEL_PARTITIONS   
 *
 * @BRIEF        The maximum number of partitions allowed on each USSE for 
 *               pixel tasks - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DMS_CTRL__MAX_NUM_PIXEL_PARTITIONS BITFIELD(24, 22)
#define SGX540__EUR_CR_DMS_CTRL__MAX_NUM_PIXEL_PARTITIONS__POS 22

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DMS_CTRL__MAX_NUM_EDM_TASKS   
 *
 * @BRIEF        The maximum number of vertex tasks allowed on each USSE, 
 *               range 0 to 32 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DMS_CTRL__MAX_NUM_EDM_TASKS    BITFIELD(21, 16)
#define SGX540__EUR_CR_DMS_CTRL__MAX_NUM_EDM_TASKS__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DMS_CTRL__MAX_NUM_VERTEX_TASKS   
 *
 * @BRIEF        The maximum number of vertex tasks allowed on each USSE, 
 *               range 0 to 32 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DMS_CTRL__MAX_NUM_VERTEX_TASKS BITFIELD(15, 10)
#define SGX540__EUR_CR_DMS_CTRL__MAX_NUM_VERTEX_TASKS__POS 10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DMS_CTRL__MAX_NUM_PIXEL_TASKS   
 *
 * @BRIEF        The maximum number of pixel tasks allowed on each USSE, 
 *               range 0 to 32 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DMS_CTRL__MAX_NUM_PIXEL_TASKS  BITFIELD(9, 4)
#define SGX540__EUR_CR_DMS_CTRL__MAX_NUM_PIXEL_TASKS__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DMS_CTRL__DISABLE_DM   
 *
 * @BRIEF        Bit 0 Disable Vertex 
 *               Bit 1 Disable Pixel DM 
 *               Bit 2 Disable Event DM 
 *               Bit 3 Disable Loopback DM - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DMS_CTRL__DISABLE_DM           BITFIELD(3, 0)
#define SGX540__EUR_CR_DMS_CTRL__DISABLE_DM__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DMS_AGE__RESERVED_17   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DMS_AGE__RESERVED_17           BITFIELD(31, 17)
#define SGX540__EUR_CR_DMS_AGE__RESERVED_17__POS      17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DMS_AGE__ENABLE   
 *
 * @BRIEF        Enable the AGE Control mechanism - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DMS_AGE__ENABLE                BITFIELD(16, 16)
#define SGX540__EUR_CR_DMS_AGE__ENABLE__POS           16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_DMS_AGE__VALUE   
 *
 * @BRIEF        The maximum age for any task before it will become a a 
 *               priority to be serviced (in clock cycles) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_DMS_AGE__VALUE                 BITFIELD(15, 0)
#define SGX540__EUR_CR_DMS_AGE__VALUE__POS            0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_G0__RESERVED_8   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_G0__RESERVED_8             BITFIELD(31, 8)
#define SGX540__EUR_CR_USE_G0__RESERVED_8__POS        8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_G0__P   
 *
 * @BRIEF        General-purpose, cross-thread-accessible read/write register 
 *               for USSE programs via the 'special' bank type - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_G0__P                      BITFIELD(7, 0)
#define SGX540__EUR_CR_USE_G0__P__POS                 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_G1__RESERVED_8   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_G1__RESERVED_8             BITFIELD(31, 8)
#define SGX540__EUR_CR_USE_G1__RESERVED_8__POS        8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_G1__P   
 *
 * @BRIEF        General-purpose, cross-thread-accessible read/write register 
 *               for USSE programs via the 'special' bank type - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_G1__P                      BITFIELD(7, 0)
#define SGX540__EUR_CR_USE_G1__P__POS                 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER0_LEFT__RESERVED_30   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER0_LEFT__RESERVED_30  BITFIELD(31, 30)
#define SGX540__EUR_CR_USE_FILTER0_LEFT__RESERVED_30__POS 30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER0_LEFT__TAP0   
 *
 * @BRIEF        FIRH instruction filter option, signed integer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER0_LEFT__TAP0         BITFIELD(29, 20)
#define SGX540__EUR_CR_USE_FILTER0_LEFT__TAP0__POS    20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER0_LEFT__TAP1   
 *
 * @BRIEF        FIRH instruction filter option, signed integer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER0_LEFT__TAP1         BITFIELD(19, 10)
#define SGX540__EUR_CR_USE_FILTER0_LEFT__TAP1__POS    10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER0_LEFT__TAP2   
 *
 * @BRIEF        FIRH instruction filter option, signed integer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER0_LEFT__TAP2         BITFIELD(9, 0)
#define SGX540__EUR_CR_USE_FILTER0_LEFT__TAP2__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER0_RIGHT__RESERVED_30   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER0_RIGHT__RESERVED_30 BITFIELD(31, 30)
#define SGX540__EUR_CR_USE_FILTER0_RIGHT__RESERVED_30__POS 30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER0_RIGHT__TAP5   
 *
 * @BRIEF        FIRH instruction filter option, signed integer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER0_RIGHT__TAP5        BITFIELD(29, 20)
#define SGX540__EUR_CR_USE_FILTER0_RIGHT__TAP5__POS   20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER0_RIGHT__TAP6   
 *
 * @BRIEF        FIRH instruction filter option, signed integer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER0_RIGHT__TAP6        BITFIELD(19, 10)
#define SGX540__EUR_CR_USE_FILTER0_RIGHT__TAP6__POS   10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER0_RIGHT__TAP7   
 *
 * @BRIEF        FIRH instruction filter option, signed integer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER0_RIGHT__TAP7        BITFIELD(9, 0)
#define SGX540__EUR_CR_USE_FILTER0_RIGHT__TAP7__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER0_EXTRA__RESERVED_20   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER0_EXTRA__RESERVED_20 BITFIELD(31, 20)
#define SGX540__EUR_CR_USE_FILTER0_EXTRA__RESERVED_20__POS 20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER0_EXTRA__CONSTANT   
 *
 * @BRIEF        FIRH instruction filter option, unsigned integer additive 
 *               constant - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER0_EXTRA__CONSTANT    BITFIELD(19, 4)
#define SGX540__EUR_CR_USE_FILTER0_EXTRA__CONSTANT__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER0_EXTRA__SHR   
 *
 * @BRIEF        FIRH instruction filter option, unsigned integer right shift 
 *               amount - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER0_EXTRA__SHR         BITFIELD(3, 0)
#define SGX540__EUR_CR_USE_FILTER0_EXTRA__SHR__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER1_LEFT__RESERVED_30   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER1_LEFT__RESERVED_30  BITFIELD(31, 30)
#define SGX540__EUR_CR_USE_FILTER1_LEFT__RESERVED_30__POS 30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER1_LEFT__TAP0   
 *
 * @BRIEF        FIRH instruction filter option, signed integer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER1_LEFT__TAP0         BITFIELD(29, 20)
#define SGX540__EUR_CR_USE_FILTER1_LEFT__TAP0__POS    20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER1_LEFT__TAP1   
 *
 * @BRIEF        FIRH instruction filter option, signed integer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER1_LEFT__TAP1         BITFIELD(19, 10)
#define SGX540__EUR_CR_USE_FILTER1_LEFT__TAP1__POS    10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER1_LEFT__TAP2   
 *
 * @BRIEF        FIRH instruction filter option, signed integer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER1_LEFT__TAP2         BITFIELD(9, 0)
#define SGX540__EUR_CR_USE_FILTER1_LEFT__TAP2__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER1_RIGHT__RESERVED_30   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER1_RIGHT__RESERVED_30 BITFIELD(31, 30)
#define SGX540__EUR_CR_USE_FILTER1_RIGHT__RESERVED_30__POS 30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER1_RIGHT__TAP5   
 *
 * @BRIEF        FIRH instruction filter option, signed integer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER1_RIGHT__TAP5        BITFIELD(29, 20)
#define SGX540__EUR_CR_USE_FILTER1_RIGHT__TAP5__POS   20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER1_RIGHT__TAP6   
 *
 * @BRIEF        FIRH instruction filter option, signed integer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER1_RIGHT__TAP6        BITFIELD(19, 10)
#define SGX540__EUR_CR_USE_FILTER1_RIGHT__TAP6__POS   10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER1_RIGHT__TAP7   
 *
 * @BRIEF        FIRH instruction filter option, signed integer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER1_RIGHT__TAP7        BITFIELD(9, 0)
#define SGX540__EUR_CR_USE_FILTER1_RIGHT__TAP7__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER1_EXTRA__RESERVED_20   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER1_EXTRA__RESERVED_20 BITFIELD(31, 20)
#define SGX540__EUR_CR_USE_FILTER1_EXTRA__RESERVED_20__POS 20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER1_EXTRA__CONSTANT   
 *
 * @BRIEF        FIRH instruction filter option, unsigned integer additive 
 *               constant - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER1_EXTRA__CONSTANT    BITFIELD(19, 4)
#define SGX540__EUR_CR_USE_FILTER1_EXTRA__CONSTANT__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER1_EXTRA__SHR   
 *
 * @BRIEF        FIRH instruction filter option, unsigned integer right shift 
 *               amount - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER1_EXTRA__SHR         BITFIELD(3, 0)
#define SGX540__EUR_CR_USE_FILTER1_EXTRA__SHR__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER_TABLE__RESERVED_2   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER_TABLE__RESERVED_2   BITFIELD(31, 2)
#define SGX540__EUR_CR_USE_FILTER_TABLE__RESERVED_2__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER_TABLE__SEL   
 *
 * @BRIEF        FIRH instruction filter hardwired-table selector - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER_TABLE__SEL          BITFIELD(1, 0)
#define SGX540__EUR_CR_USE_FILTER_TABLE__SEL__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_ST_RANGE__VALUE   
 *
 * @BRIEF        Range check value for ST instruction - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_ST_RANGE__VALUE            BITFIELD(31, 0)
#define SGX540__EUR_CR_USE_ST_RANGE__VALUE__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_DM_SLOT__FIFTEEN   
 *
 * @BRIEF        Pipe 0 Data Master in Slot 15 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_DM_SLOT__FIFTEEN          BITFIELD(31, 30)
#define SGX540__EUR_CR_USE0_DM_SLOT__FIFTEEN__POS     30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_DM_SLOT__FOURTEEN   
 *
 * @BRIEF        Pipe 0 Data Master in Slot 14 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_DM_SLOT__FOURTEEN         BITFIELD(29, 28)
#define SGX540__EUR_CR_USE0_DM_SLOT__FOURTEEN__POS    28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_DM_SLOT__THIRTEEN   
 *
 * @BRIEF        Pipe 0 Data Master in Slot 13 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_DM_SLOT__THIRTEEN         BITFIELD(27, 26)
#define SGX540__EUR_CR_USE0_DM_SLOT__THIRTEEN__POS    26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_DM_SLOT__TWELVE   
 *
 * @BRIEF        Pipe 0 Data Master in Slot 12 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_DM_SLOT__TWELVE           BITFIELD(25, 24)
#define SGX540__EUR_CR_USE0_DM_SLOT__TWELVE__POS      24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_DM_SLOT__ELEVEN   
 *
 * @BRIEF        Pipe 0 Data Master in Slot 11 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_DM_SLOT__ELEVEN           BITFIELD(23, 22)
#define SGX540__EUR_CR_USE0_DM_SLOT__ELEVEN__POS      22

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_DM_SLOT__TEN   
 *
 * @BRIEF        Pipe 0 Data Master in Slot 10 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_DM_SLOT__TEN              BITFIELD(21, 20)
#define SGX540__EUR_CR_USE0_DM_SLOT__TEN__POS         20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_DM_SLOT__NINE   
 *
 * @BRIEF        Pipe 0 Data Master in Slot 9 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_DM_SLOT__NINE             BITFIELD(19, 18)
#define SGX540__EUR_CR_USE0_DM_SLOT__NINE__POS        18

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_DM_SLOT__EIGHT   
 *
 * @BRIEF        Pipe 0 Data Master in Slot 8 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_DM_SLOT__EIGHT            BITFIELD(17, 16)
#define SGX540__EUR_CR_USE0_DM_SLOT__EIGHT__POS       16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_DM_SLOT__SEVEN   
 *
 * @BRIEF        Pipe 0 Data Master in Slot 7 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_DM_SLOT__SEVEN            BITFIELD(15, 14)
#define SGX540__EUR_CR_USE0_DM_SLOT__SEVEN__POS       14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_DM_SLOT__SIX   
 *
 * @BRIEF        Pipe 0 Data Master in Slot 6 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_DM_SLOT__SIX              BITFIELD(13, 12)
#define SGX540__EUR_CR_USE0_DM_SLOT__SIX__POS         12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_DM_SLOT__FIVE   
 *
 * @BRIEF        Pipe 0 Data Master in Slot 5 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_DM_SLOT__FIVE             BITFIELD(11, 10)
#define SGX540__EUR_CR_USE0_DM_SLOT__FIVE__POS        10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_DM_SLOT__FOUR   
 *
 * @BRIEF        Pipe 0 Data Master in Slot 4 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_DM_SLOT__FOUR             BITFIELD(9, 8)
#define SGX540__EUR_CR_USE0_DM_SLOT__FOUR__POS        8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_DM_SLOT__THREE   
 *
 * @BRIEF        Pipe 0 Data Master in Slot 3 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_DM_SLOT__THREE            BITFIELD(7, 6)
#define SGX540__EUR_CR_USE0_DM_SLOT__THREE__POS       6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_DM_SLOT__TWO   
 *
 * @BRIEF        Pipe 0 Data Master in Slot 2 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_DM_SLOT__TWO              BITFIELD(5, 4)
#define SGX540__EUR_CR_USE0_DM_SLOT__TWO__POS         4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_DM_SLOT__ONE   
 *
 * @BRIEF        Pipe 0 Data Master in Slot 1 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_DM_SLOT__ONE              BITFIELD(3, 2)
#define SGX540__EUR_CR_USE0_DM_SLOT__ONE__POS         2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_DM_SLOT__ZERO   
 *
 * @BRIEF        Pipe 0 Data Master in Slot 0 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_DM_SLOT__ZERO             BITFIELD(1, 0)
#define SGX540__EUR_CR_USE0_DM_SLOT__ZERO__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_DM_SLOT__FIFTEEN   
 *
 * @BRIEF        Pipe 1 Data Master in Slot 15 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_DM_SLOT__FIFTEEN          BITFIELD(31, 30)
#define SGX540__EUR_CR_USE1_DM_SLOT__FIFTEEN__POS     30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_DM_SLOT__FOURTEEN   
 *
 * @BRIEF        Pipe 1 Data Master in Slot 14 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_DM_SLOT__FOURTEEN         BITFIELD(29, 28)
#define SGX540__EUR_CR_USE1_DM_SLOT__FOURTEEN__POS    28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_DM_SLOT__THIRTEEN   
 *
 * @BRIEF        Pipe 1 Data Master in Slot 13 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_DM_SLOT__THIRTEEN         BITFIELD(27, 26)
#define SGX540__EUR_CR_USE1_DM_SLOT__THIRTEEN__POS    26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_DM_SLOT__TWELVE   
 *
 * @BRIEF        Pipe 1 Data Master in Slot 12 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_DM_SLOT__TWELVE           BITFIELD(25, 24)
#define SGX540__EUR_CR_USE1_DM_SLOT__TWELVE__POS      24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_DM_SLOT__ELEVEN   
 *
 * @BRIEF        Pipe 1 Data Master in Slot 11 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_DM_SLOT__ELEVEN           BITFIELD(23, 22)
#define SGX540__EUR_CR_USE1_DM_SLOT__ELEVEN__POS      22

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_DM_SLOT__TEN   
 *
 * @BRIEF        Pipe 1 Data Master in Slot 10 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_DM_SLOT__TEN              BITFIELD(21, 20)
#define SGX540__EUR_CR_USE1_DM_SLOT__TEN__POS         20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_DM_SLOT__NINE   
 *
 * @BRIEF        Pipe 1 Data Master in Slot 9 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_DM_SLOT__NINE             BITFIELD(19, 18)
#define SGX540__EUR_CR_USE1_DM_SLOT__NINE__POS        18

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_DM_SLOT__EIGHT   
 *
 * @BRIEF        Pipe 1 Data Master in Slot 8 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_DM_SLOT__EIGHT            BITFIELD(17, 16)
#define SGX540__EUR_CR_USE1_DM_SLOT__EIGHT__POS       16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_DM_SLOT__SEVEN   
 *
 * @BRIEF        Pipe 1 Data Master in Slot 7 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_DM_SLOT__SEVEN            BITFIELD(15, 14)
#define SGX540__EUR_CR_USE1_DM_SLOT__SEVEN__POS       14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_DM_SLOT__SIX   
 *
 * @BRIEF        Pipe 1 Data Master in Slot 6 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_DM_SLOT__SIX              BITFIELD(13, 12)
#define SGX540__EUR_CR_USE1_DM_SLOT__SIX__POS         12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_DM_SLOT__FIVE   
 *
 * @BRIEF        Pipe 1 Data Master in Slot 5 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_DM_SLOT__FIVE             BITFIELD(11, 10)
#define SGX540__EUR_CR_USE1_DM_SLOT__FIVE__POS        10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_DM_SLOT__FOUR   
 *
 * @BRIEF        Pipe 1 Data Master in Slot 4 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_DM_SLOT__FOUR             BITFIELD(9, 8)
#define SGX540__EUR_CR_USE1_DM_SLOT__FOUR__POS        8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_DM_SLOT__THREE   
 *
 * @BRIEF        Pipe 1 Data Master in Slot 3 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_DM_SLOT__THREE            BITFIELD(7, 6)
#define SGX540__EUR_CR_USE1_DM_SLOT__THREE__POS       6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_DM_SLOT__TWO   
 *
 * @BRIEF        Pipe 1 Data Master in Slot 2 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_DM_SLOT__TWO              BITFIELD(5, 4)
#define SGX540__EUR_CR_USE1_DM_SLOT__TWO__POS         4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_DM_SLOT__ONE   
 *
 * @BRIEF        Pipe 1 Data Master in Slot 1 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_DM_SLOT__ONE              BITFIELD(3, 2)
#define SGX540__EUR_CR_USE1_DM_SLOT__ONE__POS         2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_DM_SLOT__ZERO   
 *
 * @BRIEF        Pipe 1 Data Master in Slot 0 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_DM_SLOT__ZERO             BITFIELD(1, 0)
#define SGX540__EUR_CR_USE1_DM_SLOT__ZERO__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_KICK1__RESERVED_8   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_KICK1__RESERVED_8        BITFIELD(31, 8)
#define SGX540__EUR_CR_EVENT_KICK1__RESERVED_8__POS   8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_KICK1__NOW   
 *
 * @BRIEF        Set the kicker value. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_KICK1__NOW               BITFIELD(7, 0)
#define SGX540__EUR_CR_EVENT_KICK1__NOW__POS          0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_EXEF__RESERVED_19   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_EXEF__RESERVED_19          BITFIELD(31, 19)
#define SGX540__EUR_CR_USE_EXEF__RESERVED_19__POS     19

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_EXEF__CBASE   
 *
 * @BRIEF        Task Flush code baset - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_EXEF__CBASE                BITFIELD(18, 15)
#define SGX540__EUR_CR_USE_EXEF__CBASE__POS           15

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_EXEF__COFFEXT   
 *
 * @BRIEF        Task Flush code offext - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_EXEF__COFFEXT              BITFIELD(14, 11)
#define SGX540__EUR_CR_USE_EXEF__COFFEXT__POS         11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_EXEF__COFF   
 *
 * @BRIEF        Task Flush code offset - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_EXEF__COFF                 BITFIELD(10, 0)
#define SGX540__EUR_CR_USE_EXEF__COFF__POS            0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_EXEC_BASE__RESERVED_28   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_EXEC_BASE__RESERVED_28     BITFIELD(31, 28)
#define SGX540__EUR_CR_PDS_EXEC_BASE__RESERVED_28__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_EXEC_BASE__ADDR   
 *
 * @BRIEF        256MB Addressable, 1 MB aligned Base Address for PDS 
 *               programs - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_EXEC_BASE__ADDR            BITFIELD(27, 20)
#define SGX540__EUR_CR_PDS_EXEC_BASE__ADDR__POS       20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_EXEC_BASE__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_EXEC_BASE__RESERVED_0      BITFIELD(19, 0)
#define SGX540__EUR_CR_PDS_EXEC_BASE__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS__RESERVED_7   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS__RESERVED_7                BITFIELD(31, 7)
#define SGX540__EUR_CR_PDS__RESERVED_7__POS           7

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS__DOUT_TIMEOUT_DISABLE   
 *
 * @BRIEF        Disable the internal timeout on PDS code performing 
 *               necessary DOUT commands - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS__DOUT_TIMEOUT_DISABLE      BITFIELD(6, 6)
#define SGX540__EUR_CR_PDS__DOUT_TIMEOUT_DISABLE__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS__ATTRIBUTE_CHUNK_START   
 *
 * @BRIEF        The Start Chunk. There are 64 chunks of 32 DWords. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS__ATTRIBUTE_CHUNK_START     BITFIELD(5, 0)
#define SGX540__EUR_CR_PDS__ATTRIBUTE_CHUNK_START__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_KICK2__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_KICK2__RESERVED_1        BITFIELD(31, 1)
#define SGX540__EUR_CR_EVENT_KICK2__RESERVED_1__POS   1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_KICK2__NOW   
 *
 * @BRIEF        Kick without increment SW event 1 (IR 0 bit 21) - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_KICK2__NOW               BITFIELD(0, 0)
#define SGX540__EUR_CR_EVENT_KICK2__NOW__POS          0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_KICKER__RESERVED_28   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_KICKER__RESERVED_28      BITFIELD(31, 28)
#define SGX540__EUR_CR_EVENT_KICKER__RESERVED_28__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_KICKER__ADDRESS   
 *
 * @BRIEF        256MB Addressable, 16Byte aligned Base Address for Kick 
 *               Synchronisation data - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_KICKER__ADDRESS          BITFIELD(27, 4)
#define SGX540__EUR_CR_EVENT_KICKER__ADDRESS__POS     4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_KICKER__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_KICKER__RESERVED_0       BITFIELD(3, 0)
#define SGX540__EUR_CR_EVENT_KICKER__RESERVED_0__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_KICK__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_KICK__RESERVED_1         BITFIELD(31, 1)
#define SGX540__EUR_CR_EVENT_KICK__RESERVED_1__POS    1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_KICK__NOW   
 *
 * @BRIEF        The kicker register, a write to this register triggers an 
 *               increment of the PDS kicker. - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_KICK__NOW                BITFIELD(0, 0)
#define SGX540__EUR_CR_EVENT_KICK__NOW__POS           0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_TIMER__RESERVED_25   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_TIMER__RESERVED_25       BITFIELD(31, 25)
#define SGX540__EUR_CR_EVENT_TIMER__RESERVED_25__POS  25

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_TIMER__ENABLE   
 *
 * @BRIEF        A value of '1' enables the timer, 0 disables the counter 
 *               (halts without initialisation to 0). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_TIMER__ENABLE            BITFIELD(24, 24)
#define SGX540__EUR_CR_EVENT_TIMER__ENABLE__POS       24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_TIMER__VALUE   
 *
 * @BRIEF        The Starting value for the timer (loaded on write from 
 *               wither PDS or host). - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_TIMER__VALUE             BITFIELD(23, 0)
#define SGX540__EUR_CR_EVENT_TIMER__VALUE__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_INV0__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_INV0__RESERVED_1           BITFIELD(31, 1)
#define SGX540__EUR_CR_PDS_INV0__RESERVED_1__POS      1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_INV0__DSC   
 *
 * @BRIEF        Invalidate Context 0 in PDS Data Store Caches 0 and 1 - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_INV0__DSC                  BITFIELD(0, 0)
#define SGX540__EUR_CR_PDS_INV0__DSC__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_INV1__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_INV1__RESERVED_1           BITFIELD(31, 1)
#define SGX540__EUR_CR_PDS_INV1__RESERVED_1__POS      1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_INV1__DSC   
 *
 * @BRIEF        Invalidate Context 1 in PDS Data Store Caches 0 and 1 - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_INV1__DSC                  BITFIELD(0, 0)
#define SGX540__EUR_CR_PDS_INV1__DSC__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_KICK3__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_KICK3__RESERVED_1        BITFIELD(31, 1)
#define SGX540__EUR_CR_EVENT_KICK3__RESERVED_1__POS   1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_KICK3__NOW   
 *
 * @BRIEF        Kick without increment SW event 2 (IR 0 bit 22) - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_KICK3__NOW               BITFIELD(0, 0)
#define SGX540__EUR_CR_EVENT_KICK3__NOW__POS          0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_INV3__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_INV3__RESERVED_1           BITFIELD(31, 1)
#define SGX540__EUR_CR_PDS_INV3__RESERVED_1__POS      1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_INV3__DSC   
 *
 * @BRIEF        Invalidate Context 3 in PDS Data Store Caches 0 and 1 - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_INV3__DSC                  BITFIELD(0, 0)
#define SGX540__EUR_CR_PDS_INV3__DSC__POS             0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_INV_CSC__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (WO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_INV_CSC__RESERVED_1        BITFIELD(31, 1)
#define SGX540__EUR_CR_PDS_INV_CSC__RESERVED_1__POS   1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_INV_CSC__KICK   
 *
 * @BRIEF        Invalidate PDS Code Store Cache - (WO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_INV_CSC__KICK              BITFIELD(0, 0)
#define SGX540__EUR_CR_PDS_INV_CSC__KICK__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM0__RESERVED_8   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM0__RESERVED_8       BITFIELD(31, 8)
#define SGX540__EUR_CR_USE_GLOBCOM0__RESERVED_8__POS  8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM0__COUNT   
 *
 * @BRIEF        Counters for cross-thread synchronisation and communication 
 *               - used for parallelising video processing - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM0__COUNT            BITFIELD(7, 0)
#define SGX540__EUR_CR_USE_GLOBCOM0__COUNT__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM1__RESERVED_8   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM1__RESERVED_8       BITFIELD(31, 8)
#define SGX540__EUR_CR_USE_GLOBCOM1__RESERVED_8__POS  8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM1__COUNT   
 *
 * @BRIEF        Counters for cross-thread synchronisation and communication 
 *               - used for parallelising video processing - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM1__COUNT            BITFIELD(7, 0)
#define SGX540__EUR_CR_USE_GLOBCOM1__COUNT__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM2__RESERVED_8   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM2__RESERVED_8       BITFIELD(31, 8)
#define SGX540__EUR_CR_USE_GLOBCOM2__RESERVED_8__POS  8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM2__COUNT   
 *
 * @BRIEF        Counters for cross-thread synchronisation and communication 
 *               - used for parallelising video processing - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM2__COUNT            BITFIELD(7, 0)
#define SGX540__EUR_CR_USE_GLOBCOM2__COUNT__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM3__RESERVED_8   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM3__RESERVED_8       BITFIELD(31, 8)
#define SGX540__EUR_CR_USE_GLOBCOM3__RESERVED_8__POS  8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM3__COUNT   
 *
 * @BRIEF        Counters for cross-thread synchronisation and communication 
 *               - used for parallelising video processing - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM3__COUNT            BITFIELD(7, 0)
#define SGX540__EUR_CR_USE_GLOBCOM3__COUNT__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM4__RESERVED_8   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM4__RESERVED_8       BITFIELD(31, 8)
#define SGX540__EUR_CR_USE_GLOBCOM4__RESERVED_8__POS  8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM4__COUNT   
 *
 * @BRIEF        Counters for cross-thread synchronisation and communication 
 *               - used for parallelising video processing - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM4__COUNT            BITFIELD(7, 0)
#define SGX540__EUR_CR_USE_GLOBCOM4__COUNT__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM5__RESERVED_8   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM5__RESERVED_8       BITFIELD(31, 8)
#define SGX540__EUR_CR_USE_GLOBCOM5__RESERVED_8__POS  8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM5__COUNT   
 *
 * @BRIEF        Counters for cross-thread synchronisation and communication 
 *               - used for parallelising video processing - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM5__COUNT            BITFIELD(7, 0)
#define SGX540__EUR_CR_USE_GLOBCOM5__COUNT__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM6__RESERVED_8   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM6__RESERVED_8       BITFIELD(31, 8)
#define SGX540__EUR_CR_USE_GLOBCOM6__RESERVED_8__POS  8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM6__COUNT   
 *
 * @BRIEF        Counters for cross-thread synchronisation and communication 
 *               - used for parallelising video processing - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM6__COUNT            BITFIELD(7, 0)
#define SGX540__EUR_CR_USE_GLOBCOM6__COUNT__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM7__RESERVED_8   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM7__RESERVED_8       BITFIELD(31, 8)
#define SGX540__EUR_CR_USE_GLOBCOM7__RESERVED_8__POS  8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_GLOBCOM7__COUNT   
 *
 * @BRIEF        Counters for cross-thread synchronisation and communication 
 *               - used for parallelising video processing - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_GLOBCOM7__COUNT            BITFIELD(7, 0)
#define SGX540__EUR_CR_USE_GLOBCOM7__COUNT__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_LOOPBACK__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_LOOPBACK__RESERVED_1           BITFIELD(31, 1)
#define SGX540__EUR_CR_LOOPBACK__RESERVED_1__POS      1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_LOOPBACK__STATUS   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_LOOPBACK__STATUS               BITFIELD(0, 0)
#define SGX540__EUR_CR_LOOPBACK__STATUS__POS          0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_SERV_PIXEL__RESERVED_17   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_SERV_PIXEL__RESERVED_17   BITFIELD(31, 17)
#define SGX540__EUR_CR_USE0_SERV_PIXEL__RESERVED_17__POS 17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_SERV_PIXEL__EMPTY   
 *
 * @BRIEF        No Pixel Data Master tasks in USE0 queue - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_SERV_PIXEL__EMPTY         BITFIELD(16, 16)
#define SGX540__EUR_CR_USE0_SERV_PIXEL__EMPTY__POS    16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_SERV_PIXEL__COUNT   
 *
 * @BRIEF        Number of Pixel Data Master tasks serviced by USE0 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_SERV_PIXEL__COUNT         BITFIELD(15, 0)
#define SGX540__EUR_CR_USE0_SERV_PIXEL__COUNT__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_SERV_VERTEX__RESERVED_17   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_SERV_VERTEX__RESERVED_17  BITFIELD(31, 17)
#define SGX540__EUR_CR_USE0_SERV_VERTEX__RESERVED_17__POS 17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_SERV_VERTEX__EMPTY   
 *
 * @BRIEF        No Vertex Data Master tasks in USE0 queue - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_SERV_VERTEX__EMPTY        BITFIELD(16, 16)
#define SGX540__EUR_CR_USE0_SERV_VERTEX__EMPTY__POS   16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_SERV_VERTEX__COUNT   
 *
 * @BRIEF        Number of Vertex Data Master tasks serviced by USE0 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_SERV_VERTEX__COUNT        BITFIELD(15, 0)
#define SGX540__EUR_CR_USE0_SERV_VERTEX__COUNT__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_SERV_EVENT__RESERVED_17   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_SERV_EVENT__RESERVED_17   BITFIELD(31, 17)
#define SGX540__EUR_CR_USE0_SERV_EVENT__RESERVED_17__POS 17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_SERV_EVENT__EMPTY   
 *
 * @BRIEF        No Event Data Master tasks in USE0 queue - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_SERV_EVENT__EMPTY         BITFIELD(16, 16)
#define SGX540__EUR_CR_USE0_SERV_EVENT__EMPTY__POS    16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE0_SERV_EVENT__COUNT   
 *
 * @BRIEF        Number of Event Data Master tasks serviced by USE0 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE0_SERV_EVENT__COUNT         BITFIELD(15, 0)
#define SGX540__EUR_CR_USE0_SERV_EVENT__COUNT__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_SERV_PIXEL__RESERVED_17   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_SERV_PIXEL__RESERVED_17   BITFIELD(31, 17)
#define SGX540__EUR_CR_USE1_SERV_PIXEL__RESERVED_17__POS 17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_SERV_PIXEL__EMPTY   
 *
 * @BRIEF        No Pixel Data Master tasks in USE1 queue - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_SERV_PIXEL__EMPTY         BITFIELD(16, 16)
#define SGX540__EUR_CR_USE1_SERV_PIXEL__EMPTY__POS    16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_SERV_PIXEL__COUNT   
 *
 * @BRIEF        Number of Pixel Data Master tasks serviced by USE1 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_SERV_PIXEL__COUNT         BITFIELD(15, 0)
#define SGX540__EUR_CR_USE1_SERV_PIXEL__COUNT__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_SERV_VERTEX__RESERVED_17   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_SERV_VERTEX__RESERVED_17  BITFIELD(31, 17)
#define SGX540__EUR_CR_USE1_SERV_VERTEX__RESERVED_17__POS 17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_SERV_VERTEX__EMPTY   
 *
 * @BRIEF        No Vertex Data Master tasks in USE1 queue - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_SERV_VERTEX__EMPTY        BITFIELD(16, 16)
#define SGX540__EUR_CR_USE1_SERV_VERTEX__EMPTY__POS   16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_SERV_VERTEX__COUNT   
 *
 * @BRIEF        Number of Vertex Data Master tasks serviced by USE1 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_SERV_VERTEX__COUNT        BITFIELD(15, 0)
#define SGX540__EUR_CR_USE1_SERV_VERTEX__COUNT__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_SERV_EVENT__RESERVED_17   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_SERV_EVENT__RESERVED_17   BITFIELD(31, 17)
#define SGX540__EUR_CR_USE1_SERV_EVENT__RESERVED_17__POS 17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_SERV_EVENT__EMPTY   
 *
 * @BRIEF        No Event Data Master tasks in USE1 queue - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_SERV_EVENT__EMPTY         BITFIELD(16, 16)
#define SGX540__EUR_CR_USE1_SERV_EVENT__EMPTY__POS    16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE1_SERV_EVENT__COUNT   
 *
 * @BRIEF        Number of Event Data Master tasks serviced by USE1 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE1_SERV_EVENT__COUNT         BITFIELD(15, 0)
#define SGX540__EUR_CR_USE1_SERV_EVENT__COUNT__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER2_LEFT__RESERVED_20   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER2_LEFT__RESERVED_20  BITFIELD(31, 20)
#define SGX540__EUR_CR_USE_FILTER2_LEFT__RESERVED_20__POS 20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER2_LEFT__TAP0   
 *
 * @BRIEF        FIRH instruction filter option, signed integer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER2_LEFT__TAP0         BITFIELD(19, 10)
#define SGX540__EUR_CR_USE_FILTER2_LEFT__TAP0__POS    10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER2_LEFT__TAP3   
 *
 * @BRIEF        FIRH instruction filter option, signed integer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER2_LEFT__TAP3         BITFIELD(9, 0)
#define SGX540__EUR_CR_USE_FILTER2_LEFT__TAP3__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER2_RIGHT__RESERVED_10   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER2_RIGHT__RESERVED_10 BITFIELD(31, 10)
#define SGX540__EUR_CR_USE_FILTER2_RIGHT__RESERVED_10__POS 10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER2_RIGHT__TAP6   
 *
 * @BRIEF        FIRH instruction filter option, signed integer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER2_RIGHT__TAP6        BITFIELD(9, 0)
#define SGX540__EUR_CR_USE_FILTER2_RIGHT__TAP6__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER2_EXTRA__RESERVED_20   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER2_EXTRA__RESERVED_20 BITFIELD(31, 20)
#define SGX540__EUR_CR_USE_FILTER2_EXTRA__RESERVED_20__POS 20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER2_EXTRA__CONSTANT   
 *
 * @BRIEF        FIRH instruction filter option, unsigned integer additive 
 *               constant - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER2_EXTRA__CONSTANT    BITFIELD(19, 4)
#define SGX540__EUR_CR_USE_FILTER2_EXTRA__CONSTANT__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER2_EXTRA__SHR   
 *
 * @BRIEF        FIRH instruction filter option, unsigned integer right shift 
 *               amount - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER2_EXTRA__SHR         BITFIELD(3, 0)
#define SGX540__EUR_CR_USE_FILTER2_EXTRA__SHR__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_PC_BASE__RESERVED_24   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_PC_BASE__RESERVED_24       BITFIELD(31, 24)
#define SGX540__EUR_CR_PDS_PC_BASE__RESERVED_24__POS  24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_PDS_PC_BASE__ADDRESS   
 *
 * @BRIEF        PC base address - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_PDS_PC_BASE__ADDRESS           BITFIELD(23, 0)
#define SGX540__EUR_CR_PDS_PC_BASE__ADDRESS__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_MOE__RESERVED_9   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_MOE__RESERVED_9            BITFIELD(31, 9)
#define SGX540__EUR_CR_USE_MOE__RESERVED_9__POS       9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_MOE__CFASEL   
 *
 * @BRIEF        Colour instruction format/address select - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_MOE__CFASEL                BITFIELD(8, 8)
#define SGX540__EUR_CR_USE_MOE__CFASEL__POS           8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_MOE__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_MOE__RESERVED_1            BITFIELD(7, 1)
#define SGX540__EUR_CR_USE_MOE__RESERVED_1__POS       1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_MOE__FSFASEL   
 *
 * @BRIEF        EFO source format/address select - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_MOE__FSFASEL               BITFIELD(0, 0)
#define SGX540__EUR_CR_USE_MOE__FSFASEL__POS          0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_DM_SLOT__FIFTEEN   
 *
 * @BRIEF        Pipe 2 Data Master in Slot 15 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_DM_SLOT__FIFTEEN          BITFIELD(31, 30)
#define SGX540__EUR_CR_USE2_DM_SLOT__FIFTEEN__POS     30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_DM_SLOT__FOURTEEN   
 *
 * @BRIEF        Pipe 2 Data Master in Slot 14 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_DM_SLOT__FOURTEEN         BITFIELD(29, 28)
#define SGX540__EUR_CR_USE2_DM_SLOT__FOURTEEN__POS    28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_DM_SLOT__THIRTEEN   
 *
 * @BRIEF        Pipe 2 Data Master in Slot 13 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_DM_SLOT__THIRTEEN         BITFIELD(27, 26)
#define SGX540__EUR_CR_USE2_DM_SLOT__THIRTEEN__POS    26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_DM_SLOT__TWELVE   
 *
 * @BRIEF        Pipe 2 Data Master in Slot 12 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_DM_SLOT__TWELVE           BITFIELD(25, 24)
#define SGX540__EUR_CR_USE2_DM_SLOT__TWELVE__POS      24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_DM_SLOT__ELEVEN   
 *
 * @BRIEF        Pipe 2 Data Master in Slot 11 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_DM_SLOT__ELEVEN           BITFIELD(23, 22)
#define SGX540__EUR_CR_USE2_DM_SLOT__ELEVEN__POS      22

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_DM_SLOT__TEN   
 *
 * @BRIEF        Pipe 2 Data Master in Slot 10 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_DM_SLOT__TEN              BITFIELD(21, 20)
#define SGX540__EUR_CR_USE2_DM_SLOT__TEN__POS         20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_DM_SLOT__NINE   
 *
 * @BRIEF        Pipe 2 Data Master in Slot 9 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_DM_SLOT__NINE             BITFIELD(19, 18)
#define SGX540__EUR_CR_USE2_DM_SLOT__NINE__POS        18

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_DM_SLOT__EIGHT   
 *
 * @BRIEF        Pipe 2 Data Master in Slot 8 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_DM_SLOT__EIGHT            BITFIELD(17, 16)
#define SGX540__EUR_CR_USE2_DM_SLOT__EIGHT__POS       16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_DM_SLOT__SEVEN   
 *
 * @BRIEF        Pipe 2 Data Master in Slot 7 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_DM_SLOT__SEVEN            BITFIELD(15, 14)
#define SGX540__EUR_CR_USE2_DM_SLOT__SEVEN__POS       14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_DM_SLOT__SIX   
 *
 * @BRIEF        Pipe 2 Data Master in Slot 6 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_DM_SLOT__SIX              BITFIELD(13, 12)
#define SGX540__EUR_CR_USE2_DM_SLOT__SIX__POS         12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_DM_SLOT__FIVE   
 *
 * @BRIEF        Pipe 2 Data Master in Slot 5 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_DM_SLOT__FIVE             BITFIELD(11, 10)
#define SGX540__EUR_CR_USE2_DM_SLOT__FIVE__POS        10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_DM_SLOT__FOUR   
 *
 * @BRIEF        Pipe 2 Data Master in Slot 4 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_DM_SLOT__FOUR             BITFIELD(9, 8)
#define SGX540__EUR_CR_USE2_DM_SLOT__FOUR__POS        8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_DM_SLOT__THREE   
 *
 * @BRIEF        Pipe 2 Data Master in Slot 3 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_DM_SLOT__THREE            BITFIELD(7, 6)
#define SGX540__EUR_CR_USE2_DM_SLOT__THREE__POS       6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_DM_SLOT__TWO   
 *
 * @BRIEF        Pipe 2 Data Master in Slot 2 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_DM_SLOT__TWO              BITFIELD(5, 4)
#define SGX540__EUR_CR_USE2_DM_SLOT__TWO__POS         4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_DM_SLOT__ONE   
 *
 * @BRIEF        Pipe 2 Data Master in Slot 1 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_DM_SLOT__ONE              BITFIELD(3, 2)
#define SGX540__EUR_CR_USE2_DM_SLOT__ONE__POS         2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_DM_SLOT__ZERO   
 *
 * @BRIEF        Pipe 2 Data Master in Slot 0 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_DM_SLOT__ZERO             BITFIELD(1, 0)
#define SGX540__EUR_CR_USE2_DM_SLOT__ZERO__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_DM_SLOT__FIFTEEN   
 *
 * @BRIEF        Pipe 3 Data Master in Slot 15 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_DM_SLOT__FIFTEEN          BITFIELD(31, 30)
#define SGX540__EUR_CR_USE3_DM_SLOT__FIFTEEN__POS     30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_DM_SLOT__FOURTEEN   
 *
 * @BRIEF        Pipe 3 Data Master in Slot 14 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_DM_SLOT__FOURTEEN         BITFIELD(29, 28)
#define SGX540__EUR_CR_USE3_DM_SLOT__FOURTEEN__POS    28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_DM_SLOT__THIRTEEN   
 *
 * @BRIEF        Pipe 3 Data Master in Slot 13 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_DM_SLOT__THIRTEEN         BITFIELD(27, 26)
#define SGX540__EUR_CR_USE3_DM_SLOT__THIRTEEN__POS    26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_DM_SLOT__TWELVE   
 *
 * @BRIEF        Pipe 3 Data Master in Slot 12 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_DM_SLOT__TWELVE           BITFIELD(25, 24)
#define SGX540__EUR_CR_USE3_DM_SLOT__TWELVE__POS      24

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_DM_SLOT__ELEVEN   
 *
 * @BRIEF        Pipe 3 Data Master in Slot 11 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_DM_SLOT__ELEVEN           BITFIELD(23, 22)
#define SGX540__EUR_CR_USE3_DM_SLOT__ELEVEN__POS      22

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_DM_SLOT__TEN   
 *
 * @BRIEF        Pipe 3 Data Master in Slot 10 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_DM_SLOT__TEN              BITFIELD(21, 20)
#define SGX540__EUR_CR_USE3_DM_SLOT__TEN__POS         20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_DM_SLOT__NINE   
 *
 * @BRIEF        Pipe 3 Data Master in Slot 9 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_DM_SLOT__NINE             BITFIELD(19, 18)
#define SGX540__EUR_CR_USE3_DM_SLOT__NINE__POS        18

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_DM_SLOT__EIGHT   
 *
 * @BRIEF        Pipe 3 Data Master in Slot 8 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_DM_SLOT__EIGHT            BITFIELD(17, 16)
#define SGX540__EUR_CR_USE3_DM_SLOT__EIGHT__POS       16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_DM_SLOT__SEVEN   
 *
 * @BRIEF        Pipe 3 Data Master in Slot 7 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_DM_SLOT__SEVEN            BITFIELD(15, 14)
#define SGX540__EUR_CR_USE3_DM_SLOT__SEVEN__POS       14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_DM_SLOT__SIX   
 *
 * @BRIEF        Pipe 3 Data Master in Slot 6 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_DM_SLOT__SIX              BITFIELD(13, 12)
#define SGX540__EUR_CR_USE3_DM_SLOT__SIX__POS         12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_DM_SLOT__FIVE   
 *
 * @BRIEF        Pipe 3 Data Master in Slot 5 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_DM_SLOT__FIVE             BITFIELD(11, 10)
#define SGX540__EUR_CR_USE3_DM_SLOT__FIVE__POS        10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_DM_SLOT__FOUR   
 *
 * @BRIEF        Pipe 3 Data Master in Slot 4 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_DM_SLOT__FOUR             BITFIELD(9, 8)
#define SGX540__EUR_CR_USE3_DM_SLOT__FOUR__POS        8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_DM_SLOT__THREE   
 *
 * @BRIEF        Pipe 3 Data Master in Slot 3 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_DM_SLOT__THREE            BITFIELD(7, 6)
#define SGX540__EUR_CR_USE3_DM_SLOT__THREE__POS       6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_DM_SLOT__TWO   
 *
 * @BRIEF        Pipe 3 Data Master in Slot 2 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_DM_SLOT__TWO              BITFIELD(5, 4)
#define SGX540__EUR_CR_USE3_DM_SLOT__TWO__POS         4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_DM_SLOT__ONE   
 *
 * @BRIEF        Pipe 3 Data Master in Slot 1 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_DM_SLOT__ONE              BITFIELD(3, 2)
#define SGX540__EUR_CR_USE3_DM_SLOT__ONE__POS         2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_DM_SLOT__ZERO   
 *
 * @BRIEF        Pipe 3 Data Master in Slot 0 - 00=Vertex 01=Pixel 10=Empty 
 *               11=Event - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_DM_SLOT__ZERO             BITFIELD(1, 0)
#define SGX540__EUR_CR_USE3_DM_SLOT__ZERO__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_SERV_PIXEL__RESERVED_17   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_SERV_PIXEL__RESERVED_17   BITFIELD(31, 17)
#define SGX540__EUR_CR_USE2_SERV_PIXEL__RESERVED_17__POS 17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_SERV_PIXEL__EMPTY   
 *
 * @BRIEF        No Pixel Data Master tasks in USE0 queue - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_SERV_PIXEL__EMPTY         BITFIELD(16, 16)
#define SGX540__EUR_CR_USE2_SERV_PIXEL__EMPTY__POS    16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_SERV_PIXEL__COUNT   
 *
 * @BRIEF        Number of Pixel Data Master tasks serviced by USE2 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_SERV_PIXEL__COUNT         BITFIELD(15, 0)
#define SGX540__EUR_CR_USE2_SERV_PIXEL__COUNT__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_SERV_VERTEX__RESERVED_17   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_SERV_VERTEX__RESERVED_17  BITFIELD(31, 17)
#define SGX540__EUR_CR_USE2_SERV_VERTEX__RESERVED_17__POS 17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_SERV_VERTEX__EMPTY   
 *
 * @BRIEF        No Vertex Data Master tasks in USE0 queue - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_SERV_VERTEX__EMPTY        BITFIELD(16, 16)
#define SGX540__EUR_CR_USE2_SERV_VERTEX__EMPTY__POS   16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_SERV_VERTEX__COUNT   
 *
 * @BRIEF        Number of Vertex Data Master tasks serviced by USE2 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_SERV_VERTEX__COUNT        BITFIELD(15, 0)
#define SGX540__EUR_CR_USE2_SERV_VERTEX__COUNT__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_SERV_EVENT__RESERVED_17   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_SERV_EVENT__RESERVED_17   BITFIELD(31, 17)
#define SGX540__EUR_CR_USE2_SERV_EVENT__RESERVED_17__POS 17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_SERV_EVENT__EMPTY   
 *
 * @BRIEF        No Event Data Master tasks in USE0 queue - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_SERV_EVENT__EMPTY         BITFIELD(16, 16)
#define SGX540__EUR_CR_USE2_SERV_EVENT__EMPTY__POS    16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE2_SERV_EVENT__COUNT   
 *
 * @BRIEF        Number of Event Data Master tasks serviced by USE2 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE2_SERV_EVENT__COUNT         BITFIELD(15, 0)
#define SGX540__EUR_CR_USE2_SERV_EVENT__COUNT__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_SERV_PIXEL__RESERVED_17   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_SERV_PIXEL__RESERVED_17   BITFIELD(31, 17)
#define SGX540__EUR_CR_USE3_SERV_PIXEL__RESERVED_17__POS 17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_SERV_PIXEL__EMPTY   
 *
 * @BRIEF        No Pixel Data Master tasks in USE1 queue - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_SERV_PIXEL__EMPTY         BITFIELD(16, 16)
#define SGX540__EUR_CR_USE3_SERV_PIXEL__EMPTY__POS    16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_SERV_PIXEL__COUNT   
 *
 * @BRIEF        Number of Pixel Data Master tasks serviced by USE3 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_SERV_PIXEL__COUNT         BITFIELD(15, 0)
#define SGX540__EUR_CR_USE3_SERV_PIXEL__COUNT__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_SERV_VERTEX__RESERVED_17   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_SERV_VERTEX__RESERVED_17  BITFIELD(31, 17)
#define SGX540__EUR_CR_USE3_SERV_VERTEX__RESERVED_17__POS 17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_SERV_VERTEX__EMPTY   
 *
 * @BRIEF        No Vertex Data Master tasks in USE1 queue - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_SERV_VERTEX__EMPTY        BITFIELD(16, 16)
#define SGX540__EUR_CR_USE3_SERV_VERTEX__EMPTY__POS   16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_SERV_VERTEX__COUNT   
 *
 * @BRIEF        Number of Vertex Data Master tasks serviced by USE3 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_SERV_VERTEX__COUNT        BITFIELD(15, 0)
#define SGX540__EUR_CR_USE3_SERV_VERTEX__COUNT__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_SERV_EVENT__RESERVED_17   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_SERV_EVENT__RESERVED_17   BITFIELD(31, 17)
#define SGX540__EUR_CR_USE3_SERV_EVENT__RESERVED_17__POS 17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_SERV_EVENT__EMPTY   
 *
 * @BRIEF        No Event Data Master tasks in USE1 queue - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_SERV_EVENT__EMPTY         BITFIELD(16, 16)
#define SGX540__EUR_CR_USE3_SERV_EVENT__EMPTY__POS    16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE3_SERV_EVENT__COUNT   
 *
 * @BRIEF        Number of Event Data Master tasks serviced by USE3 - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE3_SERV_EVENT__COUNT         BITFIELD(15, 0)
#define SGX540__EUR_CR_USE3_SERV_EVENT__COUNT__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER0_CENTRE__RESERVED_20   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER0_CENTRE__RESERVED_20 BITFIELD(31, 20)
#define SGX540__EUR_CR_USE_FILTER0_CENTRE__RESERVED_20__POS 20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER0_CENTRE__TAP3   
 *
 * @BRIEF        FIRH instruction filter option, signed integer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER0_CENTRE__TAP3       BITFIELD(19, 10)
#define SGX540__EUR_CR_USE_FILTER0_CENTRE__TAP3__POS  10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER0_CENTRE__TAP4   
 *
 * @BRIEF        FIRH instruction filter option, signed integer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER0_CENTRE__TAP4       BITFIELD(9, 0)
#define SGX540__EUR_CR_USE_FILTER0_CENTRE__TAP4__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER1_CENTRE__RESERVED_20   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER1_CENTRE__RESERVED_20 BITFIELD(31, 20)
#define SGX540__EUR_CR_USE_FILTER1_CENTRE__RESERVED_20__POS 20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER1_CENTRE__TAP3   
 *
 * @BRIEF        FIRH instruction filter option, signed integer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER1_CENTRE__TAP3       BITFIELD(19, 10)
#define SGX540__EUR_CR_USE_FILTER1_CENTRE__TAP3__POS  10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_FILTER1_CENTRE__TAP4   
 *
 * @BRIEF        FIRH instruction filter option, signed integer - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_FILTER1_CENTRE__TAP4       BITFIELD(9, 0)
#define SGX540__EUR_CR_USE_FILTER1_CENTRE__TAP4__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_CTRL__RESERVED_16   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_CTRL__RESERVED_16          BITFIELD(31, 16)
#define SGX540__EUR_CR_BIF_CTRL__RESERVED_16__POS     16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_CTRL__MMU_BYPASS_USE   
 *
 * @BRIEF        Setting to '1' bypasses the MMU for this requestor - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_CTRL__MMU_BYPASS_USE       BITFIELD(15, 15)
#define SGX540__EUR_CR_BIF_CTRL__MMU_BYPASS_USE__POS  15

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_CTRL__MMU_BYPASS_ISP   
 *
 * @BRIEF        Setting to '1' bypasses the MMU for this requestor - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_CTRL__MMU_BYPASS_ISP       BITFIELD(14, 14)
#define SGX540__EUR_CR_BIF_CTRL__MMU_BYPASS_ISP__POS  14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_CTRL__MMU_BYPASS_TSPP   
 *
 * @BRIEF        Setting to '1' bypasses the MMU for this requestor - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_CTRL__MMU_BYPASS_TSPP      BITFIELD(13, 13)
#define SGX540__EUR_CR_BIF_CTRL__MMU_BYPASS_TSPP__POS 13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_CTRL__MMU_BYPASS_PBE   
 *
 * @BRIEF        Setting to '1' bypasses the MMU for this requestor - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_CTRL__MMU_BYPASS_PBE       BITFIELD(12, 12)
#define SGX540__EUR_CR_BIF_CTRL__MMU_BYPASS_PBE__POS  12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_CTRL__RESERVED_11   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_CTRL__RESERVED_11          BITFIELD(11, 11)
#define SGX540__EUR_CR_BIF_CTRL__RESERVED_11__POS     11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_CTRL__MMU_BYPASS_TE   
 *
 * @BRIEF        Setting to '1' bypasses the MMU for this requestor - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_CTRL__MMU_BYPASS_TE        BITFIELD(10, 10)
#define SGX540__EUR_CR_BIF_CTRL__MMU_BYPASS_TE__POS   10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_CTRL__MMU_BYPASS_VDM   
 *
 * @BRIEF        Setting to '1' bypasses the MMU for this requestor - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_CTRL__MMU_BYPASS_VDM       BITFIELD(9, 9)
#define SGX540__EUR_CR_BIF_CTRL__MMU_BYPASS_VDM__POS  9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_CTRL__MMU_BYPASS_CACHE   
 *
 * @BRIEF        Setting to '1' bypasses the MMU for this requestor - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_CTRL__MMU_BYPASS_CACHE     BITFIELD(8, 8)
#define SGX540__EUR_CR_BIF_CTRL__MMU_BYPASS_CACHE__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_CTRL__RESERVED_5   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_CTRL__RESERVED_5           BITFIELD(7, 5)
#define SGX540__EUR_CR_BIF_CTRL__RESERVED_5__POS      5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_CTRL__CLEAR_FAULT   
 *
 * @BRIEF        Writing '1' clears the current fault in the 
 *               EUR_CR_BIF_INT_STAT register - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_CTRL__CLEAR_FAULT          BITFIELD(4, 4)
#define SGX540__EUR_CR_BIF_CTRL__CLEAR_FAULT__POS     4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_CTRL__INVALDC   
 *
 * @BRIEF        Writing '1' causes flushing of directory cache (and all 
 *               other caches and tlbs) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_CTRL__INVALDC              BITFIELD(3, 3)
#define SGX540__EUR_CR_BIF_CTRL__INVALDC__POS         3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_CTRL__FLUSH   
 *
 * @BRIEF        Writing '1' causes flushing of address translation cache and 
 *               all tlbs - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_CTRL__FLUSH                BITFIELD(2, 2)
#define SGX540__EUR_CR_BIF_CTRL__FLUSH__POS           2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_CTRL__PAUSE   
 *
 * @BRIEF        Writing '1' causes bif operation to pause - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_CTRL__PAUSE                BITFIELD(1, 1)
#define SGX540__EUR_CR_BIF_CTRL__PAUSE__POS           1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_CTRL__NOREORDER   
 *
 * @BRIEF        Writing '1' disables transaction re-ordering by signaling to 
 *               the external SoC infrastructure to closely order the 
 *               requests (Debug Only) - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_CTRL__NOREORDER            BITFIELD(0, 0)
#define SGX540__EUR_CR_BIF_CTRL__NOREORDER__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_INT_STAT__RESERVED_16   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_INT_STAT__RESERVED_16      BITFIELD(31, 16)
#define SGX540__EUR_CR_BIF_INT_STAT__RESERVED_16__POS 16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_INT_STAT__FLUSH_COMPLETE   
 *
 * @BRIEF        Indicates that MMU cache flushing operations are complete - 
 *               (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_INT_STAT__FLUSH_COMPLETE   BITFIELD(15, 15)
#define SGX540__EUR_CR_BIF_INT_STAT__FLUSH_COMPLETE__POS 15

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_INT_STAT__PF_N_RW   
 *
 * @BRIEF        Indicates whether the current fault is a page or R/W 
 *               protection fault - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_INT_STAT__PF_N_RW          BITFIELD(14, 14)
#define SGX540__EUR_CR_BIF_INT_STAT__PF_N_RW__POS     14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_INT_STAT__FAULT   
 *
 * @BRIEF        1 bit per requestor indicating a page fault (only 1 can be 
 *               set at once) - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_INT_STAT__FAULT            BITFIELD(13, 0)
#define SGX540__EUR_CR_BIF_INT_STAT__FAULT__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_FAULT__RESERVED_28   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_FAULT__RESERVED_28         BITFIELD(31, 28)
#define SGX540__EUR_CR_BIF_FAULT__RESERVED_28__POS    28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_FAULT__ADDR   
 *
 * @BRIEF        Page-aligned address causing page fault - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_FAULT__ADDR                BITFIELD(27, 12)
#define SGX540__EUR_CR_BIF_FAULT__ADDR__POS           12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_FAULT__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_FAULT__RESERVED_0          BITFIELD(11, 0)
#define SGX540__EUR_CR_BIF_FAULT__RESERVED_0__POS     0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_DIR_LIST_BASE0__ADDR   
 *
 * @BRIEF        Base address for Directory Cache updates - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_DIR_LIST_BASE0__ADDR       BITFIELD(31, 12)
#define SGX540__EUR_CR_BIF_DIR_LIST_BASE0__ADDR__POS  12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_DIR_LIST_BASE0__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_DIR_LIST_BASE0__RESERVED_0 BITFIELD(11, 0)
#define SGX540__EUR_CR_BIF_DIR_LIST_BASE0__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_TA_REQ_BASE__RESERVED_28   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_TA_REQ_BASE__RESERVED_28   BITFIELD(31, 28)
#define SGX540__EUR_CR_BIF_TA_REQ_BASE__RESERVED_28__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_TA_REQ_BASE__ADDR   
 *
 * @BRIEF        Base address for ta requestor - 256MB, 1MB aligned - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_TA_REQ_BASE__ADDR          BITFIELD(27, 20)
#define SGX540__EUR_CR_BIF_TA_REQ_BASE__ADDR__POS     20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_TA_REQ_BASE__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_TA_REQ_BASE__RESERVED_0    BITFIELD(19, 0)
#define SGX540__EUR_CR_BIF_TA_REQ_BASE__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_MEM_REQ_STAT__RESERVED_8   
 *
 * @BRIEF        Bitfield description is not available - (RO)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_MEM_REQ_STAT__RESERVED_8   BITFIELD(31, 8)
#define SGX540__EUR_CR_BIF_MEM_REQ_STAT__RESERVED_8__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_MEM_REQ_STAT__READS   
 *
 * @BRIEF        Outstanding read requests in the memif - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_MEM_REQ_STAT__READS        BITFIELD(7, 0)
#define SGX540__EUR_CR_BIF_MEM_REQ_STAT__READS__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_3D_REQ_BASE__RESERVED_28   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_3D_REQ_BASE__RESERVED_28   BITFIELD(31, 28)
#define SGX540__EUR_CR_BIF_3D_REQ_BASE__RESERVED_28__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_3D_REQ_BASE__ADDR   
 *
 * @BRIEF        Base address for 3d requestors  - 256MB, 1MB aligned - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_3D_REQ_BASE__ADDR          BITFIELD(27, 20)
#define SGX540__EUR_CR_BIF_3D_REQ_BASE__ADDR__POS     20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_3D_REQ_BASE__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_3D_REQ_BASE__RESERVED_0    BITFIELD(19, 0)
#define SGX540__EUR_CR_BIF_3D_REQ_BASE__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_ZLS_REQ_BASE__RESERVED_28   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_ZLS_REQ_BASE__RESERVED_28  BITFIELD(31, 28)
#define SGX540__EUR_CR_BIF_ZLS_REQ_BASE__RESERVED_28__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_ZLS_REQ_BASE__ADDR   
 *
 * @BRIEF        Base address for zls requestor - 256MB, 1MB aligned - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_ZLS_REQ_BASE__ADDR         BITFIELD(27, 20)
#define SGX540__EUR_CR_BIF_ZLS_REQ_BASE__ADDR__POS    20

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_ZLS_REQ_BASE__RESERVED_0   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_ZLS_REQ_BASE__RESERVED_0   BITFIELD(19, 0)
#define SGX540__EUR_CR_BIF_ZLS_REQ_BASE__RESERVED_0__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_SIG0__WDATA_SIGNATURE   
 *
 * @BRIEF        Signature of output to memory. A signature is an 
 *               accumulative LFSR (Linear Feedback Shift Register) of the 
 *               valid pipeline data using an XOR structure. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_SIG0__WDATA_SIGNATURE      BITFIELD(31, 0)
#define SGX540__EUR_CR_BIF_SIG0__WDATA_SIGNATURE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_BIF_SIG1__ADDR_SIGNATURE   
 *
 * @BRIEF        Signature of output to memory. A signature is an 
 *               accumulative LFSR (Linear Feedback Shift Register) of the 
 *               valid pipeline data using an XOR structure. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_BIF_SIG1__ADDR_SIGNATURE       BITFIELD(31, 0)
#define SGX540__EUR_CR_BIF_SIG1__ADDR_SIGNATURE__POS  0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_CYCLE_COUNT__RESERVED_1   
 *
 * @BRIEF        Bitfield description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_CYCLE_COUNT__RESERVED_1    BITFIELD(31, 1)
#define SGX540__EUR_CR_EMU_CYCLE_COUNT__RESERVED_1__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_CYCLE_COUNT__RESET   
 *
 * @BRIEF        A write of 1 to this register resets the Cycle Counters and 
 *               holds them in Reset. A write of 0 enables them for Counting 
 *               - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_CYCLE_COUNT__RESET         BITFIELD(0, 0)
#define SGX540__EUR_CR_EMU_CYCLE_COUNT__RESET__POS    0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_TA_PHASE__COUNT   
 *
 * @BRIEF        A count of the number of TA phases kicked so far in the Test 
 *               Run - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_TA_PHASE__COUNT            BITFIELD(31, 0)
#define SGX540__EUR_CR_EMU_TA_PHASE__COUNT__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_3D_PHASE__COUNT   
 *
 * @BRIEF        A count of the number of 3D renders kicked so far in the 
 *               Test Run - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_3D_PHASE__COUNT            BITFIELD(31, 0)
#define SGX540__EUR_CR_EMU_3D_PHASE__COUNT__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_TA_CYCLE__COUNT   
 *
 * @BRIEF        A count of the number of cycles spent in TA phases kicked so 
 *               far in the Test Run - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_TA_CYCLE__COUNT            BITFIELD(31, 0)
#define SGX540__EUR_CR_EMU_TA_CYCLE__COUNT__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_3D_CYCLE__COUNT   
 *
 * @BRIEF        A count of the number of cycles spent in 3D phases kicked so 
 *               far in the Test Run - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_3D_CYCLE__COUNT            BITFIELD(31, 0)
#define SGX540__EUR_CR_EMU_3D_CYCLE__COUNT__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_MEM_READ__COUNT   
 *
 * @BRIEF        A count of the number of Memory Reads so far in the Test Run 
 *               - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_MEM_READ__COUNT            BITFIELD(31, 0)
#define SGX540__EUR_CR_EMU_MEM_READ__COUNT__POS       0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_TA_OR_3D_CYCLE__COUNT   
 *
 * @BRIEF        A count of the number of cycles spent in TA phases or 3D 
 *               renders so far in the Test Run - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_TA_OR_3D_CYCLE__COUNT      BITFIELD(31, 0)
#define SGX540__EUR_CR_EMU_TA_OR_3D_CYCLE__COUNT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_MEM_WRITE__COUNT   
 *
 * @BRIEF        A count of the number of Memory Writes so far in the Test 
 *               Run - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_MEM_WRITE__COUNT           BITFIELD(31, 0)
#define SGX540__EUR_CR_EMU_MEM_WRITE__COUNT__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_MEM_BYTE_WRITE__COUNT   
 *
 * @BRIEF        A count of the number of Memory Bytes Written so far in the 
 *               Test Run - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_MEM_BYTE_WRITE__COUNT      BITFIELD(31, 0)
#define SGX540__EUR_CR_EMU_MEM_BYTE_WRITE__COUNT__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EMU_MEM_STALL__COUNT   
 *
 * @BRIEF        A count of the number of cycles of stalled memory access so 
 *               far in the Test Run - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EMU_MEM_STALL__COUNT           BITFIELD(31, 0)
#define SGX540__EUR_CR_EMU_MEM_STALL__COUNT__POS      0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_REVISION__REVISIONID   
 *
 * @BRIEF        Revision value. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_REVISION__REVISIONID              BITFIELD(31, 0)
#define SGX540__OCP_REVISION__REVISIONID__POS         0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_HWINFO__MEM_BUS_WIDTH   
 *
 * @BRIEF        Memory bus width: 
 *               0 = 64 bits 
 *               1 = 128 bits - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_HWINFO__MEM_BUS_WIDTH             BITFIELD(2, 2)
#define SGX540__OCP_HWINFO__MEM_BUS_WIDTH__POS        2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_HWINFO__SYS_BUS_WIDTH   
 *
 * @BRIEF        System Bus Width 
 *               00 - 32 bits 
 *               01 - 64 bits 
 *               10 - 128 bits 
 *               11 - reserved - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_HWINFO__SYS_BUS_WIDTH             BITFIELD(1, 0)
#define SGX540__OCP_HWINFO__SYS_BUS_WIDTH__POS        0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_SYSCONFIG__STANDBY_MODE   
 *
 * @BRIEF        Clock standby mode 
 *               00 - Force Standby 
 *               01 - No Standby 
 *               1x - Smart Standby - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_SYSCONFIG__STANDBY_MODE           BITFIELD(5, 4)
#define SGX540__OCP_SYSCONFIG__STANDBY_MODE__POS      4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_SYSCONFIG__IDLE_MODE   
 *
 * @BRIEF        Clock Idle mode 
 *               00 - Force Idle 
 *               01 - No Idle 
 *               1x - Smart Idle - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_SYSCONFIG__IDLE_MODE              BITFIELD(3, 2)
#define SGX540__OCP_SYSCONFIG__IDLE_MODE__POS         2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_RAW_0__INIT_MINTERRUPT_RAW   
 *
 * @BRIEF        Interrupt 0 - master port raw event 
 *               W0 - no action 
 *               W1 - Set event (used for debug) 
 *               R0 - No event pending 
 *               R1 - Event pending - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_RAW_0__INIT_MINTERRUPT_RAW BITFIELD(0, 0)
#define SGX540__OCP_IRQSTATUS_RAW_0__INIT_MINTERRUPT_RAW__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_RAW_1__TARGET_SINTERRUPT_RAW   
 *
 * @BRIEF        Interrupt 1- slave port raw event 
 *               W0 - no action 
 *               W1 - Set event (used for debug) 
 *               R0 - No event pending 
 *               R1 - Event pending - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_RAW_1__TARGET_SINTERRUPT_RAW BITFIELD(0, 0)
#define SGX540__OCP_IRQSTATUS_RAW_1__TARGET_SINTERRUPT_RAW__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_RAW_2__THALIA_IRQ_RAW   
 *
 * @BRIEF        Interrupt 2  - Thalia raw event 
 *               W0 - no action 
 *               W1 - Set event (used for debug) 
 *               R0 - No event pending 
 *               R1 - Event pending - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_RAW_2__THALIA_IRQ_RAW   BITFIELD(0, 0)
#define SGX540__OCP_IRQSTATUS_RAW_2__THALIA_IRQ_RAW__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_0__INIT_MINTERRUPT_STATUS   
 *
 * @BRIEF        Interrupt 0 - Master port status event 
 *               W0 - no action 
 *               W1 - Clear event 
 *               R0 - No event pending 
 *               R1 - Event pending and interrupt enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_0__INIT_MINTERRUPT_STATUS BITFIELD(0, 0)
#define SGX540__OCP_IRQSTATUS_0__INIT_MINTERRUPT_STATUS__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_1__TARGET_SINTERRUPT_STATUS   
 *
 * @BRIEF        Interrupt 1 - slave port status event 
 *               W0 - no action 
 *               W1 - Clear event 
 *               R0 - No event pending 
 *               R1 - Event pending and interrupt enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_1__TARGET_SINTERRUPT_STATUS BITFIELD(0, 0)
#define SGX540__OCP_IRQSTATUS_1__TARGET_SINTERRUPT_STATUS__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_2__THALIA_IRQ_STATUS   
 *
 * @BRIEF        Interrupt 2 - Thalia (core) status event 
 *               W0 - no action 
 *               W1 - Clear event 
 *               R0 - No event pending 
 *               R1 - Event pending and interrupt enabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_2__THALIA_IRQ_STATUS    BITFIELD(0, 0)
#define SGX540__OCP_IRQSTATUS_2__THALIA_IRQ_STATUS__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_SET_0__INIT_MINTERRUPT_ENABLE   
 *
 * @BRIEF        To enable interrupt 0 - master port 
 *               W0 - no action 
 *               W1 - Enable Interrupt 
 *               R0 - Interrupt is enabled 
 *               R1 - Interrupt is disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_SET_0__INIT_MINTERRUPT_ENABLE BITFIELD(0, 0)
#define SGX540__OCP_IRQENABLE_SET_0__INIT_MINTERRUPT_ENABLE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_SET_1__TARGET_SINTERRUPT_ENABLE   
 *
 * @BRIEF        To enable interrupt 1 - slave port  interrupt 
 *               W0 - no action 
 *               W1 - Enable Interrupt 
 *               R0 - Interrupt is enabled 
 *               R1 - Interrupt is disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_SET_1__TARGET_SINTERRUPT_ENABLE BITFIELD(0, 0)
#define SGX540__OCP_IRQENABLE_SET_1__TARGET_SINTERRUPT_ENABLE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_SET_2__THALIA_IRQ_ENABLE   
 *
 * @BRIEF        To enable interrupt 2 - Thalia (core)  interrupt 
 *               W0 - no action 
 *               W1 - Enable Interrupt 
 *               R0 - Interrupt is enabled 
 *               R1 - Interrupt is disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_SET_2__THALIA_IRQ_ENABLE BITFIELD(0, 0)
#define SGX540__OCP_IRQENABLE_SET_2__THALIA_IRQ_ENABLE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_CLR_0__INIT_MINTERRUPT_DISABLE   
 *
 * @BRIEF        To disable interrupt 0 - master port 
 *               W0 - no action 
 *               W1 - Disable Interrupt 
 *               R0 - Interrupt is enabled 
 *               R1 - Interrupt is disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_CLR_0__INIT_MINTERRUPT_DISABLE BITFIELD(0, 0)
#define SGX540__OCP_IRQENABLE_CLR_0__INIT_MINTERRUPT_DISABLE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_CLR_1__TARGET_SINTERRUPT_DISABLE   
 *
 * @BRIEF        To disable interrupt 1 - slave port 
 *               W0 - no action 
 *               W1 - Disable Interrupt 
 *               R0 - Interrupt is enabled 
 *               R1 - Interrupt is disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_CLR_1__TARGET_SINTERRUPT_DISABLE BITFIELD(0, 0)
#define SGX540__OCP_IRQENABLE_CLR_1__TARGET_SINTERRUPT_DISABLE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_CLR_2__THALIA_IRQ_DISABLE   
 *
 * @BRIEF        To disable interrupt 2 - Thalia (core) interrupt 
 *               W0 - no action 
 *               W1 - Disable Interrupt 
 *               R0 - Interrupt is enabled 
 *               R1 - Interrupt is disabled - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_CLR_2__THALIA_IRQ_DISABLE BITFIELD(0, 0)
#define SGX540__OCP_IRQENABLE_CLR_2__THALIA_IRQ_DISABLE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_PAGE_CONFIG__OCP_PAGE_SIZE   
 *
 * @BRIEF        Defines the page size on OCPl memory interface 
 *               00 ? 4KB 
 *               01 ? 2KB 
 *               10 ? 1KB 
 *               11 ? 512B - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_PAGE_CONFIG__OCP_PAGE_SIZE        BITFIELD(4, 3)
#define SGX540__OCP_PAGE_CONFIG__OCP_PAGE_SIZE__POS   3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_PAGE_CONFIG__MEM_PAGE_CHECK_EN   
 *
 * @BRIEF        Enable page boundary checking. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_PAGE_CONFIG__MEM_PAGE_CHECK_EN    BITFIELD(2, 2)
#define SGX540__OCP_PAGE_CONFIG__MEM_PAGE_CHECK_EN__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_PAGE_CONFIG__MEM_PAGE_SIZE   
 *
 * @BRIEF        Defines the page size on internal memory interface 
 *               00 ? 4KB 
 *               01 ? 2KB 
 *               10 ? 1KB 
 *               11 ? 512B - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_PAGE_CONFIG__MEM_PAGE_SIZE        BITFIELD(1, 0)
#define SGX540__OCP_PAGE_CONFIG__MEM_PAGE_SIZE__POS   0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__TARGET_INVALID_OCP_CMD   
 *
 * @BRIEF        Invalid command from OCP 
 *               W 0 ? Clear the event 
 *               W 1 ? Set the event and interrupt if enabled (debug only) 
 *               R 0 ? No event pending 
 *               R 1 ? Event pending - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__TARGET_INVALID_OCP_CMD BITFIELD(10, 10)
#define SGX540__OCP_INTERRUPT_EVENT__TARGET_INVALID_OCP_CMD__POS 10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__TARGET_CMD_FIFO_FULL   
 *
 * @BRIEF        Command FIFO full 
 *               W 0 ? Clear the event 
 *               W 1 ? Set the event and interrupt if enabled (debug only) 
 *               R 0 ? No event pending 
 *               R 1 ? Event pending - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__TARGET_CMD_FIFO_FULL BITFIELD(9, 9)
#define SGX540__OCP_INTERRUPT_EVENT__TARGET_CMD_FIFO_FULL__POS 9

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__TARGET_RESP_FIFO_FULL   
 *
 * @BRIEF        Response FIFO full 
 *               W 0 ? Clear the event 
 *               W 1 ? Set the event and interrupt if enabled (debug only) 
 *               R 0 ? No event pending 
 *               R 1 ? Event pending - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__TARGET_RESP_FIFO_FULL BITFIELD(8, 8)
#define SGX540__OCP_INTERRUPT_EVENT__TARGET_RESP_FIFO_FULL__POS 8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_MEM_REQ_FIFO_OVERRUN   
 *
 * @BRIEF        Memory request FIFO overrun. 
 *               W 0 ? Clear the event 
 *               W 1 ? Set the event and interrupt if enabled (debug only) 
 *               R 0 ? No event pending 
 *               R 1 ? Event pending - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_MEM_REQ_FIFO_OVERRUN BITFIELD(5, 5)
#define SGX540__OCP_INTERRUPT_EVENT__INIT_MEM_REQ_FIFO_OVERRUN__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_READ_TAG_FIFO_OVERRUN   
 *
 * @BRIEF        Read tag FIFO overrun. 
 *               W 0 ? Clear the event 
 *               W 1 ? Set the event and interrupt if enabled (debug only) 
 *               R 0 ? No event pending 
 *               R 1 ? Event pending - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_READ_TAG_FIFO_OVERRUN BITFIELD(4, 4)
#define SGX540__OCP_INTERRUPT_EVENT__INIT_READ_TAG_FIFO_OVERRUN__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_PAGE_CROSS_ERROR   
 *
 * @BRIEF        Memory page had been crossed during a burst. 
 *               W 0 ? Clear the event 
 *               W 1 ? Set the event and interrupt if enabled (debug only) 
 *               R 0 ? No event pending 
 *               R 1 ? Event pending - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_PAGE_CROSS_ERROR BITFIELD(3, 3)
#define SGX540__OCP_INTERRUPT_EVENT__INIT_PAGE_CROSS_ERROR__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_ERROR   
 *
 * @BRIEF        Receiving error response. 
 *               W 0 ? Clear the event 
 *               W 1 ? Set the event and interrupt if enabled (debug only) 
 *               R 0 ? No event pending 
 *               R 1 ? Event pending - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_ERROR  BITFIELD(2, 2)
#define SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_ERROR__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_UNUSED_TAG   
 *
 * @BRIEF        Receiving response on an unused tag. 
 *               W 0 ? Clear the event 
 *               W 1 ? Set the event and interrupt if enabled (debug only) 
 *               R 0 ? No event pending 
 *               R 1 ? Event pending - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_UNUSED_TAG BITFIELD(1, 1)
#define SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_UNUSED_TAG__POS 1

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_UNEXPECTED   
 *
 * @BRIEF        Receiving response when not expected 
 *               W 0 ? Clear the event 
 *               W 1 ? Set the event and interrupt if enabled (debug only) 
 *               R 0 ? No event pending 
 *               R 1 ? Event pending - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_UNEXPECTED BITFIELD(0, 0)
#define SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_UNEXPECTED__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_CONFIG__THALIA_INT_BYPASS   
 *
 * @BRIEF        Bypass OCP IPG interrupt logic. 
 *               0 ? Don't bypass 
 *               1 ? Bybass - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_CONFIG__THALIA_INT_BYPASS   BITFIELD(31, 31)
#define SGX540__OCP_DEBUG_CONFIG__THALIA_INT_BYPASS__POS 31

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_CONFIG__SELECT_INIT_IDLE   
 *
 * @BRIEF        To select which idle the disconnect protocol should act on 
 *               0 ? Whole SGX idle 
 *               1 ? OCP initiator idle - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_CONFIG__SELECT_INIT_IDLE    BITFIELD(5, 5)
#define SGX540__OCP_DEBUG_CONFIG__SELECT_INIT_IDLE__POS 5

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_CONFIG__FORCEPASSDATA   
 *
 * @BRIEF        Forces the initiator to pass data independent of disconnect 
 *               protocol - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_CONFIG__FORCEPASSDATA       BITFIELD(4, 4)
#define SGX540__OCP_DEBUG_CONFIG__FORCEPASSDATA__POS  4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_CONFIG__FORCEINITIDLE   
 *
 * @BRIEF        Forces the OCP master port to Idle. 
 *               00/11 ? Don?t force, normal operation 
 *               01 ? Always idle 
 *               10 ? Never idle - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_CONFIG__FORCEINITIDLE       BITFIELD(3, 2)
#define SGX540__OCP_DEBUG_CONFIG__FORCEINITIDLE__POS  2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_CONFIG__FORCETARGETIDLE   
 *
 * @BRIEF        Forces the OCP target port to Idle. 
 *               00/11 ? Don?t force, normal operation 
 *               01 ? Always idle 
 *               10 ? Never idle - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_CONFIG__FORCETARGETIDLE     BITFIELD(1, 0)
#define SGX540__OCP_DEBUG_CONFIG__FORCETARGETIDLE__POS 0

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__CMD_DEBUG_STATE   
 *
 * @BRIEF        Target command state machine 
 *               0 ? IDLE 
 *               1 ? Accept command - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__CMD_DEBUG_STATE     BITFIELD(31, 31)
#define SGX540__OCP_DEBUG_STATUS__CMD_DEBUG_STATE__POS 31

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__CMD_RESP_DEBUG_STATE   
 *
 * @BRIEF        Target response state machine 
 *               0 ? Send accept 
 *               1 ? Wait accept - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__CMD_RESP_DEBUG_STATE BITFIELD(30, 30)
#define SGX540__OCP_DEBUG_STATUS__CMD_RESP_DEBUG_STATE__POS 30

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_IDLE   
 *
 * @BRIEF        Target idle - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_IDLE         BITFIELD(29, 29)
#define SGX540__OCP_DEBUG_STATUS__TARGET_IDLE__POS    29

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__RESP_FIFO_FULL   
 *
 * @BRIEF        Target response FIFO full - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__RESP_FIFO_FULL      BITFIELD(28, 28)
#define SGX540__OCP_DEBUG_STATUS__RESP_FIFO_FULL__POS 28

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__CMD_FIFO_FULL   
 *
 * @BRIEF        Target command FIFO full - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__CMD_FIFO_FULL       BITFIELD(27, 27)
#define SGX540__OCP_DEBUG_STATUS__CMD_FIFO_FULL__POS  27

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__RESP_ERROR   
 *
 * @BRIEF        Respond to OCP with error, which could be caused by either 
 *               address misalignment or invalid byte enable. - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__RESP_ERROR          BITFIELD(26, 26)
#define SGX540__OCP_DEBUG_STATUS__RESP_ERROR__POS     26

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__WHICH_TARGET_REGISTER   
 *
 * @BRIEF        Indicates which OCP target registers to read - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__WHICH_TARGET_REGISTER BITFIELD(25, 21)
#define SGX540__OCP_DEBUG_STATUS__WHICH_TARGET_REGISTER__POS 21

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_CMD_OUT   
 *
 * @BRIEF        Command received from OCP 
 *               000 ? CMD_WRSYS 
 *               001 ? CMD_RDSYS 
 *               010 ? CMD_WR_ERROR 
 *               011 ? CMD_RD_ERROR 
 *               100 ? CMD_CHK_WRADDR_PAGE (not used) 
 *               101 ? CMD_CHK_RDADDR_PAGE (not used) 
 *               110 ? CMD_TARGET_REG_WRITE 
 *               111 ? CMD_TARGET_REG_READ - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_CMD_OUT      BITFIELD(20, 18)
#define SGX540__OCP_DEBUG_STATUS__TARGET_CMD_OUT__POS 18

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_MSTANDBY   
 *
 * @BRIEF        Status of init_MStandby signal - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_MSTANDBY       BITFIELD(17, 17)
#define SGX540__OCP_DEBUG_STATUS__INIT_MSTANDBY__POS  17

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_MWAIT   
 *
 * @BRIEF        Status of init_MWait signal - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_MWAIT          BITFIELD(16, 16)
#define SGX540__OCP_DEBUG_STATUS__INIT_MWAIT__POS     16

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_MDISCREQ   
 *
 * @BRIEF        Disconnect status of the OCP interface 
 *               00 ? FUNCT 
 *               01 ? SLEEP TRANS 
 *               11 ? IDLE - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_MDISCREQ       BITFIELD(15, 14)
#define SGX540__OCP_DEBUG_STATUS__INIT_MDISCREQ__POS  14

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_MDISCACK   
 *
 * @BRIEF        Memory request FIFO full. 
 *               W 0 ? Clear the event 
 *               W 1 ? Set the event and interrupt if enabled (debug only) 
 *               R 0 ? No event pending 
 *               R 1 ? Event pending - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_MDISCACK       BITFIELD(13, 13)
#define SGX540__OCP_DEBUG_STATUS__INIT_MDISCACK__POS  13

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_SCONNECT2   
 *
 * @BRIEF        Defines whether to wait in M_WAIT state for MConnect FSM 
 *               0 ? Skip M_WAIT state 
 *               1 ? Wait in M_WAIT state 
 *               10 ? M_DISC 
 *               11 ? M_CON 
 *               11 ? IDLE - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_SCONNECT2      BITFIELD(12, 12)
#define SGX540__OCP_DEBUG_STATUS__INIT_SCONNECT2__POS 12

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_SCONNECT1   
 *
 * @BRIEF        Defines the busy-ness state of the slave 
 *               0 ? Slave is drained 
 *               1 ? Slave is loaded 
 *               10 ? M_DISC 
 *               11 ? M_CON 
 *               11 ? IDLE - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_SCONNECT1      BITFIELD(11, 11)
#define SGX540__OCP_DEBUG_STATUS__INIT_SCONNECT1__POS 11

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_SCONNECT0   
 *
 * @BRIEF        Disconnect from slave 
 *               0 ? Disconnect request from slave 
 *               1 ? Connect request from slave 
 *               10 ? M_DISC 
 *               11 ? M_CON 
 *               11 ? IDLE - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_SCONNECT0      BITFIELD(10, 10)
#define SGX540__OCP_DEBUG_STATUS__INIT_SCONNECT0__POS 10

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_MCONNECT   
 *
 * @BRIEF        Initiator MConnect state 
 *               00 ? M_OFF 
 *               01 ? M_WAIT 
 *               10 ? M_DISC 
 *               11 ? M_CON 
 *               11 ? IDLE - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_MCONNECT       BITFIELD(9, 8)
#define SGX540__OCP_DEBUG_STATUS__INIT_MCONNECT__POS  8

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_SIDLEACK   
 *
 * @BRIEF        Acknowledge the SIdleAck state machine 
 *               00 ? FUNCT 
 *               01 ? SLEEP TRANS 
 *               11 ? IDLE - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_SIDLEACK     BITFIELD(7, 6)
#define SGX540__OCP_DEBUG_STATUS__TARGET_SIDLEACK__POS 6

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_SDISCACK   
 *
 * @BRIEF        Acknowledge the SDiscAck state machine 
 *               00 ? FUNCT 
 *               01 ? TRANS 
 *               11 ? IDLE - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_SDISCACK     BITFIELD(5, 4)
#define SGX540__OCP_DEBUG_STATUS__TARGET_SDISCACK__POS 4

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_SIDLEREQ   
 *
 * @BRIEF        Request the target to go idle. 
 *               0 ? Don't go idle, or go active 
 *               1 ? GoIdle - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_SIDLEREQ     BITFIELD(3, 3)
#define SGX540__OCP_DEBUG_STATUS__TARGET_SIDLEREQ__POS 3

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_SCONNECT   
 *
 * @BRIEF        Target SConnect state 
 *               0 ? Disconnect interface 
 *               1 ? Connect OCP interface - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_SCONNECT     BITFIELD(2, 2)
#define SGX540__OCP_DEBUG_STATUS__TARGET_SCONNECT__POS 2

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_MCONNECT   
 *
 * @BRIEF        Target MConnect state 
 *               00 ? M_OFF 
 *               01 ? M_WAIT 
 *               10 ? M_DISC 
 *               11 ? M_CON - (RO) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_MCONNECT     BITFIELD(1, 0)
#define SGX540__OCP_DEBUG_STATUS__TARGET_MCONNECT__POS 0

    /* 
     * List of register bitfields values for component SGX540
     *
     */

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CTRL__REGBOUND_ZERO__RETURN_ONE
 *
 * @BRIEF        Controls whether out-of-range indexed-mode MOE register 
 *               numbers redirect to 0 for alpha (when set) or 1 (when 
 *               cleared) 
 *                0 RETURN_ONE 
 *                1 RETURN_ZERO - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CTRL__REGBOUND_ZERO__RETURN_ONE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_USE_CTRL__REGBOUND_ZERO__RETURN_ZERO
 *
 * @BRIEF        Enumeration value description is not available - (RW)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_USE_CTRL__REGBOUND_ZERO__RETURN_ZERO 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__DM__VERTEX
 *
 * @BRIEF        Vertex - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__DM__VERTEX 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__DM__PIXEL
 *
 * @BRIEF        Pixel - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__DM__PIXEL 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__DM__RESERVED
 *
 * @BRIEF        Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__DM__RESERVED 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__DM__EVENT
 *
 * @BRIEF        Event - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_PIXEL_PDS_INFO__DM__EVENT 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__DM__VERTEX
 *
 * @BRIEF        Vertex - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__DM__VERTEX 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__DM__PIXEL
 *
 * @BRIEF        Pixel - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__DM__PIXEL 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__DM__RESERVED
 *
 * @BRIEF        Reserved - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__DM__RESERVED 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__DM__EVENT
 *
 * @BRIEF        Event - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__DM__EVENT 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__USE_PIPELINE__0
 *
 * @BRIEF        Pipe 0 - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__USE_PIPELINE__0 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__USE_PIPELINE__TOGGLE
 *
 * @BRIEF        Round-robin between pipes - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__EUR_CR_EVENT_OTHER_PDS_INFO__USE_PIPELINE__TOGGLE 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_HWINFO__MEM_BUS_WIDTH__MEM64
 *
 * @BRIEF        Memory bus width is 64 bits - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_HWINFO__MEM_BUS_WIDTH__MEM64      0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_HWINFO__MEM_BUS_WIDTH__MEM128
 *
 * @BRIEF        Memory bus width is 128 bits - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_HWINFO__MEM_BUS_WIDTH__MEM128     0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_HWINFO__SYS_BUS_WIDTH__SYS32
 *
 * @BRIEF        System bus width is 32 bits - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_HWINFO__SYS_BUS_WIDTH__SYS32      0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_HWINFO__SYS_BUS_WIDTH__SYS64
 *
 * @BRIEF        system bus width is 64 bits - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_HWINFO__SYS_BUS_WIDTH__SYS64      0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_HWINFO__SYS_BUS_WIDTH__SYS128
 *
 * @BRIEF        System bus width is 128 bits - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_HWINFO__SYS_BUS_WIDTH__SYS128     0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_HWINFO__SYS_BUS_WIDTH__RESERVED
 *
 * @BRIEF        Enumeration value description is not available - (Read)
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_HWINFO__SYS_BUS_WIDTH__RESERVED   0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_SYSCONFIG__STANDBY_MODE__FORCESTANDBY
 *
 * @BRIEF        Force Standby mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_SYSCONFIG__STANDBY_MODE__FORCESTANDBY 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_SYSCONFIG__STANDBY_MODE__NOSTANDBY
 *
 * @BRIEF        No Standby mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_SYSCONFIG__STANDBY_MODE__NOSTANDBY 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_SYSCONFIG__STANDBY_MODE__SMARTSTANDBY
 *
 * @BRIEF        Smart Standby mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_SYSCONFIG__STANDBY_MODE__SMARTSTANDBY 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_SYSCONFIG__STANDBY_MODE__SMARTSTANDBY1
 *
 * @BRIEF        Smart Standby mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_SYSCONFIG__STANDBY_MODE__SMARTSTANDBY1 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_SYSCONFIG__IDLE_MODE__FORCEIDLE
 *
 * @BRIEF        Force Idle mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_SYSCONFIG__IDLE_MODE__FORCEIDLE   0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_SYSCONFIG__IDLE_MODE__NOIDLE
 *
 * @BRIEF        No idle mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_SYSCONFIG__IDLE_MODE__NOIDLE      0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_SYSCONFIG__IDLE_MODE__SMARTIDLE
 *
 * @BRIEF        Smart Idle mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_SYSCONFIG__IDLE_MODE__SMARTIDLE   0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_SYSCONFIG__IDLE_MODE__SMARTIDLE1
 *
 * @BRIEF        SmartIdle mode - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_SYSCONFIG__IDLE_MODE__SMARTIDLE1  0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_RAW_0__INIT_MINTERRUPT_RAW__NOACTION
 *
 * @BRIEF        Write 0 to register has no action. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_RAW_0__INIT_MINTERRUPT_RAW__NOACTION 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_RAW_0__INIT_MINTERRUPT_RAW__NOEVENT
 *
 * @BRIEF        Read 0 implies no event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_RAW_0__INIT_MINTERRUPT_RAW__NOEVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_RAW_0__INIT_MINTERRUPT_RAW__EVENT
 *
 * @BRIEF        Read 1 indicates event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_RAW_0__INIT_MINTERRUPT_RAW__EVENT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_RAW_0__INIT_MINTERRUPT_RAW__SETEVENT
 *
 * @BRIEF        Write 1 to set event (used for debug). - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_RAW_0__INIT_MINTERRUPT_RAW__SETEVENT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_RAW_1__TARGET_SINTERRUPT_RAW__NOACTION
 *
 * @BRIEF        Write 0 to register has no action. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_RAW_1__TARGET_SINTERRUPT_RAW__NOACTION 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_RAW_1__TARGET_SINTERRUPT_RAW__NOEVENT
 *
 * @BRIEF        Read 0 implies no event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_RAW_1__TARGET_SINTERRUPT_RAW__NOEVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_RAW_1__TARGET_SINTERRUPT_RAW__EVENT
 *
 * @BRIEF        Read 1 indicates event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_RAW_1__TARGET_SINTERRUPT_RAW__EVENT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_RAW_1__TARGET_SINTERRUPT_RAW__SETEVENT
 *
 * @BRIEF        Write 1 to set event (used for debug). - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_RAW_1__TARGET_SINTERRUPT_RAW__SETEVENT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_RAW_2__THALIA_IRQ_RAW__NOACTION
 *
 * @BRIEF        Write 0 to register has no action. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_RAW_2__THALIA_IRQ_RAW__NOACTION 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_RAW_2__THALIA_IRQ_RAW__NOEVENT
 *
 * @BRIEF        Read 0 implies no event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_RAW_2__THALIA_IRQ_RAW__NOEVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_RAW_2__THALIA_IRQ_RAW__EVENT
 *
 * @BRIEF        Read 1 indicates event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_RAW_2__THALIA_IRQ_RAW__EVENT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_RAW_2__THALIA_IRQ_RAW__SETEVENT
 *
 * @BRIEF        Write 1 to set event (used for debug). - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_RAW_2__THALIA_IRQ_RAW__SETEVENT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_0__INIT_MINTERRUPT_STATUS__NOACTION
 *
 * @BRIEF        Write 0 to register has no action. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_0__INIT_MINTERRUPT_STATUS__NOACTION 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_0__INIT_MINTERRUPT_STATUS__NOEVENT
 *
 * @BRIEF        Read 0 implies no event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_0__INIT_MINTERRUPT_STATUS__NOEVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_0__INIT_MINTERRUPT_STATUS__EVENTREADY
 *
 * @BRIEF        Read 1 indicates event pending and interrupt enabled. - 
 *               (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_0__INIT_MINTERRUPT_STATUS__EVENTREADY 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_0__INIT_MINTERRUPT_STATUS__CLEAREVENT
 *
 * @BRIEF        Write 1 to clear event. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_0__INIT_MINTERRUPT_STATUS__CLEAREVENT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_1__TARGET_SINTERRUPT_STATUS__NOACTION
 *
 * @BRIEF        Write 0 to register has no action. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_1__TARGET_SINTERRUPT_STATUS__NOACTION 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_1__TARGET_SINTERRUPT_STATUS__NOEVENT
 *
 * @BRIEF        Read 0 implies no event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_1__TARGET_SINTERRUPT_STATUS__NOEVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_1__TARGET_SINTERRUPT_STATUS__EVENTREADY
 *
 * @BRIEF        Read 1 indicates event pending and interrupt enabled. - 
 *               (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_1__TARGET_SINTERRUPT_STATUS__EVENTREADY 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_1__TARGET_SINTERRUPT_STATUS__CLEAREVENT
 *
 * @BRIEF        Write 1 to clear event. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_1__TARGET_SINTERRUPT_STATUS__CLEAREVENT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_2__THALIA_IRQ_STATUS__NOACTION
 *
 * @BRIEF        Write 0 to register has no action. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_2__THALIA_IRQ_STATUS__NOACTION 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_2__THALIA_IRQ_STATUS__NOEVENT
 *
 * @BRIEF        Read 0 implies no event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_2__THALIA_IRQ_STATUS__NOEVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_2__THALIA_IRQ_STATUS__EVENTREADY
 *
 * @BRIEF        Read 1 indicates event pending and interrupt enabled. - 
 *               (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_2__THALIA_IRQ_STATUS__EVENTREADY 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQSTATUS_2__THALIA_IRQ_STATUS__CLEAREVENT
 *
 * @BRIEF        Write 1 to clear event. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQSTATUS_2__THALIA_IRQ_STATUS__CLEAREVENT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_SET_0__INIT_MINTERRUPT_ENABLE__NOACTION
 *
 * @BRIEF        Write 0 to register has no action. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_SET_0__INIT_MINTERRUPT_ENABLE__NOACTION 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_SET_0__INIT_MINTERRUPT_ENABLE__INTENABLED
 *
 * @BRIEF        Read 0 indicates interrupt is enabled. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_SET_0__INIT_MINTERRUPT_ENABLE__INTENABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_SET_0__INIT_MINTERRUPT_ENABLE__INTDISABLED
 *
 * @BRIEF        Read 1 indicates interrupt is disabled. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_SET_0__INIT_MINTERRUPT_ENABLE__INTDISABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_SET_0__INIT_MINTERRUPT_ENABLE__ENABLEINTERRUPT
 *
 * @BRIEF        Write 1 to enable interrupt. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_SET_0__INIT_MINTERRUPT_ENABLE__ENABLEINTERRUPT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_SET_1__TARGET_SINTERRUPT_ENABLE__NOACTION
 *
 * @BRIEF        Write 0 to register has no action. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_SET_1__TARGET_SINTERRUPT_ENABLE__NOACTION 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_SET_1__TARGET_SINTERRUPT_ENABLE__INTENABLED
 *
 * @BRIEF        Read 0 indicates interrupt is enabled. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_SET_1__TARGET_SINTERRUPT_ENABLE__INTENABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_SET_1__TARGET_SINTERRUPT_ENABLE__INTDISABLED
 *
 * @BRIEF        Read 1 indicates interrupt is disabled. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_SET_1__TARGET_SINTERRUPT_ENABLE__INTDISABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_SET_1__TARGET_SINTERRUPT_ENABLE__ENABLEINTERRUPT
 *
 * @BRIEF        Write 1 to enable interrupt. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_SET_1__TARGET_SINTERRUPT_ENABLE__ENABLEINTERRUPT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_SET_2__THALIA_IRQ_ENABLE__NOACTION
 *
 * @BRIEF        Write 0 to register has no action. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_SET_2__THALIA_IRQ_ENABLE__NOACTION 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_SET_2__THALIA_IRQ_ENABLE__INTENABLED
 *
 * @BRIEF        Read 0 indicates interrupt is enabled. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_SET_2__THALIA_IRQ_ENABLE__INTENABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_SET_2__THALIA_IRQ_ENABLE__INTDISABLED
 *
 * @BRIEF        Read 1 indicates interrupt is disabled. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_SET_2__THALIA_IRQ_ENABLE__INTDISABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_SET_2__THALIA_IRQ_ENABLE__ENABLEINTERRUPT
 *
 * @BRIEF        Write 1 to enable interrupt. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_SET_2__THALIA_IRQ_ENABLE__ENABLEINTERRUPT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_CLR_0__INIT_MINTERRUPT_DISABLE__NOACTION
 *
 * @BRIEF        Write 0 to register has no action. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_CLR_0__INIT_MINTERRUPT_DISABLE__NOACTION 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_CLR_0__INIT_MINTERRUPT_DISABLE__INTENABLED
 *
 * @BRIEF        Read 0 indicates interrupt is enabled. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_CLR_0__INIT_MINTERRUPT_DISABLE__INTENABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_CLR_0__INIT_MINTERRUPT_DISABLE__INTDISABLED
 *
 * @BRIEF        Read 1 indicates interrupt is disabled. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_CLR_0__INIT_MINTERRUPT_DISABLE__INTDISABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_CLR_0__INIT_MINTERRUPT_DISABLE__DISABLEINTERRUPT
 *
 * @BRIEF        Write 1 to disable interrupt. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_CLR_0__INIT_MINTERRUPT_DISABLE__DISABLEINTERRUPT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_CLR_1__TARGET_SINTERRUPT_DISABLE__NOACTION
 *
 * @BRIEF        Write 0 to register has no action. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_CLR_1__TARGET_SINTERRUPT_DISABLE__NOACTION 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_CLR_1__TARGET_SINTERRUPT_DISABLE__INTENABLED
 *
 * @BRIEF        Read 0 indicates interrupt is enabled. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_CLR_1__TARGET_SINTERRUPT_DISABLE__INTENABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_CLR_1__TARGET_SINTERRUPT_DISABLE__INTDISABLED
 *
 * @BRIEF        Read 1 indicates interrupt is disabled. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_CLR_1__TARGET_SINTERRUPT_DISABLE__INTDISABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_CLR_1__TARGET_SINTERRUPT_DISABLE__DISABLEINTERRUPT
 *
 * @BRIEF        Write 1 to disable interrupt. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_CLR_1__TARGET_SINTERRUPT_DISABLE__DISABLEINTERRUPT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_CLR_2__THALIA_IRQ_DISABLE__NOACTION
 *
 * @BRIEF        Write 0 to register has no action. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_CLR_2__THALIA_IRQ_DISABLE__NOACTION 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_CLR_2__THALIA_IRQ_DISABLE__INTENABLED
 *
 * @BRIEF        Read 0 indicates interrupt is enabled. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_CLR_2__THALIA_IRQ_DISABLE__INTENABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_CLR_2__THALIA_IRQ_DISABLE__INTDISABLED
 *
 * @BRIEF        Read 1 indicates interrupt is disabled. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_CLR_2__THALIA_IRQ_DISABLE__INTDISABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_IRQENABLE_CLR_2__THALIA_IRQ_DISABLE__DISABLEINTERRUPT
 *
 * @BRIEF        Write 1 to disable interrupt. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_IRQENABLE_CLR_2__THALIA_IRQ_DISABLE__DISABLEINTERRUPT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_PAGE_CONFIG__OCP_PAGE_SIZE__P4KB
 *
 * @BRIEF        Page size is 4 KB. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_PAGE_CONFIG__OCP_PAGE_SIZE__P4KB  0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_PAGE_CONFIG__OCP_PAGE_SIZE__P2KB
 *
 * @BRIEF        Page size is 2KB - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_PAGE_CONFIG__OCP_PAGE_SIZE__P2KB  0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_PAGE_CONFIG__OCP_PAGE_SIZE__P1KB
 *
 * @BRIEF        Page size is 1KB. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_PAGE_CONFIG__OCP_PAGE_SIZE__P1KB  0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_PAGE_CONFIG__OCP_PAGE_SIZE__P512B
 *
 * @BRIEF        Page is 512B. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_PAGE_CONFIG__OCP_PAGE_SIZE__P512B 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_PAGE_CONFIG__MEM_PAGE_CHECK_EN__DISABLED
 *
 * @BRIEF        Page boundary checking disabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_PAGE_CONFIG__MEM_PAGE_CHECK_EN__DISABLED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_PAGE_CONFIG__MEM_PAGE_CHECK_EN__ENABLED
 *
 * @BRIEF        Page boundary checking enabled. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_PAGE_CONFIG__MEM_PAGE_CHECK_EN__ENABLED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_PAGE_CONFIG__MEM_PAGE_SIZE__P4KB
 *
 * @BRIEF        Page size is 4 KB. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_PAGE_CONFIG__MEM_PAGE_SIZE__P4KB  0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_PAGE_CONFIG__MEM_PAGE_SIZE__P2KB
 *
 * @BRIEF        Page size is 2KB - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_PAGE_CONFIG__MEM_PAGE_SIZE__P2KB  0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_PAGE_CONFIG__MEM_PAGE_SIZE__P1KB
 *
 * @BRIEF        Page size is 1KB. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_PAGE_CONFIG__MEM_PAGE_SIZE__P1KB  0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_PAGE_CONFIG__MEM_PAGE_SIZE__P512B
 *
 * @BRIEF        Page is 512B. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_PAGE_CONFIG__MEM_PAGE_SIZE__P512B 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__TARGET_INVALID_OCP_CMD__CLEAREVENT
 *
 * @BRIEF        Write 0 to clear the event. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__TARGET_INVALID_OCP_CMD__CLEAREVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__TARGET_INVALID_OCP_CMD__NOEVENT
 *
 * @BRIEF        Read 0 implies no event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__TARGET_INVALID_OCP_CMD__NOEVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__TARGET_INVALID_OCP_CMD__EVENTPENDING
 *
 * @BRIEF        Read 1 indicates event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__TARGET_INVALID_OCP_CMD__EVENTPENDING 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__TARGET_INVALID_OCP_CMD__SETEVENT
 *
 * @BRIEF        Write 1 to set event and interrupt if enabled (debug only). 
 *               - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__TARGET_INVALID_OCP_CMD__SETEVENT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__TARGET_CMD_FIFO_FULL__CLEAREVENT
 *
 * @BRIEF        Write 0 to clear the event. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__TARGET_CMD_FIFO_FULL__CLEAREVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__TARGET_CMD_FIFO_FULL__NOEVENT
 *
 * @BRIEF        Read 0 implies no event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__TARGET_CMD_FIFO_FULL__NOEVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__TARGET_CMD_FIFO_FULL__EVENTPENDING
 *
 * @BRIEF        Read 1 indicates event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__TARGET_CMD_FIFO_FULL__EVENTPENDING 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__TARGET_CMD_FIFO_FULL__SETEVENT
 *
 * @BRIEF        Write 1 to set event and interrupt if enabled (debug only). 
 *               - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__TARGET_CMD_FIFO_FULL__SETEVENT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__TARGET_RESP_FIFO_FULL__CLEAREVENT
 *
 * @BRIEF        Write 0 to clear the event. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__TARGET_RESP_FIFO_FULL__CLEAREVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__TARGET_RESP_FIFO_FULL__NOEVENT
 *
 * @BRIEF        Read 0 implies no event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__TARGET_RESP_FIFO_FULL__NOEVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__TARGET_RESP_FIFO_FULL__EVENTPENDING
 *
 * @BRIEF        Read 1 indicates event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__TARGET_RESP_FIFO_FULL__EVENTPENDING 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__TARGET_RESP_FIFO_FULL__SETEVENT
 *
 * @BRIEF        Write 1 to set event and interrupt if enabled (debug only). 
 *               - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__TARGET_RESP_FIFO_FULL__SETEVENT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_MEM_REQ_FIFO_OVERRUN__CLEAREVENT
 *
 * @BRIEF        Write 0 to clear the event. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_MEM_REQ_FIFO_OVERRUN__CLEAREVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_MEM_REQ_FIFO_OVERRUN__NOEVENT
 *
 * @BRIEF        Read 0 implies no event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_MEM_REQ_FIFO_OVERRUN__NOEVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_MEM_REQ_FIFO_OVERRUN__EVENTPENDING
 *
 * @BRIEF        Read 1 indicates event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_MEM_REQ_FIFO_OVERRUN__EVENTPENDING 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_MEM_REQ_FIFO_OVERRUN__SETEVENT
 *
 * @BRIEF        Write 1 to set event and interrupt if enabled (debug only). 
 *               - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_MEM_REQ_FIFO_OVERRUN__SETEVENT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_READ_TAG_FIFO_OVERRUN__CLEAREVENT
 *
 * @BRIEF        Write 0 to clear the event. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_READ_TAG_FIFO_OVERRUN__CLEAREVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_READ_TAG_FIFO_OVERRUN__NOEVENT
 *
 * @BRIEF        Read 0 implies no event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_READ_TAG_FIFO_OVERRUN__NOEVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_READ_TAG_FIFO_OVERRUN__EVENTPENDING
 *
 * @BRIEF        Read 1 indicates event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_READ_TAG_FIFO_OVERRUN__EVENTPENDING 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_READ_TAG_FIFO_OVERRUN__SETEVENT
 *
 * @BRIEF        Write 1 to set event and interrupt if enabled (debug only). 
 *               - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_READ_TAG_FIFO_OVERRUN__SETEVENT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_PAGE_CROSS_ERROR__CLEAREVENT
 *
 * @BRIEF        Write 0 to clear the event. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_PAGE_CROSS_ERROR__CLEAREVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_PAGE_CROSS_ERROR__NOEVENT
 *
 * @BRIEF        Read 0 implies no event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_PAGE_CROSS_ERROR__NOEVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_PAGE_CROSS_ERROR__EVENTPENDING
 *
 * @BRIEF        Read 1 indicates event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_PAGE_CROSS_ERROR__EVENTPENDING 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_PAGE_CROSS_ERROR__SETEVENT
 *
 * @BRIEF        Write 1 to set event and interrupt if enabled (debug only). 
 *               - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_PAGE_CROSS_ERROR__SETEVENT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_ERROR__CLEAREVENT
 *
 * @BRIEF        Write 0 to clear the event. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_ERROR__CLEAREVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_ERROR__NOEVENT
 *
 * @BRIEF        Read 0 implies no event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_ERROR__NOEVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_ERROR__EVENTPENDING
 *
 * @BRIEF        Read 1 indicates event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_ERROR__EVENTPENDING 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_ERROR__SETEVENT
 *
 * @BRIEF        Write 1 to set event and interrupt if enabled (debug only). 
 *               - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_ERROR__SETEVENT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_UNUSED_TAG__CLEAREVENT
 *
 * @BRIEF        Write 0 to clear the event. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_UNUSED_TAG__CLEAREVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_UNUSED_TAG__NOEVENT
 *
 * @BRIEF        Read 0 implies no event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_UNUSED_TAG__NOEVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_UNUSED_TAG__EVENTPENDING
 *
 * @BRIEF        Read 1 indicates event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_UNUSED_TAG__EVENTPENDING 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_UNUSED_TAG__SETEVENT
 *
 * @BRIEF        Write 1 to set event and interrupt if enabled (debug only). 
 *               - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_UNUSED_TAG__SETEVENT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_UNEXPECTED__CLEAREVENT
 *
 * @BRIEF        Write 0 to clear the event. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_UNEXPECTED__CLEAREVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_UNEXPECTED__NOEVENT
 *
 * @BRIEF        Read 0 implies no event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_UNEXPECTED__NOEVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_UNEXPECTED__EVENTPENDING
 *
 * @BRIEF        Read 1 indicates event pending. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_UNEXPECTED__EVENTPENDING 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_UNEXPECTED__SETEVENT
 *
 * @BRIEF        Write 1 to set event and interrupt if enabled (debug only). 
 *               - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_INTERRUPT_EVENT__INIT_RESP_UNEXPECTED__SETEVENT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_CONFIG__THALIA_INT_BYPASS__NORMAL
 *
 * @BRIEF        Don't Bypass. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_CONFIG__THALIA_INT_BYPASS__NORMAL 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_CONFIG__THALIA_INT_BYPASS__BYPASS
 *
 * @BRIEF        Bypass core interrupt to IO pin, ie disregard the interrupt 
 *               enable setting in IPG register. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_CONFIG__THALIA_INT_BYPASS__BYPASS 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_CONFIG__SELECT_INIT_IDLE__ALLSGX
 *
 * @BRIEF        Whole SGX Idle. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_CONFIG__SELECT_INIT_IDLE__ALLSGX 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_CONFIG__SELECT_INIT_IDLE__OCPONLY
 *
 * @BRIEF        OCP initiator idle only. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_CONFIG__SELECT_INIT_IDLE__OCPONLY 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_CONFIG__FORCEPASSDATA__NORMAL
 *
 * @BRIEF        Normal mode. Don't force. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_CONFIG__FORCEPASSDATA__NORMAL 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_CONFIG__FORCEPASSDATA__FORCE
 *
 * @BRIEF        Never fence request to OCP. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_CONFIG__FORCEPASSDATA__FORCE 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_CONFIG__FORCEINITIDLE__NORMAL
 *
 * @BRIEF        Normal mode - no force. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_CONFIG__FORCEINITIDLE__NORMAL 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_CONFIG__FORCEINITIDLE__ALWAYSIDLE
 *
 * @BRIEF        Force port to be always Idle. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_CONFIG__FORCEINITIDLE__ALWAYSIDLE 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_CONFIG__FORCEINITIDLE__NEVERIDLE
 *
 * @BRIEF        Forces target port to never be in Idle mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_CONFIG__FORCEINITIDLE__NEVERIDLE 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_CONFIG__FORCEINITIDLE__NORMALALSO
 *
 * @BRIEF        Normal mode. No force. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_CONFIG__FORCEINITIDLE__NORMALALSO 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_CONFIG__FORCETARGETIDLE__NORMAL
 *
 * @BRIEF        Normal mode - no force. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_CONFIG__FORCETARGETIDLE__NORMAL 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_CONFIG__FORCETARGETIDLE__ALWAYSIDLE
 *
 * @BRIEF        Force port to be always Idle. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_CONFIG__FORCETARGETIDLE__ALWAYSIDLE 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_CONFIG__FORCETARGETIDLE__NEVERIDLE
 *
 * @BRIEF        Forces target port to never be in Idle mode. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_CONFIG__FORCETARGETIDLE__NEVERIDLE 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_CONFIG__FORCETARGETIDLE__NORMALALSO
 *
 * @BRIEF        Normal mode. No force. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_CONFIG__FORCETARGETIDLE__NORMALALSO 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__CMD_DEBUG_STATE__IDLE
 *
 * @BRIEF        Idle - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__CMD_DEBUG_STATE__IDLE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__CMD_DEBUG_STATE__ACCEPT
 *
 * @BRIEF        Accept command. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__CMD_DEBUG_STATE__ACCEPT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__CMD_RESP_DEBUG_STATE__SEND
 *
 * @BRIEF        Send accept - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__CMD_RESP_DEBUG_STATE__SEND 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__CMD_RESP_DEBUG_STATE__WAIT
 *
 * @BRIEF        Wait accept. - (RW) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__CMD_RESP_DEBUG_STATE__WAIT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_CMD_OUT__WRSYS
 *
 * @BRIEF        WRSYS command received - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_CMD_OUT__WRSYS 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_CMD_OUT__RDSYS
 *
 * @BRIEF        Command RDSYS received. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_CMD_OUT__RDSYS 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_CMD_OUT__WRERROR
 *
 * @BRIEF        Command WR_Error  received - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_CMD_OUT__WRERROR 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_CMD_OUT__RDERROR
 *
 * @BRIEF        command RD_ERROR received. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_CMD_OUT__RDERROR 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_CMD_OUT__CHKWRADPG
 *
 * @BRIEF        Command CHK_WRADDR_PAGE received.  
 *               Not used. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_CMD_OUT__CHKWRADPG 0x4ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_CMD_OUT__CHKRDADPG
 *
 * @BRIEF        Command CMD_CHK_RDADDR_PAGE received. 
 *               Not used. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_CMD_OUT__CHKRDADPG 0x5ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_CMD_OUT__TREGWR
 *
 * @BRIEF        Command TARGET_REG_WRITE received. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_CMD_OUT__TREGWR 0x6ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_CMD_OUT__TREGRD
 *
 * @BRIEF        Command TARGET_REG_READ received - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_CMD_OUT__TREGRD 0x7ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_MDISCREQ__FUNCT
 *
 * @BRIEF        State is FUNC. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_MDISCREQ__FUNCT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_MDISCREQ__SLEEPTRANS
 *
 * @BRIEF        State is Sleep Transition. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_MDISCREQ__SLEEPTRANS 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_MDISCREQ__NA
 *
 * @BRIEF        Not applicable. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_MDISCREQ__NA   0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_MDISCREQ__IDLE
 *
 * @BRIEF        State is Idle. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_MDISCREQ__IDLE 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_MDISCACK__CLEAR
 *
 * @BRIEF        Write 0 to clear the event. - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_MDISCACK__CLEAR 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_MDISCACK__NOEVENT
 *
 * @BRIEF        Read 0 indicates no event pending - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_MDISCACK__NOEVENT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_MDISCACK__EVENT
 *
 * @BRIEF        Read 1 indicates event pending - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_MDISCACK__EVENT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_MDISCACK__SET
 *
 * @BRIEF        Write 1 to set the event and interrupt if enabled (debug 
 *               only) - (Write) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_MDISCACK__SET  0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_SCONNECT2__SKIP
 *
 * @BRIEF        Skip M_WAIT state. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_SCONNECT2__SKIP 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_SCONNECT2__WAIT
 *
 * @BRIEF        Wait in M_WAIT state. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_SCONNECT2__WAIT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_SCONNECT1__DRAINED
 *
 * @BRIEF        Slave is drained - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_SCONNECT1__DRAINED 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_SCONNECT1__LOADED
 *
 * @BRIEF        Slave is loaded - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_SCONNECT1__LOADED 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_SCONNECT0__DISC
 *
 * @BRIEF        Disconnect request from slave. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_SCONNECT0__DISC 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_SCONNECT0__CON
 *
 * @BRIEF        Connect request from slave. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_SCONNECT0__CON 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_MCONNECT__OFF
 *
 * @BRIEF        State is M_OFF. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_MCONNECT__OFF  0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_MCONNECT__WAIT
 *
 * @BRIEF        State is M_WAIT. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_MCONNECT__WAIT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_MCONNECT__DISC
 *
 * @BRIEF        State is M_DISC. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_MCONNECT__DISC 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__INIT_MCONNECT__CON
 *
 * @BRIEF        State is M_CON - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__INIT_MCONNECT__CON  0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_SIDLEACK__FUNCT
 *
 * @BRIEF        State is FUNC. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_SIDLEACK__FUNCT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_SIDLEACK__SLEEPTRANS
 *
 * @BRIEF        State is Sleep Transition. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_SIDLEACK__SLEEPTRANS 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_SIDLEACK__NA
 *
 * @BRIEF        Not applicable. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_SIDLEACK__NA 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_SIDLEACK__IDLE
 *
 * @BRIEF        State is Idle. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_SIDLEACK__IDLE 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_SDISCACK__FUNCT
 *
 * @BRIEF        State is FUNC. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_SDISCACK__FUNCT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_SDISCACK__TRANS
 *
 * @BRIEF        State is Transition. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_SDISCACK__TRANS 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_SDISCACK__NA
 *
 * @BRIEF        Not applicable. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_SDISCACK__NA 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_SDISCACK__IDLE
 *
 * @BRIEF        State is Idle. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_SDISCACK__IDLE 0x3ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_SIDLEREQ__NOTIDLE
 *
 * @BRIEF        Don't go idle, or stay active. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_SIDLEREQ__NOTIDLE 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_SIDLEREQ__IDLE
 *
 * @BRIEF        Go idle. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_SIDLEREQ__IDLE 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_SCONNECT__DISCONNECT
 *
 * @BRIEF        Disconnect interface. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_SCONNECT__DISCONNECT 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_SCONNECT__CONNECT
 *
 * @BRIEF        Connect OCP interface. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_SCONNECT__CONNECT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_MCONNECT__OFF
 *
 * @BRIEF        Target is in M_OFF state - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_MCONNECT__OFF 0x0ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_MCONNECT__WAIT
 *
 * @BRIEF        Target is in M_WAIT disconnect state. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_MCONNECT__WAIT 0x1ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_MCONNECT__DISC
 *
 * @BRIEF        Target is in MDISC state. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_MCONNECT__DISC 0x2ul

                                                                             /*-------------------------------------------------------------------------*//**
 * @DEFINITION   SGX540__OCP_DEBUG_STATUS__TARGET_MCONNECT__CON
 *
 * @BRIEF        Target is in M_CON state. - (Read) 
 *
    *//*------------------------------------------------------------------------ */
#define SGX540__OCP_DEBUG_STATUS__TARGET_MCONNECT__CON 0x3ul

#ifdef __cplusplus
}
#endif
#endif                                                     /* __SGX540_CRED_H 
                                                            */
