.bd B 3
.TH armacp 1 "Dec 08, 2013" "TI Tools" "TI Code Generation Tools"
.SH NAME
armacp - C/C++ Parser
.SH SYNOPSIS
.B armacp
[
.I options
] [
.I file(s)
]
.SH DESCRIPTION
The C/C++ ANSI Parser.
.SH OPTIONS
The following options are accepted by this tool:
.SS Processor Options:
.SS
.TP
--abi=ti_arm9_abi,eabi
Specify the application binary interface. EABI is the industry standard ABI for ARM applications and is required for interlinking with other compiler vendors. The ti_arm9_abi ABI can still be used for legacy projects, but it is recommended that new projects move to EABI. The tiabi ABI has been deprecated and will be removed in a future release. When not specified by the user, the compiler defaults to eabi
.TP
--code_state=16,32
Designate code state, 16-bit (thumb) or 32-bit
.TP
--float_support=VFPv2,VFPv3,VFPv3D16,vfplib,fpalib,FPv4SPD16
Specify floating point support
.TP
-me
Little endian code
.TP
-mv=4,5e,6,6M0,7A8,7M3,7M4,7R4
Select target processor version.  Silicon version 4 is ARM7.  Version 5e is ARM9E.  Version 6 is ARM11.  Version 7A8 is Cortex-A8.  Version 7M3 is Cortex-M3.  Version 7M4 is Cortex-M4.  Version 7R4 is Cortex-R4. When not specified by the user, the compiler defaults to 4
.SS Optimization Options:
.SS
.TP
--fp_mode=relaxed,strict
Specify a floating point mode. In relaxed mode if the result of a double-precision floating point expression is assigned to a single-precision floating-point or an integer, the computations in the expression are converted to single-precision computations. Any double-precision constants in the expression are also converted to single-precision if they will fit. Hardware instructions may replace floating point library calls when available. Floating point arithmetic reassociation is also allowed. This behavior is not ISO conformant, but results in faster/smaller code, with some loss in accuracy. When not specified by the user, the compiler defaults to strict
.TP
-mf[=0-5]
Control speed vs. size trade-offs in optimization.  A value of 5 indicates fully optimizing for speed with a potentially large code size penalty, while a value of 0 indicates fully optimizing for size. Values between 0 and 5 indicate trade-offs between the two extremes. The argument to the option is optional, and if not specified it will default to: 4
.TP
-O[=off,0,1,2,3,4]
Set compiler optimization level.

Level 0 includes register optimizations.  Level 1 adds local optimizations. Level 2 further adds global optimizations. Level 3 further adds interprocedure optimizations. Level 4 adds whole program optimizations. Level 4 must be passed to the linker for the optimizations to take affect. The argument to the option is optional, and if not specified it will default to: 3
.SS Include Options:
.SS
.TP
-I=dir
Add the specified dir(ectory) to the #include file search path list.
.TP
--preinclude=filename
Include the source code of the indicated file at the beginning of the compilation. This can be used to establish standard macro definitions, etc. The file name is searched for in the directories on the include search list. The files are processed in the order in which they were specified.
.SS MISRA-C:2004 Options:
.SS
.TP
--check_misra[=RULE]
Enable verification of the MISRA-C:2004 rules, 'Guidelines for the use of the C language in critical systems.' For information on MISRA-C, see http://www.misra.org.uk.  MISRA and MISRA-C are trademarks of MIRA Ltd. The argument to the option is optional, and if not specified it will default to: all
.TP
--misra_advisory=error,warning,remark,suppress
Set diagnostic severity level for the MISRA advisory class of rules.  See the --check_misra option for further information.
.TP
--misra_required=error,warning,remark,suppress
Set the diagnostic severity level for the MISRA required class of rules.  See the --check_misra option for further information.
.SS Control Options:
.SS
.TP
-c
Disable linking, overriding -z (if used).
.TP
-h
Show usage information.  When followed by another option or a phrase display that option's detailed information, or search for options related to that phrase.
.TP
-n
Compile only; do not assemble
.TP
-z[=arguments]
After compiling all the source files, perform a link and pass all the options following this option to the linker.
.SS Advanced Debug Options:
.SS
.TP
-g
Enable full symbolic DWARF debugging in the generated object or out file. [Same as -gw]
.TP
-gp
Adds the necessary debug directives to the object file which are needed by the profiler to allow function level profiling with minimal impact on optimization (if optimization is enabled). Using -g may hinder some optimizations to ensure that debugability is maintained, while this option will not hinder optimization.

You will still be able to set breakpoints and profile on function-level boundaries, but you will not be able to single-step through code as with full debug ability.
.TP
-gt
Enable full symbolic COFF debugging in the generated object or out file (DEPRECATED).
.TP
-gw
Enable full symbolic DWARF debugging in the generated object or out file. [Same as -g]
.TP
-mn[=on,off]
Optimize fully in the presence of debug (DEPRECATED) The argument to the option is optional, and if not specified it will default to: on
.TP
--symdebug:dwarf_version=2,3
Specify DWARF version
.TP
--symdebug:keep_all_types
Keep referenced type info (default for elf w/ debug)
.TP
--symdebug:none
Disable debug and suppress all symbolic debug information from being included in the generated object or out file.
.TP
--symdebug:skeletal
Enable symbolic debug information for program analysis. (DEPRECATED)
.SS Language Options:
.SS
.TP
--create_pch=filename
Create a precompiled header file with the name specified. This option specifies the filename for the precompiled header file. If this option is not used, the precompiled header file will use the primary source file name as its filename with .pch as suffix.
.TP
--exceptions
Enable C++ exception handling
.TP
--extern_c_can_throw
This option is only supported under EABI for table-driven exception handling (TDEH). This option is valid only when `--exceptions` is also present. This option allows a function defined in C++ with extern `C` linkage to propagate exceptions.
.TP
-fg
Treat C files as C++ files
.TP
--float_operations_allowed=all,32,64,none
Control the acceptable precision of floating point operations. The default is all.
.TP
--gcc
This option enables the support for GCC extensions.  This feature is incompatible with strict ANSI mode.
.TP
--keep_unneeded_statics
The parser, by default, will remark about and then remove any unreferenced static variables.  This option will keep the parser from deleting unreferenced static variables and any static functions that are, in turn referenced by these variables.
.TP
-pc
Enable parser support for multibyte character sequences in comments, string literals, and character constants.
.TP
--pch
Automatically create and/or use precompiled header files. This option will enable EDG parser to provide a mechanism for, in effect, taking a snapshot of the state of the compilation at a particular point and writing it to a disk file before completing the parsing; then, when recompiling the same source file or compiling another file with the same set of header files, it can recognize the `snapshot point`, and reload this file instead of recompile these headers. In this way, compilation time can be reduced.
.TP
--pch_dir=dir
Specify path where precompiled header file will reside. This option will direct the parser to put the generated precompiled header file in the specified directory. If this option is not used, the precompiled header file will be put into the same directory as the primary source file
.TP
--pch_verbose
This option displays a message for each precompiled header file that is considered but can not be used. It also gives the reason why it can not be used.
.TP
-pe
Enable support for embedded C++
.TP
--pending_instantiations=#
The number of template instantiations that may be in progress at any given time. Use 0 to specify an unlimited number.
.TP
-pi
Ignore the inline keyword while parsing.
.TP
-pk
Enable K & R C compatibility.
.TP
-pl
Output raw listing to .rl file
.TP
-pm
Enable program mode compilation.
.TP
-pn
Disable intrinsic functions in the parser.
.TP
-pr
Enable relaxed ANSI source parsing mode.
.TP
-ps
Enable strict ANSI source parsing mode.  Any source violating strict ANSI guidelines will generate a parsing error.
.TP
-px
Output xref listing to .crl file
.TP
-rtti
Support C++ run-time type information
.TP
--static_template_instantiation
All template entities are instantiated as needed in the file.  The instantiations are given internal (static) linkage.
.TP
--use_pch=filename
This option specifies the file name of the precompiled header file for this compilation.
.SS Parser Preprocessing Options:
.SS
.TP
-ppa
This option instructs the compiler to additionally continue compilation of the source file (rather than exiting) after generating a pre-processing .pp output file such as those generated by -ppd (dependencies) -ppi (included files), or -ppm (macros).
.TP
-ppc
Only preprocess the source file(s) and then stop; maintain source comments in the output.
.TP
-ppd[=filename]
Generate a dependency list for the source file into the file <filename>.pp and then exit.  Optionally, name the output file.  The output will include all files included in the source file as well as any of the files included.  Also see the -ppa option to continue compilation after generating the dependency list (similar to gcc).
.TP
-ppi[=filename]
Generate an include list for the source file into the file <filename>.pp and then exit.  Optionally, name the output file.  The output will include only those files directly included by the source file.   Also see the -ppa option to continue compilation after generating the include list (similar to gcc).
.TP
-ppl
Only preprocess the source file(s) and then stop; maintain #line directives in the output..
.TP
-ppm[=filename]
Generate a list of predefined and user defined macros for the source file into the file <filename>.pp and then exit.  Optionally, name the output file. The output will include only those files directly included by the source file.   Also see the -ppa option to continue compilation after generating the macro list (similar to gcc).
.TP
-ppo
Only preprocess the source file(s) and then stop.
.SS Predefined Symbols Options:
.SS
.TP
-D=NAME[=value]
Pre-define a symbol with the id 'NAME', optionally setting it's contents to 'value'.
.TP
-U=NAME
Undefine the symbol with the id 'NAME'.
.SS Diagnostic Options:
.SS
.TP
-b
Generate auxiliary user information file.
.TP
--compiler_revision
Print out the compiler release revision and exit.
.TP
--diag_wrap[=on,off]
Set diagnostic messages to wrap at 79 columns (on) or not (off). The argument to the option is optional, and if not specified it will default to: on
.TP
-pdel=count
Set error limit to <count>
.TP
-pden
Emit the diagnostic identifier numbers along with diagnostic messages.  These identifiers can be used with options such as -pds to suppress a specific diagnostic.
.TP
-pdew
Treat warnings as errors
.TP
-pdf
Write diagnostics to an .err file instead of the standard output.  The file name with be the same as the source file but with an .err extension.
.TP
-pdr
Issue remarks, which are normally suppressed.
.TP
-pds=id
Suppress diagnostic <id>
.TP
-pdse=id
Treat diagnostic <id> as error
.TP
-pdsr=id
Treat diagnostic <id> as remark
.TP
-pdsw=id
Treat diagnostic <id> as warning
.TP
-pdv
Enable verbose diagnostic information from the parser, including the source line of the error and an indicator of the error position within the line.
.TP
-pdw
Suppress all parser warnings.
.TP
-q
Suppress common compiler non-diagnostic output.  Remarks, errors and warnings will still be generated, as well as feature specific status.
.TP
-qq
Suppress all compiler non-diagnostic output.  Remarks, errors and warnings will still be generated.
.TP
--tool_versions
Print version numbers for each tool [Same as -version, -versions]
.TP
--verbose
Display progress information and toolset version when executing.
.TP
-version
Print version numbers for each tool [Same as -versions, --tool_versions]
.TP
-versions
Print version numbers for each tool [Same as -version, --tool_versions]
.SS Runtime Model Options:
.SS
.TP
-ab=#
The maximum number of jumps (branches) allowed to reach a branch label. Increasing the branch chain length causes slow down but may result in smaller code
.TP
--align_structs=bytecount
Force alignment of structures to <bytecount> bytes
.TP
--common=on,off
Emit uninitialized variables as common symbols, instead of allocating them to a section. Any variables that have no conflicting requirements, such as data section pragmas, will become common symbols. Unused common blocks may be omitted by the linker to save memory at runtime.
.TP
--disable_branch_chaining
Prevent generation of branch chains in Thumb mode
.TP
--embedded_constants=on,off
Control whether or not constants will be embedded in code sections. Normally it is advantageous to utilize embedded constants and this is the default behavior.  However, embedded constants can not be used if code sections are considered execute-only with no read access.  The use of embedded constants can only be turned off for Cortex-M devices. When not specified by the user, the compiler defaults to on
.TP
--enum_type=unpacked,packed,int
Designate the underlying type of an enumeration type

packed   - Enumeration types are ""packed"", that is the underlying type of an enumeration is chosen to be the smallest integer that will accommodate the enumeration constants.

int      - The underlying type is always int. An enumeration constant with value outside int range will generate an error.

unpacked - When neither of the above are specified, the underlying type is chosen based on the language standard and any other applicable language options. When not specified by the user, the compiler defaults to unpacked
.TP
--fp_reassoc=on,off
Set to on to allow reassociation of floating point arithmetic even in cases where the reassociation will result in a slightly different answer. When not specified by the user, the compiler defaults to off
.TP
-gpp
Enable power profiling support by inserting NOPs into the frame code.  These NOPs can then be instrumented by the power profiling tooling to track power usage of functions.  If the power profiling tool is not used, this option will increase the cycle count of each function because of the NOPs.  This switch also disables optimizations that cannot be handled by the power-profiler.
.TP
-mc
Chars signed by default
.TP
-md
No dual state support
.TP
-mo
Enable dynamic stack overflow checking
.TP
-ms[=on,off]
Place each function in a separate subsection The argument to the option is optional, and if not specified it will default to: on
.TP
-mt
Enable 16 bit code
.TP
--neon
Generates SIMD instructions targeting the Neon coprocessor
.TP
--plain_char=signed,unsigned
Specify how to treat plain chars (signed/unsigned) When not specified by the user, the compiler defaults to unsigned
.TP
--profile:breakpt
Disable optimizations that cannot be handled by a breakpoint-based profiler
.TP
-r=r5,r6,r9
Reserve the specified register 'rx' (r5, r6 or r9) as a global register for use by the user.  Disallow the use of that register by the compiler.
.TP
--sat_reassoc=on,off
Set to on to allow reassociation of saturating arithmetic even in cases where the reassociation will cause saturation to occur differently. When not specified by the user, the compiler defaults to off
.TP
--small-enum
Enums may be char/short, instead of int
.TP
--unaligned_access=on,off
Unaligned loads and stores will be generated when beneficial.  Runtime faults will result if this option is used and the target does not support unaligned memory accesses.  The default is on for all Cortex (v7) devices and off for all others. When not specified by the user, the compiler defaults to off
.TP
--use_dead_funcs_list[=fname]
The dead functions list contains list of routines that are never referenced. Placing them in a separate section can potentially reduce code size
.TP
--wchar_t=16,32
Designate the size of the C/C++ type wchar_t. In COFF ABI mode only 16-bit wchar_t is allowed. In EABI mode users can choose either 16-bit or 32-bit wchar_t type. Note that objects built with 16-bit wchar_t are not compatible with 32-bit wchar_t objects. The default is 16-bit wchar_t. When not specified by the user, the compiler defaults to 16
.SS Advanced Optimizations Options:
.SS
.TP
-ma
Assume called funcs create hidden aliases (rare)
.TP
-oi[=size]
Specify threshold for automatic inlining
.TP
-on=0-2
Set the optimizer information file level, or disable with 0. Level 1 includes basic information.  Level 2 includes detailed information.  The file will be created in the assembly directory if a custom asm directory is specified on the command line otherwise it will be created in the object file directory.
.TP
-op=0-3
Specify assumptions to make about function calls when optimizing.

Level 0 (-op0) indicates that the module has functions that are called from other modules.

Level 1 (-op1) indicates that the module does not have functions that are called by other modules but has global variables that are modified in other modules.

Level 2 (-op2) indicates that the module does not have functions that are called or globals that are modified by other modules.

Level 3 (-op3) indicates that the module has functions that are called by other modules but does not have globals that are modified by other modules.
.TP
--opt_for_cache
Optimize for instruction cache
.TP
-os
Generate optimized source interlisted assembly
.TP
--remove_hooks_when_inlining
Remove the entry and exit hooks from the bodies of inlined functions.
.TP
--single_inline
Inline function that are called only once.  Will inline these functions even if auto inlining has been turned off (-oi0)
.SS Entry/Exit Hook Options:
.SS
.TP
--entry_hook[=hook_function_name]
Insert this call at entry to each function The argument to the option is optional, and if not specified it will default to: __entry_hook
.TP
--entry_parm=name,address,none
Pass caller's name or address to entry hook
.TP
--exit_hook[=hook_function_name]
Insert this call at exit from each function The argument to the option is optional, and if not specified it will default to: __exit_hook
.TP
--exit_parm=name,address,none
Pass caller's name or address to exit hook
.SS Library Function Assumptions Options:
.SS
.TP
-ol0
File redefines an RTS library function.
.TP
-ol1
File contains an RTS library function.
.TP
-ol2
File does not define any RTS library func (def.)
.TP
--printf_support=nofloat,minimal,full
The printf and scanf families of functions are large because they provide complex formatting capabilities, which may not be required in typical embedded applications.  Use this option to reduce code size by eliminating features.  This option must be specified at link time.

Use '--printf_support=nofloat' to exclude support for printing and scanning floating values.  All format specifiers except %f, %F, %g, %G, %e, and %E are supported.

Use '--printf_support=minimal' to exclude support for width and precision flags and all format specifiers except %%, %d %o, %c, %s, and %x.
.SS Assembler Options:
.SS
.TP
-aa
Generate absolute listing file
.TP
-ac
Symbol names are not case-significant
.TP
-ad=NAME[=value]
Pre-define the assembly symbol NAME, optionally setting its contents to 'value'.
.TP
-ahc=filename
Simulate source '.copy filename'
.TP
-ahi=filename
Simulate source '.include filename'
.TP
-al
Generate listing file
.TP
-apd[=filename]
Generate assembly dependency information.  Optionally, name the assembly dependency file.
.TP
-api
Generate first-level assembly include file list
.TP
-as
Keep local symbols in output file
.TP
-au=NAME
Undefine assembly symbol NAME
.TP
-ax
Generate cross reference file
.TP
-k
Keep the generated assembly language (.asm) file
.TP
--no_const_clink
Do not generate .clink directives for const global arrays.  By default these arrays are placed in a .const subsection and conditionally linked.
.TP
-s
Generate interlisted assembly file
.TP
-ss
Generate C source interlisted assembly file
.TP
--ual
The ARM unified assembly language (UAL) is used for processing assembly files.  This is automatic for v7 targets and above.  This option allows the use of UAL for earlier architectures.
.SS File Type Specifier Options:
.SS
.TP
-fa=filename
File is an assembly file (default for .asm)
.TP
-fc=filename
File is a C file (default for .c/no ext)
.TP
-fo=filename
File is an object file (default for .obj)
.TP
-fp=filename
File is a C++ file (default for .C .cpp .cc)
.SS Directory Specifier Options:
.SS
.TP
-fb=dir
Absolute listing directory (default is .obj dir)
.TP
-fe=filename
Compilation output file name, can override --obj_directory
.TP
-ff=dir
Listing/xref file directory (default is .obj dir)
.TP
-fr=dir
Object file directory (default is .)
.TP
-fs=dir
Assembly file directory (default is .)
.TP
-ft=dir
Temporary file directory (default is .)
.TP
--pp_directory=dir
Place preprocessor output files in specified directory.  The directory must exist prior to compiler invocation.
.SS Default File Extensions Options:
.SS
.TP
-ea=.ext
Extension for assembly files (default is .asm)
.TP
-ec=.ext
Extension for C files (default is .c)
.TP
-eo=.ext
Extension for object files (default is .obj)
.TP
-ep=.ext
Extension for C++ files (default is .cpp)
.TP
-es=.ext
Extension for listing files (default is .lst)
.SS Command Files Options:
.SS
.TP
-@=filename
Read additional compile options the specified filename.
.SH EXIT STATUS
The following error values are returned:
.PD 0
.TP 10
.B 0
Successful completion.
.TP
.B >0
Unsuccessful completion; an error occured.
.PD
.SH COPYRIGHT
.TP
Copyright (c) 2013, Texas Instruments, Inc.
