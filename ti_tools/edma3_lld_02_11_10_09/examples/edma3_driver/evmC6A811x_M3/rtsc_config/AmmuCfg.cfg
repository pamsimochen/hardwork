/* 
 * Copyright (c) 2009, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== DucatiAmmu.cfg ========
 *
 *  An example configuration script used by both the server and client
 *  applications running on either Bios6 or Linux.
 */
function init()
{
 
var Program = xdc.useModule('xdc.cfg.Program');
{
  var AMMU = xdc.useModule('ti.sysbios.hal.ammu.AMMU');


  var Cache = xdc.useModule('ti.sysbios.hal.unicache.Cache');
  Cache.enableCache = true;
  

  /*********************** Small Pages *************************/
  /* smallPages[0] & smallPages[1] are auto-programmed by h/w */
  /* Overwrite smallPage[1] so that 16K is covered. H/w reset value configures
   * only 4K */
  AMMU.smallPages[0].pageEnabled = AMMU.Enable_YES;
  AMMU.smallPages[0].logicalAddress = 0x00000000;
  AMMU.smallPages[0].translatedAddress = 0x55020000;
  AMMU.smallPages[0].translationEnabled = AMMU.Enable_YES;
  AMMU.smallPages[0].size = AMMU.Small_16K;
  AMMU.smallPages[0].volatileQualifier = AMMU.Volatile_FOLLOW;  
  AMMU.smallPages[0].L1_cacheable = AMMU.CachePolicy_CACHEABLE;
  
  /* Overwrite smallPage[1] so that 16K is covered. H/w reset value configures
   * only 4K */
  AMMU.smallPages[1].pageEnabled = AMMU.Enable_YES;
  AMMU.smallPages[1].logicalAddress = 0x40000000;
  AMMU.smallPages[1].translatedAddress = 0x55080000;
  AMMU.smallPages[1].translationEnabled = AMMU.Enable_YES;
  AMMU.smallPages[1].size = AMMU.Small_16K;
  AMMU.smallPages[1].volatileQualifier = AMMU.Volatile_FOLLOW;  

/*
  AMMU.smallPages[2].pageEnabled = AMMU.Enable_YES;
  AMMU.smallPages[2].logicalAddress = 0x00004000;
  AMMU.smallPages[2].translatedAddress = 0x55024000;
  AMMU.smallPages[2].translationEnabled = AMMU.Enable_YES;
  AMMU.smallPages[2].size = AMMU.Small_16K;
  AMMU.smallPages[2].volatileQualifier = AMMU.Volatile_FOLLOW;  
  AMMU.smallPages[2].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
  AMMU.smallPages[2].L1_posted = AMMU.PostedPolicy_POSTED;
  
  AMMU.smallPages[3].pageEnabled = AMMU.Enable_YES;
  AMMU.smallPages[3].logicalAddress = 0x00008000;
  AMMU.smallPages[3].translatedAddress = 0x55028000;
  AMMU.smallPages[3].translationEnabled = AMMU.Enable_YES;
  AMMU.smallPages[3].size = AMMU.Small_16K;
  AMMU.smallPages[3].volatileQualifier = AMMU.Volatile_FOLLOW;  
  AMMU.smallPages[3].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
  AMMU.smallPages[3].L1_posted = AMMU.PostedPolicy_POSTED;
  
  AMMU.smallPages[4].pageEnabled = AMMU.Enable_YES;
  AMMU.smallPages[4].logicalAddress = 0x0000C000;
  AMMU.smallPages[4].translatedAddress = 0x5502C000;
  AMMU.smallPages[4].translationEnabled = AMMU.Enable_YES;
  AMMU.smallPages[4].size = AMMU.Small_16K;
  AMMU.smallPages[4].volatileQualifier = AMMU.Volatile_FOLLOW;  
  AMMU.smallPages[4].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
  AMMU.smallPages[4].L1_posted = AMMU.PostedPolicy_POSTED;

  AMMU.smallPages[5].pageEnabled = AMMU.Enable_YES;
  AMMU.smallPages[5].logicalAddress = 0x00010000;
  AMMU.smallPages[5].translatedAddress = 0x55030000;
  AMMU.smallPages[5].translationEnabled = AMMU.Enable_YES;
  AMMU.smallPages[5].size = AMMU.Small_16K;
  AMMU.smallPages[5].volatileQualifier = AMMU.Volatile_FOLLOW;  
  AMMU.smallPages[5].endianism = AMMU.Endianism_BIG;    
  AMMU.smallPages[5].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
  AMMU.smallPages[5].L1_posted = AMMU.PostedPolicy_POSTED;

  AMMU.smallPages[6].pageEnabled = AMMU.Enable_YES;
  AMMU.smallPages[6].logicalAddress = 0x00014000;
  AMMU.smallPages[6].translatedAddress = 0x55034000;
  AMMU.smallPages[6].translationEnabled = AMMU.Enable_YES;
  AMMU.smallPages[6].size = AMMU.Small_16K;
  AMMU.smallPages[6].volatileQualifier = AMMU.Volatile_FOLLOW;  
  AMMU.smallPages[6].endianism = AMMU.Endianism_BIG;    
  AMMU.smallPages[6].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
  AMMU.smallPages[6].L1_posted = AMMU.PostedPolicy_POSTED;

  AMMU.smallPages[7].pageEnabled = AMMU.Enable_YES;
  AMMU.smallPages[7].logicalAddress = 0x00018000;
  AMMU.smallPages[7].translatedAddress = 0x55038000;
  AMMU.smallPages[7].translationEnabled = AMMU.Enable_YES;
  AMMU.smallPages[7].size = AMMU.Small_16K;
  AMMU.smallPages[7].volatileQualifier = AMMU.Volatile_FOLLOW;  
  AMMU.smallPages[7].endianism = AMMU.Endianism_BIG;    
  AMMU.smallPages[7].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
  AMMU.smallPages[7].L1_posted = AMMU.PostedPolicy_POSTED;

  AMMU.smallPages[8].pageEnabled = AMMU.Enable_YES;
  AMMU.smallPages[8].logicalAddress = 0x0001C000;
  AMMU.smallPages[8].translatedAddress = 0x5503C000;
  AMMU.smallPages[8].translationEnabled = AMMU.Enable_YES;
  AMMU.smallPages[8].size = AMMU.Small_16K;
  AMMU.smallPages[8].volatileQualifier = AMMU.Volatile_FOLLOW;  
  AMMU.smallPages[8].endianism = AMMU.Endianism_BIG;    
  AMMU.smallPages[8].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
  AMMU.smallPages[8].L1_posted = AMMU.PostedPolicy_POSTED;
  
  AMMU.smallPages[9].pageEnabled = AMMU.Enable_YES;
  AMMU.smallPages[9].logicalAddress = 0x00020000;
  AMMU.smallPages[9].translatedAddress = 0x55040000;
  AMMU.smallPages[9].translationEnabled = AMMU.Enable_YES;
  AMMU.smallPages[9].size = AMMU.Small_16K;
  AMMU.smallPages[9].volatileQualifier = AMMU.Volatile_FOLLOW;  
  AMMU.smallPages[9].endianism = AMMU.Endianism_BIG;    
  AMMU.smallPages[9].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
  AMMU.smallPages[9].L1_posted = AMMU.PostedPolicy_POSTED;
*/
  
  /*********************** Medium Pages *************************/
  /* L2 space is mapped to virtual address 0 */
  /* config medium page[0] to map 256K VA 0x00000000 to PA 0x55020000 - L2 SRAM */
  /* Make it L1 cacheable */
  AMMU.mediumPages[0].pageEnabled = AMMU.Enable_YES;
  AMMU.mediumPages[0].logicalAddress = 0x00300000;
  AMMU.mediumPages[0].translatedAddress = 0x40300000;
  AMMU.mediumPages[0].translationEnabled = AMMU.Enable_YES;
  AMMU.mediumPages[0].size = AMMU.Medium_256K;
  AMMU.mediumPages[0].L1_cacheable = AMMU.CachePolicy_CACHEABLE;
  AMMU.mediumPages[0].L1_writePolicy = AMMU.WritePolicy_WRITE_BACK;
  AMMU.mediumPages[0].L1_allocate    = AMMU.AllocatePolicy_ALLOCATE;
  AMMU.mediumPages[0].L1_posted = AMMU.PostedPolicy_POSTED;

  
  AMMU.mediumPages[1].pageEnabled = AMMU.Enable_YES;
  AMMU.mediumPages[1].logicalAddress = 0x00400000;
  AMMU.mediumPages[1].translatedAddress = 0x40400000;
  AMMU.mediumPages[1].translationEnabled = AMMU.Enable_YES;
  AMMU.mediumPages[1].size = AMMU.Medium_256K;
  AMMU.mediumPages[1].L1_cacheable = AMMU.CachePolicy_CACHEABLE;
  AMMU.mediumPages[1].L1_writePolicy = AMMU.WritePolicy_WRITE_BACK;
  AMMU.mediumPages[1].L1_allocate    = AMMU.AllocatePolicy_ALLOCATE;
  AMMU.mediumPages[1].L1_posted = AMMU.PostedPolicy_POSTED;


  /*********************** Large Pages *************************/
  /* Instruction Code: Large page  (512M); cacheable */
  AMMU.largePages[0].pageEnabled = AMMU.Enable_YES;
  AMMU.largePages[0].logicalAddress = 0x60000000;
  AMMU.largePages[0].translationEnabled = AMMU.Enable_NO;
  AMMU.largePages[0].size = AMMU.Large_512M;
  AMMU.largePages[0].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
  AMMU.largePages[0].L1_posted = AMMU.PostedPolicy_NON_POSTED;
  AMMU.largePages[0].L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
  AMMU.largePages[0].L2_posted = AMMU.PostedPolicy_NON_POSTED;


  /* config large page[0] to map 512MB VA 0x40000000 to Config space */
  AMMU.largePages[1].pageEnabled = AMMU.Enable_YES;
  AMMU.largePages[1].logicalAddress = 0x40000000;
  AMMU.largePages[1].translationEnabled = AMMU.Enable_NO;
  AMMU.largePages[1].size = AMMU.Large_512M;
  AMMU.largePages[1].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
  AMMU.largePages[1].L1_posted = AMMU.PostedPolicy_NON_POSTED;
  AMMU.largePages[1].L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
  AMMU.largePages[1].L2_posted = AMMU.PostedPolicy_NON_POSTED;


  /* V_M3/D_M3 code and data regions */
  /* config large page[1] to map 512MB VA 0x80000000 to DDR 0x80000000  - Non cached */
  AMMU.largePages[2].pageEnabled = AMMU.Enable_YES;
  AMMU.largePages[2].logicalAddress = 0x80000000;
  AMMU.largePages[2].translationEnabled = AMMU.Enable_NO;
  AMMU.largePages[2].size = AMMU.Large_512M;
  AMMU.largePages[2].L1_cacheable = AMMU.CachePolicy_CACHEABLE;
  AMMU.largePages[2].L1_posted = AMMU.PostedPolicy_POSTED;
  AMMU.largePages[2].L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
  AMMU.largePages[2].L2_posted = AMMU.PostedPolicy_NON_POSTED;

  
  AMMU.largePages[3].pageEnabled = AMMU.Enable_YES;
  AMMU.largePages[3].logicalAddress = 0xA0000000;
  AMMU.largePages[3].translationEnabled = AMMU.Enable_NO;
  AMMU.largePages[3].size = AMMU.Large_512M;
  AMMU.largePages[3].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
  AMMU.largePages[3].L1_posted = AMMU.PostedPolicy_POSTED;
  AMMU.largePages[3].L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
  AMMU.largePages[3].L2_posted = AMMU.PostedPolicy_NON_POSTED;

   var GateDualCore = xdc.useModule ('ti.sysbios.family.arm.ducati.GateDualCore');
   GateDualCore.initGates = true;
}
}