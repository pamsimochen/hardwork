/*
 * Copyright (c) 2011-2013, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Generally there is no need to edit this file!
 *
 * This file controls which libraries are built, as well as compiler options
 * to use.
 *
 * The contents of this file usually don't change, but having it in your
 * ownership allows you to tweak your compiler options.  If you do change
 * this file, however, on the next upgrade of the product we recommend
 * that you take "fc.bld" file as supplied by the upgrade and then merge
 * your changes with it.
 */

/*
 *  ======== fc.bld ========
 *  This script is run prior to all build scripts. It sets host-system-
 *  independent values for targets and platforms, then it attempts to
 *  find the host-system-specific user.bld script that sets rootDirs.
 *
 *  These settings may be a function of the following global variables:
 *
 *      environment a hash table of environment strings
 *
 *      arguments   an array of string arguments to the script
 *                  initialized as follows:
 *                      arguments[0] - the file name of the script
 *                      arguments[1] - the first argument specified in XDCARGS
 *                          :
 *                      arguments[n] - the n'th argument in XDCARGS
 *
 *      Build       an alias for xdc.om.xdc.bld.BuildEnvironment
 */

var Build = xdc.useModule('xdc.bld.BuildEnvironment');
var Pkg = xdc.useModule('xdc.bld.PackageContents');

/* Common ccopts suffix used for all C6x targets */
var c6xOpts = " -mi10 -mo -pdr -pden -pds=238 -pds=880 -pds1110 -g ";

/*
 * -mi10 => maximum cycles that interrupts may be disabled is 10
 * -mo => place each function in subsection
 * -pdr => show remarks
 * -pden => show remark ids
 * -pds=238 => ignore "controlling expression is constant"
 * -pds=880 => ignore "unused parameter"
 */

var ccOpts = {
    "ti.targets.C64P"                 : c6xOpts,
    "ti.targets.C674"                 : c6xOpts,

    "ti.targets.elf.C64P"             : c6xOpts,
    "ti.targets.elf.C64T"             : c6xOpts,
    "ti.targets.elf.C66"              : c6xOpts,
    "ti.targets.elf.C66_big_endian"   : c6xOpts,

    "ti.targets.elf.C674"             : c6xOpts,
    "ti.targets.arm.elf.M3"           : " --embed_inline_assembly -ms -pds=71 --gcc -DPLATFORM_EVM_SI -DSYSLINK_BUILD_RTOS -DUSE_SYSLINK_NOTIFY=0 -DUTILS_ASSERT_ENABLE -I/Source/ipnc_rdk/ipnc_mcfw -I/Source/ti_tools/hdvpss_01_00_01_37/packages",
    "ti.targets.arm.elf.M4"           : " -ms -g --gcc -DPLATFORM_EVM_SI -DSYSLINK_BUILD_RTOS -DUSE_SYSLINK_NOTIFY=0 -DUTILS_ASSERT_ENABLE -I/Source/ipnc_rdk/ipnc_mcfw -I/Source/ti_tools/hdvpss_01_00_01_37/packages",

    "ti.targets.arp32.elf.ARP32"      : " -g ",
    "ti.targets.arp32.elf.ARP32_far"  : " -g ",
};

var lnkOpts = {
};

var platform = "";

/* initialize local vars with those set in xdcpaths.mak (via XDCARGS) */
for (arg = 0; arg < arguments.length; arg++) {
    /* split each arg into its '+' separated parts */
    var configParts = arguments[arg].split(";");
    // print("arg " + arg + " has " + configParts.length + " parts");

    /* if "known args come in, filter them... else they're targets */
    if (configParts[0].split("=")[0] == "PLATFORM") {
        // print("FOUND PLATFORM ARG - " + configParts[0]);
        platform = configParts[0].split("=")[1];
        continue;
    }

    /*
     * Get the compiler's installation directory.
     * For "ti.targets.elf.C674=/vendors/c6x/7.2.0", we get "/vendors/c6x/7.2.0"
     */
    var targetName = configParts[0].split("=")[0];
    var rootDir = configParts[0].split("=")[1];

    /* only build for the specified compilers */
    if (rootDir == "" || rootDir == undefined) {
        continue;
    }

//    print("Building '" + targetName + "' using '" + rootDir + "' ...");

    var target = xdc.useModule(targetName);
    target.rootDir = rootDir;

    if (ccOpts[targetName] != undefined) {
        target.ccOpts.suffix += ccOpts[targetName];
    }
    if (lnkOpts[targetName] != undefined) {
        target.lnkOpts.suffix += lnkOpts[targetName];
    }

    /* for all the other parts, assign target.<left> = <right> */
    for (var i = 1; i < configParts.length; i++) {
        var modCfgParam = configParts[i].split("=")[0];
        var modCfgValue = configParts[i].substring(configParts[i].indexOf("=") + 1);
        var modCfgIndex = modCfgParam.split(".");
        var element = target;

//        print("Configuring target." + modCfgParam + " = " + modCfgValue);

        for (j = 0; j < (modCfgIndex.length -1); j++) {
                element = element[modCfgIndex[j]];
        }
        element[modCfgIndex[j]] = modCfgValue;
    }

    /* and finally add this target to the Build.targets array */
    Build.targets.$add(target);
}

/* lib/ is a generated directory that 'xdc clean' should remove */
Pkg.generatedFiles.$add("lib/");

/*
 * Some packages build for 'all profiles' - but that's too much to ship.
 * Loop over all profiles in all Build.targets and remove everything
 * except 'release' and 'debug'.
 */
for (var t = 0; t < Build.targets.length; t++) {
    for (prof in Build.targets[t].profiles) {
       if ((prof != 'release') && (prof != 'debug') && (prof != 'smp')) {
            delete Build.targets[t].profiles[prof];
        }
    }
}


/* add notrace profile to all targets */
var notrace_defs = " -Dxdc_runtime_Log_DISABLE_ALL " +
        "-Dxdc_runtime_Assert_DISABLE_ALL ";

/* All libraries add a new notrace profile */
for (var t = 0; t < Build.targets.length; t++) {
    var targ = Build.targets[t];
    if (Pkg.name.match(/ecpy|acpy3/)) {
        /* High performance libraries disable trace in their release profile */
        var defs = targ.profiles["release"].compileOpts.defs;
        targ.profiles["release"].compileOpts.defs =
            (defs == undefined ? notrace_defs : defs + notrace_defs);
    }
    else {
        targ.profiles["notrace"] = targ.profiles["release"].$copy();
        var defs = targ.profiles["notrace"].compileOpts.defs;
        targ.profiles["notrace"].compileOpts.defs =
            (defs == undefined ? notrace_defs : defs + notrace_defs);
    }
}


/* -----------------------------------------------------------------------*/
/* make release files '.tar.gz' files (.tar is default) */
Pkg.attrs.compress = true;
