<?xml version="1.0" standalone="no"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
    "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<refentry id="glib-constants">
  <refnamediv>
    <refname>glib Constants</refname>
    <refpurpose>the built-in constants of the glib module</refpurpose>
  </refnamediv>

  <refsect1>
    <title>Synopsis</title>

    <programlisting>
<xref linkend="glib-io-condition-constants" endterm="glib-io-condition-constants-title"></xref>
<xref linkend="glib-priority-constants" endterm="glib-priority-constants-title"></xref>
<xref linkend="glib-spawn-flag-constants" endterm="glib-spawn-flag-constants-title"></xref>
<xref linkend="glib-user-directory-constants" endterm="glib-user-directory-constants-title"></xref>
<xref linkend="glib-version-constants" endterm="glib-version-constants-title"></xref>
</programlisting>

  </refsect1>

  <refsect1 id="glib-constants-description">
    <title>Description</title>

    <refsect2 id="glib-io-condition-constants">
      <title id="glib-io-condition-constants-title">Glib IO Condition Constants</title>

      <para>The IO Condition constants are a set of bit-flags that specify a
condition to watch for on an event source.</para>

      <variablelist>
	<varlistentry>
	  <term><literal>glib.IO_IN</literal></term>
	  <listitem>
	    <simpara>There is data to read</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>glib.IO_OUT</literal></term>
	  <listitem>
	    <simpara>Data can be written (without blocking).</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>glib.IO_PRI</literal></term>
	  <listitem>
	    <simpara>There is urgent data to read.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>glib.IO_ERR</literal></term>
	  <listitem>
	    <simpara>Error condition.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>glib.IO_HUP</literal></term>
	  <listitem>
	    <simpara>Hung up (the connection has been broken, usually for
	    pipes and sockets).</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>glib.IO_NVAL</literal></term>
	  <listitem>
	    <simpara>Invalid request. The file descriptor is not
	    open.</simpara>
	  </listitem>
	</varlistentry>
      </variablelist>

    </refsect2>

    <refsect2 id="glib-priority-constants">
      <title id="glib-priority-constants-title">Glib Priority Constants</title>

      <para>The Priority constants specify </para>

      <variablelist>
	<varlistentry>
	  <term><literal>glib.PRIORITY_HIGH</literal></term>
	  <listitem>
	    <simpara>Use this for high priority event sources.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>glib.PRIORITY_DEFAULT</literal></term>
	  <listitem>
	    <simpara>Use this for default priority event sources.  This
	    priority is used when adding timeout functions with the <link
	    linkend="function-glib--timeout-add"><function>glib.timeout_add</function>()</link>
	    function. This priority is also used for events from the X
	    server.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>glib.PRIORITY_HIGH_IDLE</literal></term>
	  <listitem>
	    <simpara>Use this for high priority idle functions. For example,
	    glib.PRIORITY_HIGH_IDLE + 10 is used for resizing operations;
	    and, glib.PRIORITY_HIGH_IDLE + 20, for redrawing
	    operations. (This is done to ensure that any pending resizes are
	    processed before any pending redraws, so that widgets are not
	    redrawn twice unnecessarily.)</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>glib.PRIORITY_DEFAULT_IDLE</literal></term>
	  <listitem>
	    <simpara>Use this for default priority idle functions. This
	    priority is used when adding idle functions with the <link
	    linkend="function-glib--idle-add"><function>glib.idle_add</function>()</link>
	    function.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>glib.PRIORITY_LOW</literal></term>
	  <listitem>
	    <simpara>Use this for very low priority background
	    tasks.</simpara>
	  </listitem>
	</varlistentry>
      </variablelist>

    </refsect2>

    <refsect2 id="glib-spawn-flag-constants">
      <title id="glib-spawn-flag-constants-title">Glib Spawn Flag Constants</title>

      <para>The Spawn Flag constants are a set of bit-flags that can be
passed to the <link
linkend="function-glib--spawn-async"><function>glib.spawn_async</function>()</link>
function.</para>

      <variablelist>
	<varlistentry>
	  <term><literal>glib.SPAWN_LEAVE_DESCRIPTORS_OPEN</literal></term>
	  <listitem>
	    <simpara>the parent's open file descriptors will be inherited by
the child; otherwise all descriptors except stdin/stdout/stderr will be
closed before calling <function>exec</function>() in the child.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>glib.SPAWN_DO_NOT_REAP_CHILD</literal></term>
	  <listitem>
	    <simpara>the child will not be automatically reaped; you must
call <function>waitpid</function>() or handle <literal>SIGCHLD</literal>
yourself, or the child will become a zombie.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>glib.SPAWN_SEARCH_PATH</literal></term>
	  <listitem>
	    <simpara><parameter>argv</parameter>[0] need not be an absolute
path, it will be looked for in the user's <envar>PATH</envar>.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>glib.SPAWN_STDOUT_TO_DEV_NULL</literal></term>
	  <listitem>
	    <simpara>the child's standard output will be discarded, instead
of going to the same location as the parent's standard output.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>glib.SPAWN_STDERR_TO_DEV_NULL</literal></term>
	  <listitem>
	    <simpara>the child's standard error will be discarded.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>glib.SPAWN_CHILD_INHERITS_STDIN</literal></term>
	  <listitem>
	    <simpara>the child will inherit the parent's standard input (by
default, the child's standard input is attached to /dev/null).</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>glib.SPAWN_FILE_AND_ARGV_ZERO</literal></term>
	  <listitem>
	    <simpara>the first element of <parameter>argv</parameter> is the
file to execute, while the remaining elements are the actual argument vector
to pass to the file. Normally <link
linkend="function-glib--spawn-async"><function>glib.spawn_async</function>()</link>
uses <parameter>argv</parameter>[0] as the file to execute, and passes all
of <parameter>argv</parameter> to the child.</simpara>
	  </listitem>
	</varlistentry>
      </variablelist>

    </refsect2>

    <refsect2 id="glib-user-directory-constants">
      <title id="glib-user-directory-constants-title">Glib User Directory Constants</title>

      <para>The User Directory constants are integer values that are currently used only as arguments to
        <link linkend="function-glib--get-user-special-dir"><function>glib.get_user_special_dir</function>()</link>
        function.  See function documentation for details.</para>

      <variablelist>
	<varlistentry>
	  <term><literal>glib.USER_DIRECTORY_DESKTOP</literal></term>
	  <listitem>
	    <simpara>the user's Desktop directory</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>glib.USER_DIRECTORY_DOCUMENTS</literal></term>
	  <listitem>
	    <simpara>the user's Documents directory</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>glib.USER_DIRECTORY_DOWNLOAD</literal></term>
	  <listitem>
	    <simpara>the user's Downloads directory</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>glib.USER_DIRECTORY_MUSIC</literal></term>
	  <listitem>
	    <simpara>the user's Music directory</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>glib.USER_DIRECTORY_PICTURES</literal></term>
	  <listitem>
	    <simpara>the user's Pictures directory</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>glib.USER_DIRECTORY_PUBLIC_SHARE</literal></term>
	  <listitem>
	    <simpara>the user's shared directory</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>glib.USER_DIRECTORY_TEMPLATES</literal></term>
	  <listitem>
	    <simpara>the user's Templates directory</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>glib.USER_DIRECTORY_VIDEOS</literal></term>
	  <listitem>
	    <simpara>the user's Movies directory</simpara>
	  </listitem>
	</varlistentry>
      </variablelist>
    </refsect2>

    <refsect2 id="glib-version-constants">
      <title id="glib-version-constants-title">Glib Version Constants</title>
      <para>The Version constants specify the version of
<literal>Glib</literal> used by PyGObject as a 3-tuple containing the major,
minor and patch release numbers.</para>

      <variablelist>
	<varlistentry>
	  <term><literal>glib.glib_version</literal></term>
	  <listitem>
	    <simpara>A 3-tuple containing (major, minor, patch) release
	    numbers of glib.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>glib.pyglib_version</literal></term>
	  <listitem>
	    <simpara>A 3-tuple containing (major, minor, patch) release
	    numbers of the python bindings.</simpara>
	  </listitem>
	</varlistentry>
      </variablelist>

    </refsect2>

  </refsect1>

</refentry>
